[
    {
        "body": "### What problem does this feature solve?\r\nSimilar to devtools, `Vue.config.devtools` is enabled by default for development and disabled by default for production.  However, the developer can choose to override that behavior (for example, for debugging) by manually setting `Vue.config.devtools = true`.  However, this same lenience is not afforded to `Vue.config.performance`.  Even if explicitly enabling it, the developer's setting will be overridden by Vue in production.\r\n\r\n### What does the proposed API look like?\r\nThis proposed solution brings `Vue.config.performance` in line with `Vue.config.devtools`, by disabling it by default in production, but gives the developer the ability to explicitly \u0017\u0017enable it; for example, for debugging performance issues.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Enable performance measuring in production, at the user's request",
        "labels": "feature request",
        "id": 123113
    },
    {
        "body": "### Version\r\n2.6.12\r\n\r\n### Steps to reproduce\r\n```html\r\n<div></div>\r\n<script>\r\nnew Vue({\r\n  el: 'main',\r\n  template: '<MyDatetime :value=\"datetime\" />',\r\n  data: {\r\n    datetime: Date.now(),\r\n  },\r\n  components: {\r\n    MyDatetime: {\r\n      template: `\r\n        <div>\r\n          expect undefined: {{ toString + \"\" }}<br />\r\n          expect default: {{ toLocalString + \"\" }}<br />\r\n        </div>`,\r\n      props: {\r\n        value: {\r\n          type: Number,\r\n        },\r\n        toString: {\r\n          validator: mode => [ 'date-time', 'date', 'time' ].includes(mode),\r\n        },\r\n        toLocalString: {\r\n          validator: mode => [ 'date-time', 'date', 'time', 'default' ].includes(mode),\r\n          default: 'default',\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n</script>\r\n```\r\n\r\n### What is expected?\r\n\r\nThey are all keys match the uni simple rule: not start with `_` or `$`\r\n\r\n### What is actually happening?\r\n\r\nIf parent component doesn't pass the prop, then the component will get neither `undefined` nor `default`, but the value in `Object.prototype`.\r\n\r\n---\r\n\r\n1. `{}` in these two lines need to be replaced to `Object.create(null)`, the first line is required for two cases, and the second line is required for `default` case,\r\n\r\nhttps://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/src/core/vdom/helpers/extract-props.js#L24\r\n\r\nhttps://github.com/vuejs/vue/blob/33e669b22f69a1f9c9147528360fe0bba85534f0/src/core/instance/state.js#L66\r\n\r\n2. there still leave `constructor` which can't be used, it need `delete Vue.prototype.constructor`, and give an alternative way to do what `vm.constructor` (`Sub.prototype.constructor = Sub`) do in current source code.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "when use key in Object.prototype carelessly as prop, it will work wrong way",
        "labels": "feature request",
        "id": 123114
    },
    {
        "body": "### What problem does this feature solve?\r\ngithub missing repository vuejs/vue-ssr-webpack-plugin, i update webpack to version 5 and have error\r\n[vue-server-renderer-webpack-plugin] webpack config `output.libraryTarget` should be \"commonjs2\".\r\n\r\n\r\n### What does the proposed API look like?\r\nin my output.libraryTarget is libraryTarget: 'commonjs2'\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vuejs/vue-ssr-webpack-plugin and webpack 5",
        "labels": "feature request",
        "id": 123115
    },
    {
        "body": "### What problem does this feature solve?\r\nSometimes when moving the code around, the `this.` can end up traveling with it. Or the finger memory will just type in the `this.` where none is required.\r\n\r\nDue to a side-effect, the `this` context is indeed present, but it breaks when it's used deeper in templates (haven't looked exactly, but i think it breaks in v-if's or somewhere around there.\r\n\r\nTo avoid inadvertent breakages, it would be nice if vue could warn about it.\r\n\r\n\r\n### What does the proposed API look like?\r\na `this.` spotted in javascript bits of template would show a warning in the javascript console\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn about `this.` used in templates",
        "labels": "feature request",
        "id": 123116
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently all warnings are suppressed when Vue is built with `process.env.NODE_ENV === production`. However,  many warnings are more severe than a warning - they break functionality. Duplicate keys are a good example. These are hard to filter out in a development environment because the production data could be different. \r\n\r\nI'm currently working on a project where parts of the API and corresponding data are over 15 years old.\r\n\r\nThis means that when a user triggers an error, we're flying blind. No errors are reported. We recently implemented Sentry (which we already ran for Laravel) but again, no errorHandler or warningHandler is triggered.\r\n\r\nWhat I would have liked was a way for us to see the error in production, but not show it to the user in their console. The error and warning handlers are perfect for this purpose, but lack this feature.\r\n\r\nAfter extensively digging through the code and making alterations I've been able to create a production build that outputs warnings and errors. Without activating development features (like devtools, perf traces etc.) - just the warnings. No loss in performance. But it took tweaking both the Vue core files and the `component-compiler-utils`.\r\n\r\nStill, it's possible, and for us, running Vue at scale, with many unknown variables - it's a must have. With these Sentries (or whatever bug tracker someone would choose) it's easy to quickly zero in on production bugs. So I'd love to improve on our solution, push it to the main repo and give back to your awesome framework :-)\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nMy proposal is to add a new `process.env` variable called `DEBUG_LEVEL`, `WARN_LEVEL` or something along those lines. Maybe a config setting. Something simple. With it you can pick your desired verbosity. When set to FULL, it's identical to the development build. When set to HANDLER it will only trigger custom handlers (which would then be where you'd call the Sentry / error tracker). This allows for more granular control over what is triggered, and how it's shown. And then the final setting would be NONE. Which would be identical to the current production build.\r\n\r\nCurrently the `process.env.NODE_ENV` controls both the warnings _and_ the debug tools. My proposal is to separate the two. \r\n\r\nI've already done most of the leg-work. With your thumbs-up I will clean things up, write tests and push it to the dev branch.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add feature to catch errors in a production build for compatibility with external error tracking",
        "labels": "feature request",
        "id": 123117
    },
    {
        "body": "### What problem does this feature solve?\r\nConsider the following component\r\n```vue\r\n<template>\r\n <div>\r\n  {{title}}\r\n </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'awesomeTitle',\r\n  props: {\r\n    title: String\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nWhen using this component it now becomes impossible to set the title html attribute on the div\r\n\r\n```html\r\n<awesomeTitle title=\"Hello world\" title.native=\"Oopsy\"/>\r\n```\r\n\r\nThis would just output\r\n```html\r\n<div title.native=\"Oopsy\">Hello world</div>\r\n```\r\nInstead of \r\n```html\r\n<div title=\"Oopsy\">Hello world</div>\r\n```\r\n\r\nAdding the native modifier for props would permit to avoid collision between html attributes and vue props.\r\nIt already exists for event listeners so it would also be more coherent.\r\n\r\nSometime libraries will forget that html attributes inheritance is a thing and adding some html attributes becomes impossible in those components, it will also make the component more future proof in case new html attributes are added in the spec as you don't have to worry about future collisions anymore\r\n\r\n### What does the proposed API look like?\r\n\r\n```html\r\n<awesomeTitle title=\"Hello world\" title.native=\"Oopsy\"/>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Native modifier for props",
        "labels": "feature request",
        "id": 123118
    },
    {
        "body": "### What problem does this feature solve?\r\nIt allows for proper encapsulation of components. Currently the `class` and `style` props cannot be intercepted or prevented from being injected into the root element of a component. This prevents the ability to refactor components without requiring the calling code to be changed.\r\n\r\nFor example, assume a `Logo` component which is used with a `class` attribute:\r\n\r\n```\r\n<my-logo class=\"app-logo\" />\r\n``` \r\n\r\nWith the template:\r\n\r\n```\r\n<template>\r\n   <img src=\"my-logo.png\" />\r\n</template>\r\n```\r\n\r\nDue to the merging of the `class` attribute the rendered tag will be:\r\n\r\n```\r\n   <img class=\"app-logo\" src=\"my-logo.png\" />\r\n```\r\n\r\nNow, let's assume we want to refactor this component so it lazily loads the image. Our new template is:\r\n\r\n\r\n```\r\n<template>\r\n   <div>\r\n      <my-loader v-if=\"loading\" />\r\n      <img v-else src=\"my-logo.png\" />\r\n   </div>\r\n</template>\r\n```\r\n\r\nNow the `class` attribute is put on the `div`, which may not be appropriate. With good encapsulation, there would be a way to define `class` as a prop to intercept the value being passed in and render it on a different element than the root element, such as:\r\n\r\n```\r\n<template>\r\n   <div> a\r\n      <my-loader v-if=\"loading\" />\r\n      <img v-else :class=\"class\" src=\"my-logo.png\" />\r\n   </div>\r\n</template>\r\n```\r\n\r\nCurrently, attempting to define `class` as a prop displays this warning on the console:\r\n\r\n```\r\n[Vue warn]: \"class\" is a reserved attribute and cannot be used as component prop.\r\n```\r\n\r\nWhile `inheritAttrs` can be set to `false` to disable most props from being passed through to the root element, it does not apply to `class` or `style`. \r\n\r\n### What does the proposed API look like?\r\nIdeally simply allow `class` and `style` as valid Vue props that can be used to intercept the values passed in (that is, they don't pass through to the root element when these are defined as props).\r\n\r\nIf that is not possible for backward-compatibility reasons, add a flag similar to `inheritAttrs` that enables this functionality (e.g. `enableClassAndStyleProps`).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow `class` as valid component prop",
        "labels": "feature request",
        "id": 123119
    },
    {
        "body": "### What problem does this feature solve?\r\nIt would allow us to use numbers which is larger than MAX_SAFE_INTEGER. \r\n\r\n### What does the proposed API look like?\r\nIn HTML, `{{BigInt(\"100\")}}`, `{{100n}}`, `{{2n * 50n}}` or `{{50n + 50n}}` should show \"100\" (it can be just simply string by using .toString()) at frontend.\r\nAt the moment using BigInt in \"Mustache\" syntax just throw error.\r\nSure, backup solution would be using external functions or converted into string and save it to variable. But using BigInt directly in HTML would be nice to have.\r\nMore Information about BigInt -> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow BigInt usage in templates",
        "labels": "feature request",
        "id": 123120
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, if a watch path does not address an existing property, its handler would just silently never execute.\r\nThis may cause bugs due to a typo or refactoring that involves restructuring the app model. Especially if we want to watch something like `'$store.state.user.user.subscriptions'`.\r\n\r\nHere's a JSFiddle to play with: https://jsfiddle.net/WofWca/50feyxn7\r\n\r\n### What does the proposed API look like?\r\nJust throw an error (or warn?) in such case. Like it would happen if we used `this.$watch(() => this.$store.state.user.user.subscriptions, () => { .... });`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Throw error/warn if watch path doesn't resolve to an existing property",
        "labels": "feature request",
        "id": 123121
    },
    {
        "body": "### Version\r\n15.8.3\r\n\r\n### Reproduction link\r\n\r\nhttps://template-explorer.vuejs.org/#%3Cdiv%20id%3D%22app%22%20v-if%3D%22obj%3F.a%22%3E%7B%7B%20msg%20%7D%7D%3C%2Fdiv%3E\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse a v-if that uses optional chaining w/ `@vue/cli version 4.2.0`:\r\n\r\n`v-if=\"test?.length > 0\"`\r\n\r\n### What is expected?\r\nno error is thrown\r\n\r\n### What is actually happening?\r\nfollowing error is thrown:\r\n```\r\n  Errors compiling template:\r\n\r\n  invalid expression: Unexpected token '.' in\r\n\r\n    test?.length > 0\r\n\r\n  Raw expression: v-if=\"test?.length > 0\"\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Optional chaining in templates does not seem to work",
        "labels": "feature request",
        "id": 123122
    },
    {
        "body": "### What problem does this feature solve?\r\n`fill` and `copyWithIn` methods are also mutating methods and has Standard status currently [ECMAScript 2015 Language Specification \u2013 ECMA-262 6th Edition - copywithin](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.copywithin) , but they aren't being intercepted in https://github.com/vuejs/vue/blob/237294d88f65d65dcb790246394f1d37d64856a0/src/core/observer/array.js#L11-L19. Should they join now ? \r\n\r\n### What does the proposed API look like?\r\nnull\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Should `fill` and `copyWithIn` methods be intercepted (observed) now ?",
        "labels": "feature request",
        "id": 123123
    },
    {
        "body": "### What problem does this feature solve?\r\nVue currently does not directly support reverse loops. Generally, it can be solved by using calculated attributes, but if you want to iterate over the objects in slotProps, the calculated attributes are not available (it is also possible that my usage is wrong). I hope there is a way that The method of traversing the array, so that you no longer need to create calculated properties for the array\r\n\r\n### What does the proposed API look like?\r\nConsider adding a property to v: for to specify the traversal direction\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow defining order in v-for",
        "labels": "feature request",
        "id": 123124
    },
    {
        "body": "### What problem does this feature solve?\r\nAn event modifier to support `passive` events was added in #5132.\r\n\r\nIn the last couple of years, browsers have adopted the `passive` behavior by default for `touchstart` and `touchmove` events ([reference](https://www.fxsitecompat.dev/en-CA/docs/2018/touch-event-listeners-are-now-passive-by-default-making-scrolling-faster-on-mobile/)). Thus, to be able to cancel one of these events by calling `e.preventDefault()`, you need to explicitly pass `{ passive: false }` when adding the event listener.\r\n\r\nWith the current API this is impossible to achieve in a Vue template (as far as I can tell). You must manually add and remove the event listener in a component hook like so:\r\n\r\n```js\r\nthis.$refs.someElement.addEventListener('touchstart', this.start, { passive: false });\r\nthis.$refs.someElement.addEventListener('touchmove', this.move, { passive: false });\r\n\r\n// later\r\nthis.$refs.someElement.removeEventListener('touchstart', this.start);\r\nthis.$refs.someElement.removeEventListener('touchmove', this.move);\r\n```\r\n\r\n### What does the proposed API look like?\r\nAn event modifier that does the opposite of the `passive` event modifier, specifying the option as `false` instead of `true`.\r\n\r\nUnsure of the naming - perhaps `nonPassive`, `active`, `assertive`, `intentional`.\r\n\r\n```html\r\n<div\r\n  @touchstart.active=\"start\"\r\n  @touchmove.active=\"move\"\r\n></div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add non-passive event modifier",
        "labels": "feature request",
        "id": 123125
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/dansebcar/b75n0uw6/16/](https://jsfiddle.net/dansebcar/b75n0uw6/16/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Press update to change each item's name to \"b\"\r\n\r\n### What is expected?\r\nThe list re-renders with the new name\r\n\r\n### What is actually happening?\r\nThe list does not change\r\n\r\n---\r\nIf we instead define \"symbol\" as any non-empty string, the expected re-render is observed, so I think the cause is just the parent list (items) is accessed through a symbol.\r\n\r\nNesting the symbol property an additional level (IE in config, rather than directly on data) is necessary to render the list at all; I guess symbols from data aren't directly transferred?\r\n\r\nI noticed in the devtools when I pressed \"refresh\" after mutating the items that I could see the new name, so I assumed something about the way I was setting the property didn't trigger the update, but even Vue.set did not help.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Symbol-keyed properties non-reactive",
        "labels": "feature request",
        "id": 123126
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/vue-template-lcrsy](https://codesandbox.io/s/vue-template-lcrsy)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick \"Move\" button.\r\n\r\n### What is expected?\r\nBoth two lists move with animation.\r\n\r\n### What is actually happening?\r\nOnly second list which is applied duration with css has animation.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "transition-group with duration property doesn't work",
        "labels": "feature request",
        "id": 123127
    },
    {
        "body": "### What problem does this feature solve?\r\nIn an event handler, one can easily mix property modifications and method calls (which is great), as in:\r\n\r\n    <span @click=\" accumulator += fetchNextItem() \">do it</span>\r\n\r\nHowever, if the called method is async, one need to actually wrap this code in an additional method like:\r\n\r\n    <span @click=\" fetchAndAccumulateNextItem() \">do it </span>\r\n    ....\r\n    methods: {\r\n        async fetchAndAccumulateNextItem() {\r\n            this.accumulator += await this.fetchNextItem()\r\n        },\r\n        async fetchNextItem() { .... } /* unmodified */\r\n    }\r\n\r\nThis can be slightly inconvenient if there are many asynchronous methods of which we use the return value.\r\nI think this might become more and more common as people start understanding and using async/await more and more.\r\n\r\nInitial context: I have a very specific use case of a vuejs<->python bridge that makes (among other things) all the python-written method callable from vuejs, but as the call goes through websockets, all methods end up async. https://github.com/twitwi/vuejs-python\r\n\r\n\r\n### What does the proposed API look like?\r\nI'd suggest a \".async\" modifier that would allow for \"await\" in the event handler snippet.\r\nFor the example above, it would be written as:\r\n\r\n    <span @click.async=\" accumulator += await fetchNextItem() \">do it</span>\r\n\r\n(this is probably useful for all types of events, not only click)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Create an \".async\" modifier for event handlers ",
        "labels": "feature request",
        "id": 123128
    },
    {
        "body": "### What problem does this feature solve?\r\nI just spent way too long debugging something really weird until I realized I accidentally wrote `:v-if` instead of `v-if`. \r\n\r\nA warning when wrongly using shorthands like `:` on \"native\" vue attributes could prevent this bad experience easily. \r\n\r\n### What does the proposed API look like?\r\n`:v-if=\"foo\"`\r\n\r\n--> console.warn(\"You specified v-bind:/ v-on: or a corresponding shorthand on a Vue attribute like v-if or similar. Usually this does not make sense.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn if colon shorthand is used on v-if/v-html/etc.",
        "labels": "feature request",
        "id": 123129
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/lee88688/pen/jjPpBm?editors=1010](https://codepen.io/lee88688/pen/jjPpBm?editors=1010)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nas seen in codepen,  \"hello\" component have only one slot. but rendered 2 div tag at last. I have a look at Vue's code [renderSlot ](https://github.com/vuejs/vue/blob/530ca1b2db315fbd0e360807b2031d26665c5d3d/src/core/instance/render-helpers/render-slot.js#L8) which seems renderSlot function would treat the normal slot as scoped slot. why it would be like this?\r\n\r\nthe following code is render function of hello component which is compiled by Vue.compile. _t is renderSlot function. when normal slot and scoped slot in same component the problem above will be present.\r\n```javascript\r\n(function anonymous() {\r\n    with (this) {\r\n        return _c('div', [_t(\"default\"), _v(\" \"), _t(\"default\", null, {\r\n            \"x\": x\r\n        })], 2)\r\n    }\r\n}\r\n)\r\n```\r\n\r\n### What is expected?\r\nrender just one slot.\r\n\r\n### What is actually happening?\r\nrender one slot twice.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Regular slot and scoped slot with same name shouldn't be allowed",
        "labels": "feature request",
        "id": 123130
    },
    {
        "body": "### What problem does this feature solve?\r\nhttps://vuejs.org/v2/guide/components-dynamic-async.html#Handling-Loading-State\r\n\r\n```\r\nconst component = new Promise(function (resolve, reject) {\r\n       reject('error detail');\r\n});\r\n```\r\n\r\n```\r\nconst AsyncComponent = () => ({\r\n  // The component to load (should be a Promise)\r\n  component: component,\r\n  // A component to use while the async component is loading\r\n  loading: LoadingComponent,\r\n  // A component to use if the load fails\r\n  error: ErrorComponent,\r\n  // Delay before showing the loading component. Default: 200ms.\r\n  delay: 200,\r\n  // The error component will be displayed if a timeout is\r\n  // provided and exceeded. Default: Infinity.\r\n  timeout: 3000\r\n})\r\n```\r\n\r\n\r\ni want get error detail in  `AsyncComponent.error` component,  make page friendly\r\n\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nmaybe inject error as props to  `AsyncComponent.error`  ?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "get error detail when use async component factory ",
        "labels": "feature request",
        "id": 123131
    },
    {
        "body": "### What problem does this feature solve?\r\nIn some CSS libraries, i.e. Bootstrap, many components have opacity set to `0` by default, and only have opacity set to `1` when a class is applied.  i.e. Bootstrap's `fade + show` classes:\r\n\r\n```css\r\n.fade:not(.show) { opacity: 0; }\r\n```\r\n\r\nThe current `<transition>` behaviour does not support retaining the `enter-to-class` (as it is immediately removed once the transition completes).\r\n\r\nCurrently one has to use javascript hooks and VM data to add/remove the `show` class, which makes it impossible to make re-usable transition components, as simply adding a class via javascript to the `el` reference (via `el.classList.add/remove('show')`) doesn't guarantee persistence if the content in the default slot manipulates it's own classes, meaning the transition component _must_ be integrated into the custom component, not as a re-usable utility wrapper component).\r\n\r\n### What does the proposed API look like?\r\nIt would be nice to either be able to retain the `enter-to-class` class after the transition completes, or create a new prop that provides this behaviour for a particular class name i.e. `enter-to-retain-class`. The class would be removed on leave.\r\n\r\nThe other option would be to create a new prop `active-class=\"classname\"` which is added one frame after insertion, and removed when the leave transition is to start (basically rolling the `enter-to-class` and `leave-class` into one prop, but retain the class until leave is initiated)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "ability to keep `enter-to` class after show transition completes",
        "labels": "feature request",
        "id": 123132
    },
    {
        "body": "### What problem does this feature solve?\r\nOther frontend frameworks, notably React, make it quick and easy to create many small components in a single file. This pattern promotes code reuse, component composition, and DRYness.\r\n\r\nWhile Vue has this ability, it [feels hacky](https://codewithhugo.com/writing-multiple-vue-components-in-a-single-file/) and sacrifices much of the clarity and usability that .vue files provide.\r\n\r\nThis aim of this proposal is to define a clear and intuitive API for defining multiple components in a single .vue file.\r\n\r\n### What does the proposed API look like?\r\n#### `<component>`\r\nThe `<component>` element is the building block of multi-component .vue files. Used as a top-level tag in .vue files, it's effectively a self-contained \"single-file component\", and it can contain anything that is valid in single-file components as they're currently defined. A .vue file can contain any number of `<component>` elements. They are evaluated from top to bottom\u2014no hoisting. The element accepts two properties that control its availability to other parts of the code:\r\n\r\n- `name` (string, no default)\r\n\r\n  The name of the variable that the component is assigned to. Components defined lower in the file can reference this component by its name. Additionally, if the component is exported (see below), this is the name under which it will be exported.\r\n\r\n- `export` (boolean, default `false`)\r\n\r\n  Whether or not the component is exported. If a component is exported, but doesn't have a `name`, it will be the default export. More than one exported component without a name would create multiple default exports, and is therefore an error. All components must have either `name` or `export` or both.\r\n\r\nBy using the `<component>` element, individual .vue files gain a great deal more flexibility and power. They can compose a single exported component from many small child components, they can export many small components used throughout an application, they can export a main default component and less frequently used named components, and so on.\r\n\r\n#### Examples\r\n\r\n##### An isolated component (`Foo`) only used by another component in the same file:\r\n```vue\r\n<component name=\"Foo\">...</component>\r\n<component export>\r\n    <script>export default { components: { Foo } };</script>\r\n    <template><foo /></template>\r\n</component>\r\n```\r\n\r\n##### Named and default exports:\r\n```vue\r\n<component export name=\"Foo\">...</component>\r\n<component export name=\"Bar\">...</component>\r\n<component export>...</component>\r\n```\r\n\r\nThese would be imported in another file with `import Baz, { Foo, Bar } from './Baz.vue';`\r\n\r\n##### An illegal file due to multiple default exports\r\n```vue\r\n<component export>...</component>\r\n<component export>...</component>\r\n```\r\n\r\n##### An illegal file, because it combines the multi-component format and the single-component format\r\n```vue\r\n<component name=\"Foo\">...</component>\r\n<script>export default { components: { Foo } };</script>\r\n<template><foo /></template>\r\n```\r\n\r\n### Backwards compatibility\r\n\r\nThe addition of the `<component>` element would not be a breaking change\u2014single-file components with no top-level `<component>` tags would continue to function exactly as they do today. As mentioned in the example above, combining the single-component format with the multi-component format is an error.\r\n\r\nA potential point of conflict is the existing `<component>` tag than can be used in templates. I don't foresee this being a problem, since the usage of `<component>` as a top-level tag in .vue files is well defined, but I can't say for sure.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Proposal: Multiple components in .vue files",
        "labels": "feature request",
        "id": 123133
    },
    {
        "body": "### What problem does this feature solve?\r\nIn oder to make https://github.com/maoberlehner/vue-lazy-hydration more useful it would be great if we could prevent the template renderer from automatically injecting async scripts. The way vue-lazy-hydration works is, that it behaves differently on the server than it does on the client. On the server the script (of an async component) is loaded immediately so the template renderer correctly detects that it is used. But on the client the script might not be needed at all but because the template renderer has already injected it it is immediately loaded on page load.\r\n\r\nThere is currently kind of a backlash against loading huge amounts of JavaScript. vue-lazy-hydration can help with removing a lot of unnecessary JavaScript on server side rendered, mostly static sites like blogs and documentation. But currently it can't completely prevent loading all of the unnecessary JavaScript because of the way how template renderer works.\r\n\r\nHere is the relevant line in the code: https://github.com/vuejs/vue/blob/dev/src/server/template-renderer/index.js#L226\r\n\r\n### What does the proposed API look like?\r\nI propose to make this configurable:\r\n\r\n```js\r\nconst renderer = createBundleRenderer(serverBundle, {\r\n  template,\r\n  renderUsedAsyncScripts: false,\r\n});\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[template-renderer] Make it possible to not automatically render used async scripts",
        "labels": "feature request",
        "id": 123134
    },
    {
        "body": "### What problem does this feature solve?\r\nImagine a wrapper component where you need to pass events to a child component. This is possible for non native events using `this.$listeners`, but it strips out native events. It would be good if we had something like `this.$nativeListeners` so that we can pass native events down to child components as well.\r\n\r\n In the meantime, Is there a workaround to pass events to child components?\r\n\r\n### What does the proposed API look like?\r\n`this.$nativeListeners` \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Equivalent for this.$listeners for native events?",
        "labels": "feature request",
        "id": 123135
    },
    {
        "body": "### What problem does this feature solve?\r\nwhen i use vue-template-compiler parseComponent a vue file, and use  @babel/parser @babel/traverse @babel/generator modify some code at vueTemplateComplier AST.script content \r\nBut can not find a api to auto generate file from  vueTemplateComplier AST it to origin file.\r\n\r\n\r\n### What does the proposed API look like?\r\nconst fileContent = compiler.generateComponent(<vueTemplateComplier AST>, {\r\n        pad: 'space'\r\n});\r\n// fileContent is same as *.vue file content\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-template-compiler lacks a stringify API",
        "labels": "feature request",
        "id": 123136
    },
    {
        "body": "### What problem does this feature solve?\r\nTwo components with scoped slots that provide events to a child component. If they are used together some listeners may be overwritten if not normalised first. \r\n\r\n```html\r\n<v-menu>\r\n  <template #activator=\"{ on: menu }\">\r\n    <v-tooltip bottom>\r\n      <template #activator=\"{ on: tooltip }\">\r\n        <v-btn v-on=\"{ ...tooltip, ...menu }\"> <!-- If both have a click event, only the menu will work -->\r\n          Dropdown w/ Tooltip\r\n        </v-btn>\r\n      </template>\r\n      <span>Im A ToolTip</span>\r\n    </v-tooltip>\r\n  </template>\r\n  <v-list>[...]</v-list>\r\n</v-menu>\r\n```\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<component v-on=\"[{ click: foo }, { click: bar }]\">\r\n```\r\nEquivalent to:\r\n```html\r\n<component v-on=\"{ click: [foo, bar] }\">\r\n```\r\n\r\nIn the first example:\r\n```html\r\n<v-menu>\r\n  <template #activator=\"{ on: menu }\">\r\n    <v-tooltip bottom>\r\n      <template #activator=\"{ on: tooltip }\">\r\n        <v-btn v-on=\"[tooltip, menu]\">\r\n          Dropdown w/ Tooltip\r\n        </v-btn>\r\n      </template>\r\n      <span>Im A ToolTip</span>\r\n    </v-tooltip>\r\n  </template>\r\n  <v-list>[...]</v-list>\r\n</v-menu>\r\n```\r\n\r\nCurrently this throws `[Vue warn]: v-on without argument expects an Object value`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-on listeners array",
        "labels": "feature request",
        "id": 123137
    },
    {
        "body": "### What problem does this feature solve?\r\nAllow the usage of arrow functions  in copmuted setters\r\nFrom #7688 \r\n\r\n```js\r\ncomputed: {\r\n  value: {\r\n    get: vm => vm.someValue,\r\n    set: (val, vm) => vm.someValue = val\r\n  }\r\n}\r\n```\r\n\r\n### What does the proposed API look like?\r\n```js\r\ncomputed: {\r\n  value: {\r\n    get: vm => vm.someValue,\r\n    set (val, vm) {\r\n      this === vm // true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Pass component instance as second argument in computed setters",
        "labels": "feature request",
        "id": 123138
    },
    {
        "body": "### What problem does this feature solve?\r\nThis would allow one to have state as an array of values without a need for intermediary wrapper plain objects.\r\n\r\nSee example: https://jsfiddle.net/9L5ymbv7/\r\n\r\n### What does the proposed API look like?\r\nNo changes to the API, just support that `Vue.observable` would work on an array.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Make Vue.observable work directly on arrays",
        "labels": "feature request",
        "id": 123139
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, if a custom validator fails, we get a console error log saying `Invalid prop: custom validator check failed for prop 'email'` which is not helpful if you're using a third-party component. The only way to find out what failed is to jump into the source code of the component and try to understand what does this custom validator do. If the custom validator can provide a custom message that immensely changes developer experience e.g. Instead of `Invalid prop: custom validator check failed for prop 'email'`, it can say, `Invalid prop: the prop 'email' should be a valid GMail address.`\r\n\r\n### What does the proposed API look like?\r\nNo change in API signature only behavior of `validator` function. If a validator function throws an error, use it as a custom message for prop validation. Also, allow `{{name}}` interpolation in error message. So the `email` can be defined as:\r\n\r\n``` js\r\n...\r\n  props: {\r\n    email: {\r\n      validator(value) {\r\n        if (!value.endsWith('@gmail.com')) throw new Error('the prop '{{name}}' should be a valid GMail address.')\r\n        return true\r\n     }\r\n   }\r\n...\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Custom error message from prop validator",
        "labels": "feature request",
        "id": 123140
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nThis issue is related to: https://github.com/vuejs/vue-router/issues/2606\r\nProviding a way to destroy the app or mark the SSR request as complete (maybe on `$ssrContext`) is a potential fix to this problem, though maybe not the best one.\r\n\r\nTo recap:\r\nA memory leak happens when the `router-view` is programmed to appear conditionally, and the component matching the view has a `beforeRouteEnter` guard and a callback is passed to it's `next(...)` method (e.g. `next(vm => {})`).\r\n\r\nThis will cause `vue-router` to poll every 16ms until the `router-view` materializes.\r\n\r\nIn a typical SSR application an instance of the app is created per request, which means the `router-view` will never appear, causing infinitely recursing poll methods.\r\n\r\n### What does the proposed API look like?\r\nA potential fix to this would be to detect when the app is destroyed in `vue-router`'s `poll` method, and allow the user to destroy the app that they created in `entry-server.js`.\r\n\r\nA simplified example:\r\n```javascript\r\nexport default context => {\r\n  return new Promise((resolve, reject) => {\r\n    const { app, router } = createApp(context)\r\n\r\n    const { url } = context\r\n\r\n    router.push(url)\r\n\r\n    router.onReady(() => {\r\n      resolve(app)\r\n    }, reject)\r\n  }).then(destroyApp)\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide way to destroy app in SSR",
        "labels": "feature request",
        "id": 123141
    },
    {
        "body": "### What problem does this feature solve?\r\nI use :key and keep-alive tag to display chats. And in order to maintain the position of the scroll when switching between chat rooms, I need to save the scrollTop when the hook is deactivated and put it on the element when the hook is activated. But the deactivated hook is already called when the element has been removed from the DOM, so I needed a new hook - beforeDeactivated.\r\n\r\nSeriously, this hook is needed just like the others before* hooks.\r\n\r\n### What does the proposed API look like?\r\nHere, I think, everything is clear. Simple hook.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add beforeDeactivated hook",
        "labels": "feature request",
        "id": 123142
    },
    {
        "body": "### What problem does this feature solve?\r\nAfter vue 2.6 was released and serverPrefetch hook was introduces I lost a possibility to update `httpCode` during SSR if there was a data fetching failure.\r\n\r\n### What does the proposed API look like?\r\nProvide access to `context` from the `serverPrefetch` hook.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Ability to access context from serverPrefetch",
        "labels": "feature request",
        "id": 123143
    },
    {
        "body": "### What problem does this feature solve?\r\nUnder high-load, some pages are rendered to slow. The connection is aborted by the remote side. It would be nice to be able to cancel pages rendering in this case.\r\n\r\n### What does the proposed API look like?\r\nconst rendererId = renderer.renderToString(...);\r\n\r\nrendererId.cancel();\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Ability to cancel rendering",
        "labels": "feature request",
        "id": 123144
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/r71q8py7mp](https://codesandbox.io/s/r71q8py7mp)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen https://codesandbox.io/s/r71q8py7mp and read console log\r\n\r\n### What is expected?\r\nDon't execute following code from `genInlineTemplate` when `el.children.length !== 1 || ast.type !== 1` is true because `ast` is undefined.\r\n\r\n```\r\nfunction genInlineTemplate (el, state) {\r\n    var ast = el.children[0];\r\n    if (el.children.length !== 1 || ast.type !== 1) {\r\n      state.warn(\r\n        'Inline-template components must have exactly one child element.',\r\n        { start: el.start }\r\n      );\r\n    }\r\n    if (ast.type === 1) {\r\n      var inlineRenderFns = generate(ast, state.options);\r\n      return (\"inlineTemplate:{render:function(){\"   (inlineRenderFns.render)   \"},staticRenderFns:[\"   (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\"   code   \"}\"); }).join(','))   \"]}\")\r\n    }\r\n  }\r\n```\r\n\r\n### What is actually happening?\r\nExecuting\r\n\r\n```\r\n var inlineRenderFns = generate(ast, state.options);\r\n      return (\"inlineTemplate:{render:function(){\"   (inlineRenderFns.render)   \"},staticRenderFns:[\"   (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\"   code   \"}\"); }).join(','))   \"]}\")\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn when using inline-template attribute but no children",
        "labels": "feature request",
        "id": 123145
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/wx91uLft/](https://jsfiddle.net/wx91uLft/)\r\nother: https://jsfiddle.net/ae82rfnv/\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Show/hide elements with the  \"Toggle\" button.\r\n- Show/hide elements with the  \"Toggle Ticked\" button. Shows a workaround.\r\n\r\n### What is expected?\r\nAll transitions should be triggered on leave, even for nested child elements.\r\n\r\n### What is actually happening?\r\nTransition classes don't get applied to nested child elements, when conditions for leaving transitions occur on the same tick.\r\n\r\nWorkaround: Delaying the parent transitions by one tick fixes the problem.\r\n\r\n---\r\nThis has been reported, but got closed due to the sample code did not use `appear` on the `<transition>` elements. (See issues [#7643](https://github.com/vuejs/vue/issues/7643) and [#9243](https://github.com/vuejs/vue/issues/9243))\r\n\r\nMy example is more detailed and also provides a workaround.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow nested transition to trigger upon removal",
        "labels": "feature request",
        "id": 123146
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, and as far as I know, if we want to propagate an event fired by a child component to the parent (the child's grandparent) we need to $emit the event again, and we need to pass all the arguments one more time. This can become a problem, for example, if the event has a variable number of arguments because we need to specify them manually or pass the whole array as a new argument.\r\n\r\nThe current way would be something like\r\n```\r\n@blur=\"$emit('blur')\"\r\n@create=\"$emit('create', arguments[0])\"\r\n@input=\"$emit('input', arguments[0], arguments[1])\"\r\n```\r\n\r\n### What does the proposed API look like?\r\n```\r\n@blur.propagate\r\n@create.propagate\r\n@input.propagate\r\n```\r\nAnd if we want to both handle the event and propagate it to the parent, we would use\r\n```\r\n@input.propagate=\"someFunction\"\r\n```\r\n----\r\nEDIT: Maybe since .propagate may be confused with the function .stopPropagation(), a better term could be simply .emit\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Modifier to propagate/forward events to parent",
        "labels": "feature request",
        "id": 123147
    },
    {
        "body": "### What problem does this feature solve?\r\nThe guide for Server-Side rendering creates 2 webpack builds, one for the client and one for the server. Then you create a file that imports the outputs from those 2 builds and returns the responses to whatever framework you use (e.g. express). Let's call this file the server handler.\r\nThe issue with this approach is that you would need a third webpack build to process the server handler through webpack as well. You might want to do that for a few different reasons:\r\n 1. To have the same flow for all your files\r\n 2. Because you use typescript/babel/minification or other transformations\r\n 3. To use the same style of imports (i.e. ES modules)\r\n\r\n### What does the proposed API look like?\r\nI can think of a few possible solutions:\r\n\r\n#### 1. Define the name of the server handler to emit\r\n\r\nThere could be a configuration option for `VueSSRServerPlugin` that defines one additional entry to emit in the Webpack configuration. This would mean that there could be at most 2 entries, one is used for creating the JSON bundle, the other one to emit the server handler\r\n\r\n```javascript\r\n// webpack.config.js\r\nconst VueSSRServerPlugin = require('vue-server-renderer/server-plugin')\r\n\r\nmodule.exports = {\r\n  // Point entry to your app's server entry file\r\n  entry: {\r\n     main: '/path/to/server-entry.js',\r\n     handler: '/path/to/server-handler.js'\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'client-manifest': '/path/to/dist/client/vue-ssr-client-manifest.json'\r\n    }\r\n  },\r\n  plugins: [\r\n    new VueSSRServerPlugin({ serverHandler: 'handler' })\r\n  ]\r\n}\r\n```\r\n\r\nThe handler would look something like this:\r\n```javascript\r\n// server-handler.js\r\nimport clientManifest from 'client-manifest';\r\n// This alias could be created by the VueSSRServerPlugin itself\r\nimport serverBundle from 'server-bundle';\r\nimport { createBundleRenderer } from 'vue-server-renderer';\r\n\r\nconst template = `[...]`;\r\n\r\nconst renderer = createBundleRenderer(serverBundle, {\r\n  template,\r\n  clientManifest,\r\n  runInNewContext: false\r\n});\r\n\r\nexport function handler(event, context) {\r\n  // use the renderer in here\r\n}\r\n```\r\n\r\nThe upside of this approach is that it should be relatively easy to accomplish this.\r\nAnother upside is that this would be backwards compatible.\r\nThe downside is that there would be quite a bit of configuration necessary to make it look nice \u2014 to avoid importing build outputs directly in code, which would add a dependency on our webpack configuration in the code.\r\n\r\n#### 2. Provide an alias that resolves to the renderer instead of emitting a JSON bundle\r\n\r\nAnother possible approach would be to change completely the way the VueSSRServerPlugin works to reduce the additional webpack configuration necessary. Here's how the webpack configuration would look like:\r\n\r\n```javascript\r\n// webpack.config.js\r\nconst VueSSRServerPlugin = require('vue-server-renderer/server-plugin')\r\n\r\nmodule.exports = {\r\n  // Point entry to your app's server entry file\r\n  entry: '/path/to/server-handler.js',\r\n  plugins: [\r\n    new VueSSRServerPlugin({\r\n      clientManifest: '/path/to/dist/client/vue-ssr-client-manifest.json',\r\n      serverEntry: '/path/to/server-entry.js',\r\n      template: '/path/to/template.html'\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\nAnd here is how the server handler would look like:\r\n\r\n```javascript\r\n// alias defined by the plugin, returns the renderer\r\nimport renderer from 'vue-ssr-server-renderer'\r\n\r\nexport function handler(event, context) {\r\n  // use renderer here\r\n}\r\n```\r\n\r\nThe clear upside is the reduction of the boilerplate.\r\nThe first big downside is that this would not be backwards compatible. It could be implemented as a new, different plugin.\r\nThe second downside is that there might be other use cases I haven't considered. `createBundleRenderer` takes other arguments as well, and you might not want to instantiate it at the top level.\r\nA smaller downside is that some pieces are connected in webpack rather than in the code, making it unclear where the template is referenced from.\r\n\r\n#### 3. Use a loader to transform the server entry\r\n\r\nThis would be similar to the first proposal, but it would change the way `createBundleRenderer` works.\r\n\r\nStarting from the server handler this time, here is how the usage would look like:\r\n\r\n```javascript\r\nimport App from '/path/to/server-entry.js'\r\nimport clientManifest from 'client-manifest';\r\n// This function has the client manifest already pulled in by the plugin\r\nimport { createAppRenderer } from 'vue-server-renderer';\r\n\r\nconst template = `[...]`;\r\n\r\nconst renderer = createAppRenderer(app, {\r\n  clientManifest,\r\n  template,\r\n  runInNewContext: false\r\n});\r\n\r\nexport function handler(event, context) {\r\n  // use renderer here\r\n}\r\n```\r\n\r\nAnd the webpack configuration would be something like this:\r\n\r\n```javascript\r\n// webpack.config.js\r\n\r\nmodule.exports = {\r\n  // Point entry to your app's server entry file\r\n  entry: '/path/to/server-handler.js',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /entry-server\\.js$/,\r\n        loader: 'vue-ssr-loader'\r\n      }\r\n    ]\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'client-manifest': '/path/to/dist/client/vue-ssr-client-manifest.json'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis approach would have the upside of not requiring magic to happen on the webpack entries, making it possible to have multiple entrypoints.\r\nThe second upside would be to just configure a loader where appropriate, instead of adding a plugin.\r\nThe first downside is that we still have to include the client manifest from the build.\r\nThe second downside is that is could not be feasible with a webpack loader.\r\n\r\n#### So which one?\r\nI believe this problem needs a deeper reflection on the implications for all possible use cases, so someone with a better understanding of the usages of this plugin should trace the path to follow. Other ideas could be possible that would in the future also lead to simpler usages that hide the complexity from the users.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[SSR] Add option to output the server entry through webpack",
        "labels": "feature request",
        "id": 123148
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codepen.io/AmrIKhudair/pen/NevxML](https://codepen.io/AmrIKhudair/pen/NevxML)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1- create a class extending Array and add a custom method\r\n2- instantiate a new instance of the class and add it to data\r\n3- try to call the method on the instance in the template\r\n\r\n### What is expected?\r\nThe method is successfully executed\r\n\r\n### What is actually happening?\r\nError not a function\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support Array subclassing",
        "labels": "feature request",
        "id": 123149
    },
    {
        "body": "### What problem does this feature solve?\r\nIt suppose better error handling for prop types errors.\r\nSteps to reproduce error:\r\n1. Set prop type equals to string ('String', not String):\r\n```javascript\r\nexampleProp: {\r\n  type: 'String',\r\n}\r\n```\r\n\r\n2. Run project and get an error:\r\n```javascript\r\n[Vue warn]: Error in nextTick: \"TypeError: Right-hand side of 'instanceof' is not an object\"\r\nTypeError: Right-hand side of 'instanceof' is not an object\r\n    at assertType (vue.esm.js:1668)\r\n    at assertProp (vue.esm.js:1626)\r\n    at validateProp (vue.esm.js:1560)\r\n    at loop (vue.esm.js:3334)\r\n    at initProps (vue.esm.js:3367)\r\n    at initState (vue.esm.js:3308)\r\n    at VueComponent.Vue._init (vue.esm.js:4628)\r\n    at new VueComponent (vue.esm.js:4798)\r\n    at createComponentInstanceForVnode (vue.esm.js:4310)\r\n    at init (vue.esm.js:4131)\r\n```\r\n\r\nError log is not evident and it is difficult to understand the source of problem (first time with this error anyway).\r\n\r\n### What does the proposed API look like?\r\nError message in this case may look like:\r\n```javascript\r\n\"Incorrect prop type 'exampleProp' at:123 (where 123 is example string position in the code)\"\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn when the type of a prop isn't a constructor ",
        "labels": "feature request",
        "id": 123150
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, the [globalHandleError](https://github.com/nialna/vue/blob/dev/src/core/util/error.js#L27) function will intercept all errors thrown in components and log them. It can also pass them to an external error handler, but that external error handler won't be able to throw it because the call to `config.errorHandler` is wrapped in a try catch.\r\n\r\nIn vanilla JS, when an unhandled error happens in your code, the debugger can break immediately, giving you access to the stack and context. When using VueJS, we have no way of doing this because the errors are always handled by Vue.\r\n\r\n### What does the proposed API look like?\r\nThe simplest way I can think of is to add a new `config` option, for example:\r\n\r\n```js\r\nVue.config.throwUnhandledErrors = true;\r\n```\r\n\r\nThen in `globalHandleError`, we could check for that flag and throw errors:\r\n\r\n```js\r\nfunction globalHandleError (err, vm, info) {\r\n  if (config.throwUnhandledErrors) {\r\n    throw(err);\r\n  } else if (config.errorHandler) {\r\n    try {\r\n      return config.errorHandler.call(null, err, vm, info)\r\n    } catch (e) {\r\n      logError(e, null, 'config.errorHandler')\r\n    }\r\n  }\r\n  logError(err, vm, info)\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add an option to throw global errors, making it possible for debuggers to automatically break on error.",
        "labels": "feature request",
        "id": 123151
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently we have an boolean option for `vue-template-compiler`: `preserveWhitespace`. It either removes all whitespace-only text nodes, or leave them untouched. There were already earlier questions about either behavior: #6200, #7701, #9021, #9127. I think the current behavior is kind of oversimplified to cover actual usage.\r\n\r\nWhen we write a template we tend to leverage line breaks and indents to make it more readable, like:\r\n\r\n```html\r\n<div class=\"item\">\r\n  <div class=\"aside\">Aside</div>\r\n  <div class=\"main\">Main</div>\r\n</div>\r\n```\r\n\r\nAnd if we choose to layout this component with inline formatting context, sometimes we may not want to precisely control the margin between the inner parts with CSS, instead of using the size of a whitespace (which is related to those `font-*` styles). For similar cases we don't want these whitespace-only text nodes. This leads to `preserveWhitespace: false` (and it even became the default behavior for Vue CLI 3: https://github.com/vuejs/vue-cli/commit/1864cef09e186cdf094fca876f8638a8ba1b4adb).\r\n\r\nBut when we craft some document/article-like content, this behavior becomes annoying. With `preserveWhitespace: false`, the following template:\r\n\r\n```html\r\n<p>\r\n  Welcome to <b>Vue.js</b> <i>world</i>.\r\n  Have fun!\r\n</p>\r\n```\r\n\r\nWill generate:\r\n\r\n```html\r\n<p>\r\n  Welcome to <b>Vue.js</b><i>world</i>.\r\n  Have fun!\r\n</p>\r\n```\r\n\r\nWhich looks like:\r\n\r\n> Welcome to <b>Vue.js</b><i>world</i>. Have fun!\r\n\r\nAnd this is clearly not desired.\r\n\r\n### What does the proposed API look like?\r\nIn short, I suggest we offer a new compiler option, to apply the strategy React uses to handles whitespaces for JSX ([source](https://reactjs.org/docs/jsx-in-depth.html#string-literals-1)):\r\n\r\n> JSX removes whitespace at the beginning and ending of a line. It also removes blank lines. New lines adjacent to tags are removed; new lines that occur in the middle of string literals are condensed into a single space.\r\n\r\nFor examples:\r\n\r\n```html\r\n<p>\r\n  Welcome to <b>Vue.js</b> <i>world</i>.\r\n  Have fun!\r\n</p>\r\n```\r\n\r\nThe whitespaces between `<p>` and `Welcome` are removed but the one between `</b>` and `<i>` and the one between `.` and `Have` are preserved thus giving us:\r\n\r\n```html\r\n<p>Welcome to <b>Vue.js</b> <i>world</i>. Have fun!</p>\r\n```\r\n\r\nThis seem to be much more reasonable IMO. And in this mode users will have more flexibility to better serve their different purposes.\r\n\r\nIn general, the proposal is:\r\n\r\n1. Keep `preserveWhitespace` but mark it as deprecated.\r\n2. Offer a new option to specify whether/how to remove whitespaces: `removeWhitespace: 'with-line-break' | 'any' | 'none'`.\r\n3. Ignore `preserveWhitespace` if `removeWhitespace` is specified.\r\n\r\n(Still need more suggestions on specific API.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Handle whitespaces in templates more wisely",
        "labels": "feature request",
        "id": 123152
    },
    {
        "body": "### What problem does this feature solve?\r\n**Use case:**\r\n\r\nI'm developing a Server-Side Renderer for Vue (which works with Express, Koa & etc. Will increase migration to Vue). For the SSR's head management to work, it needs a stable API to render `VNode`s to text.\r\n\r\n**The way my Vue SSR package will function:**\r\n`master.vue`\r\n```html\r\n<template>\r\n    <div id=\"app\">\r\n        <slot name=\"content\"></slot>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    created: function(){\r\n        if(this.$isServer){\r\n            this.$ssrContext.head = \"HEAD HERE\" // Something needed like:  renderVNodesToString(this.$slots.head)\r\n        }\r\n    },\r\n}\r\n</script>\r\n```\r\n\r\n`home.vue`\r\n```html\r\n<template>\r\n    <master>\r\n        <template slot=\"content\">\r\n            Hello World\r\n        </template>\r\n        <template slot=\"head\">\r\n            <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\r\n            <title>Hello</title>\r\n        </template>\r\n    </master>\r\n</template>\r\n<script>\r\nimport master from \"layouts/master.vue\"\r\n\r\nexport default {\r\n    components: {\r\n        master\r\n    }\r\n}\r\n</script>\r\n```\r\n\r\nMy goal is getting `home.vue`'s `head` slot rendered into a string and injecting it into the `this.$ssrContext` so it can be read and injected on the server-side\r\n\r\nin `master.vue`, I can access `this.$slots.head` with no issue, and it contains the correct `VNode`s\r\n\r\nmy question is, how can I render them into a string? a way to basically do:\r\n```js\r\nthis.$ssrContext.head = renderVNodesToString(this.$slots.head)\r\n```\r\n\r\nFrom my research, I have been unable to find an easy way to do this.\r\n\r\n---- \r\n\r\n**To understand how the renderer works**\r\n```js\r\nconst renderer = createBundleRenderer(bundle.server, {\r\n    runInNewContext: false,\r\n    inject: false,\r\n    template: `<!DOCTYPE html>\r\n        <html>\r\n            <head>\r\n                {{{ head }}}\r\n                {{{ renderResourceHints() }}}\r\n                {{{ renderStyles() }}}\r\n            </head>\r\n            <body>\r\n                <!--vue-ssr-outlet-->\r\n                <script>${ bundle.client }</script>\r\n            </body>\r\n       </html>`\r\n})\r\n```\r\nThis is the code for the serverbundlerenderer\r\n\r\n### What does the proposed API look like?\r\n```js\r\n/**\r\n* @param {VNode}\r\n* \r\n* @returns {string} - VNode rendered to a html string\r\n*/\r\nVue.renderVNode = function(VNode){\r\n    //...\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[ssr] Add Vue function to render VNode to html string",
        "labels": "feature request",
        "id": 123153
    },
    {
        "body": "### What problem does this feature solve?\r\nIf you've decided to go with `v-bind` and `v-on` shorthands then `v-on=\"$listeners\"` looks out of place and creates a mixture of syntax. Shorthands for `v-on` and `v-bind` would solve that issue.\r\n\r\n### What does the proposed API look like?\r\n`v-on=\"$listeners\"` should be aliased like this: `@=\"$listeners\"`\r\n\r\n`v-bind=\"$attrs\"` should be aliased like this: `:=\"$attrs\"`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Alias for v-on and v-bind",
        "labels": "feature request",
        "id": 123154
    },
    {
        "body": "### What problem does this feature solve?\r\nIf one wants to define custom event handlers (like one on `document`) which interact with Vue instances or Vue reactive state, one should wrap it with `withMacroTask` to assure that any changes to the reactive state and flushing of the queue happens in the macro task and not micro task. Otherwise it can be possible that Vue starts changing DOM as a consequence of the reactive change even before the event propagates along original DOM tree.\r\n\r\nThe problem is that `withMacroTask` cannot be accessed currently.\r\n\r\n### What does the proposed API look like?\r\n`withMacroTask` could simply be exposed in a way that it can be imported. Or maybe made available at `Vue.withMacroTask`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Expose withMacroTask",
        "labels": "feature request",
        "id": 123155
    },
    {
        "body": "### What problem does this feature solve?\r\nFor this demo:\r\n\r\n[https://jsfiddle.net/2os9jken/](https://jsfiddle.net/2os9jken/)\r\n\r\nopening the console and running it throws the `Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead.` error for the `span`, but it should also throw it for the `slot`, as it has the exact same issue for its `name` attribute.\r\n\r\n### What does the proposed API look like?\r\nN/A\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Throw error when using interpolation instead of JS expression for slot names",
        "labels": "feature request",
        "id": 123156
    },
    {
        "body": "### What problem does this feature solve?\r\nBecause we have to have lots of ads on our site we cannot hydrate our SSR'd page with VUE completely as the ads would break VUE. Also most of our site ist static and it would be stupid to ship our entire app for only some parts of our page being interactive.\r\n\r\nInstead we **partially hydrate** the page (with our own plugin https://github.com/spring-media/vue-plugin-moisturizer). For this we need to map SSR'd HTML to the corresponding VUE components, so we need to put some `data-attribute` in the HTML match them. \r\n\r\nWe use the `name` setting of a component for this,  so if I have component like this:\r\n\r\n```js\r\n{\r\n  name: 'my-component'\r\n}\r\n```\r\n\r\nthe html would read\r\n\r\n```html\r\n<div data-hydration-name=\"my-component\">...</div>\r\n```\r\n\r\n\r\nbut this does not work for 3rd party components. Anything we get without that ID we cannot hydrate. It would be great if we could find the component from a component's instance / vnode.\r\n\r\nThere is a `cid` property, but this is not the same on the server and on the client,  because we have a different number and oder of components on the client and server so we cannot use this.\r\n\r\nThere is a similiar issue for this here: https://github.com/vuejs/vue/issues/7213 but one of your members suggested to create a new issue because the old one would just not show up under your pile of issues.\r\n\r\n### What does the proposed API look like?\r\n```js\r\nthis.$vnode.cuuid // hash based on the filename and path\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vnode reference to original component (reopened)",
        "labels": "feature request",
        "id": 123157
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen Vue is mounting, the function `isUnknownElement` is called and checks, among others, whether the element tag is in the list of `ignoredElements`. In the context of an app that uses multiple web components, we don't want to manually add every new component's tag to the `ignoredElements` list. Maintaining that list could quickly become a headache. If the  `isUnknownElement` also checks the custom elements registry, it could figure out that the element in question is not necessarily unknown.\r\n\r\n### What does the proposed API look like?\r\nThe API would stay the same, but on top of checking for `config.ignoredElements` in the function `isUnknownElement`, we would also check if `window.customElements.get(vnode.tag)` is defined or not. If it is defined, then we return false.\r\n\r\nI am happy to submit a pull request, I just wanted to discuss this first to make sure there aren't design constraints to adding something like this.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Check if tag is already in the window.customElements registry on top of checking config ignoredElements",
        "labels": "feature request",
        "id": 123158
    },
    {
        "body": "### What problem does this feature solve?\r\nBeing able to decide at runtime if a component should be cached on the server.\r\n\r\nFor example, if I have a re-usable ImageViewer component that I only want cached in certain use cases.\r\n\r\n```javascript\r\nimport { get } from 'lodash-es';\r\nexport default {\r\n    name: 'ImageViewer',\r\n    serverCacheKey: (props) => get(props, 'images.0.id'),\r\n    props: {\r\n        images: {\r\n            type: Array,\r\n            required: true\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nIt would be preferred to be able to return undefined from the serverCacheKey function and know that the component won't be cached.  Currently, it would be cached by its name and would collide with any other uses of the component that also returned undefined.\r\n\r\n### What does the proposed API look like?\r\nThe same API for the existing serverCacheKey that takes the props object, but allow for returning undefined to indicate, to skip looking for the component in the server renderer cache (even if the component has a name).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Opt-out of serverCacheKey",
        "labels": "feature request",
        "id": 123159
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen assigning values to a CSS property via style binding like\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width}\"></div>\r\n````\r\n\r\nor using the shorthand syntax...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width}\"></div>\r\n````\r\n\r\nthis will actually not gonna work because we need to explicitly set the `unit`:\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width + 'px'}\"></div>\r\n````\r\n\r\nor via interpolation...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : `${width}px`}\"></div>\r\n````\r\n\r\nNow our code becomes more verbose. Combining all the number of occurrences of such binding, it's becoming ridiculous.\r\n\r\nI'm not sure if currently there is an elegant solution for this, but if there is. It would be also good if it is referenced in in the [docs](https://vuejs.org/v2/guide/class-and-style.html).\r\n\r\nIn React, this is the default behavior. It will add 'px' if the `unit` is not specified.\r\n\r\n### What does the proposed API look like?\r\nFor common css properties like `width` and `height`, having vue implicitly assign 'px' to the value it would definitely make our code much more cleaner.\r\n\r\nThis code...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width}\"></div>\r\n````\r\n\r\nwill be interpreted as:\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width + 'px'}\"></div>\r\n````\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Style binding: implicitly assign 'px' as the default unit for numeric values for certain css properties",
        "labels": "feature request",
        "id": 123160
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nIt would be nice to be able to check if a component responds to a given event or not. We can already do so for listeners declared in the template through the `vm.$listeners` object, but the ones registered with `vm.$on()` / `vm.$off()` don't show up in this object, they are stored in the private `vm._events` object.\r\n\r\nI would like to suggest to either add a function that checks if a component responds to a given event, or to make `vm._events` public, and call it `vm.$events`\r\n\r\n\r\n### What does the proposed API look like?\r\n\r\nA method called `vm.$responds(event)` could be considered, returning `true` if a component responds to a given event, `false` otherwise. If an array of strings is passed to this method instead of a string, it could return `true` if the component responds to some of these events.\r\n\r\nAlternatively, the interface could simply be `vm.$events`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add a way to check if a component responds to an event, or make vm._events public",
        "labels": "feature request",
        "id": 123161
    },
    {
        "body": "### What problem does this feature solve?\r\n- Allows to write validation logic depending on multiple props.\r\n- Allows to provide custom validation messages.\r\n\r\n### What does the proposed API look like?\r\n``` ts\r\ntype Validator = (value: any, key: string, props: Object, warn: (message: string) => void) => boolean\r\n```\r\n\r\nExample:\r\n\r\n``` js\r\nexport default {\r\n  props: {\r\n    foo: {\r\n      validator(value, key, props, warn) {\r\n        if ('bar' in props && 'foo' in props) warn('Foo and Bar cannot be used together.')\r\n        return true\r\n      }\r\n....\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Improve prop validator API",
        "labels": "feature request",
        "id": 123162
    },
    {
        "body": "### What problem does this feature solve?\r\nAccess to `process.env` is a slow, system-bound call.\r\n\r\nAfter react restructured their project to cache access to `process.env`, they had a 2.4x - 3.8x performance improvement for server-side rendering,\r\n\r\nhttps://github.com/facebook/react/issues/812\r\n\r\nThis should also be done for vue, vue-server-renderer, vuex ... anything that accesses `process.env`.\r\n\r\n### What does the proposed API look like?\r\nAn easy strategy might be to replace references to `process.env.NODE_ENV` with a reference to a singleton that checks process.env.NODE_ENV.\r\n\r\n```\r\n// foo.js\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // do stuff\r\n}\r\n```\r\n\r\nbecomes\r\n\r\n```\r\n// isDevEnv.js\r\nexport default process.env.NODE_ENV !== 'production';\r\n\r\n// foo.js\r\nimport isDevEnv from './isDevEnv';\r\n\r\nif (isDevEnv) {\r\n  // do stuff\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Cache access to process.env",
        "labels": "feature request",
        "id": 123163
    },
    {
        "body": "### What problem does this feature solve?\r\nThe Vue runtime allows pretty much anything to be put into the children array, and simply strips away `boolean | null | undefined`: https://github.com/vuejs/vue/blob/48acf71a01e5665f72696d44aa5a8d8f1d137172/src/core/vdom/helpers/normalize-children.js#L48\r\n\r\n[The types](https://github.com/vuejs/vue/blob/48acf71a01e5665f72696d44aa5a8d8f1d137172/types/vnode.d.ts#L6) on the other hand only allow `string`, `VNode`, or another nested array, which means we can't use short-circuit expressions to conditionally render things. \r\n\r\n```ts\r\n// Doesn't work - `false` is not allowed\r\nreturn h('div', data, [\r\n  this.enableSomething && h(Something)\r\n])\r\n\r\n// We have to do\r\nconst children: VNodeChildrenArrayContents = []\r\nthis.enableSomething && children.push(h(Something))\r\nreturn h('div', data, children)\r\n\r\n// Or\r\nreturn h('div', data, [\r\n  this.enableSomething ? h(Something) : []\r\n])\r\n```\r\n\r\n### What does the proposed API look like?\r\nAdd a separate type for `createElement` that also allows `boolean | null | undefined`, that way `vnode.children` can still be the current normalised version.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "types: allow (almost) anything in VNodeChildrenArrayContents",
        "labels": "feature request",
        "id": 123164
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently if we render a slot for multiple times (eg. inside a `v-for` loop), we'll get\r\n\r\n```\r\nDuplicate presence of slot \"${name}\" found in the same render tree - this will likely cause render errors.\r\n```\r\n\r\nI know it's intentional to prevent render errors (like losing correct data binding) but consider the following use case: I have a `v-breadcrumbs` component which has a default item separator of a text node `/`, and I want to allows users to specify their own separators which can be anything, like an `<v-icon>` component.\r\n\r\nCurrently if I want to make it work, I have to define a scoped slot in the `v-breadcrumbs` component and bind nothing to it:\r\n\r\n```html\r\n<slot name=\"sep\" v-bind=\"{}\">/</slot>\r\n```\r\n\r\nAnd component users must define `slot-scope` on it and not use anything from it:\r\n\r\n```html\r\n<v-breadcrumbs>\r\n  <v-icon slot=\"sep\" slot-scope=\"_\" name=\"angle-right\"/>\r\n</v-breadcrumbs>\r\n```\r\n\r\nAnd currently Vue is using slots as fallbacks for scoped slots with the same name. Whether the users can use a slot doesn't rely on if they want data from slot scope, but on whether the slot is gonna be rendered for multiple times inside the component self, this may raise more confusion for our users (like #8175).\r\n\r\nSo why don't we just get rid of such caveats and let a slot to be rendered more than once? We can clone them on duplication to prevent render errors as we already run the scoped slot function each time anyway. This makes the logic a lot simpler for users IMO: if we do not expect to use data from the slot scope, just use a slot, otherwise we'll always have to declare `slot-scope` to create the binding.\r\n\r\nIn addition, this would make documenting the (scoped) slots of a component more consistent, we just declare the data structure for a slot scope and users can decide if they want some data to bind to the `slot-scope` and don't need to care about how many times it will be rendered.\r\n\r\n### What does the proposed API look like?\r\nNo additional API needed, just clone the slot nodes upon render and remove the waring about duplicated slots.\r\n\r\nIt may be implemented in userland today in a quite hacky way, see: https://codesandbox.io/s/lp11y2wovz\r\n\r\nI just tweaked the `cloneVNode` function from the Vue core a little bit and it seemed to be working as expected using render function (without losing reactivity and event binding). There maybe some other edge situations I missed so correct me if it's not such trivial.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow a single slot to be rendered for multiple times",
        "labels": "feature request",
        "id": 123165
    },
    {
        "body": "### What problem does this feature solve?\r\nI am building a VueJS frontend where templates are coming from a backend where end users contributed them in a CMS or something else. VueJS is bundled with esm in order to have the Vue.compile method.\r\n\r\nWhen I run Vue.compile with the template string coming from the backend, I have no way to know if a compilation error occured in order to display a message to the user. In development I just have the warn messages in the console.\r\n\r\n### What does the proposed API look like?\r\nVue.compile could return an error boolean in an attribute or an array of all errors that occured during compilation.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue.compile should return the errors which happens during compilation even in prod env",
        "labels": "feature request",
        "id": 123166
    },
    {
        "body": "### What problem does this feature solve?\r\nPlease see here:\r\nhttps://jsfiddle.net/tys426eq/\r\n\r\nIf a class has its own iterator, `v-for` should iterate over this, instead of the object properties\r\n\r\n### What does the proposed API look like?\r\n```\r\nclass Items {\r\n  [Symbol.iterator]() {\r\n    return this.all.values();\r\n  }\r\n}\r\n```\r\n...\r\n`<div v-for=\"item of items\">` (or \"in\")\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-for should iterate object iterator (if one exists)",
        "labels": "feature request",
        "id": 123167
    },
    {
        "body": "### What problem does this feature solve?\r\nVue Test Utils has a synchronous API by walking all watchers and setting them to `sync`, but this implementation is buggy.\r\n\r\nReimplementing an async private config option would solve this problem for Vue Test Utils.\r\n\r\n### What does the proposed API look like?\r\nAdd an `async` config option that would be used when watchers are created.\r\n\r\nThe same option that was removed in [this commit](https://github.com/vuejs/vue/commit/ad11aa122cd09a4510fd9d8829e25f4a90b178c2#diff-4d10b522e21ed424211799a4e11c6103L191).\r\n\r\nI'm happy to make a PR to add this.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Re-implement async config option",
        "labels": "feature request",
        "id": 123168
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/JJPandari/pen/gzLVBq?editors=1010](https://codepen.io/JJPandari/pen/gzLVBq?editors=1010)\r\n\r\n### Steps to reproduce\r\nSee the codepen snippet. Follow the comment there to change the vm's data and see what happens.\r\n\r\n### What is expected?\r\nEven if the prop already exists, using `set` still makes it reactive, thus trigger view update.\r\n\r\n### What is actually happening?\r\nUsing `set` later doesn't update the view.\r\n\r\n---\r\nRelated source code: https://github.com/vuejs/vue/blob/3eb37acf98e2d9737de897ebe7bdb7e9576bcc21/src/core/observer/index.js#L192 I think most users would expect `set` to make the prop reactive whenever it's used. I initially opened [an issue for the api doc](https://github.com/vuejs/vuejs.org/issues/1601) because it wasn't clear (for me) about this. But the comment in the source code is.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "warn if $set is used on a property that already exist",
        "labels": "feature request",
        "id": 123169
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[![Edit Vue Template](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/0plonqx6jp)\r\n\r\n### Steps to reproduce\r\nWhen interpoling a object, it uses the `JSON.stringify` method instead of `toString`, which is normally the proper method to set a way to convert an object to a string. We could try to see if the `toString` method is present before calling the `toJSON` one ?\r\n\r\n### What is expected?\r\nIn the fiddle: \r\n>string: test\r\n\r\n### What is actually happening?\r\nIn the fiddle:\r\n>string: { \"json\": \"jsonVal\" }\r\n\r\n---\r\nThanks.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Use toString() on object interpolation when defined",
        "labels": "feature request",
        "id": 123170
    },
    {
        "body": "### What problem does this feature solve?\r\nI'm developing an all-in-one editor for webdevs that runs inside Chrome DevTools.\r\n\r\nJust by replacing `npm start` with `[name-not-finalized] start`, users can have a fully featured text editor right inside Chrome DevTools shell, automatically pointing at their project directory.\r\n\r\nIt comes with DOM inspector, where you pick an element and it'll literally take you to `file:line:col` where that element was defined. So you don't have to look through files to figure out where that button below the header is coming from. Useful when a new dev joins a project or you're revisiting your work after a very long time.\r\n\r\n\u25b6 [Watch 30 sec demo w/ a React project](http://goo.gl/d64cgv)\r\n\r\n___\r\n\r\nAnd of course, it also works with Vue projects, just as awesome.\r\n\r\n\u25b6 [Watch 20 sec demo w/ a Vue project](https://drive.google.com/open?id=1rGeFiNLezxzaJqnhnDbjvD_OvLMyaMIh)\r\n\r\nAbove demos were shot using locally tinkered compilers (just not clean enough to be a PR)\r\n\r\nThe goal is to deliver the ultimate developer experience ever. Other features are in development as we speak, like CSS QuickEditing, built-in image editor and a SVG editor so devs don't have to fire up Illustrator or Photoshop to make minor tweaks to their stuff.\r\n\r\nThe only hurdle in me releasing the app is getting external players to participate in revolutionizing how we write web.\r\n\r\nSo to wrap up I have only two requests:\r\n- Please have the template compilers add metadata to each tag (either as data attribute, or property on DOM node itself), that contains path to `*.vue` file (can be relative to project root), `line:col`/offset where the tag opens and last `line:col`/offset where the tag closes.\r\n\r\n- Please star this issue: https://bugs.chromium.org/p/chromium/issues/detail?id=811036\r\n\r\n### What does the proposed API look like?\r\nSomething like this:\r\n```javascript\r\nconsole.log(someElement.__vue__._debugSource)\r\n// > { file: 'src/components/Header.vue', line: 12, col: 4, lineEnd: 16, col: 8 }\r\n// or\r\n// > { file: 'src/components/Header.vue', start: 241, end: 352 }\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Have template compiler add source metadata to HTML tags",
        "labels": "feature request",
        "id": 123171
    },
    {
        "body": "### What problem does this feature solve?\r\nThe include and exclude props allow components to be conditionally cached only by component name. If we want to reuse components but force replacement using the `key` attribute, there is no control over which components we want to keep-alive only matching components by their name.\r\n\r\n### What does the proposed API look like?\r\nhttps://jsfiddle.net/9nk92wuy/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "keep-alive: include/exclude components by component key attribute",
        "labels": "feature request",
        "id": 123172
    },
    {
        "body": "### Version\r\n2.5.14\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/bad4a8mb/1/](https://jsfiddle.net/bad4a8mb/1/)\r\n\r\n### Steps to reproduce\r\nProvide a non function to the `bind` utility method.\r\n\r\n### What is expected?\r\nIn <= 2.5.13, it rendered but failed silently: https://jsfiddle.net/ujxu9mvd/. Not sure if we'd want to keep that expectation, but existing projects will fail to render completely. A dev-mode warning at the very least will be helpful in identifying the issue.\r\n\r\n### What is actually happening?\r\nUncaught TypeError\r\n\r\n---\r\nThe refactoring of the `bind` method to use the native bind, exposes a coding error when upgrading from 2.5.13. We have a fairly large codebase and one of the developers mistakenly added an object as a component method (eg. a global Vue events instance). It made its way into production and worked fine until upgrading to 2.5.14. It took a while to find it as there was no clear indication as to where the error was happening.\r\n\r\nSome other devs experienced this as well:\r\nhttps://github.com/vuejs/vue/pull/7491\r\nhttps://github.com/vuejs/vue/commit/324672a4621a3123cac90b18d4b1818bb33dddc6\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "2.5.14 introduces TypeError bind is not a function",
        "labels": "feature request",
        "id": 123173
    },
    {
        "body": "### What problem does this feature solve?\r\nMy app doesn't use vue as a base for the project, it is a backbone project, so I this backbone view create instances of vue views inside it and handles the lifecycle of the vue instance. But this means I have a lot of `<root>` instances which makes debugging a challenge. So what I want is a way to make `new Vue({ label: 'root-foo', ... })` or something like that so I can identify them.\r\n\r\n### What does the proposed API look like?\r\n```js\r\nnew Vue({\r\n   name: 'root-bar', //or label or instanceName etc...\r\n   // (...)\r\n})\r\n\r\n```\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Labeling a root instance",
        "labels": "feature request",
        "id": 123174
    },
    {
        "body": "### What problem does this feature solve?\r\nCustom properties in the options of functional component can't be accessed easily.\r\n\r\n### What does the proposed API look like?\r\nIn the render function of functional component, options can be accessed by `context.options`, just like `vm.$options`(https://vuejs.org/v2/api/index.html#vm-options)\r\n\r\nrelated issue #7492\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "add `options` property to the render context of functional component",
        "labels": "feature request",
        "id": 123175
    },
    {
        "body": "### What problem does this feature solve?\r\nBubbling up an event from a deep child can be really cumbersome (without an event bus) because you have to emit the same event from every parent up the tree until it reaches its target. An event modifier like `.bubble` would be really nice.\r\n\r\n### What does the proposed API look like?\r\nThis:\r\n```vue\r\n<child @hi.bubble/>\r\n```\r\n\r\nInstead of repeating this:\r\n```vue\r\n<child @hi=\"(...args) => $emit('hi', ...args)\"/>\r\n\r\n// or even:\r\n\r\n<child @hi=\"$emit('hi')\"/>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": ".bubble event modifier to pass along events, especially for those with args",
        "labels": "feature request",
        "id": 123176
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nRead support for HOC component, composition...\r\n\r\n### What does the proposed API look like?\r\ninstead of exporting an object like:\r\n\r\n```javascript\r\nexport default {\r\n  functional: true,\r\n  name: 'myComponentName',\r\n  render(h) {\r\n    return h('div', 'Hello World');\r\n  }\r\n}\r\n```\r\nWe could also export directly the render function \r\n```javascript\r\nexport function myComponentName(h, context) {\r\n  return h('div', 'Hello World');\r\n}\r\n```\r\nSince our component is now a function, we can compose it much easier.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support for exporting function for functional component",
        "labels": "feature request",
        "id": 123177
    },
    {
        "body": "### What problem does this feature solve?\r\nIn most of cases, it's not really comfortable to use `initialProp` as prop name, for example, or have `normalizedProp` inside a component, which takes some passed prop and transforms it. Code looks bloated and reminds more workaround than a good solution.\r\n\r\nHaving ability to change attribute name of prop would be great. Something like:\r\n```javascript\r\nrawProp: { attributeName: \"prop\" }\r\n```\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<component size=\"md\"> ... </component>\r\n```\r\n```javascript\r\ncomputed: {\r\n  size: {\r\n    switch (this.rawSize) { ... } // returns something in case blocks\r\n  }\r\n},\r\nprops: {\r\n  rawSize: {\r\n    attributeName: \"size\",\r\n    type: String\r\n  }\r\n}\r\n```\r\n\r\nThus, using any of proposed solutions above, `this.size` inside component would return transformed value (for example, `h4` or just `4`).\r\n\r\nI believe having this feature would be very awesome and help us to write cleaner code.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide a way to define different name for prop attribute",
        "labels": "feature request",
        "id": 123178
    },
    {
        "body": "### What problem does this feature solve?\r\nThe desired opts feature should offer the possibility to provide data from the markup (mostly from backend) to the vue instance.\r\nSo you can pass options/params from outside the vue scope. Example use case:\r\nhttps://forum.vuejs.org/t/passing-props-to-root-instances-in-2-0/244\r\n\r\nRight now this requires custom helpers/code to pipe the data through to the component.\r\nMuch better would be a more comfortable way similar the way riot does it with opts\r\nhttp://riotjs.com/api/#mounting\r\n\r\n\r\n### What does the proposed API look like?\r\nSince the instance root is not a custom tag (compared to riot) I can imagine using prefixed attributes e.g. `data-opt-[NAME]`\r\nSo the root may look like this:\r\n```html\r\n<div id=\"myRoot\" data-opt-firstname=\"John\" data-opt-lastname=\"Smith\"></div>\r\n```\r\nand within the template you can access it as\r\n```\r\n<template>\r\n    <span>Hello {{ opts.firstname }} {{ opts.lastname }}</span>\r\n</template>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "root opts attributes support",
        "labels": "feature request",
        "id": 123179
    },
    {
        "body": "### What problem does this feature solve?\r\nNow webpack4 `mini-css-extract-plugin` supports css `async-loading` and `splitted chunks`, it also has been supported in `vue-loader-15`\r\n\r\nBut when we use it in ssr, it will still get all css files at ssr rendering.\r\n\r\nThrough my investigation, current vue-ssr webpack plugin will not generate corresponding css into `initial` and `async` inside `vue-ssr-client-manifest.json`.\r\nhttps://github.com/vuejs/vue/blob/dev/src/server/webpack-plugin/client.js#L19-L26\r\n\r\nAnd also renderer `renderStyles` will render `all` css which includes splitted async css chunks.\r\nhttps://github.com/vuejs/vue/blob/dev/src/server/template-renderer/index.js#L112\r\n\r\n### What does the proposed API look like?\r\ncss - initial chunks are in `initial`\r\ncss - spiltted chunks are in `async`\r\ncontext.renderStyles() return all `initial` chunks\r\n`mini-css-extract-plugin` will auto load `async` chunks\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue SSR render initial css chunks correctly",
        "labels": "feature request",
        "id": 123180
    },
    {
        "body": "### What problem does this feature solve?\r\nWould make writing wrapper components easier\r\n\r\n### What does the proposed API look like?\r\nWhen v-on receives a function it should trigger on every custom event emitted by the child\r\n\r\n    <my-custom-component v-bind=\"$props\" v-on=\"onAnyEvent\"></my-custom-component>\r\n\r\nArgument one could be the name of the event\r\n\r\n    onAnyEvent(eventName, eventArgs) { // do something }\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Subscribe to all custom events on a child component",
        "labels": "feature request",
        "id": 123181
    },
    {
        "body": "### What problem does this feature solve?\r\nThe object syntax of the v-on directive is vital in achieving conditional binding of event listeners, as shown in the discussions at https://github.com/vuejs/vue/issues/7349.\r\n\r\n    <div v-on=\"{ mouseover: condition ? handler : null }\">\r\n\r\nHowever, the current object syntax does not allow modifiers.\r\n\r\nThis feature request suggest that we extend the object syntax in the following way to allow modifiers.\r\n\r\n    <div v-on=\"{ click: { left: { prevent: condition ? leftClickHandler : null } },  mouseover: { stop: mouseoverHandler } }\">\r\n\r\nThe above example would conditionally install leftClickHandler on \"click.left.prevent\" and mouseoverHandler on \"mouseover.stop\".\r\n\r\nThe embedded object notation is also conceptually consistent with the dot-notation already adopted in both function and inline syntax.\r\n\r\n\r\n### What does the proposed API look like?\r\nThe proposed v-on object syntax would like like this, which is an extension of the current syntax.\r\n\r\n    <div v-on=\"{ click: { left: { prevent: condition ? leftClickHandler : null } },  mouseover: { stop: mouseoverHandler } }\">\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Extending object syntax of v-on to support modifiers",
        "labels": "feature request",
        "id": 123182
    },
    {
        "body": "### What problem does this feature solve?\r\nV-model support for web components(tested with web component implemented with ionic's stenciljs compiler).\r\n\r\nDoes not work:\r\n```\r\n<ui-input v-model=\"mySelect\" />\r\n```\r\n\r\nWorks:\r\n```\r\n<ui-input :value=\"mySelect\" @input=\"mySelect = $event.target.value\" />\r\n```\r\n\r\nCan this be enabled to support ignored elements as well that have been declared with:\r\n\r\n```Vue.config.ignoredElements = [/^ui-/];```\r\n\r\n### What does the proposed API look like?\r\nDeclaration\r\n```\r\nVue.config.ignoredElements = [/^ui-/];\r\n```\r\nUsage\r\n```\r\n<ui-input v-model=\"mySelect\" />\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-model support for web components (stenciljs)",
        "labels": "feature request",
        "id": 123183
    },
    {
        "body": "### What problem does this feature solve?\r\nSee #7064 for some background information.\r\n\r\nAfter providing an explicit way to declare that a slot is \u201cempty\u201d, we won't have to use props to control whether each slot is gonna be rendered or not.\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<v-component>\r\n  <template slot=\"extra\" empty></template>\r\n</v-component>\r\n```\r\nor\r\n```html\r\n<v-component>\r\n  <template slot=\"extra\"><empty-slot/></template>\r\n</v-component>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide a way to explicitly fill a (scoped) slot with nothing",
        "labels": "feature request",
        "id": 123184
    },
    {
        "body": "### What problem does this feature solve?\r\n\u5f53\u6211\u4f7f\u7528 inject: true \u7684\u53c2\u6570\u6e32\u67d3 ssr \u9875\u9762\u65f6\uff0c\u6211\u53ea\u60f3\u5bf9 renderScripts \u8fd9\u90e8\u5206\u505a\u81ea\u5b9a\u4e49\u4fee\u6539\uff0c\u5176\u4ed6\u7ee7\u7eed\u6cbf\u7528\u9ed8\u8ba4templateRenderer\u7684render**\u3002\r\n\r\n\u5982\u679c \u6211\u8bbe\u7f6e\u4e86 inject: false\uff0c\u90a3\u6211\u5fc5\u987b\u5728 html\u6a21\u677f\u4e2d \u6dfb\u52a0 \u5404\u79cd {{ render** }} \u3002\r\n\r\n\u8bf7\u95ee\u6709\u6ca1\u6709\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\uff1f\r\n\r\n### What does the proposed API look like?\r\n```\r\ncreateBundleRenderer({\r\n  inject:true,\r\n  renderScripts: function() { ... },\r\n})\r\n\r\n```\r\nor \r\n\r\n```\r\ncreateBundleRenderer({\r\n  inject:true,\r\n  templateRenderer: new otherTemplateRenderer(),\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[SSR] \u670d\u52a1\u7aef\u6e32\u67d3\u80fd\u5426\u589e\u52a0\u81ea\u5b9a\u4e49 TemplateRenderer \u6216\u8005 \u63d0\u4f9b\u90e8\u5206inject\u7684\u53c2\u6570\uff1f",
        "labels": "feature request",
        "id": 123185
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen seeing warning message like `[Vue warn]: Invalid prop: type check failed for prop \"value\". Expected Number, got String.`, it would be great if Vue could display the actual values it encountered.\r\n\r\nFor instance, immediately seeing `2` and `'2'` would speed up development.\r\n\r\n### What does the proposed API look like?\r\nNo API changes\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Make the warning messages more explicit",
        "labels": "feature request",
        "id": 123186
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\n`slot-scope` can be set on a component that's a child of the component that defines the scoped slot.\r\n\r\n```html\r\n<vue-parent>\r\n  <vue-child slot-scope=props>\r\n    {{ props.value }}\r\n  </vue-child>\r\n</vue-parent>\r\n```\r\n\r\nBut it fails when it's set on the defining component itself. If there's only a default scoped slot then setting it on the parent should be allowed, because it would remove an unnecessary pair of tags in some cases and make the templates cleaner.\r\n\r\nBut mainly it's confusing and inconsistent to get an error that `props` isn't defined in the code below but not in the code above.\r\n\r\n### What does the proposed API look like?\r\n\r\n```html\r\n<vue-parent slot-scope=props>\r\n  <vue-child>\r\n    {{ props.value }}\r\n  </vue-child>\r\n</vue-parent>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow slot-scope to be set on the defining component",
        "labels": "feature request",
        "id": 123187
    },
    {
        "body": "### What problem does this feature solve?\r\n`v-model` is great to bind form fields (and child components) to data fields. Unfortunately you cannot currently use it with component props because v-model is effectively `@input=\"newValue => field = newValue\"` and if `field` is a prop it would change the prop, which is not allowed.\r\n\r\nIf it would be possible to change this `\"newValue => field = newValue\"` to a custom callback, then you could instead for example emit an event when the form field gets changed. This way you could directly use `v-model` with props and you don't need to copy props into data fields.\r\n\r\n### What does the proposed API look like?\r\nIn the component whose template contains `v-model`, add a configuration option `modelCallback` that takes a function that will be called when the child component emits their model event:\r\n```javascript\r\n{\r\n  modelCallback: function (modelName, newValue) {\r\n    this.$emit('field_changed', modelName, newValue);\r\n  }\r\n}\r\n```\r\n\r\nSee this complete example: https://jsfiddle.net/12py3s7n/\r\n(Of course it throws warnings when changing data because `{modelCallback: ...}` isn't actually supported yet.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow to override v-model callback",
        "labels": "feature request",
        "id": 123188
    },
    {
        "body": "### What problem does this feature solve?\r\nWe've added a `renderToString` method in vue-test-utils, which is a wrapper around `vue-server-renderer` `renderToStrting`. This let's users test SSR code without a `window`.\r\n\r\nSometimes users will be running tests for SSR code and browser target code in the same process, where window will be defined. This means `$isServer` will be false, even though we're rendering with the server-renderer.\r\n\r\n### What does the proposed API look like?\r\nI'm unsure of the best way to do this.\r\n\r\nOne solution is to make `$isServer` writable\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Writable $isServer",
        "labels": "feature request",
        "id": 123189
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/12489eae/](https://jsfiddle.net/12489eae/)\r\n\r\n### Steps to reproduce\r\nWrite a functional component with a render function that returns a string or an array containing strings.\r\n\r\n### What is expected?\r\nThe component renders the strings as text nodes.\r\n\r\n### What is actually happening?\r\nUncaught TypeError: Cannot create property 'isRootInsert' on string 'Test'\r\n\r\n---\r\nThis works:\r\n\r\n```\r\nreturn h(\"div\", linesWithBreaks).children\r\n```\r\n\r\nI'd also like to be able to use html templates with vue-loader:\r\n\r\n```\r\n<template functional>\r\n\t<template v-for=`line in props.text.split(\"\\n\")`>\r\n\t\t{{ line }}\r\n\t\t<br/>\r\n\t</template>\r\n</template>\r\n```\r\n\r\nBut that also fails because of https://github.com/vuejs/vue-loader/issues/1168\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Returning a string or an array containing strings in render functions doesn't work",
        "labels": "feature request",
        "id": 123190
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Steps to reproduce\r\n```js\r\nconst compiler = require('vue-template-compiler');\r\nconst compiled = compiler.compile(input, { preserveWhitespace: false });\r\nconsole.log(compiled.render)\r\n```\r\n\r\nWith `input` being:\r\n```svg\r\n<svg viewBox=\"0 0 135.297 120.367\" xmlns=\"http://www.w3.org/2000/svg\"><defs><style>.hex{fill:#60c795}.line{fill:#fff}</style></defs><path d=\"M133.605 66.313l-27.691 47.963a12.22 12.22 0 0 1-10.582 6.109H39.949c-4.365 0-8.398-2.33-10.582-6.11L1.677 66.314a12.22 12.22 0 0 1 0-12.22l27.69-47.961A12.221 12.221 0 0 1 39.949.022h55.383c4.365 0 8.4 2.328 10.582 6.11l27.691 47.961a12.22 12.22 0 0 1 0 12.22\" class=\"hex\"/><path d=\"M61.533 19.968a3.415 3.415 0 0 0-3.14 2.261L40.556 71.925l-5.856-9.76a3.416 3.416 0 0 0-2.93-1.66H.052a12.2 12.2 0 0 0 1.627 5.807l.594 1.027h27.566l8.57 14.283a3.416 3.416 0 0 0 6.146-.604L61.81 32.923l18.953 46.411a3.42 3.42 0 0 0 2.873 2.112 3.412 3.412 0 0 0 3.187-1.594l15.15-24.28 8.844 11.563a3.425 3.425 0 0 0 2.714 1.342h18.824l1.25-2.166a12.195 12.195 0 0 0 1.549-4.668H115.22l-10.816-14.145a3.435 3.435 0 0 0-2.877-1.338 3.414 3.414 0 0 0-2.736 1.604L84.564 70.566 64.767 22.09a3.416 3.416 0 0 0-3.236-2.123z\" class=\"line\"/></svg>\r\n```\r\n\r\n### What is expected?\r\nExprected is that the `<style>` element (inside the `<svg>`) is also in the genreated render method\r\n\r\n### What is actually happening?\r\nThe generated render method omits the <style> element:\r\n\r\n```js\r\nwith(this){return _c('svg',{attrs:{\"viewBox\":\"0 0 135.297 120.367\",\"xmlns\":\"http://www.w3.org/2000/svg\"}},[_c('defs'),_c('path',{staticClass:\"hex\",attrs:{\"d\":\"M133.605 66.313l-27.691 47.963a12.22 12.22 0 0 1-10.582 6.109H39.949c-4.365 0-8.398-2.33-10.582-6.11L1.677 66.314a12.22 12.22 0 0 1 0-12.22l27.69-47.961A12.221 12.221 0 0 1 39.949.022h55.383c4.365 0 8.4 2.328 10.582 6.11l27.691 47.961a12.22 12.22 0 0 1 0 12.22\"}}),_c('path',{staticClass:\"line\",attrs:{\"d\":\"M61.533 19.968a3.415 3.415 0 0 0-3.14 2.261L40.556 71.925l-5.856-9.76a3.416 3.416 0 0 0-2.93-1.66H.052a12.2 12.2 0 0 0 1.627 5.807l.594 1.027h27.566l8.57 14.283a3.416 3.416 0 0 0 6.146-.604L61.81 32.923l18.953 46.411a3.42 3.42 0 0 0 2.873 2.112 3.412 3.412 0 0 0 3.187-1.594l15.15-24.28 8.844 11.563a3.425 3.425 0 0 0 2.714 1.342h18.824l1.25-2.166a12.195 12.195 0 0 0 1.549-4.668H115.22l-10.816-14.145a3.435 3.435 0 0 0-2.877-1.338 3.414 3.414 0 0 0-2.736 1.604L84.564 70.566 64.767 22.09a3.416 3.416 0 0 0-3.236-2.123z\"}})])}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Template compiler ignores $/svg/defs/styles element",
        "labels": "feature request",
        "id": 123191
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen doing a composition of component like this:\r\n\r\n**Child component with slot**\r\n\r\n```html\r\n<template>\r\n    <div>\r\n        child\r\n        <slot name=\"slot\" ref=\"slot\"/>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name:'child'\r\n    }\r\n</script>\r\n```\r\n**Parent component**\r\n\r\n```html\r\n<template>\r\n    <div>\r\n        parent\r\n        <child>\r\n            <custom-component slot=\"slot\"/>\r\n        </child>\r\n    </div>\r\n</template>\r\n<script>\r\n    import Child from './child.vue';\r\n    import CustomComponent from 'custom-component';\r\n    export default {\r\n        name:'parent',\r\n        components:{ Child, CustomComponent }\r\n    }\r\n</script>\r\n```\r\n\r\nit would be great to access custom-component (component not element ) using `this.$refs.slot` .\r\nCurrently its done using this statement `this.$slots.slot[0].componentInstance` , `this.$refs.slot` is `undefined`.\r\n\r\n#### Use case is calling child slot component methods.\r\n\r\nThanks\r\n\r\n### What does the proposed API look like?\r\nAccessing slot component using\r\n`this.$refs.slot`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support ref attribute in slots",
        "labels": "feature request",
        "id": 123192
    },
    {
        "body": "### What problem does this feature solve?\r\nAdd a standard debounce feature on events like input, keyup etc.\r\n\r\nWith data driven apps 'debounce' functionality is a must for not over-loading the backend.\r\n\r\n### What does the proposed API look like?\r\nexample `<input type=\"text\" @input.debounce=\"ajaxSearchBackend\" />`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "add debounce as Event Modifier",
        "labels": "feature request",
        "id": 123193
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/zr7rz6xh/8/](https://jsfiddle.net/zr7rz6xh/8/)\r\n\r\n### Steps to reproduce\r\nVue.config.errorHandler = function (err, vm, info) {\r\n  alert(\"handler\");\r\n};\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  mounted: function() {\r\n  \treturn new Promise(function(resolve, reject) {\r\n      throw new Error('err');\r\n    });\r\n  }\r\n})\r\n\r\n\r\n### What is expected?\r\nerrorHandler should be called\r\n\r\n### What is actually happening?\r\nUncaught (in promise) Error: err\r\n\r\n---\r\nVue.config.errorHandler is not called if the error occurs inside a promise or await/async function.\r\n\r\nI want to use the created hook with an await call, so it has to be async. But then the errorHandler is ignored.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "errorHandler not working in Promises / async",
        "labels": "feature request",
        "id": 123194
    },
    {
        "body": "### What problem does this feature solve?\r\nMake things shorter and easier to write.\r\n\r\n### What does the proposed API look like?\r\n`:foo=\"bar\"` is a syntax shortcut for `v-bind:foo=\"bar\"`.\r\n\r\nSimilarly, `.foo=\"bar\"` would be a nice shortcut for `:foo.prop=\"bar\"` (and the leading `.` even makes sense!).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "A short syntax for v-bind .prop modifier",
        "labels": "feature request",
        "id": 123195
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently when using functional components without `prop` definition, all attributes will be rendered when using [`JSX spread`](https://github.com/vuejs/babel-plugin-transform-vue-jsx#jsx-spread).  \r\n\r\nThis is because the `context.data.attrs` remain after they are merged. \r\n\r\n## Current\r\n\r\nUsage:`<Example type=\"blue\" fill={true} class=\"extra-class\" aria-label=\"I'm a label\" />`\r\n\r\nImplementation: \r\n```\r\nexport default {\r\n  functional: true,\r\n  \r\n  render({ data, props }) {\r\n    const { type, fill } = props\r\n\r\n    const buttonClass = {\r\n      'button--fill': fill,\r\n      [`button--${type}`]: !!type\r\n    }\r\n\r\n    <button {...data} class={buttonClass} >\r\n  }\r\n}\r\n```\r\n\r\nOutput: `<button fill=\"true\" type=\"blue\" class=\"extra-class button--fill button--blue\" aria-label=\"I'm a label\" />`\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nIt should be explicit what attributes to render to dom when using a functional component with no prop definition. \r\n\r\n[With fix `delete data.attrs`](https://github.com/vuejs/vue/blob/dev/src/core/vdom/create-functional-component.js#L81)\r\n\r\n### Explicitly passing attributes\r\n\r\nYou can use spread notation to get all remaining `attrs`, and replacing the `data.attrs` object\r\n\r\nUsage: `<Example type=\"blue\" fill={true} class=\"extra-class\" aria-label=\"I'm a label\" />`\r\n\r\nImplementation: \r\n```\r\nexport default {\r\n  functional: true,\r\n  \r\n  render({ data, props }) {\r\n    const { fill, type, ...attrs } = props\r\n    data.attrs = attrs\r\n\r\n    const buttonClass = {\r\n      'button--fill': fill,\r\n      [`button--${type}`]: !!type\r\n    }\r\n\r\n    <button {...data} class={buttonClass} >\r\n  }\r\n}\r\n```\r\n\r\nOutput: `<button class=\"extra-class button--fill button--blue\" aria-label=\"I'm a label\" />`\r\n\r\n### Explicitly passing attributes 2\r\n\r\nUsage: `<Example  type=\"blue\" fill={true} class=\"extra-class\" formtarget=\"id\" dummy-attr=\"lol\" />`\r\n\r\nImplementation: \r\n```\r\nexport default {\r\n  functional: true,\r\n  \r\n  render({ data, props }) {\r\n    const { fill, type, formtarget } = props\r\n\r\n    const buttonClass = {\r\n      'button--fill': fill,\r\n      [`button--${type}`]: !!type\r\n    }\r\n\r\n    <button {...data} formtarget={formtarget} class={buttonClass} >\r\n  }\r\n}\r\n```\r\n\r\nOutput: `<button class=\"extra-class button--fill button--blue\" formtarget=\"id\" />`\r\n\r\n\r\n### Conclusion\r\n\r\nBoth examples show how the behaviour of the attributes should be left with the child when dictating what attributes shoud be rendered. You can either do a `and rest` approach or explcititly name attributes to pass onto element. \r\n\r\nThe original all props/attrs will be rendered as attributes, which adds polution to the DOM especially with attributes that are array's/objects/functions/symbols.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Remove attribute merging for functional components with no prop definition",
        "labels": "feature request",
        "id": 123196
    },
    {
        "body": "### Version\r\n2.4.4, 2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/xt3uf0g5/1/](https://jsfiddle.net/xt3uf0g5/1/)\r\n\r\n### Steps to reproduce\r\nAs per documentation: https://vuejs.org/v2/guide/syntax.html#Attributes\r\nnull, undefined, false should remove attribute\r\n\r\n\r\n### What is expected?\r\nValue attribute removed\r\n\r\n### What is actually happening?\r\nSpecific to HTMLProgressElement - the attribute is not removed.\r\n\r\nBy giving false - exception (Failed to set the 'value' property on 'HTMLProgressElement': The provided double value is non-finite.)\r\n\r\nBy giving null, undefined - value=\"0\"\r\n\r\n---\r\nHTMLProgressElement without value attribute changes visual to represent \"indeterminate\" state (link: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "HTMLProgressElement value attribute doesn't removed after being fed with false, null or undefined",
        "labels": "feature request",
        "id": 123197
    },
    {
        "body": "### What problem does this feature solve?\r\nDuring development, it's hard to find out what method is used to handle events on the element using browser's DOM inspector. If it's able to see the handler's name or content during development, it will be easier for the developer to locate the handler's code.\r\n\r\n### What does the proposed API look like?\r\nSet global config:\r\n```javascript\r\nVue.config.showHandlers = true;\r\n```\r\nthen the handlers can be seen in the DOM inspector:\r\n```html\r\n<div v-on:click='showHahaha' v-on:mouseenter='active = true'>hahaha</div>\r\n```\r\nsince '@' is not valid in Element.setAttribute, I changed it to 'v-on:'\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add a global config to show event handlers during development",
        "labels": "feature request",
        "id": 123198
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n\r\nNG pattern (functional)\r\nhttps://codesandbox.io/s/004vv2onw0\r\n\r\nOK pattern (no functional)\r\nhttps://codesandbox.io/s/q9k5q8qq56\r\n\r\n### Steps to reproduce\r\nI found can't use `components` option when  `functional` single file component.\r\n\r\n```html\r\n<template functional>\r\n  <div>\r\n    <some-children />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SomeChildren from \"./SomeChildren\"\r\n\r\nexport default {\r\n  components: {\r\n    SomeChildren\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nIt's occure `Unknown custom element`.\r\n\r\n### What is expected?\r\nNot occure `Unknown custom element` and use child component\r\n\r\n### What is actually happening?\r\nIt's occure `Unknown custom element`\r\n\r\n---\r\n\r\nIn workaround, it not occure when use `Vue.component`.\r\n\r\n```js\r\nimport Vue from \"vue\"\r\nimport SomeChildren from \"./SomeChildren\"\r\nVue.component(\"some-children\", SomeChildren);\r\n\r\nexport default {}\r\n\r\n// can use  <some-children />\r\n```\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Functional single file component with components option.",
        "labels": "feature request",
        "id": 123199
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen context with state is provided to the template renderer an [inline script is created](https://github.com/vuejs/vue/blob/f2b476d4f4f685d84b4957e6c805740597945cde/src/server/template-renderer/index.js#L199).  It may be useful to provide a nonce that gets attached to the script tag so an unsafe-inline CSP doesn't have to be enabled.\r\n\r\n### What does the proposed API look like?\r\n```\r\nrenderer.renderToString({\r\n  state: {},\r\n  nonce: ''\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Template renderer and CSP",
        "labels": "feature request",
        "id": 123200
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen we are using SSR with CommonsChunkPlugin, we often generate a `manifest.js` at the same time, but `manifest.js` is always very small (about 1kb).\r\n\r\nWithout SSR using `html-webpack-plugin` and its inline resource plugin, we are able to make `manifest.js` transformed inline into html file.\r\n\r\nBut for now we can not do for SSR that because the html output is generated by `vue-server-render` automatically.\r\n\r\n### What does the proposed API look like?\r\n```js\r\ncreateBundleRenderer(bundle, {\r\n  inlineResources: [] // string or RegExp\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[SSR] Support inline resource for specified files for server side rendering.",
        "labels": "feature request",
        "id": 123201
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/49gptnad/905/](https://jsfiddle.net/49gptnad/905/)\r\n\r\n### Steps to reproduce\r\nJust run it and open the console in a debugger\r\n\r\n### What is expected?\r\nthat the target variable is type checked for being a string before trying to perform the `key in target` line, to prevent a big error message\r\n\r\n### What is actually happening?\r\na big error message comes up\r\n\r\n---\r\nI'm going to have a look at a fix for it now so I'll post it if I figure it out\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "\"TypeError: Cannot use 'in' operator to search for 'names' in bf7823uhvbon3f289ph32f",
        "labels": "feature request",
        "id": 123202
    },
    {
        "body": "### What problem does this feature solve?\r\nRight now if we want an event handler to run conditionally we need to place the condition in the event handler which means that the event is still subscribed to and we pay the memory allocation fee for the event subscription (the underlying addEventListener and corresponding handler).\r\n\r\nIn some scenarios this is a pain. For example: say I've got mouse events (mouseover, mouseout) that are only meaningful on devices that actually have a pointer/mouse and so are meaningless on mobile and touch devices.\r\n\r\nRight now, I'd have to create the event subscriptions and add the condition in the handler (or in this case no need even for that as the events would never fire) BUT I've still attached these handlers and allocated memory for them - which especially on memory constrained  platforms like mobile browsers is a waste.\r\n\r\nBy making the event subscription itself conditional we can avoid this.\r\n\r\n### What does the proposed API look like?\r\nIn its simplest form we could just examine the handler provided and if falsy (or just null)  short-circuit the event subscription and NOT apply the underlying addEventListener operation.\r\n\r\nThis way the condition can appear in the event binding declaration itself:\r\n\r\n```\r\n<div @mouseover=\"condition ? handler : null\" /> \r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Conditional event binding",
        "labels": "feature request",
        "id": 123203
    },
    {
        "body": "### What problem does this feature solve?\r\nMany data visualization and graphics library do DOM manipulation and most of them the DOMElement can be extracted.\r\n```js\r\nconst rect = SVG.adopt(this.$refs.rect.elm)\r\nrect.node // this is the SVGElement and in chrome console will output <rect id=\"r1\"></rect>\r\n```\r\n\r\nLet's say we want to build an abstraction by design it as a component that can draw a rectangle and after the drawing is done (by hold&drag mouse button) that rectangle will be placed in another section. The usage will be like this:\r\n```html\r\n<annotator>\r\n  <img src=\"background\" />\r\n  <rect slot=\"drawing\" stroke=\"red\" />\r\n  <rect slot=\"annotation\" stroke=\"green\" x=\"100\" y=\"100\" width=\"100\" height=\"100\" />\r\n</annotator>\r\n```\r\n\r\nand `<annotator>` will be like this\r\n```html\r\n<template>\r\n  <svg>\r\n\r\n    <foreignObject>\r\n      <slot></slot>\r\n    </foreignObject>\r\n\r\n    <g fill=\"black\" transform=\"translate(100, 100)\">\r\n      <slot name=\"annotation\"></slot>\r\n    </g>\r\n\r\n    <slot name=\"drawing\"></slot>\r\n\r\n  </svg>\r\n</template>\r\n```\r\n\r\nAfter the drawing is done, the rectangle will be moved and fill it with black (or SVG texture for the more complex case). This can be done by clone the element in `drawing` slots to `annotation` slot.\r\n```js\r\nconst rect = SVG.adopt(this.$slots.drawing[0].elm)\r\n\r\nrect.on('click', event => doDrawingLogic(event))\r\n\r\nrect.on('drawfinish', event => {\r\n// the reason to clone and move slot is so any logic in annotation slot can be applied\r\n// the clone itself is to preserve `<rect stroke=\"red\" slot=\"drawing\" />` so that it can be referenced again\r\n/** some logic here */\r\n})\r\n```\r\n\r\nIn that case there is need to make createElement accept DOMElement for duplicating or maybe also converting Node to VNode.\r\n```js\r\nnewRect = newRect.clone().animate().dmove(100, 100)\r\n\r\nconst clone = this.$createElement(newRect.node)\r\nthis.$slots.annotation.push(clone)\r\n```\r\n> In above example, if createElement act as creating element then there will be 2 rectangles lol\r\n\r\n### What does the proposed API look like?\r\nBasic usage\r\n```js\r\nconst div = document.getElementById(\"myDiv\")\r\n\r\nthis.$createElement(div)\r\n```\r\n\r\nClone and move from 1 slots to another slot\r\n```js\r\nconst clone = this.$createElement(this.$slots.mySlot[0].elm)\r\n\r\nthis.$slots.default.push(clone)\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Accept DOMElement in createElement Arguments",
        "labels": "feature request",
        "id": 123204
    },
    {
        "body": "### What problem does this feature solve?\r\nOften, it's desirable for a component to expose properties the caller can use to customize the style. But if these take arbitrary values rather than just, say, class names, the child component then must use `style` attributes to apply the values. Unfortunately, this litters the `<template>` markup with style information. Also, the `style` attribute cannot be used to assign CSS properties to pseudo-elements like `:hover` and `:before`, which significantly limits the properties a component can expose to the caller for custom styling.\r\n\r\nThe only workaround is for the parent's CSS to override the child's CSS, but that requires the parent's CSS to be coupled to the child's implementing markup. The same value (or variants based on it, such as lighter or darker shades of a color) may be used in a number of selectors, complicating this effort, and if the component uses scoped CSS or highly-specific selectors, it may be even more difficult to override.\r\n\r\nCSS variables are now fully supported by every common browser other than IE11. So, I'm proposing that Vue support mustache syntax in the `<style>` block of SFCs where CSS variables are declared, and that Vue set and react to changes to these values by using the DOM's `style.setProperty` method.\r\n\r\nThis will allow component authors to provide props for more styling decisions, in a way that is still as reactive as using the `style` attribute, but with more capabilities (for pseudo-elements) and a tidier template. Internally, components can also use this to make styling decisions, including for pseudo-elements, based on computed values, all fully reactive. \r\n\r\nHere's an example of a component that does support CSS variables as properties, but has to wire it up manually with a watcher:\r\n\r\nhttps://github.com/richardtallent/vue-stars/blob/master/src/VueStars.vue\r\n\r\nIt may be possible to support IE <= 11 by replacing variables in the style with values and replacing the generated style tag as needed.\r\n\r\n### What does the proposed API look like?\r\nThe API would simply be that the <style> block accepts mustache syntax in the declaration of CSS variables, and that behind the scenes, it reacts to changes by using the `style.setProperty()` method to update the CSS variable's value.\r\n\r\nFrom the component author's perspective:\r\n```HTML\r\n<template>\r\n  <h1>{{ title }}</h1>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"ColorHeader\",\r\n  props: {\r\n    bg: { type: String, default: \"inherit\", required: false },\r\n    bgHover: { type: String, default: \"inherit\", required: false },\r\n    title: { type: String, default: \"(Untitled)\", required: false },\r\n  }\r\n}\r\n</script>\r\n<style>\r\n:root {\r\n   --bg-color: {{ bg }};\r\n   --bg-hover-color: {{ bgHover }};\r\n}\r\n  h1 { background-color: var(--bg-color); }\r\n  h1:hover { background-color: var(--bg-hover-color); }  \r\n</style>\r\n```\r\n\r\nOne down side I see is that this would require Vue's compiler to parse the CSS so it recognizes the variable name before the mustache, which could be a problem when using CSS that needs a pre-processor. So here's an alternative implementation:\r\n\r\n- Vue supports mustache syntax *anywhere* within the style block, but it is understood that it should *only* be used for CSS values, not the names of properties or selectors.\r\n- Vue makes no attempt to parse the CSS other than to find the mustaches.\r\n- For each discrete mustache expression, Vue replaces the mustache syntax with a CSS variable declaration at the top (auto-named) and `var(--auto-named-variable)` where the mustache syntax appeared.\r\n- Vue then just needs to update the value for the names it created reactively.\r\n- This would be compatible with any CSS variant that allows CSS variable syntax (and that doesn't replace it or the mustache syntax with something else).\r\n\r\nIf mustache syntax causes too much of a headache with linters, IDEs, etc. (since curly braces are important to CSS), a third alternative would be for the component author to use the CSS variable syntax, and require that if you want Vue to reactively set and update that variable, you simply use the kebab-case version of one of your data, prop, or computed attributes (i.e., no complex expressions or direct use of methods). Example:\r\n\r\n```HTML\r\n<template>\r\n  <h1>{{ title }}</h1>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"ColorHeader\",\r\n  props: {\r\n    bgColor: { type: String, default: \"inherit\", required: false },\r\n    bgHover: { type: String, default: \"inherit\", required: false },\r\n    title: { type: String, default: \"(Untitled)\", required: false },\r\n  }\r\n}\r\n</script>\r\n<style>\r\n  h1 { background-color: var(--bg-color); }\r\n  h1:hover { background-color: var(--bg-hover); }  \r\n</style>\r\n```\r\n\r\nTo prevent collisions between real legacy variables and same-named component features, this could be opt-in with an attribute on the style element (like \"scoped\" operates).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "FR: Reactive CSS variables",
        "labels": "feature request",
        "id": 123205
    },
    {
        "body": "### What problem does this feature solve?\r\nA registered component could be referenced by its identifier when using the `extends` property. Currently it only works if you set a component directly, so in order to get a registered component it would look like this:\r\n\r\n```\r\n{\r\n  extends: Vue.component('myComponent') \r\n}\r\n```\r\n\r\n### What does the proposed API look like?\r\nHowever a shorter syntax could be by just using a string to reference a previously registered component.\r\n\r\n```\r\n{\r\n  extends: 'myComponent'\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow to reference registered components in 'extends' property",
        "labels": "feature request",
        "id": 123206
    },
    {
        "body": "### What problem does this feature solve?\r\nvue-i18n inject the `lang` field to `Vue.config` to switch the global language  \r\nbut in ts, we cannot re-define the `config` field in `VueConstructor`  \r\n\r\n### What does the proposed API look like?\r\nextract `config` to a interface\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "provide a way to allow Module Augmentation with Vue.config",
        "labels": "feature request",
        "id": 123207
    },
    {
        "body": "### Version\r\n2.5.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/zollero/pen/opbxXX](https://codepen.io/zollero/pen/opbxXX)\r\n\r\n### Steps to reproduce\r\nProp validate in v2.5.11, does not allow the key of prop to be one out of `['type', 'default', 'required', 'validator']`, and throw a warning error. \r\n\r\nThis happens  when the `prop` is an array of object. And I must validate the key of the element object.\r\n\r\nFor example:\r\n\r\n```\r\nexport default {\r\n  props: {\r\n    forms: {\r\n      type: Array,\r\n      required: true,\r\n      prop: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      label: String,\r\n      editable: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n![image](https://user-images.githubusercontent.com/8801894/34087867-c8a8ae3c-e3e0-11e7-8820-bfe5ef989bbf.png)\r\n\r\n### What is expected?\r\nExpect the key out of ['type', 'default', 'required', 'validator'] can be valid.\r\n\r\n\r\n### What is actually happening?\r\nThe key out of ['type', 'default', 'required', 'validator'] is invalid.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Validate nested props",
        "labels": "feature request",
        "id": 123208
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen using JSX/Render functions with inputs, setting default rendered value in SSR, requires so specialist understanding about the VNode API.\r\n\r\n```\r\n{\r\n  render(h) {\r\n     const Input = h('input')\r\n     if (process.env.VUE_ENV === 'server') {\r\n       data.attrs.value = this.model\r\n     }\r\n     return input\r\n  }\r\n}\r\n```\r\n\r\nCurrently when binding the value to an input `<input :value=\"aValue\" />` you will get the rendered html as `<input>`. This works client side as we are mutating the `InputElement.value`. Thus you can set an initial value.\r\n\r\nElements such as `input` may have `value` / `checked` attributes ect. On the server we should be rendering as `<input value=\"email@example.com\">` to pre-define the initial value. Or `<input checked=\"checked\">` for checkbox/radio for example.\r\n\r\nReact has an API called `defaultValue` for setting the initial value: https://zhenyong.github.io/react/docs/forms.html#default-value\r\n\r\n## Note: \r\n\r\nWe do this with `VUE_ENV` as on the client the value is updated via the `checked` / `value` on the Element itself, as we do not want to cause an attribute change each time.\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nA solution could be to follow the defaultValue API but that doesn't really work for `checked`. Thus internally handling input types to correctly render the default value via attribute for SSR content will simplify setting the initial display value for inputs.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR value hydration for elements with render function",
        "labels": "feature request",
        "id": 123209
    },
    {
        "body": "### What problem does this feature solve?\r\nThe related issue (https://github.com/vuejs/vue/issues/5151) is closed, so I need to clarify my point.\r\n\r\nIt should exist convenient way to define template for items of hierarchical component (for example, tree or list with sections).\r\nI know, it can be solved with render functions, but it is not so \"native\" way of building components in vue as in react. I mean, writing / reading render functions is more uncomfortable for average vue user, because they are used only occasionally. It's even worse, if user need to setup webpack / babel / jsx. So I think, render functions should be avoided for not-so-advanced cases.\r\n\r\nSlots can be \"passed\" to children using templates, like this:\r\n```\r\n<child>\r\n    <template slot-scope=\"props\">\r\n        <slot v-bind=\"props\"></slot>\r\n    </template>\r\n</child>\r\n```\r\nBut there are some drawbacks:\r\n1) This creates wrapper function on each level. First, we have wrapper. Then wrapper of wrapper, and so on.\r\n2) This breaks fallback content (default template) feature.\r\n\r\n### What does the proposed API look like?\r\n```\r\n<child>\r\n    <slot slot-scope></slot>\r\n</child>\r\n```\r\n### Remark\r\nI propose syntax, which is boiled down version of first markup, and can be supported by compiler. Here is my test implementation (it seems quite easy): https://github.com/shameleo/vue-slot-pass-demo/commit/bdb6cbbf3ab7574d4b2d350f7d866e2bc609a043\r\nIf you give me green light, I'll try to prepare PR. If something is missed in implementation, let me know, please.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Ability to pass scoped slots to descedants in templates",
        "labels": "feature request",
        "id": 123210
    },
    {
        "body": "### What problem does this feature solve?\r\nSimilar to devtools, `Vue.config.devtools` is enabled by default for development and disabled by default for production.  However, the developer can choose to override that behavior (for example, for debugging) by manually setting `Vue.config.devtools = true`.  However, this same lenience is not afforded to `Vue.config.performance`.  Even if explicitly enabling it, the developer's setting will be overridden by Vue in production.\r\n\r\n### What does the proposed API look like?\r\nThis proposed solution brings `Vue.config.performance` in line with `Vue.config.devtools`, by disabling it by default in production, but gives the developer the ability to explicitly \u0017\u0017enable it; for example, for debugging performance issues.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Enable performance measuring in production, at the user's request",
        "labels": "feature request",
        "id": 123211
    },
    {
        "body": "### Version\r\n2.6.12\r\n\r\n### Steps to reproduce\r\n```html\r\n<div></div>\r\n<script>\r\nnew Vue({\r\n  el: 'main',\r\n  template: '<MyDatetime :value=\"datetime\" />',\r\n  data: {\r\n    datetime: Date.now(),\r\n  },\r\n  components: {\r\n    MyDatetime: {\r\n      template: `\r\n        <div>\r\n          expect undefined: {{ toString + \"\" }}<br />\r\n          expect default: {{ toLocalString + \"\" }}<br />\r\n        </div>`,\r\n      props: {\r\n        value: {\r\n          type: Number,\r\n        },\r\n        toString: {\r\n          validator: mode => [ 'date-time', 'date', 'time' ].includes(mode),\r\n        },\r\n        toLocalString: {\r\n          validator: mode => [ 'date-time', 'date', 'time', 'default' ].includes(mode),\r\n          default: 'default',\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n</script>\r\n```\r\n\r\n### What is expected?\r\n\r\nThey are all keys match the uni simple rule: not start with `_` or `$`\r\n\r\n### What is actually happening?\r\n\r\nIf parent component doesn't pass the prop, then the component will get neither `undefined` nor `default`, but the value in `Object.prototype`.\r\n\r\n---\r\n\r\n1. `{}` in these two lines need to be replaced to `Object.create(null)`, the first line is required for two cases, and the second line is required for `default` case,\r\n\r\nhttps://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/src/core/vdom/helpers/extract-props.js#L24\r\n\r\nhttps://github.com/vuejs/vue/blob/33e669b22f69a1f9c9147528360fe0bba85534f0/src/core/instance/state.js#L66\r\n\r\n2. there still leave `constructor` which can't be used, it need `delete Vue.prototype.constructor`, and give an alternative way to do what `vm.constructor` (`Sub.prototype.constructor = Sub`) do in current source code.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "when use key in Object.prototype carelessly as prop, it will work wrong way",
        "labels": "feature request",
        "id": 123212
    },
    {
        "body": "### What problem does this feature solve?\r\ngithub missing repository vuejs/vue-ssr-webpack-plugin, i update webpack to version 5 and have error\r\n[vue-server-renderer-webpack-plugin] webpack config `output.libraryTarget` should be \"commonjs2\".\r\n\r\n\r\n### What does the proposed API look like?\r\nin my output.libraryTarget is libraryTarget: 'commonjs2'\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vuejs/vue-ssr-webpack-plugin and webpack 5",
        "labels": "feature request",
        "id": 123213
    },
    {
        "body": "### What problem does this feature solve?\r\nSometimes when moving the code around, the `this.` can end up traveling with it. Or the finger memory will just type in the `this.` where none is required.\r\n\r\nDue to a side-effect, the `this` context is indeed present, but it breaks when it's used deeper in templates (haven't looked exactly, but i think it breaks in v-if's or somewhere around there.\r\n\r\nTo avoid inadvertent breakages, it would be nice if vue could warn about it.\r\n\r\n\r\n### What does the proposed API look like?\r\na `this.` spotted in javascript bits of template would show a warning in the javascript console\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn about `this.` used in templates",
        "labels": "feature request",
        "id": 123214
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently all warnings are suppressed when Vue is built with `process.env.NODE_ENV === production`. However,  many warnings are more severe than a warning - they break functionality. Duplicate keys are a good example. These are hard to filter out in a development environment because the production data could be different. \r\n\r\nI'm currently working on a project where parts of the API and corresponding data are over 15 years old.\r\n\r\nThis means that when a user triggers an error, we're flying blind. No errors are reported. We recently implemented Sentry (which we already ran for Laravel) but again, no errorHandler or warningHandler is triggered.\r\n\r\nWhat I would have liked was a way for us to see the error in production, but not show it to the user in their console. The error and warning handlers are perfect for this purpose, but lack this feature.\r\n\r\nAfter extensively digging through the code and making alterations I've been able to create a production build that outputs warnings and errors. Without activating development features (like devtools, perf traces etc.) - just the warnings. No loss in performance. But it took tweaking both the Vue core files and the `component-compiler-utils`.\r\n\r\nStill, it's possible, and for us, running Vue at scale, with many unknown variables - it's a must have. With these Sentries (or whatever bug tracker someone would choose) it's easy to quickly zero in on production bugs. So I'd love to improve on our solution, push it to the main repo and give back to your awesome framework :-)\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nMy proposal is to add a new `process.env` variable called `DEBUG_LEVEL`, `WARN_LEVEL` or something along those lines. Maybe a config setting. Something simple. With it you can pick your desired verbosity. When set to FULL, it's identical to the development build. When set to HANDLER it will only trigger custom handlers (which would then be where you'd call the Sentry / error tracker). This allows for more granular control over what is triggered, and how it's shown. And then the final setting would be NONE. Which would be identical to the current production build.\r\n\r\nCurrently the `process.env.NODE_ENV` controls both the warnings _and_ the debug tools. My proposal is to separate the two. \r\n\r\nI've already done most of the leg-work. With your thumbs-up I will clean things up, write tests and push it to the dev branch.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add feature to catch errors in a production build for compatibility with external error tracking",
        "labels": "feature request",
        "id": 123215
    },
    {
        "body": "### What problem does this feature solve?\r\nConsider the following component\r\n```vue\r\n<template>\r\n <div>\r\n  {{title}}\r\n </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'awesomeTitle',\r\n  props: {\r\n    title: String\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nWhen using this component it now becomes impossible to set the title html attribute on the div\r\n\r\n```html\r\n<awesomeTitle title=\"Hello world\" title.native=\"Oopsy\"/>\r\n```\r\n\r\nThis would just output\r\n```html\r\n<div title.native=\"Oopsy\">Hello world</div>\r\n```\r\nInstead of \r\n```html\r\n<div title=\"Oopsy\">Hello world</div>\r\n```\r\n\r\nAdding the native modifier for props would permit to avoid collision between html attributes and vue props.\r\nIt already exists for event listeners so it would also be more coherent.\r\n\r\nSometime libraries will forget that html attributes inheritance is a thing and adding some html attributes becomes impossible in those components, it will also make the component more future proof in case new html attributes are added in the spec as you don't have to worry about future collisions anymore\r\n\r\n### What does the proposed API look like?\r\n\r\n```html\r\n<awesomeTitle title=\"Hello world\" title.native=\"Oopsy\"/>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Native modifier for props",
        "labels": "feature request",
        "id": 123216
    },
    {
        "body": "### What problem does this feature solve?\r\nIt allows for proper encapsulation of components. Currently the `class` and `style` props cannot be intercepted or prevented from being injected into the root element of a component. This prevents the ability to refactor components without requiring the calling code to be changed.\r\n\r\nFor example, assume a `Logo` component which is used with a `class` attribute:\r\n\r\n```\r\n<my-logo class=\"app-logo\" />\r\n``` \r\n\r\nWith the template:\r\n\r\n```\r\n<template>\r\n   <img src=\"my-logo.png\" />\r\n</template>\r\n```\r\n\r\nDue to the merging of the `class` attribute the rendered tag will be:\r\n\r\n```\r\n   <img class=\"app-logo\" src=\"my-logo.png\" />\r\n```\r\n\r\nNow, let's assume we want to refactor this component so it lazily loads the image. Our new template is:\r\n\r\n\r\n```\r\n<template>\r\n   <div>\r\n      <my-loader v-if=\"loading\" />\r\n      <img v-else src=\"my-logo.png\" />\r\n   </div>\r\n</template>\r\n```\r\n\r\nNow the `class` attribute is put on the `div`, which may not be appropriate. With good encapsulation, there would be a way to define `class` as a prop to intercept the value being passed in and render it on a different element than the root element, such as:\r\n\r\n```\r\n<template>\r\n   <div> a\r\n      <my-loader v-if=\"loading\" />\r\n      <img v-else :class=\"class\" src=\"my-logo.png\" />\r\n   </div>\r\n</template>\r\n```\r\n\r\nCurrently, attempting to define `class` as a prop displays this warning on the console:\r\n\r\n```\r\n[Vue warn]: \"class\" is a reserved attribute and cannot be used as component prop.\r\n```\r\n\r\nWhile `inheritAttrs` can be set to `false` to disable most props from being passed through to the root element, it does not apply to `class` or `style`. \r\n\r\n### What does the proposed API look like?\r\nIdeally simply allow `class` and `style` as valid Vue props that can be used to intercept the values passed in (that is, they don't pass through to the root element when these are defined as props).\r\n\r\nIf that is not possible for backward-compatibility reasons, add a flag similar to `inheritAttrs` that enables this functionality (e.g. `enableClassAndStyleProps`).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow `class` as valid component prop",
        "labels": "feature request",
        "id": 123217
    },
    {
        "body": "### What problem does this feature solve?\r\nIt would allow us to use numbers which is larger than MAX_SAFE_INTEGER. \r\n\r\n### What does the proposed API look like?\r\nIn HTML, `{{BigInt(\"100\")}}`, `{{100n}}`, `{{2n * 50n}}` or `{{50n + 50n}}` should show \"100\" (it can be just simply string by using .toString()) at frontend.\r\nAt the moment using BigInt in \"Mustache\" syntax just throw error.\r\nSure, backup solution would be using external functions or converted into string and save it to variable. But using BigInt directly in HTML would be nice to have.\r\nMore Information about BigInt -> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow BigInt usage in templates",
        "labels": "feature request",
        "id": 123218
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, if a watch path does not address an existing property, its handler would just silently never execute.\r\nThis may cause bugs due to a typo or refactoring that involves restructuring the app model. Especially if we want to watch something like `'$store.state.user.user.subscriptions'`.\r\n\r\nHere's a JSFiddle to play with: https://jsfiddle.net/WofWca/50feyxn7\r\n\r\n### What does the proposed API look like?\r\nJust throw an error (or warn?) in such case. Like it would happen if we used `this.$watch(() => this.$store.state.user.user.subscriptions, () => { .... });`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Throw error/warn if watch path doesn't resolve to an existing property",
        "labels": "feature request",
        "id": 123219
    },
    {
        "body": "### Version\r\n15.8.3\r\n\r\n### Reproduction link\r\n\r\nhttps://template-explorer.vuejs.org/#%3Cdiv%20id%3D%22app%22%20v-if%3D%22obj%3F.a%22%3E%7B%7B%20msg%20%7D%7D%3C%2Fdiv%3E\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse a v-if that uses optional chaining w/ `@vue/cli version 4.2.0`:\r\n\r\n`v-if=\"test?.length > 0\"`\r\n\r\n### What is expected?\r\nno error is thrown\r\n\r\n### What is actually happening?\r\nfollowing error is thrown:\r\n```\r\n  Errors compiling template:\r\n\r\n  invalid expression: Unexpected token '.' in\r\n\r\n    test?.length > 0\r\n\r\n  Raw expression: v-if=\"test?.length > 0\"\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Optional chaining in templates does not seem to work",
        "labels": "feature request",
        "id": 123220
    },
    {
        "body": "### What problem does this feature solve?\r\n`fill` and `copyWithIn` methods are also mutating methods and has Standard status currently [ECMAScript 2015 Language Specification \u2013 ECMA-262 6th Edition - copywithin](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.copywithin) , but they aren't being intercepted in https://github.com/vuejs/vue/blob/237294d88f65d65dcb790246394f1d37d64856a0/src/core/observer/array.js#L11-L19. Should they join now ? \r\n\r\n### What does the proposed API look like?\r\nnull\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Should `fill` and `copyWithIn` methods be intercepted (observed) now ?",
        "labels": "feature request",
        "id": 123221
    },
    {
        "body": "### What problem does this feature solve?\r\nVue currently does not directly support reverse loops. Generally, it can be solved by using calculated attributes, but if you want to iterate over the objects in slotProps, the calculated attributes are not available (it is also possible that my usage is wrong). I hope there is a way that The method of traversing the array, so that you no longer need to create calculated properties for the array\r\n\r\n### What does the proposed API look like?\r\nConsider adding a property to v: for to specify the traversal direction\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow defining order in v-for",
        "labels": "feature request",
        "id": 123222
    },
    {
        "body": "### What problem does this feature solve?\r\nAn event modifier to support `passive` events was added in #5132.\r\n\r\nIn the last couple of years, browsers have adopted the `passive` behavior by default for `touchstart` and `touchmove` events ([reference](https://www.fxsitecompat.dev/en-CA/docs/2018/touch-event-listeners-are-now-passive-by-default-making-scrolling-faster-on-mobile/)). Thus, to be able to cancel one of these events by calling `e.preventDefault()`, you need to explicitly pass `{ passive: false }` when adding the event listener.\r\n\r\nWith the current API this is impossible to achieve in a Vue template (as far as I can tell). You must manually add and remove the event listener in a component hook like so:\r\n\r\n```js\r\nthis.$refs.someElement.addEventListener('touchstart', this.start, { passive: false });\r\nthis.$refs.someElement.addEventListener('touchmove', this.move, { passive: false });\r\n\r\n// later\r\nthis.$refs.someElement.removeEventListener('touchstart', this.start);\r\nthis.$refs.someElement.removeEventListener('touchmove', this.move);\r\n```\r\n\r\n### What does the proposed API look like?\r\nAn event modifier that does the opposite of the `passive` event modifier, specifying the option as `false` instead of `true`.\r\n\r\nUnsure of the naming - perhaps `nonPassive`, `active`, `assertive`, `intentional`.\r\n\r\n```html\r\n<div\r\n  @touchstart.active=\"start\"\r\n  @touchmove.active=\"move\"\r\n></div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add non-passive event modifier",
        "labels": "feature request",
        "id": 123223
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/dansebcar/b75n0uw6/16/](https://jsfiddle.net/dansebcar/b75n0uw6/16/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Press update to change each item's name to \"b\"\r\n\r\n### What is expected?\r\nThe list re-renders with the new name\r\n\r\n### What is actually happening?\r\nThe list does not change\r\n\r\n---\r\nIf we instead define \"symbol\" as any non-empty string, the expected re-render is observed, so I think the cause is just the parent list (items) is accessed through a symbol.\r\n\r\nNesting the symbol property an additional level (IE in config, rather than directly on data) is necessary to render the list at all; I guess symbols from data aren't directly transferred?\r\n\r\nI noticed in the devtools when I pressed \"refresh\" after mutating the items that I could see the new name, so I assumed something about the way I was setting the property didn't trigger the update, but even Vue.set did not help.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Symbol-keyed properties non-reactive",
        "labels": "feature request",
        "id": 123224
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/vue-template-lcrsy](https://codesandbox.io/s/vue-template-lcrsy)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick \"Move\" button.\r\n\r\n### What is expected?\r\nBoth two lists move with animation.\r\n\r\n### What is actually happening?\r\nOnly second list which is applied duration with css has animation.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "transition-group with duration property doesn't work",
        "labels": "feature request",
        "id": 123225
    },
    {
        "body": "### What problem does this feature solve?\r\nIn an event handler, one can easily mix property modifications and method calls (which is great), as in:\r\n\r\n    <span @click=\" accumulator += fetchNextItem() \">do it</span>\r\n\r\nHowever, if the called method is async, one need to actually wrap this code in an additional method like:\r\n\r\n    <span @click=\" fetchAndAccumulateNextItem() \">do it </span>\r\n    ....\r\n    methods: {\r\n        async fetchAndAccumulateNextItem() {\r\n            this.accumulator += await this.fetchNextItem()\r\n        },\r\n        async fetchNextItem() { .... } /* unmodified */\r\n    }\r\n\r\nThis can be slightly inconvenient if there are many asynchronous methods of which we use the return value.\r\nI think this might become more and more common as people start understanding and using async/await more and more.\r\n\r\nInitial context: I have a very specific use case of a vuejs<->python bridge that makes (among other things) all the python-written method callable from vuejs, but as the call goes through websockets, all methods end up async. https://github.com/twitwi/vuejs-python\r\n\r\n\r\n### What does the proposed API look like?\r\nI'd suggest a \".async\" modifier that would allow for \"await\" in the event handler snippet.\r\nFor the example above, it would be written as:\r\n\r\n    <span @click.async=\" accumulator += await fetchNextItem() \">do it</span>\r\n\r\n(this is probably useful for all types of events, not only click)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Create an \".async\" modifier for event handlers ",
        "labels": "feature request",
        "id": 123226
    },
    {
        "body": "### What problem does this feature solve?\r\nI just spent way too long debugging something really weird until I realized I accidentally wrote `:v-if` instead of `v-if`. \r\n\r\nA warning when wrongly using shorthands like `:` on \"native\" vue attributes could prevent this bad experience easily. \r\n\r\n### What does the proposed API look like?\r\n`:v-if=\"foo\"`\r\n\r\n--> console.warn(\"You specified v-bind:/ v-on: or a corresponding shorthand on a Vue attribute like v-if or similar. Usually this does not make sense.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn if colon shorthand is used on v-if/v-html/etc.",
        "labels": "feature request",
        "id": 123227
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/lee88688/pen/jjPpBm?editors=1010](https://codepen.io/lee88688/pen/jjPpBm?editors=1010)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nas seen in codepen,  \"hello\" component have only one slot. but rendered 2 div tag at last. I have a look at Vue's code [renderSlot ](https://github.com/vuejs/vue/blob/530ca1b2db315fbd0e360807b2031d26665c5d3d/src/core/instance/render-helpers/render-slot.js#L8) which seems renderSlot function would treat the normal slot as scoped slot. why it would be like this?\r\n\r\nthe following code is render function of hello component which is compiled by Vue.compile. _t is renderSlot function. when normal slot and scoped slot in same component the problem above will be present.\r\n```javascript\r\n(function anonymous() {\r\n    with (this) {\r\n        return _c('div', [_t(\"default\"), _v(\" \"), _t(\"default\", null, {\r\n            \"x\": x\r\n        })], 2)\r\n    }\r\n}\r\n)\r\n```\r\n\r\n### What is expected?\r\nrender just one slot.\r\n\r\n### What is actually happening?\r\nrender one slot twice.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Regular slot and scoped slot with same name shouldn't be allowed",
        "labels": "feature request",
        "id": 123228
    },
    {
        "body": "### What problem does this feature solve?\r\nhttps://vuejs.org/v2/guide/components-dynamic-async.html#Handling-Loading-State\r\n\r\n```\r\nconst component = new Promise(function (resolve, reject) {\r\n       reject('error detail');\r\n});\r\n```\r\n\r\n```\r\nconst AsyncComponent = () => ({\r\n  // The component to load (should be a Promise)\r\n  component: component,\r\n  // A component to use while the async component is loading\r\n  loading: LoadingComponent,\r\n  // A component to use if the load fails\r\n  error: ErrorComponent,\r\n  // Delay before showing the loading component. Default: 200ms.\r\n  delay: 200,\r\n  // The error component will be displayed if a timeout is\r\n  // provided and exceeded. Default: Infinity.\r\n  timeout: 3000\r\n})\r\n```\r\n\r\n\r\ni want get error detail in  `AsyncComponent.error` component,  make page friendly\r\n\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nmaybe inject error as props to  `AsyncComponent.error`  ?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "get error detail when use async component factory ",
        "labels": "feature request",
        "id": 123229
    },
    {
        "body": "### What problem does this feature solve?\r\nIn some CSS libraries, i.e. Bootstrap, many components have opacity set to `0` by default, and only have opacity set to `1` when a class is applied.  i.e. Bootstrap's `fade + show` classes:\r\n\r\n```css\r\n.fade:not(.show) { opacity: 0; }\r\n```\r\n\r\nThe current `<transition>` behaviour does not support retaining the `enter-to-class` (as it is immediately removed once the transition completes).\r\n\r\nCurrently one has to use javascript hooks and VM data to add/remove the `show` class, which makes it impossible to make re-usable transition components, as simply adding a class via javascript to the `el` reference (via `el.classList.add/remove('show')`) doesn't guarantee persistence if the content in the default slot manipulates it's own classes, meaning the transition component _must_ be integrated into the custom component, not as a re-usable utility wrapper component).\r\n\r\n### What does the proposed API look like?\r\nIt would be nice to either be able to retain the `enter-to-class` class after the transition completes, or create a new prop that provides this behaviour for a particular class name i.e. `enter-to-retain-class`. The class would be removed on leave.\r\n\r\nThe other option would be to create a new prop `active-class=\"classname\"` which is added one frame after insertion, and removed when the leave transition is to start (basically rolling the `enter-to-class` and `leave-class` into one prop, but retain the class until leave is initiated)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "ability to keep `enter-to` class after show transition completes",
        "labels": "feature request",
        "id": 123230
    },
    {
        "body": "### What problem does this feature solve?\r\nOther frontend frameworks, notably React, make it quick and easy to create many small components in a single file. This pattern promotes code reuse, component composition, and DRYness.\r\n\r\nWhile Vue has this ability, it [feels hacky](https://codewithhugo.com/writing-multiple-vue-components-in-a-single-file/) and sacrifices much of the clarity and usability that .vue files provide.\r\n\r\nThis aim of this proposal is to define a clear and intuitive API for defining multiple components in a single .vue file.\r\n\r\n### What does the proposed API look like?\r\n#### `<component>`\r\nThe `<component>` element is the building block of multi-component .vue files. Used as a top-level tag in .vue files, it's effectively a self-contained \"single-file component\", and it can contain anything that is valid in single-file components as they're currently defined. A .vue file can contain any number of `<component>` elements. They are evaluated from top to bottom\u2014no hoisting. The element accepts two properties that control its availability to other parts of the code:\r\n\r\n- `name` (string, no default)\r\n\r\n  The name of the variable that the component is assigned to. Components defined lower in the file can reference this component by its name. Additionally, if the component is exported (see below), this is the name under which it will be exported.\r\n\r\n- `export` (boolean, default `false`)\r\n\r\n  Whether or not the component is exported. If a component is exported, but doesn't have a `name`, it will be the default export. More than one exported component without a name would create multiple default exports, and is therefore an error. All components must have either `name` or `export` or both.\r\n\r\nBy using the `<component>` element, individual .vue files gain a great deal more flexibility and power. They can compose a single exported component from many small child components, they can export many small components used throughout an application, they can export a main default component and less frequently used named components, and so on.\r\n\r\n#### Examples\r\n\r\n##### An isolated component (`Foo`) only used by another component in the same file:\r\n```vue\r\n<component name=\"Foo\">...</component>\r\n<component export>\r\n    <script>export default { components: { Foo } };</script>\r\n    <template><foo /></template>\r\n</component>\r\n```\r\n\r\n##### Named and default exports:\r\n```vue\r\n<component export name=\"Foo\">...</component>\r\n<component export name=\"Bar\">...</component>\r\n<component export>...</component>\r\n```\r\n\r\nThese would be imported in another file with `import Baz, { Foo, Bar } from './Baz.vue';`\r\n\r\n##### An illegal file due to multiple default exports\r\n```vue\r\n<component export>...</component>\r\n<component export>...</component>\r\n```\r\n\r\n##### An illegal file, because it combines the multi-component format and the single-component format\r\n```vue\r\n<component name=\"Foo\">...</component>\r\n<script>export default { components: { Foo } };</script>\r\n<template><foo /></template>\r\n```\r\n\r\n### Backwards compatibility\r\n\r\nThe addition of the `<component>` element would not be a breaking change\u2014single-file components with no top-level `<component>` tags would continue to function exactly as they do today. As mentioned in the example above, combining the single-component format with the multi-component format is an error.\r\n\r\nA potential point of conflict is the existing `<component>` tag than can be used in templates. I don't foresee this being a problem, since the usage of `<component>` as a top-level tag in .vue files is well defined, but I can't say for sure.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Proposal: Multiple components in .vue files",
        "labels": "feature request",
        "id": 123231
    },
    {
        "body": "### What problem does this feature solve?\r\nIn oder to make https://github.com/maoberlehner/vue-lazy-hydration more useful it would be great if we could prevent the template renderer from automatically injecting async scripts. The way vue-lazy-hydration works is, that it behaves differently on the server than it does on the client. On the server the script (of an async component) is loaded immediately so the template renderer correctly detects that it is used. But on the client the script might not be needed at all but because the template renderer has already injected it it is immediately loaded on page load.\r\n\r\nThere is currently kind of a backlash against loading huge amounts of JavaScript. vue-lazy-hydration can help with removing a lot of unnecessary JavaScript on server side rendered, mostly static sites like blogs and documentation. But currently it can't completely prevent loading all of the unnecessary JavaScript because of the way how template renderer works.\r\n\r\nHere is the relevant line in the code: https://github.com/vuejs/vue/blob/dev/src/server/template-renderer/index.js#L226\r\n\r\n### What does the proposed API look like?\r\nI propose to make this configurable:\r\n\r\n```js\r\nconst renderer = createBundleRenderer(serverBundle, {\r\n  template,\r\n  renderUsedAsyncScripts: false,\r\n});\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[template-renderer] Make it possible to not automatically render used async scripts",
        "labels": "feature request",
        "id": 123232
    },
    {
        "body": "### What problem does this feature solve?\r\nImagine a wrapper component where you need to pass events to a child component. This is possible for non native events using `this.$listeners`, but it strips out native events. It would be good if we had something like `this.$nativeListeners` so that we can pass native events down to child components as well.\r\n\r\n In the meantime, Is there a workaround to pass events to child components?\r\n\r\n### What does the proposed API look like?\r\n`this.$nativeListeners` \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Equivalent for this.$listeners for native events?",
        "labels": "feature request",
        "id": 123233
    },
    {
        "body": "### What problem does this feature solve?\r\nwhen i use vue-template-compiler parseComponent a vue file, and use  @babel/parser @babel/traverse @babel/generator modify some code at vueTemplateComplier AST.script content \r\nBut can not find a api to auto generate file from  vueTemplateComplier AST it to origin file.\r\n\r\n\r\n### What does the proposed API look like?\r\nconst fileContent = compiler.generateComponent(<vueTemplateComplier AST>, {\r\n        pad: 'space'\r\n});\r\n// fileContent is same as *.vue file content\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-template-compiler lacks a stringify API",
        "labels": "feature request",
        "id": 123234
    },
    {
        "body": "### What problem does this feature solve?\r\nTwo components with scoped slots that provide events to a child component. If they are used together some listeners may be overwritten if not normalised first. \r\n\r\n```html\r\n<v-menu>\r\n  <template #activator=\"{ on: menu }\">\r\n    <v-tooltip bottom>\r\n      <template #activator=\"{ on: tooltip }\">\r\n        <v-btn v-on=\"{ ...tooltip, ...menu }\"> <!-- If both have a click event, only the menu will work -->\r\n          Dropdown w/ Tooltip\r\n        </v-btn>\r\n      </template>\r\n      <span>Im A ToolTip</span>\r\n    </v-tooltip>\r\n  </template>\r\n  <v-list>[...]</v-list>\r\n</v-menu>\r\n```\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<component v-on=\"[{ click: foo }, { click: bar }]\">\r\n```\r\nEquivalent to:\r\n```html\r\n<component v-on=\"{ click: [foo, bar] }\">\r\n```\r\n\r\nIn the first example:\r\n```html\r\n<v-menu>\r\n  <template #activator=\"{ on: menu }\">\r\n    <v-tooltip bottom>\r\n      <template #activator=\"{ on: tooltip }\">\r\n        <v-btn v-on=\"[tooltip, menu]\">\r\n          Dropdown w/ Tooltip\r\n        </v-btn>\r\n      </template>\r\n      <span>Im A ToolTip</span>\r\n    </v-tooltip>\r\n  </template>\r\n  <v-list>[...]</v-list>\r\n</v-menu>\r\n```\r\n\r\nCurrently this throws `[Vue warn]: v-on without argument expects an Object value`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-on listeners array",
        "labels": "feature request",
        "id": 123235
    },
    {
        "body": "### What problem does this feature solve?\r\nAllow the usage of arrow functions  in copmuted setters\r\nFrom #7688 \r\n\r\n```js\r\ncomputed: {\r\n  value: {\r\n    get: vm => vm.someValue,\r\n    set: (val, vm) => vm.someValue = val\r\n  }\r\n}\r\n```\r\n\r\n### What does the proposed API look like?\r\n```js\r\ncomputed: {\r\n  value: {\r\n    get: vm => vm.someValue,\r\n    set (val, vm) {\r\n      this === vm // true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Pass component instance as second argument in computed setters",
        "labels": "feature request",
        "id": 123236
    },
    {
        "body": "### What problem does this feature solve?\r\nThis would allow one to have state as an array of values without a need for intermediary wrapper plain objects.\r\n\r\nSee example: https://jsfiddle.net/9L5ymbv7/\r\n\r\n### What does the proposed API look like?\r\nNo changes to the API, just support that `Vue.observable` would work on an array.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Make Vue.observable work directly on arrays",
        "labels": "feature request",
        "id": 123237
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, if a custom validator fails, we get a console error log saying `Invalid prop: custom validator check failed for prop 'email'` which is not helpful if you're using a third-party component. The only way to find out what failed is to jump into the source code of the component and try to understand what does this custom validator do. If the custom validator can provide a custom message that immensely changes developer experience e.g. Instead of `Invalid prop: custom validator check failed for prop 'email'`, it can say, `Invalid prop: the prop 'email' should be a valid GMail address.`\r\n\r\n### What does the proposed API look like?\r\nNo change in API signature only behavior of `validator` function. If a validator function throws an error, use it as a custom message for prop validation. Also, allow `{{name}}` interpolation in error message. So the `email` can be defined as:\r\n\r\n``` js\r\n...\r\n  props: {\r\n    email: {\r\n      validator(value) {\r\n        if (!value.endsWith('@gmail.com')) throw new Error('the prop '{{name}}' should be a valid GMail address.')\r\n        return true\r\n     }\r\n   }\r\n...\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Custom error message from prop validator",
        "labels": "feature request",
        "id": 123238
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nThis issue is related to: https://github.com/vuejs/vue-router/issues/2606\r\nProviding a way to destroy the app or mark the SSR request as complete (maybe on `$ssrContext`) is a potential fix to this problem, though maybe not the best one.\r\n\r\nTo recap:\r\nA memory leak happens when the `router-view` is programmed to appear conditionally, and the component matching the view has a `beforeRouteEnter` guard and a callback is passed to it's `next(...)` method (e.g. `next(vm => {})`).\r\n\r\nThis will cause `vue-router` to poll every 16ms until the `router-view` materializes.\r\n\r\nIn a typical SSR application an instance of the app is created per request, which means the `router-view` will never appear, causing infinitely recursing poll methods.\r\n\r\n### What does the proposed API look like?\r\nA potential fix to this would be to detect when the app is destroyed in `vue-router`'s `poll` method, and allow the user to destroy the app that they created in `entry-server.js`.\r\n\r\nA simplified example:\r\n```javascript\r\nexport default context => {\r\n  return new Promise((resolve, reject) => {\r\n    const { app, router } = createApp(context)\r\n\r\n    const { url } = context\r\n\r\n    router.push(url)\r\n\r\n    router.onReady(() => {\r\n      resolve(app)\r\n    }, reject)\r\n  }).then(destroyApp)\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide way to destroy app in SSR",
        "labels": "feature request",
        "id": 123239
    },
    {
        "body": "### What problem does this feature solve?\r\nI use :key and keep-alive tag to display chats. And in order to maintain the position of the scroll when switching between chat rooms, I need to save the scrollTop when the hook is deactivated and put it on the element when the hook is activated. But the deactivated hook is already called when the element has been removed from the DOM, so I needed a new hook - beforeDeactivated.\r\n\r\nSeriously, this hook is needed just like the others before* hooks.\r\n\r\n### What does the proposed API look like?\r\nHere, I think, everything is clear. Simple hook.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add beforeDeactivated hook",
        "labels": "feature request",
        "id": 123240
    },
    {
        "body": "### What problem does this feature solve?\r\nAfter vue 2.6 was released and serverPrefetch hook was introduces I lost a possibility to update `httpCode` during SSR if there was a data fetching failure.\r\n\r\n### What does the proposed API look like?\r\nProvide access to `context` from the `serverPrefetch` hook.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Ability to access context from serverPrefetch",
        "labels": "feature request",
        "id": 123241
    },
    {
        "body": "### What problem does this feature solve?\r\nUnder high-load, some pages are rendered to slow. The connection is aborted by the remote side. It would be nice to be able to cancel pages rendering in this case.\r\n\r\n### What does the proposed API look like?\r\nconst rendererId = renderer.renderToString(...);\r\n\r\nrendererId.cancel();\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Ability to cancel rendering",
        "labels": "feature request",
        "id": 123242
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/r71q8py7mp](https://codesandbox.io/s/r71q8py7mp)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen https://codesandbox.io/s/r71q8py7mp and read console log\r\n\r\n### What is expected?\r\nDon't execute following code from `genInlineTemplate` when `el.children.length !== 1 || ast.type !== 1` is true because `ast` is undefined.\r\n\r\n```\r\nfunction genInlineTemplate (el, state) {\r\n    var ast = el.children[0];\r\n    if (el.children.length !== 1 || ast.type !== 1) {\r\n      state.warn(\r\n        'Inline-template components must have exactly one child element.',\r\n        { start: el.start }\r\n      );\r\n    }\r\n    if (ast.type === 1) {\r\n      var inlineRenderFns = generate(ast, state.options);\r\n      return (\"inlineTemplate:{render:function(){\"   (inlineRenderFns.render)   \"},staticRenderFns:[\"   (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\"   code   \"}\"); }).join(','))   \"]}\")\r\n    }\r\n  }\r\n```\r\n\r\n### What is actually happening?\r\nExecuting\r\n\r\n```\r\n var inlineRenderFns = generate(ast, state.options);\r\n      return (\"inlineTemplate:{render:function(){\"   (inlineRenderFns.render)   \"},staticRenderFns:[\"   (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\"   code   \"}\"); }).join(','))   \"]}\")\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn when using inline-template attribute but no children",
        "labels": "feature request",
        "id": 123243
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/wx91uLft/](https://jsfiddle.net/wx91uLft/)\r\nother: https://jsfiddle.net/ae82rfnv/\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Show/hide elements with the  \"Toggle\" button.\r\n- Show/hide elements with the  \"Toggle Ticked\" button. Shows a workaround.\r\n\r\n### What is expected?\r\nAll transitions should be triggered on leave, even for nested child elements.\r\n\r\n### What is actually happening?\r\nTransition classes don't get applied to nested child elements, when conditions for leaving transitions occur on the same tick.\r\n\r\nWorkaround: Delaying the parent transitions by one tick fixes the problem.\r\n\r\n---\r\nThis has been reported, but got closed due to the sample code did not use `appear` on the `<transition>` elements. (See issues [#7643](https://github.com/vuejs/vue/issues/7643) and [#9243](https://github.com/vuejs/vue/issues/9243))\r\n\r\nMy example is more detailed and also provides a workaround.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow nested transition to trigger upon removal",
        "labels": "feature request",
        "id": 123244
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, and as far as I know, if we want to propagate an event fired by a child component to the parent (the child's grandparent) we need to $emit the event again, and we need to pass all the arguments one more time. This can become a problem, for example, if the event has a variable number of arguments because we need to specify them manually or pass the whole array as a new argument.\r\n\r\nThe current way would be something like\r\n```\r\n@blur=\"$emit('blur')\"\r\n@create=\"$emit('create', arguments[0])\"\r\n@input=\"$emit('input', arguments[0], arguments[1])\"\r\n```\r\n\r\n### What does the proposed API look like?\r\n```\r\n@blur.propagate\r\n@create.propagate\r\n@input.propagate\r\n```\r\nAnd if we want to both handle the event and propagate it to the parent, we would use\r\n```\r\n@input.propagate=\"someFunction\"\r\n```\r\n----\r\nEDIT: Maybe since .propagate may be confused with the function .stopPropagation(), a better term could be simply .emit\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Modifier to propagate/forward events to parent",
        "labels": "feature request",
        "id": 123245
    },
    {
        "body": "### What problem does this feature solve?\r\nThe guide for Server-Side rendering creates 2 webpack builds, one for the client and one for the server. Then you create a file that imports the outputs from those 2 builds and returns the responses to whatever framework you use (e.g. express). Let's call this file the server handler.\r\nThe issue with this approach is that you would need a third webpack build to process the server handler through webpack as well. You might want to do that for a few different reasons:\r\n 1. To have the same flow for all your files\r\n 2. Because you use typescript/babel/minification or other transformations\r\n 3. To use the same style of imports (i.e. ES modules)\r\n\r\n### What does the proposed API look like?\r\nI can think of a few possible solutions:\r\n\r\n#### 1. Define the name of the server handler to emit\r\n\r\nThere could be a configuration option for `VueSSRServerPlugin` that defines one additional entry to emit in the Webpack configuration. This would mean that there could be at most 2 entries, one is used for creating the JSON bundle, the other one to emit the server handler\r\n\r\n```javascript\r\n// webpack.config.js\r\nconst VueSSRServerPlugin = require('vue-server-renderer/server-plugin')\r\n\r\nmodule.exports = {\r\n  // Point entry to your app's server entry file\r\n  entry: {\r\n     main: '/path/to/server-entry.js',\r\n     handler: '/path/to/server-handler.js'\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'client-manifest': '/path/to/dist/client/vue-ssr-client-manifest.json'\r\n    }\r\n  },\r\n  plugins: [\r\n    new VueSSRServerPlugin({ serverHandler: 'handler' })\r\n  ]\r\n}\r\n```\r\n\r\nThe handler would look something like this:\r\n```javascript\r\n// server-handler.js\r\nimport clientManifest from 'client-manifest';\r\n// This alias could be created by the VueSSRServerPlugin itself\r\nimport serverBundle from 'server-bundle';\r\nimport { createBundleRenderer } from 'vue-server-renderer';\r\n\r\nconst template = `[...]`;\r\n\r\nconst renderer = createBundleRenderer(serverBundle, {\r\n  template,\r\n  clientManifest,\r\n  runInNewContext: false\r\n});\r\n\r\nexport function handler(event, context) {\r\n  // use the renderer in here\r\n}\r\n```\r\n\r\nThe upside of this approach is that it should be relatively easy to accomplish this.\r\nAnother upside is that this would be backwards compatible.\r\nThe downside is that there would be quite a bit of configuration necessary to make it look nice \u2014 to avoid importing build outputs directly in code, which would add a dependency on our webpack configuration in the code.\r\n\r\n#### 2. Provide an alias that resolves to the renderer instead of emitting a JSON bundle\r\n\r\nAnother possible approach would be to change completely the way the VueSSRServerPlugin works to reduce the additional webpack configuration necessary. Here's how the webpack configuration would look like:\r\n\r\n```javascript\r\n// webpack.config.js\r\nconst VueSSRServerPlugin = require('vue-server-renderer/server-plugin')\r\n\r\nmodule.exports = {\r\n  // Point entry to your app's server entry file\r\n  entry: '/path/to/server-handler.js',\r\n  plugins: [\r\n    new VueSSRServerPlugin({\r\n      clientManifest: '/path/to/dist/client/vue-ssr-client-manifest.json',\r\n      serverEntry: '/path/to/server-entry.js',\r\n      template: '/path/to/template.html'\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\nAnd here is how the server handler would look like:\r\n\r\n```javascript\r\n// alias defined by the plugin, returns the renderer\r\nimport renderer from 'vue-ssr-server-renderer'\r\n\r\nexport function handler(event, context) {\r\n  // use renderer here\r\n}\r\n```\r\n\r\nThe clear upside is the reduction of the boilerplate.\r\nThe first big downside is that this would not be backwards compatible. It could be implemented as a new, different plugin.\r\nThe second downside is that there might be other use cases I haven't considered. `createBundleRenderer` takes other arguments as well, and you might not want to instantiate it at the top level.\r\nA smaller downside is that some pieces are connected in webpack rather than in the code, making it unclear where the template is referenced from.\r\n\r\n#### 3. Use a loader to transform the server entry\r\n\r\nThis would be similar to the first proposal, but it would change the way `createBundleRenderer` works.\r\n\r\nStarting from the server handler this time, here is how the usage would look like:\r\n\r\n```javascript\r\nimport App from '/path/to/server-entry.js'\r\nimport clientManifest from 'client-manifest';\r\n// This function has the client manifest already pulled in by the plugin\r\nimport { createAppRenderer } from 'vue-server-renderer';\r\n\r\nconst template = `[...]`;\r\n\r\nconst renderer = createAppRenderer(app, {\r\n  clientManifest,\r\n  template,\r\n  runInNewContext: false\r\n});\r\n\r\nexport function handler(event, context) {\r\n  // use renderer here\r\n}\r\n```\r\n\r\nAnd the webpack configuration would be something like this:\r\n\r\n```javascript\r\n// webpack.config.js\r\n\r\nmodule.exports = {\r\n  // Point entry to your app's server entry file\r\n  entry: '/path/to/server-handler.js',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /entry-server\\.js$/,\r\n        loader: 'vue-ssr-loader'\r\n      }\r\n    ]\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'client-manifest': '/path/to/dist/client/vue-ssr-client-manifest.json'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis approach would have the upside of not requiring magic to happen on the webpack entries, making it possible to have multiple entrypoints.\r\nThe second upside would be to just configure a loader where appropriate, instead of adding a plugin.\r\nThe first downside is that we still have to include the client manifest from the build.\r\nThe second downside is that is could not be feasible with a webpack loader.\r\n\r\n#### So which one?\r\nI believe this problem needs a deeper reflection on the implications for all possible use cases, so someone with a better understanding of the usages of this plugin should trace the path to follow. Other ideas could be possible that would in the future also lead to simpler usages that hide the complexity from the users.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[SSR] Add option to output the server entry through webpack",
        "labels": "feature request",
        "id": 123246
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codepen.io/AmrIKhudair/pen/NevxML](https://codepen.io/AmrIKhudair/pen/NevxML)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1- create a class extending Array and add a custom method\r\n2- instantiate a new instance of the class and add it to data\r\n3- try to call the method on the instance in the template\r\n\r\n### What is expected?\r\nThe method is successfully executed\r\n\r\n### What is actually happening?\r\nError not a function\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support Array subclassing",
        "labels": "feature request",
        "id": 123247
    },
    {
        "body": "### What problem does this feature solve?\r\nIt suppose better error handling for prop types errors.\r\nSteps to reproduce error:\r\n1. Set prop type equals to string ('String', not String):\r\n```javascript\r\nexampleProp: {\r\n  type: 'String',\r\n}\r\n```\r\n\r\n2. Run project and get an error:\r\n```javascript\r\n[Vue warn]: Error in nextTick: \"TypeError: Right-hand side of 'instanceof' is not an object\"\r\nTypeError: Right-hand side of 'instanceof' is not an object\r\n    at assertType (vue.esm.js:1668)\r\n    at assertProp (vue.esm.js:1626)\r\n    at validateProp (vue.esm.js:1560)\r\n    at loop (vue.esm.js:3334)\r\n    at initProps (vue.esm.js:3367)\r\n    at initState (vue.esm.js:3308)\r\n    at VueComponent.Vue._init (vue.esm.js:4628)\r\n    at new VueComponent (vue.esm.js:4798)\r\n    at createComponentInstanceForVnode (vue.esm.js:4310)\r\n    at init (vue.esm.js:4131)\r\n```\r\n\r\nError log is not evident and it is difficult to understand the source of problem (first time with this error anyway).\r\n\r\n### What does the proposed API look like?\r\nError message in this case may look like:\r\n```javascript\r\n\"Incorrect prop type 'exampleProp' at:123 (where 123 is example string position in the code)\"\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn when the type of a prop isn't a constructor ",
        "labels": "feature request",
        "id": 123248
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, the [globalHandleError](https://github.com/nialna/vue/blob/dev/src/core/util/error.js#L27) function will intercept all errors thrown in components and log them. It can also pass them to an external error handler, but that external error handler won't be able to throw it because the call to `config.errorHandler` is wrapped in a try catch.\r\n\r\nIn vanilla JS, when an unhandled error happens in your code, the debugger can break immediately, giving you access to the stack and context. When using VueJS, we have no way of doing this because the errors are always handled by Vue.\r\n\r\n### What does the proposed API look like?\r\nThe simplest way I can think of is to add a new `config` option, for example:\r\n\r\n```js\r\nVue.config.throwUnhandledErrors = true;\r\n```\r\n\r\nThen in `globalHandleError`, we could check for that flag and throw errors:\r\n\r\n```js\r\nfunction globalHandleError (err, vm, info) {\r\n  if (config.throwUnhandledErrors) {\r\n    throw(err);\r\n  } else if (config.errorHandler) {\r\n    try {\r\n      return config.errorHandler.call(null, err, vm, info)\r\n    } catch (e) {\r\n      logError(e, null, 'config.errorHandler')\r\n    }\r\n  }\r\n  logError(err, vm, info)\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add an option to throw global errors, making it possible for debuggers to automatically break on error.",
        "labels": "feature request",
        "id": 123249
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently we have an boolean option for `vue-template-compiler`: `preserveWhitespace`. It either removes all whitespace-only text nodes, or leave them untouched. There were already earlier questions about either behavior: #6200, #7701, #9021, #9127. I think the current behavior is kind of oversimplified to cover actual usage.\r\n\r\nWhen we write a template we tend to leverage line breaks and indents to make it more readable, like:\r\n\r\n```html\r\n<div class=\"item\">\r\n  <div class=\"aside\">Aside</div>\r\n  <div class=\"main\">Main</div>\r\n</div>\r\n```\r\n\r\nAnd if we choose to layout this component with inline formatting context, sometimes we may not want to precisely control the margin between the inner parts with CSS, instead of using the size of a whitespace (which is related to those `font-*` styles). For similar cases we don't want these whitespace-only text nodes. This leads to `preserveWhitespace: false` (and it even became the default behavior for Vue CLI 3: https://github.com/vuejs/vue-cli/commit/1864cef09e186cdf094fca876f8638a8ba1b4adb).\r\n\r\nBut when we craft some document/article-like content, this behavior becomes annoying. With `preserveWhitespace: false`, the following template:\r\n\r\n```html\r\n<p>\r\n  Welcome to <b>Vue.js</b> <i>world</i>.\r\n  Have fun!\r\n</p>\r\n```\r\n\r\nWill generate:\r\n\r\n```html\r\n<p>\r\n  Welcome to <b>Vue.js</b><i>world</i>.\r\n  Have fun!\r\n</p>\r\n```\r\n\r\nWhich looks like:\r\n\r\n> Welcome to <b>Vue.js</b><i>world</i>. Have fun!\r\n\r\nAnd this is clearly not desired.\r\n\r\n### What does the proposed API look like?\r\nIn short, I suggest we offer a new compiler option, to apply the strategy React uses to handles whitespaces for JSX ([source](https://reactjs.org/docs/jsx-in-depth.html#string-literals-1)):\r\n\r\n> JSX removes whitespace at the beginning and ending of a line. It also removes blank lines. New lines adjacent to tags are removed; new lines that occur in the middle of string literals are condensed into a single space.\r\n\r\nFor examples:\r\n\r\n```html\r\n<p>\r\n  Welcome to <b>Vue.js</b> <i>world</i>.\r\n  Have fun!\r\n</p>\r\n```\r\n\r\nThe whitespaces between `<p>` and `Welcome` are removed but the one between `</b>` and `<i>` and the one between `.` and `Have` are preserved thus giving us:\r\n\r\n```html\r\n<p>Welcome to <b>Vue.js</b> <i>world</i>. Have fun!</p>\r\n```\r\n\r\nThis seem to be much more reasonable IMO. And in this mode users will have more flexibility to better serve their different purposes.\r\n\r\nIn general, the proposal is:\r\n\r\n1. Keep `preserveWhitespace` but mark it as deprecated.\r\n2. Offer a new option to specify whether/how to remove whitespaces: `removeWhitespace: 'with-line-break' | 'any' | 'none'`.\r\n3. Ignore `preserveWhitespace` if `removeWhitespace` is specified.\r\n\r\n(Still need more suggestions on specific API.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Handle whitespaces in templates more wisely",
        "labels": "feature request",
        "id": 123250
    },
    {
        "body": "### What problem does this feature solve?\r\n**Use case:**\r\n\r\nI'm developing a Server-Side Renderer for Vue (which works with Express, Koa & etc. Will increase migration to Vue). For the SSR's head management to work, it needs a stable API to render `VNode`s to text.\r\n\r\n**The way my Vue SSR package will function:**\r\n`master.vue`\r\n```html\r\n<template>\r\n    <div id=\"app\">\r\n        <slot name=\"content\"></slot>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    created: function(){\r\n        if(this.$isServer){\r\n            this.$ssrContext.head = \"HEAD HERE\" // Something needed like:  renderVNodesToString(this.$slots.head)\r\n        }\r\n    },\r\n}\r\n</script>\r\n```\r\n\r\n`home.vue`\r\n```html\r\n<template>\r\n    <master>\r\n        <template slot=\"content\">\r\n            Hello World\r\n        </template>\r\n        <template slot=\"head\">\r\n            <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\r\n            <title>Hello</title>\r\n        </template>\r\n    </master>\r\n</template>\r\n<script>\r\nimport master from \"layouts/master.vue\"\r\n\r\nexport default {\r\n    components: {\r\n        master\r\n    }\r\n}\r\n</script>\r\n```\r\n\r\nMy goal is getting `home.vue`'s `head` slot rendered into a string and injecting it into the `this.$ssrContext` so it can be read and injected on the server-side\r\n\r\nin `master.vue`, I can access `this.$slots.head` with no issue, and it contains the correct `VNode`s\r\n\r\nmy question is, how can I render them into a string? a way to basically do:\r\n```js\r\nthis.$ssrContext.head = renderVNodesToString(this.$slots.head)\r\n```\r\n\r\nFrom my research, I have been unable to find an easy way to do this.\r\n\r\n---- \r\n\r\n**To understand how the renderer works**\r\n```js\r\nconst renderer = createBundleRenderer(bundle.server, {\r\n    runInNewContext: false,\r\n    inject: false,\r\n    template: `<!DOCTYPE html>\r\n        <html>\r\n            <head>\r\n                {{{ head }}}\r\n                {{{ renderResourceHints() }}}\r\n                {{{ renderStyles() }}}\r\n            </head>\r\n            <body>\r\n                <!--vue-ssr-outlet-->\r\n                <script>${ bundle.client }</script>\r\n            </body>\r\n       </html>`\r\n})\r\n```\r\nThis is the code for the serverbundlerenderer\r\n\r\n### What does the proposed API look like?\r\n```js\r\n/**\r\n* @param {VNode}\r\n* \r\n* @returns {string} - VNode rendered to a html string\r\n*/\r\nVue.renderVNode = function(VNode){\r\n    //...\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[ssr] Add Vue function to render VNode to html string",
        "labels": "feature request",
        "id": 123251
    },
    {
        "body": "### What problem does this feature solve?\r\nIf you've decided to go with `v-bind` and `v-on` shorthands then `v-on=\"$listeners\"` looks out of place and creates a mixture of syntax. Shorthands for `v-on` and `v-bind` would solve that issue.\r\n\r\n### What does the proposed API look like?\r\n`v-on=\"$listeners\"` should be aliased like this: `@=\"$listeners\"`\r\n\r\n`v-bind=\"$attrs\"` should be aliased like this: `:=\"$attrs\"`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Alias for v-on and v-bind",
        "labels": "feature request",
        "id": 123252
    },
    {
        "body": "### What problem does this feature solve?\r\nIf one wants to define custom event handlers (like one on `document`) which interact with Vue instances or Vue reactive state, one should wrap it with `withMacroTask` to assure that any changes to the reactive state and flushing of the queue happens in the macro task and not micro task. Otherwise it can be possible that Vue starts changing DOM as a consequence of the reactive change even before the event propagates along original DOM tree.\r\n\r\nThe problem is that `withMacroTask` cannot be accessed currently.\r\n\r\n### What does the proposed API look like?\r\n`withMacroTask` could simply be exposed in a way that it can be imported. Or maybe made available at `Vue.withMacroTask`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Expose withMacroTask",
        "labels": "feature request",
        "id": 123253
    },
    {
        "body": "### What problem does this feature solve?\r\nFor this demo:\r\n\r\n[https://jsfiddle.net/2os9jken/](https://jsfiddle.net/2os9jken/)\r\n\r\nopening the console and running it throws the `Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead.` error for the `span`, but it should also throw it for the `slot`, as it has the exact same issue for its `name` attribute.\r\n\r\n### What does the proposed API look like?\r\nN/A\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Throw error when using interpolation instead of JS expression for slot names",
        "labels": "feature request",
        "id": 123254
    },
    {
        "body": "### What problem does this feature solve?\r\nBecause we have to have lots of ads on our site we cannot hydrate our SSR'd page with VUE completely as the ads would break VUE. Also most of our site ist static and it would be stupid to ship our entire app for only some parts of our page being interactive.\r\n\r\nInstead we **partially hydrate** the page (with our own plugin https://github.com/spring-media/vue-plugin-moisturizer). For this we need to map SSR'd HTML to the corresponding VUE components, so we need to put some `data-attribute` in the HTML match them. \r\n\r\nWe use the `name` setting of a component for this,  so if I have component like this:\r\n\r\n```js\r\n{\r\n  name: 'my-component'\r\n}\r\n```\r\n\r\nthe html would read\r\n\r\n```html\r\n<div data-hydration-name=\"my-component\">...</div>\r\n```\r\n\r\n\r\nbut this does not work for 3rd party components. Anything we get without that ID we cannot hydrate. It would be great if we could find the component from a component's instance / vnode.\r\n\r\nThere is a `cid` property, but this is not the same on the server and on the client,  because we have a different number and oder of components on the client and server so we cannot use this.\r\n\r\nThere is a similiar issue for this here: https://github.com/vuejs/vue/issues/7213 but one of your members suggested to create a new issue because the old one would just not show up under your pile of issues.\r\n\r\n### What does the proposed API look like?\r\n```js\r\nthis.$vnode.cuuid // hash based on the filename and path\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vnode reference to original component (reopened)",
        "labels": "feature request",
        "id": 123255
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen Vue is mounting, the function `isUnknownElement` is called and checks, among others, whether the element tag is in the list of `ignoredElements`. In the context of an app that uses multiple web components, we don't want to manually add every new component's tag to the `ignoredElements` list. Maintaining that list could quickly become a headache. If the  `isUnknownElement` also checks the custom elements registry, it could figure out that the element in question is not necessarily unknown.\r\n\r\n### What does the proposed API look like?\r\nThe API would stay the same, but on top of checking for `config.ignoredElements` in the function `isUnknownElement`, we would also check if `window.customElements.get(vnode.tag)` is defined or not. If it is defined, then we return false.\r\n\r\nI am happy to submit a pull request, I just wanted to discuss this first to make sure there aren't design constraints to adding something like this.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Check if tag is already in the window.customElements registry on top of checking config ignoredElements",
        "labels": "feature request",
        "id": 123256
    },
    {
        "body": "### What problem does this feature solve?\r\nBeing able to decide at runtime if a component should be cached on the server.\r\n\r\nFor example, if I have a re-usable ImageViewer component that I only want cached in certain use cases.\r\n\r\n```javascript\r\nimport { get } from 'lodash-es';\r\nexport default {\r\n    name: 'ImageViewer',\r\n    serverCacheKey: (props) => get(props, 'images.0.id'),\r\n    props: {\r\n        images: {\r\n            type: Array,\r\n            required: true\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nIt would be preferred to be able to return undefined from the serverCacheKey function and know that the component won't be cached.  Currently, it would be cached by its name and would collide with any other uses of the component that also returned undefined.\r\n\r\n### What does the proposed API look like?\r\nThe same API for the existing serverCacheKey that takes the props object, but allow for returning undefined to indicate, to skip looking for the component in the server renderer cache (even if the component has a name).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Opt-out of serverCacheKey",
        "labels": "feature request",
        "id": 123257
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen assigning values to a CSS property via style binding like\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width}\"></div>\r\n````\r\n\r\nor using the shorthand syntax...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width}\"></div>\r\n````\r\n\r\nthis will actually not gonna work because we need to explicitly set the `unit`:\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width + 'px'}\"></div>\r\n````\r\n\r\nor via interpolation...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : `${width}px`}\"></div>\r\n````\r\n\r\nNow our code becomes more verbose. Combining all the number of occurrences of such binding, it's becoming ridiculous.\r\n\r\nI'm not sure if currently there is an elegant solution for this, but if there is. It would be also good if it is referenced in in the [docs](https://vuejs.org/v2/guide/class-and-style.html).\r\n\r\nIn React, this is the default behavior. It will add 'px' if the `unit` is not specified.\r\n\r\n### What does the proposed API look like?\r\nFor common css properties like `width` and `height`, having vue implicitly assign 'px' to the value it would definitely make our code much more cleaner.\r\n\r\nThis code...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width}\"></div>\r\n````\r\n\r\nwill be interpreted as:\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width + 'px'}\"></div>\r\n````\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Style binding: implicitly assign 'px' as the default unit for numeric values for certain css properties",
        "labels": "feature request",
        "id": 123258
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nIt would be nice to be able to check if a component responds to a given event or not. We can already do so for listeners declared in the template through the `vm.$listeners` object, but the ones registered with `vm.$on()` / `vm.$off()` don't show up in this object, they are stored in the private `vm._events` object.\r\n\r\nI would like to suggest to either add a function that checks if a component responds to a given event, or to make `vm._events` public, and call it `vm.$events`\r\n\r\n\r\n### What does the proposed API look like?\r\n\r\nA method called `vm.$responds(event)` could be considered, returning `true` if a component responds to a given event, `false` otherwise. If an array of strings is passed to this method instead of a string, it could return `true` if the component responds to some of these events.\r\n\r\nAlternatively, the interface could simply be `vm.$events`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add a way to check if a component responds to an event, or make vm._events public",
        "labels": "feature request",
        "id": 123259
    },
    {
        "body": "### What problem does this feature solve?\r\n- Allows to write validation logic depending on multiple props.\r\n- Allows to provide custom validation messages.\r\n\r\n### What does the proposed API look like?\r\n``` ts\r\ntype Validator = (value: any, key: string, props: Object, warn: (message: string) => void) => boolean\r\n```\r\n\r\nExample:\r\n\r\n``` js\r\nexport default {\r\n  props: {\r\n    foo: {\r\n      validator(value, key, props, warn) {\r\n        if ('bar' in props && 'foo' in props) warn('Foo and Bar cannot be used together.')\r\n        return true\r\n      }\r\n....\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Improve prop validator API",
        "labels": "feature request",
        "id": 123260
    },
    {
        "body": "### What problem does this feature solve?\r\nAccess to `process.env` is a slow, system-bound call.\r\n\r\nAfter react restructured their project to cache access to `process.env`, they had a 2.4x - 3.8x performance improvement for server-side rendering,\r\n\r\nhttps://github.com/facebook/react/issues/812\r\n\r\nThis should also be done for vue, vue-server-renderer, vuex ... anything that accesses `process.env`.\r\n\r\n### What does the proposed API look like?\r\nAn easy strategy might be to replace references to `process.env.NODE_ENV` with a reference to a singleton that checks process.env.NODE_ENV.\r\n\r\n```\r\n// foo.js\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // do stuff\r\n}\r\n```\r\n\r\nbecomes\r\n\r\n```\r\n// isDevEnv.js\r\nexport default process.env.NODE_ENV !== 'production';\r\n\r\n// foo.js\r\nimport isDevEnv from './isDevEnv';\r\n\r\nif (isDevEnv) {\r\n  // do stuff\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Cache access to process.env",
        "labels": "feature request",
        "id": 123261
    },
    {
        "body": "### What problem does this feature solve?\r\nThe Vue runtime allows pretty much anything to be put into the children array, and simply strips away `boolean | null | undefined`: https://github.com/vuejs/vue/blob/48acf71a01e5665f72696d44aa5a8d8f1d137172/src/core/vdom/helpers/normalize-children.js#L48\r\n\r\n[The types](https://github.com/vuejs/vue/blob/48acf71a01e5665f72696d44aa5a8d8f1d137172/types/vnode.d.ts#L6) on the other hand only allow `string`, `VNode`, or another nested array, which means we can't use short-circuit expressions to conditionally render things. \r\n\r\n```ts\r\n// Doesn't work - `false` is not allowed\r\nreturn h('div', data, [\r\n  this.enableSomething && h(Something)\r\n])\r\n\r\n// We have to do\r\nconst children: VNodeChildrenArrayContents = []\r\nthis.enableSomething && children.push(h(Something))\r\nreturn h('div', data, children)\r\n\r\n// Or\r\nreturn h('div', data, [\r\n  this.enableSomething ? h(Something) : []\r\n])\r\n```\r\n\r\n### What does the proposed API look like?\r\nAdd a separate type for `createElement` that also allows `boolean | null | undefined`, that way `vnode.children` can still be the current normalised version.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "types: allow (almost) anything in VNodeChildrenArrayContents",
        "labels": "feature request",
        "id": 123262
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently if we render a slot for multiple times (eg. inside a `v-for` loop), we'll get\r\n\r\n```\r\nDuplicate presence of slot \"${name}\" found in the same render tree - this will likely cause render errors.\r\n```\r\n\r\nI know it's intentional to prevent render errors (like losing correct data binding) but consider the following use case: I have a `v-breadcrumbs` component which has a default item separator of a text node `/`, and I want to allows users to specify their own separators which can be anything, like an `<v-icon>` component.\r\n\r\nCurrently if I want to make it work, I have to define a scoped slot in the `v-breadcrumbs` component and bind nothing to it:\r\n\r\n```html\r\n<slot name=\"sep\" v-bind=\"{}\">/</slot>\r\n```\r\n\r\nAnd component users must define `slot-scope` on it and not use anything from it:\r\n\r\n```html\r\n<v-breadcrumbs>\r\n  <v-icon slot=\"sep\" slot-scope=\"_\" name=\"angle-right\"/>\r\n</v-breadcrumbs>\r\n```\r\n\r\nAnd currently Vue is using slots as fallbacks for scoped slots with the same name. Whether the users can use a slot doesn't rely on if they want data from slot scope, but on whether the slot is gonna be rendered for multiple times inside the component self, this may raise more confusion for our users (like #8175).\r\n\r\nSo why don't we just get rid of such caveats and let a slot to be rendered more than once? We can clone them on duplication to prevent render errors as we already run the scoped slot function each time anyway. This makes the logic a lot simpler for users IMO: if we do not expect to use data from the slot scope, just use a slot, otherwise we'll always have to declare `slot-scope` to create the binding.\r\n\r\nIn addition, this would make documenting the (scoped) slots of a component more consistent, we just declare the data structure for a slot scope and users can decide if they want some data to bind to the `slot-scope` and don't need to care about how many times it will be rendered.\r\n\r\n### What does the proposed API look like?\r\nNo additional API needed, just clone the slot nodes upon render and remove the waring about duplicated slots.\r\n\r\nIt may be implemented in userland today in a quite hacky way, see: https://codesandbox.io/s/lp11y2wovz\r\n\r\nI just tweaked the `cloneVNode` function from the Vue core a little bit and it seemed to be working as expected using render function (without losing reactivity and event binding). There maybe some other edge situations I missed so correct me if it's not such trivial.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow a single slot to be rendered for multiple times",
        "labels": "feature request",
        "id": 123263
    },
    {
        "body": "### What problem does this feature solve?\r\nI am building a VueJS frontend where templates are coming from a backend where end users contributed them in a CMS or something else. VueJS is bundled with esm in order to have the Vue.compile method.\r\n\r\nWhen I run Vue.compile with the template string coming from the backend, I have no way to know if a compilation error occured in order to display a message to the user. In development I just have the warn messages in the console.\r\n\r\n### What does the proposed API look like?\r\nVue.compile could return an error boolean in an attribute or an array of all errors that occured during compilation.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue.compile should return the errors which happens during compilation even in prod env",
        "labels": "feature request",
        "id": 123264
    },
    {
        "body": "### What problem does this feature solve?\r\nPlease see here:\r\nhttps://jsfiddle.net/tys426eq/\r\n\r\nIf a class has its own iterator, `v-for` should iterate over this, instead of the object properties\r\n\r\n### What does the proposed API look like?\r\n```\r\nclass Items {\r\n  [Symbol.iterator]() {\r\n    return this.all.values();\r\n  }\r\n}\r\n```\r\n...\r\n`<div v-for=\"item of items\">` (or \"in\")\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-for should iterate object iterator (if one exists)",
        "labels": "feature request",
        "id": 123265
    },
    {
        "body": "### What problem does this feature solve?\r\nVue Test Utils has a synchronous API by walking all watchers and setting them to `sync`, but this implementation is buggy.\r\n\r\nReimplementing an async private config option would solve this problem for Vue Test Utils.\r\n\r\n### What does the proposed API look like?\r\nAdd an `async` config option that would be used when watchers are created.\r\n\r\nThe same option that was removed in [this commit](https://github.com/vuejs/vue/commit/ad11aa122cd09a4510fd9d8829e25f4a90b178c2#diff-4d10b522e21ed424211799a4e11c6103L191).\r\n\r\nI'm happy to make a PR to add this.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Re-implement async config option",
        "labels": "feature request",
        "id": 123266
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/JJPandari/pen/gzLVBq?editors=1010](https://codepen.io/JJPandari/pen/gzLVBq?editors=1010)\r\n\r\n### Steps to reproduce\r\nSee the codepen snippet. Follow the comment there to change the vm's data and see what happens.\r\n\r\n### What is expected?\r\nEven if the prop already exists, using `set` still makes it reactive, thus trigger view update.\r\n\r\n### What is actually happening?\r\nUsing `set` later doesn't update the view.\r\n\r\n---\r\nRelated source code: https://github.com/vuejs/vue/blob/3eb37acf98e2d9737de897ebe7bdb7e9576bcc21/src/core/observer/index.js#L192 I think most users would expect `set` to make the prop reactive whenever it's used. I initially opened [an issue for the api doc](https://github.com/vuejs/vuejs.org/issues/1601) because it wasn't clear (for me) about this. But the comment in the source code is.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "warn if $set is used on a property that already exist",
        "labels": "feature request",
        "id": 123267
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[![Edit Vue Template](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/0plonqx6jp)\r\n\r\n### Steps to reproduce\r\nWhen interpoling a object, it uses the `JSON.stringify` method instead of `toString`, which is normally the proper method to set a way to convert an object to a string. We could try to see if the `toString` method is present before calling the `toJSON` one ?\r\n\r\n### What is expected?\r\nIn the fiddle: \r\n>string: test\r\n\r\n### What is actually happening?\r\nIn the fiddle:\r\n>string: { \"json\": \"jsonVal\" }\r\n\r\n---\r\nThanks.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Use toString() on object interpolation when defined",
        "labels": "feature request",
        "id": 123268
    },
    {
        "body": "### What problem does this feature solve?\r\nI'm developing an all-in-one editor for webdevs that runs inside Chrome DevTools.\r\n\r\nJust by replacing `npm start` with `[name-not-finalized] start`, users can have a fully featured text editor right inside Chrome DevTools shell, automatically pointing at their project directory.\r\n\r\nIt comes with DOM inspector, where you pick an element and it'll literally take you to `file:line:col` where that element was defined. So you don't have to look through files to figure out where that button below the header is coming from. Useful when a new dev joins a project or you're revisiting your work after a very long time.\r\n\r\n\u25b6 [Watch 30 sec demo w/ a React project](http://goo.gl/d64cgv)\r\n\r\n___\r\n\r\nAnd of course, it also works with Vue projects, just as awesome.\r\n\r\n\u25b6 [Watch 20 sec demo w/ a Vue project](https://drive.google.com/open?id=1rGeFiNLezxzaJqnhnDbjvD_OvLMyaMIh)\r\n\r\nAbove demos were shot using locally tinkered compilers (just not clean enough to be a PR)\r\n\r\nThe goal is to deliver the ultimate developer experience ever. Other features are in development as we speak, like CSS QuickEditing, built-in image editor and a SVG editor so devs don't have to fire up Illustrator or Photoshop to make minor tweaks to their stuff.\r\n\r\nThe only hurdle in me releasing the app is getting external players to participate in revolutionizing how we write web.\r\n\r\nSo to wrap up I have only two requests:\r\n- Please have the template compilers add metadata to each tag (either as data attribute, or property on DOM node itself), that contains path to `*.vue` file (can be relative to project root), `line:col`/offset where the tag opens and last `line:col`/offset where the tag closes.\r\n\r\n- Please star this issue: https://bugs.chromium.org/p/chromium/issues/detail?id=811036\r\n\r\n### What does the proposed API look like?\r\nSomething like this:\r\n```javascript\r\nconsole.log(someElement.__vue__._debugSource)\r\n// > { file: 'src/components/Header.vue', line: 12, col: 4, lineEnd: 16, col: 8 }\r\n// or\r\n// > { file: 'src/components/Header.vue', start: 241, end: 352 }\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Have template compiler add source metadata to HTML tags",
        "labels": "feature request",
        "id": 123269
    },
    {
        "body": "### What problem does this feature solve?\r\nThe include and exclude props allow components to be conditionally cached only by component name. If we want to reuse components but force replacement using the `key` attribute, there is no control over which components we want to keep-alive only matching components by their name.\r\n\r\n### What does the proposed API look like?\r\nhttps://jsfiddle.net/9nk92wuy/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "keep-alive: include/exclude components by component key attribute",
        "labels": "feature request",
        "id": 123270
    },
    {
        "body": "### Version\r\n2.5.14\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/bad4a8mb/1/](https://jsfiddle.net/bad4a8mb/1/)\r\n\r\n### Steps to reproduce\r\nProvide a non function to the `bind` utility method.\r\n\r\n### What is expected?\r\nIn <= 2.5.13, it rendered but failed silently: https://jsfiddle.net/ujxu9mvd/. Not sure if we'd want to keep that expectation, but existing projects will fail to render completely. A dev-mode warning at the very least will be helpful in identifying the issue.\r\n\r\n### What is actually happening?\r\nUncaught TypeError\r\n\r\n---\r\nThe refactoring of the `bind` method to use the native bind, exposes a coding error when upgrading from 2.5.13. We have a fairly large codebase and one of the developers mistakenly added an object as a component method (eg. a global Vue events instance). It made its way into production and worked fine until upgrading to 2.5.14. It took a while to find it as there was no clear indication as to where the error was happening.\r\n\r\nSome other devs experienced this as well:\r\nhttps://github.com/vuejs/vue/pull/7491\r\nhttps://github.com/vuejs/vue/commit/324672a4621a3123cac90b18d4b1818bb33dddc6\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "2.5.14 introduces TypeError bind is not a function",
        "labels": "feature request",
        "id": 123271
    },
    {
        "body": "### What problem does this feature solve?\r\nMy app doesn't use vue as a base for the project, it is a backbone project, so I this backbone view create instances of vue views inside it and handles the lifecycle of the vue instance. But this means I have a lot of `<root>` instances which makes debugging a challenge. So what I want is a way to make `new Vue({ label: 'root-foo', ... })` or something like that so I can identify them.\r\n\r\n### What does the proposed API look like?\r\n```js\r\nnew Vue({\r\n   name: 'root-bar', //or label or instanceName etc...\r\n   // (...)\r\n})\r\n\r\n```\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Labeling a root instance",
        "labels": "feature request",
        "id": 123272
    },
    {
        "body": "### What problem does this feature solve?\r\nCustom properties in the options of functional component can't be accessed easily.\r\n\r\n### What does the proposed API look like?\r\nIn the render function of functional component, options can be accessed by `context.options`, just like `vm.$options`(https://vuejs.org/v2/api/index.html#vm-options)\r\n\r\nrelated issue #7492\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "add `options` property to the render context of functional component",
        "labels": "feature request",
        "id": 123273
    },
    {
        "body": "### What problem does this feature solve?\r\nBubbling up an event from a deep child can be really cumbersome (without an event bus) because you have to emit the same event from every parent up the tree until it reaches its target. An event modifier like `.bubble` would be really nice.\r\n\r\n### What does the proposed API look like?\r\nThis:\r\n```vue\r\n<child @hi.bubble/>\r\n```\r\n\r\nInstead of repeating this:\r\n```vue\r\n<child @hi=\"(...args) => $emit('hi', ...args)\"/>\r\n\r\n// or even:\r\n\r\n<child @hi=\"$emit('hi')\"/>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": ".bubble event modifier to pass along events, especially for those with args",
        "labels": "feature request",
        "id": 123274
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nRead support for HOC component, composition...\r\n\r\n### What does the proposed API look like?\r\ninstead of exporting an object like:\r\n\r\n```javascript\r\nexport default {\r\n  functional: true,\r\n  name: 'myComponentName',\r\n  render(h) {\r\n    return h('div', 'Hello World');\r\n  }\r\n}\r\n```\r\nWe could also export directly the render function \r\n```javascript\r\nexport function myComponentName(h, context) {\r\n  return h('div', 'Hello World');\r\n}\r\n```\r\nSince our component is now a function, we can compose it much easier.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support for exporting function for functional component",
        "labels": "feature request",
        "id": 123275
    },
    {
        "body": "### What problem does this feature solve?\r\nIn most of cases, it's not really comfortable to use `initialProp` as prop name, for example, or have `normalizedProp` inside a component, which takes some passed prop and transforms it. Code looks bloated and reminds more workaround than a good solution.\r\n\r\nHaving ability to change attribute name of prop would be great. Something like:\r\n```javascript\r\nrawProp: { attributeName: \"prop\" }\r\n```\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<component size=\"md\"> ... </component>\r\n```\r\n```javascript\r\ncomputed: {\r\n  size: {\r\n    switch (this.rawSize) { ... } // returns something in case blocks\r\n  }\r\n},\r\nprops: {\r\n  rawSize: {\r\n    attributeName: \"size\",\r\n    type: String\r\n  }\r\n}\r\n```\r\n\r\nThus, using any of proposed solutions above, `this.size` inside component would return transformed value (for example, `h4` or just `4`).\r\n\r\nI believe having this feature would be very awesome and help us to write cleaner code.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide a way to define different name for prop attribute",
        "labels": "feature request",
        "id": 123276
    },
    {
        "body": "### What problem does this feature solve?\r\nThe desired opts feature should offer the possibility to provide data from the markup (mostly from backend) to the vue instance.\r\nSo you can pass options/params from outside the vue scope. Example use case:\r\nhttps://forum.vuejs.org/t/passing-props-to-root-instances-in-2-0/244\r\n\r\nRight now this requires custom helpers/code to pipe the data through to the component.\r\nMuch better would be a more comfortable way similar the way riot does it with opts\r\nhttp://riotjs.com/api/#mounting\r\n\r\n\r\n### What does the proposed API look like?\r\nSince the instance root is not a custom tag (compared to riot) I can imagine using prefixed attributes e.g. `data-opt-[NAME]`\r\nSo the root may look like this:\r\n```html\r\n<div id=\"myRoot\" data-opt-firstname=\"John\" data-opt-lastname=\"Smith\"></div>\r\n```\r\nand within the template you can access it as\r\n```\r\n<template>\r\n    <span>Hello {{ opts.firstname }} {{ opts.lastname }}</span>\r\n</template>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "root opts attributes support",
        "labels": "feature request",
        "id": 123277
    },
    {
        "body": "### What problem does this feature solve?\r\nNow webpack4 `mini-css-extract-plugin` supports css `async-loading` and `splitted chunks`, it also has been supported in `vue-loader-15`\r\n\r\nBut when we use it in ssr, it will still get all css files at ssr rendering.\r\n\r\nThrough my investigation, current vue-ssr webpack plugin will not generate corresponding css into `initial` and `async` inside `vue-ssr-client-manifest.json`.\r\nhttps://github.com/vuejs/vue/blob/dev/src/server/webpack-plugin/client.js#L19-L26\r\n\r\nAnd also renderer `renderStyles` will render `all` css which includes splitted async css chunks.\r\nhttps://github.com/vuejs/vue/blob/dev/src/server/template-renderer/index.js#L112\r\n\r\n### What does the proposed API look like?\r\ncss - initial chunks are in `initial`\r\ncss - spiltted chunks are in `async`\r\ncontext.renderStyles() return all `initial` chunks\r\n`mini-css-extract-plugin` will auto load `async` chunks\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue SSR render initial css chunks correctly",
        "labels": "feature request",
        "id": 123278
    },
    {
        "body": "### What problem does this feature solve?\r\nWould make writing wrapper components easier\r\n\r\n### What does the proposed API look like?\r\nWhen v-on receives a function it should trigger on every custom event emitted by the child\r\n\r\n    <my-custom-component v-bind=\"$props\" v-on=\"onAnyEvent\"></my-custom-component>\r\n\r\nArgument one could be the name of the event\r\n\r\n    onAnyEvent(eventName, eventArgs) { // do something }\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Subscribe to all custom events on a child component",
        "labels": "feature request",
        "id": 123279
    },
    {
        "body": "### What problem does this feature solve?\r\nThe object syntax of the v-on directive is vital in achieving conditional binding of event listeners, as shown in the discussions at https://github.com/vuejs/vue/issues/7349.\r\n\r\n    <div v-on=\"{ mouseover: condition ? handler : null }\">\r\n\r\nHowever, the current object syntax does not allow modifiers.\r\n\r\nThis feature request suggest that we extend the object syntax in the following way to allow modifiers.\r\n\r\n    <div v-on=\"{ click: { left: { prevent: condition ? leftClickHandler : null } },  mouseover: { stop: mouseoverHandler } }\">\r\n\r\nThe above example would conditionally install leftClickHandler on \"click.left.prevent\" and mouseoverHandler on \"mouseover.stop\".\r\n\r\nThe embedded object notation is also conceptually consistent with the dot-notation already adopted in both function and inline syntax.\r\n\r\n\r\n### What does the proposed API look like?\r\nThe proposed v-on object syntax would like like this, which is an extension of the current syntax.\r\n\r\n    <div v-on=\"{ click: { left: { prevent: condition ? leftClickHandler : null } },  mouseover: { stop: mouseoverHandler } }\">\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Extending object syntax of v-on to support modifiers",
        "labels": "feature request",
        "id": 123280
    },
    {
        "body": "### What problem does this feature solve?\r\nV-model support for web components(tested with web component implemented with ionic's stenciljs compiler).\r\n\r\nDoes not work:\r\n```\r\n<ui-input v-model=\"mySelect\" />\r\n```\r\n\r\nWorks:\r\n```\r\n<ui-input :value=\"mySelect\" @input=\"mySelect = $event.target.value\" />\r\n```\r\n\r\nCan this be enabled to support ignored elements as well that have been declared with:\r\n\r\n```Vue.config.ignoredElements = [/^ui-/];```\r\n\r\n### What does the proposed API look like?\r\nDeclaration\r\n```\r\nVue.config.ignoredElements = [/^ui-/];\r\n```\r\nUsage\r\n```\r\n<ui-input v-model=\"mySelect\" />\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-model support for web components (stenciljs)",
        "labels": "feature request",
        "id": 123281
    },
    {
        "body": "### What problem does this feature solve?\r\nSee #7064 for some background information.\r\n\r\nAfter providing an explicit way to declare that a slot is \u201cempty\u201d, we won't have to use props to control whether each slot is gonna be rendered or not.\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<v-component>\r\n  <template slot=\"extra\" empty></template>\r\n</v-component>\r\n```\r\nor\r\n```html\r\n<v-component>\r\n  <template slot=\"extra\"><empty-slot/></template>\r\n</v-component>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide a way to explicitly fill a (scoped) slot with nothing",
        "labels": "feature request",
        "id": 123282
    },
    {
        "body": "### What problem does this feature solve?\r\n\u5f53\u6211\u4f7f\u7528 inject: true \u7684\u53c2\u6570\u6e32\u67d3 ssr \u9875\u9762\u65f6\uff0c\u6211\u53ea\u60f3\u5bf9 renderScripts \u8fd9\u90e8\u5206\u505a\u81ea\u5b9a\u4e49\u4fee\u6539\uff0c\u5176\u4ed6\u7ee7\u7eed\u6cbf\u7528\u9ed8\u8ba4templateRenderer\u7684render**\u3002\r\n\r\n\u5982\u679c \u6211\u8bbe\u7f6e\u4e86 inject: false\uff0c\u90a3\u6211\u5fc5\u987b\u5728 html\u6a21\u677f\u4e2d \u6dfb\u52a0 \u5404\u79cd {{ render** }} \u3002\r\n\r\n\u8bf7\u95ee\u6709\u6ca1\u6709\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\uff1f\r\n\r\n### What does the proposed API look like?\r\n```\r\ncreateBundleRenderer({\r\n  inject:true,\r\n  renderScripts: function() { ... },\r\n})\r\n\r\n```\r\nor \r\n\r\n```\r\ncreateBundleRenderer({\r\n  inject:true,\r\n  templateRenderer: new otherTemplateRenderer(),\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[SSR] \u670d\u52a1\u7aef\u6e32\u67d3\u80fd\u5426\u589e\u52a0\u81ea\u5b9a\u4e49 TemplateRenderer \u6216\u8005 \u63d0\u4f9b\u90e8\u5206inject\u7684\u53c2\u6570\uff1f",
        "labels": "feature request",
        "id": 123283
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen seeing warning message like `[Vue warn]: Invalid prop: type check failed for prop \"value\". Expected Number, got String.`, it would be great if Vue could display the actual values it encountered.\r\n\r\nFor instance, immediately seeing `2` and `'2'` would speed up development.\r\n\r\n### What does the proposed API look like?\r\nNo API changes\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Make the warning messages more explicit",
        "labels": "feature request",
        "id": 123284
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\n`slot-scope` can be set on a component that's a child of the component that defines the scoped slot.\r\n\r\n```html\r\n<vue-parent>\r\n  <vue-child slot-scope=props>\r\n    {{ props.value }}\r\n  </vue-child>\r\n</vue-parent>\r\n```\r\n\r\nBut it fails when it's set on the defining component itself. If there's only a default scoped slot then setting it on the parent should be allowed, because it would remove an unnecessary pair of tags in some cases and make the templates cleaner.\r\n\r\nBut mainly it's confusing and inconsistent to get an error that `props` isn't defined in the code below but not in the code above.\r\n\r\n### What does the proposed API look like?\r\n\r\n```html\r\n<vue-parent slot-scope=props>\r\n  <vue-child>\r\n    {{ props.value }}\r\n  </vue-child>\r\n</vue-parent>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow slot-scope to be set on the defining component",
        "labels": "feature request",
        "id": 123285
    },
    {
        "body": "### What problem does this feature solve?\r\n`v-model` is great to bind form fields (and child components) to data fields. Unfortunately you cannot currently use it with component props because v-model is effectively `@input=\"newValue => field = newValue\"` and if `field` is a prop it would change the prop, which is not allowed.\r\n\r\nIf it would be possible to change this `\"newValue => field = newValue\"` to a custom callback, then you could instead for example emit an event when the form field gets changed. This way you could directly use `v-model` with props and you don't need to copy props into data fields.\r\n\r\n### What does the proposed API look like?\r\nIn the component whose template contains `v-model`, add a configuration option `modelCallback` that takes a function that will be called when the child component emits their model event:\r\n```javascript\r\n{\r\n  modelCallback: function (modelName, newValue) {\r\n    this.$emit('field_changed', modelName, newValue);\r\n  }\r\n}\r\n```\r\n\r\nSee this complete example: https://jsfiddle.net/12py3s7n/\r\n(Of course it throws warnings when changing data because `{modelCallback: ...}` isn't actually supported yet.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow to override v-model callback",
        "labels": "feature request",
        "id": 123286
    },
    {
        "body": "### What problem does this feature solve?\r\nWe've added a `renderToString` method in vue-test-utils, which is a wrapper around `vue-server-renderer` `renderToStrting`. This let's users test SSR code without a `window`.\r\n\r\nSometimes users will be running tests for SSR code and browser target code in the same process, where window will be defined. This means `$isServer` will be false, even though we're rendering with the server-renderer.\r\n\r\n### What does the proposed API look like?\r\nI'm unsure of the best way to do this.\r\n\r\nOne solution is to make `$isServer` writable\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Writable $isServer",
        "labels": "feature request",
        "id": 123287
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/12489eae/](https://jsfiddle.net/12489eae/)\r\n\r\n### Steps to reproduce\r\nWrite a functional component with a render function that returns a string or an array containing strings.\r\n\r\n### What is expected?\r\nThe component renders the strings as text nodes.\r\n\r\n### What is actually happening?\r\nUncaught TypeError: Cannot create property 'isRootInsert' on string 'Test'\r\n\r\n---\r\nThis works:\r\n\r\n```\r\nreturn h(\"div\", linesWithBreaks).children\r\n```\r\n\r\nI'd also like to be able to use html templates with vue-loader:\r\n\r\n```\r\n<template functional>\r\n\t<template v-for=`line in props.text.split(\"\\n\")`>\r\n\t\t{{ line }}\r\n\t\t<br/>\r\n\t</template>\r\n</template>\r\n```\r\n\r\nBut that also fails because of https://github.com/vuejs/vue-loader/issues/1168\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Returning a string or an array containing strings in render functions doesn't work",
        "labels": "feature request",
        "id": 123288
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Steps to reproduce\r\n```js\r\nconst compiler = require('vue-template-compiler');\r\nconst compiled = compiler.compile(input, { preserveWhitespace: false });\r\nconsole.log(compiled.render)\r\n```\r\n\r\nWith `input` being:\r\n```svg\r\n<svg viewBox=\"0 0 135.297 120.367\" xmlns=\"http://www.w3.org/2000/svg\"><defs><style>.hex{fill:#60c795}.line{fill:#fff}</style></defs><path d=\"M133.605 66.313l-27.691 47.963a12.22 12.22 0 0 1-10.582 6.109H39.949c-4.365 0-8.398-2.33-10.582-6.11L1.677 66.314a12.22 12.22 0 0 1 0-12.22l27.69-47.961A12.221 12.221 0 0 1 39.949.022h55.383c4.365 0 8.4 2.328 10.582 6.11l27.691 47.961a12.22 12.22 0 0 1 0 12.22\" class=\"hex\"/><path d=\"M61.533 19.968a3.415 3.415 0 0 0-3.14 2.261L40.556 71.925l-5.856-9.76a3.416 3.416 0 0 0-2.93-1.66H.052a12.2 12.2 0 0 0 1.627 5.807l.594 1.027h27.566l8.57 14.283a3.416 3.416 0 0 0 6.146-.604L61.81 32.923l18.953 46.411a3.42 3.42 0 0 0 2.873 2.112 3.412 3.412 0 0 0 3.187-1.594l15.15-24.28 8.844 11.563a3.425 3.425 0 0 0 2.714 1.342h18.824l1.25-2.166a12.195 12.195 0 0 0 1.549-4.668H115.22l-10.816-14.145a3.435 3.435 0 0 0-2.877-1.338 3.414 3.414 0 0 0-2.736 1.604L84.564 70.566 64.767 22.09a3.416 3.416 0 0 0-3.236-2.123z\" class=\"line\"/></svg>\r\n```\r\n\r\n### What is expected?\r\nExprected is that the `<style>` element (inside the `<svg>`) is also in the genreated render method\r\n\r\n### What is actually happening?\r\nThe generated render method omits the <style> element:\r\n\r\n```js\r\nwith(this){return _c('svg',{attrs:{\"viewBox\":\"0 0 135.297 120.367\",\"xmlns\":\"http://www.w3.org/2000/svg\"}},[_c('defs'),_c('path',{staticClass:\"hex\",attrs:{\"d\":\"M133.605 66.313l-27.691 47.963a12.22 12.22 0 0 1-10.582 6.109H39.949c-4.365 0-8.398-2.33-10.582-6.11L1.677 66.314a12.22 12.22 0 0 1 0-12.22l27.69-47.961A12.221 12.221 0 0 1 39.949.022h55.383c4.365 0 8.4 2.328 10.582 6.11l27.691 47.961a12.22 12.22 0 0 1 0 12.22\"}}),_c('path',{staticClass:\"line\",attrs:{\"d\":\"M61.533 19.968a3.415 3.415 0 0 0-3.14 2.261L40.556 71.925l-5.856-9.76a3.416 3.416 0 0 0-2.93-1.66H.052a12.2 12.2 0 0 0 1.627 5.807l.594 1.027h27.566l8.57 14.283a3.416 3.416 0 0 0 6.146-.604L61.81 32.923l18.953 46.411a3.42 3.42 0 0 0 2.873 2.112 3.412 3.412 0 0 0 3.187-1.594l15.15-24.28 8.844 11.563a3.425 3.425 0 0 0 2.714 1.342h18.824l1.25-2.166a12.195 12.195 0 0 0 1.549-4.668H115.22l-10.816-14.145a3.435 3.435 0 0 0-2.877-1.338 3.414 3.414 0 0 0-2.736 1.604L84.564 70.566 64.767 22.09a3.416 3.416 0 0 0-3.236-2.123z\"}})])}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Template compiler ignores $/svg/defs/styles element",
        "labels": "feature request",
        "id": 123289
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen doing a composition of component like this:\r\n\r\n**Child component with slot**\r\n\r\n```html\r\n<template>\r\n    <div>\r\n        child\r\n        <slot name=\"slot\" ref=\"slot\"/>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name:'child'\r\n    }\r\n</script>\r\n```\r\n**Parent component**\r\n\r\n```html\r\n<template>\r\n    <div>\r\n        parent\r\n        <child>\r\n            <custom-component slot=\"slot\"/>\r\n        </child>\r\n    </div>\r\n</template>\r\n<script>\r\n    import Child from './child.vue';\r\n    import CustomComponent from 'custom-component';\r\n    export default {\r\n        name:'parent',\r\n        components:{ Child, CustomComponent }\r\n    }\r\n</script>\r\n```\r\n\r\nit would be great to access custom-component (component not element ) using `this.$refs.slot` .\r\nCurrently its done using this statement `this.$slots.slot[0].componentInstance` , `this.$refs.slot` is `undefined`.\r\n\r\n#### Use case is calling child slot component methods.\r\n\r\nThanks\r\n\r\n### What does the proposed API look like?\r\nAccessing slot component using\r\n`this.$refs.slot`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support ref attribute in slots",
        "labels": "feature request",
        "id": 123290
    },
    {
        "body": "### What problem does this feature solve?\r\nAdd a standard debounce feature on events like input, keyup etc.\r\n\r\nWith data driven apps 'debounce' functionality is a must for not over-loading the backend.\r\n\r\n### What does the proposed API look like?\r\nexample `<input type=\"text\" @input.debounce=\"ajaxSearchBackend\" />`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "add debounce as Event Modifier",
        "labels": "feature request",
        "id": 123291
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/zr7rz6xh/8/](https://jsfiddle.net/zr7rz6xh/8/)\r\n\r\n### Steps to reproduce\r\nVue.config.errorHandler = function (err, vm, info) {\r\n  alert(\"handler\");\r\n};\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  mounted: function() {\r\n  \treturn new Promise(function(resolve, reject) {\r\n      throw new Error('err');\r\n    });\r\n  }\r\n})\r\n\r\n\r\n### What is expected?\r\nerrorHandler should be called\r\n\r\n### What is actually happening?\r\nUncaught (in promise) Error: err\r\n\r\n---\r\nVue.config.errorHandler is not called if the error occurs inside a promise or await/async function.\r\n\r\nI want to use the created hook with an await call, so it has to be async. But then the errorHandler is ignored.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "errorHandler not working in Promises / async",
        "labels": "feature request",
        "id": 123292
    },
    {
        "body": "### What problem does this feature solve?\r\nMake things shorter and easier to write.\r\n\r\n### What does the proposed API look like?\r\n`:foo=\"bar\"` is a syntax shortcut for `v-bind:foo=\"bar\"`.\r\n\r\nSimilarly, `.foo=\"bar\"` would be a nice shortcut for `:foo.prop=\"bar\"` (and the leading `.` even makes sense!).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "A short syntax for v-bind .prop modifier",
        "labels": "feature request",
        "id": 123293
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently when using functional components without `prop` definition, all attributes will be rendered when using [`JSX spread`](https://github.com/vuejs/babel-plugin-transform-vue-jsx#jsx-spread).  \r\n\r\nThis is because the `context.data.attrs` remain after they are merged. \r\n\r\n## Current\r\n\r\nUsage:`<Example type=\"blue\" fill={true} class=\"extra-class\" aria-label=\"I'm a label\" />`\r\n\r\nImplementation: \r\n```\r\nexport default {\r\n  functional: true,\r\n  \r\n  render({ data, props }) {\r\n    const { type, fill } = props\r\n\r\n    const buttonClass = {\r\n      'button--fill': fill,\r\n      [`button--${type}`]: !!type\r\n    }\r\n\r\n    <button {...data} class={buttonClass} >\r\n  }\r\n}\r\n```\r\n\r\nOutput: `<button fill=\"true\" type=\"blue\" class=\"extra-class button--fill button--blue\" aria-label=\"I'm a label\" />`\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nIt should be explicit what attributes to render to dom when using a functional component with no prop definition. \r\n\r\n[With fix `delete data.attrs`](https://github.com/vuejs/vue/blob/dev/src/core/vdom/create-functional-component.js#L81)\r\n\r\n### Explicitly passing attributes\r\n\r\nYou can use spread notation to get all remaining `attrs`, and replacing the `data.attrs` object\r\n\r\nUsage: `<Example type=\"blue\" fill={true} class=\"extra-class\" aria-label=\"I'm a label\" />`\r\n\r\nImplementation: \r\n```\r\nexport default {\r\n  functional: true,\r\n  \r\n  render({ data, props }) {\r\n    const { fill, type, ...attrs } = props\r\n    data.attrs = attrs\r\n\r\n    const buttonClass = {\r\n      'button--fill': fill,\r\n      [`button--${type}`]: !!type\r\n    }\r\n\r\n    <button {...data} class={buttonClass} >\r\n  }\r\n}\r\n```\r\n\r\nOutput: `<button class=\"extra-class button--fill button--blue\" aria-label=\"I'm a label\" />`\r\n\r\n### Explicitly passing attributes 2\r\n\r\nUsage: `<Example  type=\"blue\" fill={true} class=\"extra-class\" formtarget=\"id\" dummy-attr=\"lol\" />`\r\n\r\nImplementation: \r\n```\r\nexport default {\r\n  functional: true,\r\n  \r\n  render({ data, props }) {\r\n    const { fill, type, formtarget } = props\r\n\r\n    const buttonClass = {\r\n      'button--fill': fill,\r\n      [`button--${type}`]: !!type\r\n    }\r\n\r\n    <button {...data} formtarget={formtarget} class={buttonClass} >\r\n  }\r\n}\r\n```\r\n\r\nOutput: `<button class=\"extra-class button--fill button--blue\" formtarget=\"id\" />`\r\n\r\n\r\n### Conclusion\r\n\r\nBoth examples show how the behaviour of the attributes should be left with the child when dictating what attributes shoud be rendered. You can either do a `and rest` approach or explcititly name attributes to pass onto element. \r\n\r\nThe original all props/attrs will be rendered as attributes, which adds polution to the DOM especially with attributes that are array's/objects/functions/symbols.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Remove attribute merging for functional components with no prop definition",
        "labels": "feature request",
        "id": 123294
    },
    {
        "body": "### Version\r\n2.4.4, 2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/xt3uf0g5/1/](https://jsfiddle.net/xt3uf0g5/1/)\r\n\r\n### Steps to reproduce\r\nAs per documentation: https://vuejs.org/v2/guide/syntax.html#Attributes\r\nnull, undefined, false should remove attribute\r\n\r\n\r\n### What is expected?\r\nValue attribute removed\r\n\r\n### What is actually happening?\r\nSpecific to HTMLProgressElement - the attribute is not removed.\r\n\r\nBy giving false - exception (Failed to set the 'value' property on 'HTMLProgressElement': The provided double value is non-finite.)\r\n\r\nBy giving null, undefined - value=\"0\"\r\n\r\n---\r\nHTMLProgressElement without value attribute changes visual to represent \"indeterminate\" state (link: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "HTMLProgressElement value attribute doesn't removed after being fed with false, null or undefined",
        "labels": "feature request",
        "id": 123295
    },
    {
        "body": "### What problem does this feature solve?\r\nDuring development, it's hard to find out what method is used to handle events on the element using browser's DOM inspector. If it's able to see the handler's name or content during development, it will be easier for the developer to locate the handler's code.\r\n\r\n### What does the proposed API look like?\r\nSet global config:\r\n```javascript\r\nVue.config.showHandlers = true;\r\n```\r\nthen the handlers can be seen in the DOM inspector:\r\n```html\r\n<div v-on:click='showHahaha' v-on:mouseenter='active = true'>hahaha</div>\r\n```\r\nsince '@' is not valid in Element.setAttribute, I changed it to 'v-on:'\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add a global config to show event handlers during development",
        "labels": "feature request",
        "id": 123296
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n\r\nNG pattern (functional)\r\nhttps://codesandbox.io/s/004vv2onw0\r\n\r\nOK pattern (no functional)\r\nhttps://codesandbox.io/s/q9k5q8qq56\r\n\r\n### Steps to reproduce\r\nI found can't use `components` option when  `functional` single file component.\r\n\r\n```html\r\n<template functional>\r\n  <div>\r\n    <some-children />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SomeChildren from \"./SomeChildren\"\r\n\r\nexport default {\r\n  components: {\r\n    SomeChildren\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nIt's occure `Unknown custom element`.\r\n\r\n### What is expected?\r\nNot occure `Unknown custom element` and use child component\r\n\r\n### What is actually happening?\r\nIt's occure `Unknown custom element`\r\n\r\n---\r\n\r\nIn workaround, it not occure when use `Vue.component`.\r\n\r\n```js\r\nimport Vue from \"vue\"\r\nimport SomeChildren from \"./SomeChildren\"\r\nVue.component(\"some-children\", SomeChildren);\r\n\r\nexport default {}\r\n\r\n// can use  <some-children />\r\n```\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Functional single file component with components option.",
        "labels": "feature request",
        "id": 123297
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen context with state is provided to the template renderer an [inline script is created](https://github.com/vuejs/vue/blob/f2b476d4f4f685d84b4957e6c805740597945cde/src/server/template-renderer/index.js#L199).  It may be useful to provide a nonce that gets attached to the script tag so an unsafe-inline CSP doesn't have to be enabled.\r\n\r\n### What does the proposed API look like?\r\n```\r\nrenderer.renderToString({\r\n  state: {},\r\n  nonce: ''\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Template renderer and CSP",
        "labels": "feature request",
        "id": 123298
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen we are using SSR with CommonsChunkPlugin, we often generate a `manifest.js` at the same time, but `manifest.js` is always very small (about 1kb).\r\n\r\nWithout SSR using `html-webpack-plugin` and its inline resource plugin, we are able to make `manifest.js` transformed inline into html file.\r\n\r\nBut for now we can not do for SSR that because the html output is generated by `vue-server-render` automatically.\r\n\r\n### What does the proposed API look like?\r\n```js\r\ncreateBundleRenderer(bundle, {\r\n  inlineResources: [] // string or RegExp\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[SSR] Support inline resource for specified files for server side rendering.",
        "labels": "feature request",
        "id": 123299
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/49gptnad/905/](https://jsfiddle.net/49gptnad/905/)\r\n\r\n### Steps to reproduce\r\nJust run it and open the console in a debugger\r\n\r\n### What is expected?\r\nthat the target variable is type checked for being a string before trying to perform the `key in target` line, to prevent a big error message\r\n\r\n### What is actually happening?\r\na big error message comes up\r\n\r\n---\r\nI'm going to have a look at a fix for it now so I'll post it if I figure it out\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "\"TypeError: Cannot use 'in' operator to search for 'names' in bf7823uhvbon3f289ph32f",
        "labels": "feature request",
        "id": 123300
    },
    {
        "body": "### What problem does this feature solve?\r\nRight now if we want an event handler to run conditionally we need to place the condition in the event handler which means that the event is still subscribed to and we pay the memory allocation fee for the event subscription (the underlying addEventListener and corresponding handler).\r\n\r\nIn some scenarios this is a pain. For example: say I've got mouse events (mouseover, mouseout) that are only meaningful on devices that actually have a pointer/mouse and so are meaningless on mobile and touch devices.\r\n\r\nRight now, I'd have to create the event subscriptions and add the condition in the handler (or in this case no need even for that as the events would never fire) BUT I've still attached these handlers and allocated memory for them - which especially on memory constrained  platforms like mobile browsers is a waste.\r\n\r\nBy making the event subscription itself conditional we can avoid this.\r\n\r\n### What does the proposed API look like?\r\nIn its simplest form we could just examine the handler provided and if falsy (or just null)  short-circuit the event subscription and NOT apply the underlying addEventListener operation.\r\n\r\nThis way the condition can appear in the event binding declaration itself:\r\n\r\n```\r\n<div @mouseover=\"condition ? handler : null\" /> \r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Conditional event binding",
        "labels": "feature request",
        "id": 123301
    },
    {
        "body": "### What problem does this feature solve?\r\nMany data visualization and graphics library do DOM manipulation and most of them the DOMElement can be extracted.\r\n```js\r\nconst rect = SVG.adopt(this.$refs.rect.elm)\r\nrect.node // this is the SVGElement and in chrome console will output <rect id=\"r1\"></rect>\r\n```\r\n\r\nLet's say we want to build an abstraction by design it as a component that can draw a rectangle and after the drawing is done (by hold&drag mouse button) that rectangle will be placed in another section. The usage will be like this:\r\n```html\r\n<annotator>\r\n  <img src=\"background\" />\r\n  <rect slot=\"drawing\" stroke=\"red\" />\r\n  <rect slot=\"annotation\" stroke=\"green\" x=\"100\" y=\"100\" width=\"100\" height=\"100\" />\r\n</annotator>\r\n```\r\n\r\nand `<annotator>` will be like this\r\n```html\r\n<template>\r\n  <svg>\r\n\r\n    <foreignObject>\r\n      <slot></slot>\r\n    </foreignObject>\r\n\r\n    <g fill=\"black\" transform=\"translate(100, 100)\">\r\n      <slot name=\"annotation\"></slot>\r\n    </g>\r\n\r\n    <slot name=\"drawing\"></slot>\r\n\r\n  </svg>\r\n</template>\r\n```\r\n\r\nAfter the drawing is done, the rectangle will be moved and fill it with black (or SVG texture for the more complex case). This can be done by clone the element in `drawing` slots to `annotation` slot.\r\n```js\r\nconst rect = SVG.adopt(this.$slots.drawing[0].elm)\r\n\r\nrect.on('click', event => doDrawingLogic(event))\r\n\r\nrect.on('drawfinish', event => {\r\n// the reason to clone and move slot is so any logic in annotation slot can be applied\r\n// the clone itself is to preserve `<rect stroke=\"red\" slot=\"drawing\" />` so that it can be referenced again\r\n/** some logic here */\r\n})\r\n```\r\n\r\nIn that case there is need to make createElement accept DOMElement for duplicating or maybe also converting Node to VNode.\r\n```js\r\nnewRect = newRect.clone().animate().dmove(100, 100)\r\n\r\nconst clone = this.$createElement(newRect.node)\r\nthis.$slots.annotation.push(clone)\r\n```\r\n> In above example, if createElement act as creating element then there will be 2 rectangles lol\r\n\r\n### What does the proposed API look like?\r\nBasic usage\r\n```js\r\nconst div = document.getElementById(\"myDiv\")\r\n\r\nthis.$createElement(div)\r\n```\r\n\r\nClone and move from 1 slots to another slot\r\n```js\r\nconst clone = this.$createElement(this.$slots.mySlot[0].elm)\r\n\r\nthis.$slots.default.push(clone)\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Accept DOMElement in createElement Arguments",
        "labels": "feature request",
        "id": 123302
    },
    {
        "body": "### What problem does this feature solve?\r\nOften, it's desirable for a component to expose properties the caller can use to customize the style. But if these take arbitrary values rather than just, say, class names, the child component then must use `style` attributes to apply the values. Unfortunately, this litters the `<template>` markup with style information. Also, the `style` attribute cannot be used to assign CSS properties to pseudo-elements like `:hover` and `:before`, which significantly limits the properties a component can expose to the caller for custom styling.\r\n\r\nThe only workaround is for the parent's CSS to override the child's CSS, but that requires the parent's CSS to be coupled to the child's implementing markup. The same value (or variants based on it, such as lighter or darker shades of a color) may be used in a number of selectors, complicating this effort, and if the component uses scoped CSS or highly-specific selectors, it may be even more difficult to override.\r\n\r\nCSS variables are now fully supported by every common browser other than IE11. So, I'm proposing that Vue support mustache syntax in the `<style>` block of SFCs where CSS variables are declared, and that Vue set and react to changes to these values by using the DOM's `style.setProperty` method.\r\n\r\nThis will allow component authors to provide props for more styling decisions, in a way that is still as reactive as using the `style` attribute, but with more capabilities (for pseudo-elements) and a tidier template. Internally, components can also use this to make styling decisions, including for pseudo-elements, based on computed values, all fully reactive. \r\n\r\nHere's an example of a component that does support CSS variables as properties, but has to wire it up manually with a watcher:\r\n\r\nhttps://github.com/richardtallent/vue-stars/blob/master/src/VueStars.vue\r\n\r\nIt may be possible to support IE <= 11 by replacing variables in the style with values and replacing the generated style tag as needed.\r\n\r\n### What does the proposed API look like?\r\nThe API would simply be that the <style> block accepts mustache syntax in the declaration of CSS variables, and that behind the scenes, it reacts to changes by using the `style.setProperty()` method to update the CSS variable's value.\r\n\r\nFrom the component author's perspective:\r\n```HTML\r\n<template>\r\n  <h1>{{ title }}</h1>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"ColorHeader\",\r\n  props: {\r\n    bg: { type: String, default: \"inherit\", required: false },\r\n    bgHover: { type: String, default: \"inherit\", required: false },\r\n    title: { type: String, default: \"(Untitled)\", required: false },\r\n  }\r\n}\r\n</script>\r\n<style>\r\n:root {\r\n   --bg-color: {{ bg }};\r\n   --bg-hover-color: {{ bgHover }};\r\n}\r\n  h1 { background-color: var(--bg-color); }\r\n  h1:hover { background-color: var(--bg-hover-color); }  \r\n</style>\r\n```\r\n\r\nOne down side I see is that this would require Vue's compiler to parse the CSS so it recognizes the variable name before the mustache, which could be a problem when using CSS that needs a pre-processor. So here's an alternative implementation:\r\n\r\n- Vue supports mustache syntax *anywhere* within the style block, but it is understood that it should *only* be used for CSS values, not the names of properties or selectors.\r\n- Vue makes no attempt to parse the CSS other than to find the mustaches.\r\n- For each discrete mustache expression, Vue replaces the mustache syntax with a CSS variable declaration at the top (auto-named) and `var(--auto-named-variable)` where the mustache syntax appeared.\r\n- Vue then just needs to update the value for the names it created reactively.\r\n- This would be compatible with any CSS variant that allows CSS variable syntax (and that doesn't replace it or the mustache syntax with something else).\r\n\r\nIf mustache syntax causes too much of a headache with linters, IDEs, etc. (since curly braces are important to CSS), a third alternative would be for the component author to use the CSS variable syntax, and require that if you want Vue to reactively set and update that variable, you simply use the kebab-case version of one of your data, prop, or computed attributes (i.e., no complex expressions or direct use of methods). Example:\r\n\r\n```HTML\r\n<template>\r\n  <h1>{{ title }}</h1>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"ColorHeader\",\r\n  props: {\r\n    bgColor: { type: String, default: \"inherit\", required: false },\r\n    bgHover: { type: String, default: \"inherit\", required: false },\r\n    title: { type: String, default: \"(Untitled)\", required: false },\r\n  }\r\n}\r\n</script>\r\n<style>\r\n  h1 { background-color: var(--bg-color); }\r\n  h1:hover { background-color: var(--bg-hover); }  \r\n</style>\r\n```\r\n\r\nTo prevent collisions between real legacy variables and same-named component features, this could be opt-in with an attribute on the style element (like \"scoped\" operates).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "FR: Reactive CSS variables",
        "labels": "feature request",
        "id": 123303
    },
    {
        "body": "### What problem does this feature solve?\r\nA registered component could be referenced by its identifier when using the `extends` property. Currently it only works if you set a component directly, so in order to get a registered component it would look like this:\r\n\r\n```\r\n{\r\n  extends: Vue.component('myComponent') \r\n}\r\n```\r\n\r\n### What does the proposed API look like?\r\nHowever a shorter syntax could be by just using a string to reference a previously registered component.\r\n\r\n```\r\n{\r\n  extends: 'myComponent'\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow to reference registered components in 'extends' property",
        "labels": "feature request",
        "id": 123304
    },
    {
        "body": "### What problem does this feature solve?\r\nvue-i18n inject the `lang` field to `Vue.config` to switch the global language  \r\nbut in ts, we cannot re-define the `config` field in `VueConstructor`  \r\n\r\n### What does the proposed API look like?\r\nextract `config` to a interface\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "provide a way to allow Module Augmentation with Vue.config",
        "labels": "feature request",
        "id": 123305
    },
    {
        "body": "### Version\r\n2.5.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/zollero/pen/opbxXX](https://codepen.io/zollero/pen/opbxXX)\r\n\r\n### Steps to reproduce\r\nProp validate in v2.5.11, does not allow the key of prop to be one out of `['type', 'default', 'required', 'validator']`, and throw a warning error. \r\n\r\nThis happens  when the `prop` is an array of object. And I must validate the key of the element object.\r\n\r\nFor example:\r\n\r\n```\r\nexport default {\r\n  props: {\r\n    forms: {\r\n      type: Array,\r\n      required: true,\r\n      prop: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      label: String,\r\n      editable: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n![image](https://user-images.githubusercontent.com/8801894/34087867-c8a8ae3c-e3e0-11e7-8820-bfe5ef989bbf.png)\r\n\r\n### What is expected?\r\nExpect the key out of ['type', 'default', 'required', 'validator'] can be valid.\r\n\r\n\r\n### What is actually happening?\r\nThe key out of ['type', 'default', 'required', 'validator'] is invalid.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Validate nested props",
        "labels": "feature request",
        "id": 123306
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen using JSX/Render functions with inputs, setting default rendered value in SSR, requires so specialist understanding about the VNode API.\r\n\r\n```\r\n{\r\n  render(h) {\r\n     const Input = h('input')\r\n     if (process.env.VUE_ENV === 'server') {\r\n       data.attrs.value = this.model\r\n     }\r\n     return input\r\n  }\r\n}\r\n```\r\n\r\nCurrently when binding the value to an input `<input :value=\"aValue\" />` you will get the rendered html as `<input>`. This works client side as we are mutating the `InputElement.value`. Thus you can set an initial value.\r\n\r\nElements such as `input` may have `value` / `checked` attributes ect. On the server we should be rendering as `<input value=\"email@example.com\">` to pre-define the initial value. Or `<input checked=\"checked\">` for checkbox/radio for example.\r\n\r\nReact has an API called `defaultValue` for setting the initial value: https://zhenyong.github.io/react/docs/forms.html#default-value\r\n\r\n## Note: \r\n\r\nWe do this with `VUE_ENV` as on the client the value is updated via the `checked` / `value` on the Element itself, as we do not want to cause an attribute change each time.\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nA solution could be to follow the defaultValue API but that doesn't really work for `checked`. Thus internally handling input types to correctly render the default value via attribute for SSR content will simplify setting the initial display value for inputs.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR value hydration for elements with render function",
        "labels": "feature request",
        "id": 123307
    },
    {
        "body": "### What problem does this feature solve?\r\nThe related issue (https://github.com/vuejs/vue/issues/5151) is closed, so I need to clarify my point.\r\n\r\nIt should exist convenient way to define template for items of hierarchical component (for example, tree or list with sections).\r\nI know, it can be solved with render functions, but it is not so \"native\" way of building components in vue as in react. I mean, writing / reading render functions is more uncomfortable for average vue user, because they are used only occasionally. It's even worse, if user need to setup webpack / babel / jsx. So I think, render functions should be avoided for not-so-advanced cases.\r\n\r\nSlots can be \"passed\" to children using templates, like this:\r\n```\r\n<child>\r\n    <template slot-scope=\"props\">\r\n        <slot v-bind=\"props\"></slot>\r\n    </template>\r\n</child>\r\n```\r\nBut there are some drawbacks:\r\n1) This creates wrapper function on each level. First, we have wrapper. Then wrapper of wrapper, and so on.\r\n2) This breaks fallback content (default template) feature.\r\n\r\n### What does the proposed API look like?\r\n```\r\n<child>\r\n    <slot slot-scope></slot>\r\n</child>\r\n```\r\n### Remark\r\nI propose syntax, which is boiled down version of first markup, and can be supported by compiler. Here is my test implementation (it seems quite easy): https://github.com/shameleo/vue-slot-pass-demo/commit/bdb6cbbf3ab7574d4b2d350f7d866e2bc609a043\r\nIf you give me green light, I'll try to prepare PR. If something is missed in implementation, let me know, please.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Ability to pass scoped slots to descedants in templates",
        "labels": "feature request",
        "id": 123308
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, I use\r\n`import(/* webpackChunkName: \"lang-[request]\" */ json!yaml!./myForm.lang.${currentLocale}.yaml)`\r\nto load the appropriate translation for my components.\r\n\r\nThis generates `numberOfForms * numberOfLangages` chunks that are prefetched when the application starts.\r\n\r\nI would like to load only translations for the current language.\r\n\r\n`shouldPrefetch(file, type)` gives\r\n```\r\n0.js script\r\n1.js script\r\n2.js script\r\n...\r\n```\r\nThere is not enough information to filter files that should not been prefetched.\r\n\r\n### What does the proposed API look like?\r\nI don't know what are the available information at `shouldPrefetch`.\r\nBut probably API should look like:\r\n`shouldPrefetch(file, type, originalFilename)`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "shouldPrefetch enhancement",
        "labels": "feature request",
        "id": 123309
    },
    {
        "body": "### What problem does this feature solve?\r\nRight now you can only have 1 root element per template. I know this is by design, but I find myself wrapping everything around a `<div>` a lot. Now, most of the time is not a big deal, I can live with that, the problem is when either Bootstrap requires a very specific hierarchy, or when dealing with Tables that also require a very specific hierarchy and wrapping everything on a div is not an option.\r\n\r\n### What does the proposed API look like?\r\nNow, there will be a couple of things to figure out, mainly to what element will the properties provided on the Custom Element will be attached to. I think there two things that can be done:\r\n1) Find the first child and stick everything to it.\r\n2) Provide a custom attribute to indicate to what element they should be attached to.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow more than 1 root element for Template",
        "labels": "feature request",
        "id": 123310
    },
    {
        "body": "### What problem does this feature solve?\r\n\u5728`parseComponent`\u4e2d\uff0c\u4f1a\u5bf9`script`\u8fdb\u884c`de-indent`\uff0c\u5bfc\u81f4\u751f\u6210`sourceMap`\u65f6\u65e0\u6cd5\u6839\u636e`script`\u7684`sourceMap`\u8ba1\u7b97`vue`\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\u3002\u6216\u8bb8\u6211\u4eec\u5e94\u8be5\u652f\u6301\u53ef\u9009\u7684`de-indent`\u6216\u5728block\u4e2d\u8f93\u51fa\u5177\u4f53\u53bb\u6389\u4e86\u591a\u5c11\u7684\u7a7a\u767d\uff1f\r\n\r\n### What does the proposed API look like?\r\nvue_template_compiler.parseComponent(vue, {deindent: false})\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-template-compiler \u652f\u6301 deindent \u5f00\u5173",
        "labels": "feature request",
        "id": 123311
    },
    {
        "body": "### What problem does this feature solve?\r\nAs the author of nativescript-vue I had to set up a similar build setup as Vue's in order to be able to import certain parts of Vue directly into nativescript-vue. The main source of issues was the aliases used across the Vue repository (which do make sense btw!). \r\n\r\nTo solve that issue, I would love to have an official package for creating (and registering) custom renderers into Vue, which would enclose most of the Vue specific logic of patching / hydrating etc.\r\n\r\nA good example of what I have in mind would be the react's package that does it: https://github.com/facebook/react/tree/master/packages/react-reconciler\r\n\r\nI would love to get some work done on this, but I'd work with the core team to make sure the best possible quality.\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\n```js\r\n// my custom renderer\r\n// for example: nativescript-vue.js\r\nimport VueRenderer from 'vue-renderer'\r\n\r\n// a class for creating native views in NativeScript\r\nimport ViewUtils from './ViewUtils.js'\r\n\r\nexport default new VueRenderer({\r\n  // Node operations\r\n  createElement(tagName) {},\r\n  createElementNS(namespace, tagName) {},\r\n  createTextNode(text) {},\r\n  createComment(text) {},\r\n  insertBefore(parentNode, newNode, referenceNode) {},\r\n  removeChild(node, child) {},\r\n  appendChild(node, child) {},\r\n  parentNode(node) {},\r\n  nextSibling(node) {},\r\n  tagName(node) {},\r\n  setTextContent(node, text) {},\r\n  setAttribute(node, attribute, value) {},\r\n\r\n  // Additional methods that need to be specified\r\n  // but for example:\r\n  createRoot() {} // this would get called to create the root element for the root Vue instance\r\n})\r\n```\r\n\r\n```js\r\n// then in userland we could just do\r\nimport Vue from 'vue'\r\nimport NativescriptVue from 'nativescript-vue'\r\n\r\nVue.use(NativescriptVue)\r\n\r\n\r\nnew Vue({\r\n  render(h) => h('label', { text: 'Hello World' })\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Create a package for building custom renderers",
        "labels": "feature request",
        "id": 123312
    },
    {
        "body": "### What problem does this feature solve?\r\nRecently I'm working on a project that attempts to deploy ES2015 code to production. The idea was inspired by Philip Walton's [post](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/).\r\n\r\nI hacked [vuejs-templates/webpack](https://github.com/vuejs-templates/webpack) to [output dual bundles with feature detection to downgrade](https://github.com/myst729/es2015). The benefit is significant: ES2015 script execution time is only about 55% of ES5! And the bundle size reduces too. If vue (as well as vue-router, vuex, etc.) could provide ES2015 bundles, the performance boost can be even more significant.\r\n\r\nAccording to the [es6 compatibility table](https://kangax.github.io/compat-table/es6/), ES2015 compatible browsers have got a lot of market shares. Although vue relies on ES5 feature `Object.defineProperty`, I think it is still meaningful to provide ES2015 bundle as an option.\r\n\r\n### What does the proposed API look like?\r\nThis request is not about some particular APIs.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide ES2015  bundle?",
        "labels": "feature request",
        "id": 123313
    },
    {
        "body": "### What problem does this feature solve?\r\nv-model for components already supports .trim and .number.\r\nLazy modifier support for components would make it more uniform across the platform.\r\n\r\n### What does the proposed API look like?\r\nThe only change (backwards compatible) would be to add a new property to model definition:\r\n```\r\nmodel: {\r\n  prop: 'value',\r\n  event: 'input',\r\n  eventLazy: 'change'\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Request: add v-model.lazy for components",
        "labels": "feature request",
        "id": 123314
    },
    {
        "body": "~*Sorry, Chinease only. I'll try to translate later.*~\r\n\r\n### What problem does this feature solve?\r\n\u6709\u65f6\u6211\u5e0c\u671b\u5728\u7ec4\u4ef6\u67d0\u533a\u57df\u6e32\u67d3\u6570\u636e\uff0c\u5b83\u4eec\u90fd\u6765\u81ea\u4e8edata\u4e0a\u6bd4\u8f83\u6df1\u5c42\u7684\u67d0\u4e00\u4e2a\u5c5e\u6027\uff0c\u5f53\u6570\u636e\u91cf\u6bd4\u8f83\u591a\u65f6\uff0c\u76f4\u63a5\u4f7f\u7528\u6587\u672c\u63d2\u503c\u7684\u5199\u6cd5\u4f1a\u6bd4\u8f83\u7e41\u7410\uff0c\u6bd4\u5982\uff1a\r\n(\u4ee5\u4e0b\u4e3a\u4e86\u7cbe\u7b80\u4ee3\u7801\uff0c\u91c7\u7528\u4e86pug\u3001es6\u8bed\u6cd5\uff0c\u5e76\u5ffd\u7565Vue\u7ec4\u4ef6data\u5fc5\u987b\u4e3a\u51fd\u6570\u7684\u8981\u6c42)\r\nThe mustache interpolations of data in some deep props make the code cumbersome:\r\n\r\n***data.js***\r\n```js\r\nexport default {\r\n  some: {\r\n    deep: {\r\n      props: {\r\n        a: 1,\r\n        b: 2,\r\n      },\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n***my-page.vue***\r\n```vue\r\n<template lang=\"pug\">\r\n  div\r\n    p {{some.deep.props.a}}\r\n    p {{some.deep.props.b}}\r\n</template>\r\n<script>\r\n  import data from './data.js'\r\n  export default {\r\n    data,\r\n  }\r\n</script>\r\n```\r\n\u6211\u60f3\u5230\u51e0\u79cd\u53d8\u901a\u7684\u505a\u6cd5\uff1a\r\nI tried some solutions:\r\n\r\n1. #### \u4f7f\u7528\u8ba1\u7b97\u5c5e\u6027\uff1aUse computed properties:\r\n    ***my-page.vue***\r\n    ```vue\r\n    <template lang=\"pug\">\r\n      div\r\n        p {{props.a}}\r\n        p {{props.b}}\r\n    </template>\r\n    <script>\r\n      import data from './data.js'\r\n      export default {\r\n        data,\r\n        computed: {\r\n          props() {\r\n            return this.some.deep.props;\r\n          },\r\n        },\r\n      }\r\n    </script>\r\n    ```\r\n\r\n    \u8fd9\u6837\u505a\u76f8\u5bf9\u7b80\u5355\uff0c\u4f46\u662f\u603b\u8981\u4e3a\u6b64\u53bb\u5b9a\u4e49\u5f88\u591a\u8ba1\u7b97\u5c5e\u6027\u4f3c\u4e4e\u4e5f\u6709\u4e9b\u7e41\u7410\u3002\r\n    It is easy to use, but the computed properties become cumbersome.\r\n\r\n2. #### \u5229\u7528`v-for`\u6307\u4ee4\u6765\u7f29\u5c0f\u4f5c\u7528\u57df\uff1aUse `v-for` directive to define a scoped variable:\r\n\r\n    ***my-page.vue***\r\n    ```vue\r\n    <template lang=\"pug\">\r\n      div\r\n        template(v-for=\"props in [some.deep.props]\")\r\n          p(ref=\"a\") {{props.a}}\r\n          p(ref=\"b\") {{props.b}}\r\n    </template>\r\n    <script>\r\n      import data from './data.js'\r\n      export default {\r\n        data,\r\n      }\r\n    </script>\r\n    ```\r\n\r\n    \u8fd9\u662f\u4e00\u4e2a\u53d6\u5de7\u7684\u505a\u6cd5\uff0c\u4f46\u4e5f\u6709\u526f\u4f5c\u7528\uff1a\u7528`$refs`\u8bbf\u95ee`v-for`\u8303\u56f4\u5185\u7684`ref`\u5f15\u7528\u4f1a\u53d8\u6210\u6570\u7ec4\u3002\r\n    It almost works well, but have side-effect: `$refs` in the `v-for` scope will become an array.\r\n\r\n3. #### \u5c06\u6570\u636e\u6e32\u67d3\u533a\u57df\u5b9a\u4e49\u4e3a\u5b50\u7ec4\u4ef6\uff0c\u5b50\u7ec4\u4ef6\u63a5\u53d7\u7b80\u5316\u540e\u7684\u6570\u636e\uff1aUse child component:\r\n\r\n    ***data-view.vue***\r\n    ```vue\r\n    <template lang=\"pug\">\r\n      div\r\n        p {{props.a}}\r\n        p {{props.b}}\r\n    </template>\r\n    <script>\r\n      export default {\r\n        props: ['props'],\r\n      }\r\n    </script>\r\n    ```\r\n\r\n    ***my-page.vue*** \r\n    ```vue\r\n    <template lang=\"pug\">\r\n      div\r\n        data-view(:props=\"some.deep.props\")\r\n    </template>\r\n    <script>\r\n      import data from './data.js'\r\n      import DataView from './data-view.vue'\r\n      export default {\r\n        components: {DataView},\r\n        data,\r\n      }\r\n    </script>\r\n    ```\r\n\r\n    \u5b50\u7ec4\u4ef6\u5185\u90e8\u7684\u5199\u6cd5\u80fd\u7b80\u5316\u8bb8\u591a\uff0c\u4f46\u662f\u6574\u4f53\u82b1\u9500\u4ecd\u7136\u4e0d\u5c0f\u3002\u4e00\u4e2a\u989d\u5916\u7684\u95ee\u9898\u662f\uff0c\u5b50\u7ec4\u4ef6\u591a\u5f15\u5165\u4e86\u4e00\u4e2a\u53ef\u80fd\u539f\u672c\u5e76\u4e0d\u5fc5\u8981\u7684\u5305\u88c5\u6839\u5143\u7d20\u3002\r\n    Interpolations in child component become simple, but more children is also cumbersome. In addition, the child need a wrapper element as the component root, which was not needed before.\r\n\r\n4. #### \u5229\u7528\u5b50\u7ec4\u4ef6\u4f5c\u7528\u57df\u63d2\u69fd\u6765\u5c01\u88c5\u4e00\u4e2a\u901a\u7528\u7684\u8f85\u52a9\u7ec4\u4ef6\uff1aUse the scoped slot to make a reusable component:\r\n\r\n    ***sub-scope.vue***\r\n    ```vue\r\n    <template lang=\"pug\">\r\n      div\r\n        slot(:sub=\"data\")\r\n    </template>\r\n    <script>\r\n      export default {\r\n        props: ['data'],\r\n      }\r\n    </script>\r\n    ```\r\n\r\n    ***my-page.vue***\r\n    ```vue\r\n    <template lang=\"pug\">\r\n      div\r\n        sub-scope(:data=\"some.deep.props\")\r\n          template(slot-scope=\"scope\")\r\n            p {{scope.sub.a}}\r\n            p {{scope.sub.b}}\r\n        // or\r\n        sub-scope(:data=\"some.deep.props\")\r\n          template(slot-scope=\"{sub}\")\r\n            p {{sub.a}}\r\n            p {{sub.b}}\r\n    </template>\r\n    <script>\r\n      import data from './data.js'\r\n      import SubScope from './sub-scope.vue'\r\n      export default {\r\n        components: {SubScope},\r\n        data,\r\n      }\r\n    </script>\r\n    ```\r\n\r\n    \u8fd9\u4e5f\u662f\u53d6\u5de7\u5229\u7528\u4e86\u5b50\u7ec4\u4ef6\u6765\u6539\u53d8\u8bbf\u95ee\u4f5c\u7528\u57df\u3002\u53ef\u4ee5\u590d\u7528\u770b\u4e0a\u53bb\u597d\u50cf\u662f\u4e00\u4e2a\u4f18\u70b9\uff0c\u4f46\u5b9e\u9645\u4f7f\u7528\u8fd8\u662f\u6bd4\u8f83\u7e41\u7410\uff0c\u751a\u81f3\u4ee3\u7801\u770b\u4e0a\u53bb\u6709\u4e9b\u66f4\u4e71\u4e86\u3002\u4e0e\u4e0a\u4e00\u4e2a\u65b9\u6cd5\u540c\u6837\u5b58\u5728\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b50\u7ec4\u4ef6\u5f15\u5165\u4e86\u53ef\u80fd\u539f\u672c\u5e76\u4e0d\u5fc5\u8981\u7684\u5305\u88c5\u6839\u5143\u7d20\u3002\r\n    Only the interpolations look like simpler, but other codes become more complex.\r\n\r\n### What does the proposed API look like?\r\n\u6211\u611f\u89c9\u5229\u7528`v-for`\u6307\u4ee4\u7684\u529e\u6cd5\u5f88\u5de7\u5999\uff0c\u5c31\u662f\u591a\u4e86\u4e00\u4e9b\u526f\u4f5c\u7528\uff0c\u867d\u7136\u4e5f\u4e0d\u662f\u975e\u5e38\u4e25\u91cd\u7684\u5f71\u54cd\u3002\r\n\u56e0\u6b64\u6211\u5e0c\u671b\u80fd\u6709\u4e00\u4e2a\u6307\u4ee4\uff0c\u80fd\u591f\u5982\u540c`v-for`\u4e00\u6837\u5b9a\u4e49\u4e00\u4e2a\u5c40\u90e8\u4f5c\u7528\u57df\u53d8\u91cf\uff0c\u4f46\u53c8\u4e0d\u4f1a\u5f71\u54cd`$refs`\u5f15\u7528\u7684\u8868\u73b0\u3002\r\nI hope there is a directive can define scoped variables like `v-for`, but will not affect the performance of `$refs`.\r\n\r\n```pug\r\ndiv(v-scope=\"props of some.deep\") {{props.a}}\r\n// or\r\ndiv(v-scope=\"(a, b) of some.deep.props\") {{a}}, {{b}}\r\n```\r\n\r\n\u6216\u8005\u53ef\u4ee5\u63d0\u4f9b\u4e24\u79cd`ref`\u5143\u7d20\u8bbf\u95ee\u63a5\u53e3\uff1a\r\nOr the `ref` API should be optimized:\r\n* `$refs`\u4ec5\u7528\u4e8e\u8bbf\u95ee\u6307\u5b9a\u5f15\u7528\u540d\u7684\u7b2c\u4e00\u9879\uff0c\u7c7b\u4f3c\u4e8e`querySelector()`\u3002`$refs` should only be used for reference the first of elements with the same `ref` value, like `querySelector()`.\r\n* \u800c`$groupedRefs`(\u6211\u60f3\u4e5f\u8bb8\u8fd8\u6709\u66f4\u597d\u4e00\u70b9\u7684\u540d\u5b57)\u5219\u7528\u4e8e\u8bbf\u95ee\u5305\u542b\u76f8\u540c\u5f15\u7528\u540d\u7684\u5168\u90e8\u5143\u7d20\u6570\u7ec4\uff0c\u7c7b\u4f3c\u4e8e`querySelectorAll()`\u3002`$groupedRefs` is used for reference the array of the elements with the same `ref` value, like `querySelectorAll()`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "hope to have a way to set scope of variable",
        "labels": "feature request",
        "id": 123315
    },
    {
        "body": "### What problem does this feature solve?\r\nHi! Components have the extend feature, but there is nothing similar for functional components. The problem and the solution is well explained at https://github.com/alexsasharegan/vue-functional-data-merge and while that works fine and I am very grateful to the author, I would like to request an official in core solution.\r\n\r\nWhy? Because there are edge situations or new features that 3rd party solutions will have a difficult time to be on top.\r\n\r\n### What does the proposed API look like?\r\nSimilar as done by @alexsasharegan\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Functional components data merging util",
        "labels": "feature request",
        "id": 123316
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently mouse button modifiers, introduced in #4866, are `left`, `middle`, `right` for `$event.button` values `0`, `1`, `2` correspondingly. But that is only correct for the \"default\" right-handed layout. In the left-handed mode (when the buttons are switched in the OS) the right button has `0` value and the left button - `2`. Besides, also some right-handed users may reverse or remap the mouse buttons. And working with code with these names for mouse buttons may lead to confusion and bugs among developers not familiar with the \"default\" right-handed mode being the target for these modifiers.\r\n\r\n### What does the proposed API look like?\r\nKeep `left` and `right` as deprecated and add `main` and `secondary` as their aliases.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Mouse button modifiers for \"v-on\" should have more precise aliases",
        "labels": "feature request",
        "id": 123317
    },
    {
        "body": "### What problem does this feature solve?\r\nFunctional components with templates allow users to improve performance without sacrificing readability or ease of use. However, currently these do not support the \"components\" option. This limits this feature a lot, to a very limited set of use cases. \r\n\r\n### What does the proposed API look like?\r\nSimply support the components option just like non-functional components\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Asset support for functional components",
        "labels": "feature request",
        "id": 123318
    },
    {
        "body": "### What problem does this feature solve?\r\nFor custom HTML elements Vue overwrites some attributes with default values. One example is the `selected` attribute which will always be set to `selected=selected` for truthy values. This absolutely makes sense for HTML elements that are defined in the HTML standard, but not for custom elements. Custom elements are not yet a web standard but there are already ways to build and use them. We experienced the issue when experimenting with a custom element for a tab bar which has the selected tab stored in a selected attribute.\r\n\r\nFind a code example in:\r\nhttps://jsfiddle.net/1pc2e9yj/2/\r\n(The code example is currently limited to Chrome and Safari, because of missing polyfills for other browsers)\r\n\r\n### What does the proposed API look like?\r\nVue already has a config setting for `ignoredElements`. My proposal would be, that attributes are not set to their default values for elements in the `ignoredElements` array. If that approach is valid, then the example code in the jsfiddle would stay the same, but the output would change to \"selected attribute value: tab1\"\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Overwrite of element attributes with default value",
        "labels": "feature request",
        "id": 123319
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen attempting to declare a type for a complex object-type prop for a component, it's difficult to understand (without knowing exactly how the Props typing works) how to cast that specific prop to the interface you create.\r\n\r\nThe best way of doing it currently is to do this:\r\n```ts\r\nimport Vue from 'vue'\r\nimport { Prop } from 'vue/types/options'\r\n\r\ninterface FooBar {\r\n  foo: string,\r\n  bar: string\r\n}\r\n\r\nexport default Vue.extend({\r\n  props: {\r\n    foobar: Object as (() => FooBar)\r\n  }\r\n})\r\n```\r\n\r\n### What does the proposed API look like?\r\nIt would be nice to expose the Prop generic type in vue/types/options.d.ts in the default types export so that we can simply use this:\r\n```ts\r\nimport Vue, { Prop } from 'vue'\r\n\r\n// boilerplate\r\n  props: {\r\n    foobar: Object as Props<FooBar>\r\n}\r\n```\r\n\r\nThis also extends to complex callback types if need be so that whenever the regular prop types via the primitive type constructors don't work, we can create an interface and cast it as `Prop<ICustomType>` and it just works.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Export Prop type in main types file (vue/types/index.d.ts)",
        "labels": "feature request",
        "id": 123320
    },
    {
        "body": "### What problem does this feature solve?\r\nmultiple entry and output point, because webpack plugin option of filename don't support template syntac like [name]\u3001[id], so It's not convenient on this situation. \r\n\r\n### What does the proposed API look like?\r\nnew VueSSRServerPlugin({\r\n        filename: '[name]/vue-ssr-server-bundle.json'\r\n })\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue SSR webpack plugin support template syntax for filename option",
        "labels": "feature request",
        "id": 123321
    },
    {
        "body": "### What problem does this feature solve?\r\nRight now (2.4.4), props can be validated based on their value, but are unable to take other props into consideration. With access to a props object, we could do more complex validation.\r\n\r\nFor example, imagine a component with a `foo` and `bar` prop, where at least one of these props must be defined. Currently, this logic would have to be placed in the component's lifecycle hooks or render function. I would like the ability to keep it within the `validator` functions, as I think it's a more appropriate place for the logic.\r\n\r\n### What does the proposed API look like?\r\n```js\r\nexport default {\r\n  props: {\r\n    foo: {\r\n      validator: (foo, props) => foo || props.bar\r\n    },\r\n    bar: {\r\n      validator: (bar, props) => bar || props.foo\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Supply all props to validator as second argument",
        "labels": "feature request",
        "id": 123322
    },
    {
        "body": "### What problem does this feature solve?\r\nIn `vue-server-renderer`, the [`renderState()` method generates](https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/build.js#L7577) a `<script>` tag in which the context state is injected for client consumption and hydration. Both the `contextKey` and `windowKey` are configurable via options, but there is no way to customize the `<script>` tag for targeting purposes.\r\n\r\nI would like to be able to remove this `<script>` tag from the DOM after client hydration, but it would be very hacky to find and select this node without the ability to define an `id` attribute or similar on it. I am proposing a new option that will append an `id` attribute to this `<script>` tag, called `scriptKey`. This new `scriptKey` should be in the same options object that `contextKey` and `windowKey` are currently.\r\n\r\n### What does the proposed API look like?\r\n```js\r\ncontext.renderState({\r\n  scriptKey: 'VueState'\r\n});\r\n\r\n// -> <script id=\"VueState\">window.__INITIAL_STATE__={...}</script>\r\n```\r\n\r\nso that later in the client code this is possible:\r\n```js\r\nconst vueTag = document.getElementById('VueState');\r\nvueTag.parentElement.removeChild(vueTag);\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Customize server state script tag",
        "labels": "feature request",
        "id": 123323
    },
    {
        "body": "### What problem does this feature solve?\r\nIf people want to use Vue flow types, they can import them from the Vue npm module. \r\n\r\n### What does the proposed API look like?\r\nWe would include the flow directory in the npm dist files\r\n\r\n(I'm happy to make a PR)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Export flow types in dist file",
        "labels": "feature request",
        "id": 123324
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen a computed value is computed, it's called with `this` as a parameter.\r\nThis allows us to write code like this:\r\n```javascript\r\ncomputed: {\r\n  isHome: ({ $route }) => $route.name === 'home',\r\n}\r\n```\r\n\r\nThe same can't be done with the data method, due to it not being called with `this`.\r\n\r\n### What does the proposed API look like?\r\n```javascript\r\ndata: ({ $someProperty }) => ({\r\n  someString: $someProperty.someString + \" + something else\",\r\n}),\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Data method of components to be called with this",
        "labels": "feature request",
        "id": 123325
    },
    {
        "body": "### Version\r\n2.4.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/57508hba/4/](https://jsfiddle.net/57508hba/4/)\r\n\r\n### Steps to reproduce\r\n1. Create a component with a slot\r\n2. Bind a reference to a string to the slot via `v-bind`\r\n3. Utilize said component and define a template for the defined slot, giving it a local scope parameter with which to output the bound string.\r\n4. Output the scoped string in your template which is passed to the component created in step 1\r\n\r\n### What is expected?\r\nThe string bound to the slot should be passed into the template passed for the slot, as a string.\r\n\r\n### What is actually happening?\r\nThe string is being exploded into an object where the properties are the string indexes for each character in the string.\r\n\r\n---\r\nI'm not sure if this is intended behavior or not. The default value for the defined slot outputs the string as expected, but as soon as it's passed to the consumer defined template, the string is altered to an object.\r\n\r\nThe temporary work-around for this is to simply pass an actual object to v-bind on the slot, and expect an object as the scoped value in your defined template.\r\n\r\nIt seems that if this is intended behavior, there should be at least a Vue warning about the value being mangled and that v-bind expects an object and not string.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-bind with something else than an object should warn you",
        "labels": "feature request",
        "id": 123326
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nEnables simpler syntax and more consistent behaviour.\r\n\r\nIt would be nice if you could add reactive properties to a function or an array. Currently only object works.\r\n\r\nSee this fiddle for an example: https://jsfiddle.net/r64e77ge/4/\r\nNotice how `b` and `c` does not update when the child value is toggled. (they do however update when a.value is toggled if they had been toggled first)\r\n\r\n```html\r\n<div id=\"app\">\r\n  a.value {{a.value}}<button @click=\"a.value = !a.value\">Toggle</button><br>\r\n  b.value {{b.value}}<button @click=\"b.value = !b.value\">Toggle</button><br>\r\n  c.value {{c.value}}<button @click=\"c.value = !c.value\">Toggle</button><br>\r\n</div>\r\n```\r\n\r\n```js\r\nnew Vue({\r\n  el: '#app',\r\n  data: function() {\r\n    var a = {}\r\n    var b = []\r\n    var c = function(){}\r\n    \r\n    a.value = true\r\n    b.value = true\r\n    c.value = true\r\n    \r\n    return {\r\n      a: a,\r\n      b: b,\r\n      c: c\r\n    }\r\n  }\r\n})\r\n````\r\n\r\n\r\nMy use case is this plugin:\r\nhttps://github.com/mokkabonna/vue-async-methods\r\n\r\nFunctions and arrays are not treated as objects that can have their own child reactive properties even though they in fact can.\r\n\r\nBecause of this limitation I had to place the method itself on a child `fetchData.execute` property instead of `fetchData` itself.\r\n\r\nThis is especially clunky when calling the method from code: `this.fetchData.execute()` separates the async methods from normal methods that can be called with `this.fetchData()`\r\n\r\n### What does the proposed API look like?\r\nI see no technical challenges in treating functions and arrays as objects that can have their own reactive properties. And I suspect the change in the code is also just a small one.\r\n\r\nThe changes should be here:\r\nhttps://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L108\r\n\r\nand here:\r\nhttps://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L117\r\n\r\nA quick change to those lines makes my fiddle work as expected for function at least.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support reactive properties on array and function",
        "labels": "feature request",
        "id": 123327
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently there is no browser runtime available over CDN for users.\r\n\r\nvue-test-utils requires Vue and vue template compiler as globals, when it's run in the browser. Without an easily available browser friendly vue-template-compiler, users will not be able to use the full features of vue-test-utils.\r\n\r\nIf it's added, users will be able to run vue-test-utils in the browser\r\n\r\n*Note: only a few features require the template compiler, an alternative to making it available on a CDN would be to warn browser users that certain features aren't available in the browser build*\r\n\r\n### What does the proposed API look like?\r\nCreate a browser runtime that adds vueTemplateCompiler as a global variable.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Create an IIFE build of vue-template-compiler and add it to CDNjs",
        "labels": "feature request",
        "id": 123328
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen the parent component passes prop to the child component if the prop type is object, and its value has been given as a `plain object`, at the same time, and the child component's default value build function also returns a `plain object`, we should merge the default object and the prop object (`shadow merge`), which is very conducive to customize the default value. and also greatly enhance the feel of writing Vue components.\r\n\r\nA simple example:\r\n\r\n```js\r\n//parent component\r\n<Editor :options=\"editorOption\"></Editor>\r\n\r\ndata () {\r\n      return {\r\n        editorOptions: {\r\n          line: true,\r\n          autoCloseTags: true\r\n          }\r\n        }\r\n      }\r\n\r\n// Child component\r\n    props: {\r\n      options: {\r\n        type: Object,\r\n        default () {\r\n          return {\r\n            line: false\r\n            mode: 'text/javascript'\r\n          }\r\n        },\r\n        required: true\r\n      },\r\n    },\r\n```\r\n\r\nIn correct version, the `options` in child component will be rendered as:\r\n\r\n```js\r\n{\r\n          line: true,\r\n          autoCloseTags: true\r\n}\r\n```\r\n\r\nbut the ideal result should be:\r\n\r\n```js\r\n{\r\n            line: false\r\n            autoCloseTags: true\r\n            mode: 'text/javascript'\r\n}\r\n```\r\n\r\nFor performance reasons, we just need to do __`shadow merge`__.\r\nIt will greatly enhance the writing feeling for some flexible and largely configurable component.\r\n\r\n### What does the proposed API look like?\r\nNo need new API, just handle in the logic of `check default value`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "When prop's type is plain object, it's wonderful to merge default object and prop object when they all exist",
        "labels": "feature request",
        "id": 123329
    },
    {
        "body": "### What problem does this feature solve?\r\n\u6211\u5728\u4f7f\u7528vue\u505a\u5355\u9875\u5e94\u7528\u65f6\uff0c\u5728\u591a\u4e2a\u529f\u80fd\u5207\u6362\u7684\u65f6\u5019\uff0c\u5e0c\u671b\u80fd\u8fbe\u5230\u52a8\u6001\u521b\u5efatab\u8fdb\u884c\u5207\u6362\u7684\u6548\u679c\uff0c\u548c\u4ee5\u524d\u4f7f\u7528iframe\u4e00\u6837\uff0c\u8fd9\u4e9btab\u662fkeep-alive\u7684\uff0c\u4f46\u5982\u679c\u592a\u591akeep-alive\u7684\u65f6\u5019\uff0c\u6d4f\u89c8\u5668\u5185\u5b58\u5360\u7528\u4f1a\u8fc7\u5927\u3002\u6211\u5e0c\u671b\u80fd\u591f\u8fbe\u5230\u53ef\u5207\u6362\u7684tab\u6700\u591a\u4f8b\u5982\u53ea\u6709\u5341\u4e2a\uff0c\u524d\u9762\u7684\u6211\u4f1a\u7528\u7a0b\u5e8f\u81ea\u52a8\u5173\u95ed\u5bf9\u5e94tab\uff0c\u6b64\u65f6\u5e0c\u671b\u80fd\u628a\u5176\u7f13\u5b58\u7684\u7ec4\u4ef6\u4e5f\u5bf9\u5e94\u6e05\u9664\u3002\r\n\r\n\r\n### What does the proposed API look like?\r\n\u4f8b\u5982\uff1avm.$clearKeepAlived(routerName)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "\u5e0c\u671bkeep-alive\u80fd\u589e\u52a0\u53ef\u4ee5\u52a8\u6001\u5220\u9664\u5df2\u7f13\u5b58\u7ec4\u4ef6\u7684\u529f\u80fd",
        "labels": "feature request",
        "id": 123330
    },
    {
        "body": "### What problem does this feature solve?\r\nIf a user uses a custom directive in their app in multiple places they might need to configure the directive in two or more different ways depending on the area of the app in which the directive is being used. If this configuration is used in many instances in one of these areas, providing this configuration on every instance becomes redundant and cumbersome.\r\n\r\n### What does the proposed API look like?\r\nI think the provide/inject pattern would be a good solution to this. A user could add different configurations in the top level provider components and use the custom directive normally in their descendants.\r\n\r\n```js\r\nvar Provider = {\r\n  provide: {\r\n    foo: 'bar'\r\n  },\r\n  // ...\r\n}\r\n\r\nvar OtherProvider = {\r\n  provide: {\r\n    foo: 'baz'\r\n  },\r\n  // ...\r\n}\r\n\r\nVue.directive('bar', {\r\n  inject: ['foo'],\r\n  bind (el, binding) {\r\n    // binding.injections.foo or binding.foo \r\n  }\r\n})\r\n```\r\n\r\n```html\r\n<provider><div v-bar=\"something\"></div></provider>\r\n<other-provider><div v-bar=\"somethingElse\"></div></other-provider>\r\n```\r\n\r\nI'm not confident on what the best place is for the actual injections to live in the directive hook arguments but there are some ideas in the code example above.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide/inject for custom directives",
        "labels": "feature request",
        "id": 123331
    },
    {
        "body": "### What problem does this feature solve?\r\nI try to build vue version of [react-overdrive](https://github.com/berzniz/react-overdrive), it needs to get the size and position before component destroyed.\r\n\r\nCurrently,  when I set false to `v-if` or change route, the lifecycle of the component seems like this:\r\n\r\nv-if='false' -> DOM removed -> `beforeDestroyed` called -> vm destroy -> `destroyed` called\r\n\r\nIt seems no way to get the real DOM before component destroyed.\r\n\r\nRelated: \r\n* #6106 \r\n* [How to get position and size of component before it destroyed with v-if?](https://forum.vuejs.org/t/how-to-get-position-and-size-of-component-before-it-destroyed-with-v-if/14691)\r\n\r\n### What does the proposed API look like?\r\n`beforeUnmount` may useful in some cases:\r\n\r\nv-if='false' -> `beforeUnmount` called -> DOM removed -> `unmounted` called(optional) -> `beforeDestroyed` called -> vm destroy -> `destroyed` called\r\n\r\nOr like this if it possible:\r\n\r\nv-if='false' -> `beforeDestroyed` called -> DOM removed -> vm destroy -> `destroyed` called\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "beforeUnmount in lifecycle?",
        "labels": "feature request",
        "id": 123332
    },
    {
        "body": "### What problem does this feature solve?\r\nHaving multiple event handlers that call the very same function add noise to the templates.\r\nI propose to DRY that a bit.\r\n\r\n### What does the proposed API look like?\r\nCurrently you can pass multiple functions to a single event handler like so:\r\n```html\r\n<component\r\n     @click=\"func1(); func2()\"\r\n></component>\r\n```\r\n\r\nHowever, I think it would be really handy to be able to do the inverse, ie. passing the same function to multiple event handlers.\r\nToday for instance I have to do this:\r\n```html\r\n<component v-model.number=\"foo\"\r\n    @doDelayedStuff=\"delayedStuff\"\r\n    @wheel.native=\"delayedStuff\"\r\n    @mouseenter.native=\"callFooUpdate\"\r\n    @focus.native=\"callFooUpdate\"\r\n    @keyup.native=\"callBar\"\r\n    @mouseleave.native=\"callFooClear\"\r\n    @blur.native=\"callFooClear\"\r\n    @change.native=\"callFooClear\"\r\n    @click.prevent=\"doStuff\"\r\n    @keyup.75=\"doStuff\"\r\n></component>\r\n```\r\n\r\nIt would be great if you could instead do that:\r\n```html\r\n<component v-model.number=\"foo\"\r\n    @[doDelayedStuff, wheel.native]=\"delayedStuff\"\r\n    @[mouseenter.native, focus.native]=\"callFooUpdate\"\r\n    @keyup.native=\"callBar\"\r\n    @[mouseleave.native, blur.native, change.native]=\"callFooClear\"\r\n    @[click.prevent, keyup.75]=\"doStuff\"\r\n></component>\r\n```\r\nThat way you can more clearly see in one glance how many different behavior are attached to a component. Also, modifying the callbacks is easier.\r\n\r\nThoughts? \ud83d\ude04\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Be able to pass multiple events the same function in templates",
        "labels": "feature request",
        "id": 123333
    },
    {
        "body": "### What problem does this feature solve?\r\n## Introduction\r\nSeparation of concerns is important, that's why we always try to encapsulate data and logic inside independent smart components reusable throughout the application. **Smart Components** usually perform asynchronous operations like data fetching and they can be nested inside each other.\r\n\r\n## Problem\r\nCurrently the SSR solution proposed by the [vue-hackernews-2.0](https://github.com/vuejs/vue-hackernews-2.0) example requires all asynchronous operations to be performed in the *asyncData* hook, which unfortunately is only available to route-components registered in the router. This makes route-components become \"super-smart\" as they take responsibility for all the data of all underlying \"dumb\" components and doesn't allow for any smart component to be placed beneath a route-component. During SSR the server-side renderer won't wait for any nested smart component to finish their asynchronous work.\r\n\r\n## Desired Behavior\r\nThe server-side renderer should wait for all root child components to resolve recursively, hence let every active\\*  smart component attain its renderable state. \r\n\r\n## Benefits\r\nNot only does this feature allow for better code structuring and seamless SSR support, it is also extremely helpful in this kind of situations where the layout of the application needs to be computed programmatically. Think of content management system were one would be able to compose the final layout of the single-page application by simply putting together independent arbitrary building blocks on top of a template.\r\n\r\n## Smart Components & APIs\r\nSmart components are served best in combination with [GraphQL](http://graphql.org). Every little smart component asks the GraphQL client for a small part of the graph the API server has to offer. It only fetches the data it needs, no more, no less. The GQL client will batch all those little queries into one big query every 10ms or so and fire them. This way smart components make modular architecture a piece of cake!\r\n\r\n\r\n\\* We define components as *\"active\"* when they are in the actual context of execution. Inactive components are hidden due to certain application state conditions like the current route for example.\r\n\r\n### What does the proposed API look like?\r\n## API Proposal\r\nWe should be able to make any component smart, regardless of where it's placed in the application. Basically this means making the *asyncData* hook available to any component and not just the route-components.\r\nThen it just becomes a classical dependency tree problem, where out of the tree of components we compose a flat dependency tree filtering out all of the dumb components resulting in an array of Promises the SSR needs to await before finally rendering the page.\r\n\r\n## Performance Considerations\r\nBecause traversing the component tree on every SSR request seems inefficient - this step should probably be done by Webpack at compile time.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Nested Smart Components (SSR)",
        "labels": "feature request",
        "id": 123334
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently prop type checking fails when passing in an object that extends the expected type.\r\nThis would allow anything inheriting from the expected type to pass the check.\r\n\r\n### What does the proposed API look like?\r\nhttps://github.com/vuejs/vue/blob/8d66691ee264969447390822971b8caa029cac3e/src/core/util/props.js#L148\r\n\r\nIf this line were\r\n```javascript\r\nvalid = value instanceof expectedType.toLowerCase()\r\n```\r\n\r\nThen child classes would also pass. In my mind if a component is checking for `String` and I pass in an object that extends string this should pass the typecheck.\r\n\r\nThis was born out of an issue that one of my users has passing an String castable object which extends string as a prop into a Vue component.\r\n\r\nIf you're interested you can check that out here: \r\n\r\nhttps://github.com/tightenco/ziggy/pull/64\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Change prop type checking to use instanceof instead of typeof",
        "labels": "feature request",
        "id": 123335
    },
    {
        "body": "### What problem does this feature solve?\r\nRight now, `v-once` will render the component on creation, which is great if the data is available, however it would be nice to be able to allow the component to rerender until async data is available, then freeze the contents so it no longer impacts performance.\r\n\r\n### What does the proposed API look like?\r\nAllow `v-once` to take a boolean parameter, eg `:v-once=\"completed\"`, and if this parameter is truthy, the default `v-once` behavior is applied, otherwise `v-once` is ignored.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allowing v-once to accept a boolean flag",
        "labels": "feature request",
        "id": 123336
    },
    {
        "body": "### What problem does this feature solve?\r\nFrom https://github.com/vuejs/eslint-plugin-vue/issues/148.\r\n\r\nVue.js has [prohibited keywords](https://github.com/vuejs/vue/blob/c0da43d22f8f4b9aeb4f49d4e86cd9704daaff3f/src/compiler/error-detector.js#L7-L11), but it does not include `this` (though it includes `super`).\r\nMy feeling is that the use of `this` causes confusing.\r\n\r\nAre there reasons that the prohibited keywords don't include `this`?\r\n\r\n\r\n### What does the proposed API look like?\r\nThe prohibited keywords include `this` keyword.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Should prohibited keywords includes `this`?",
        "labels": "feature request",
        "id": 123337
    },
    {
        "body": "### What problem does this feature solve?\r\nI propose to add ability to declare method (init) that will be called on server initialization (after server starting and recompilation). Then developer will have possibility to reload other services.\r\n\r\nFor now I creating vue frontend app with server-side rendering and I want to create backend api server. I want to bundle it together with vue ssr server \u2013 I can just import it in my `entry-server.js` (so it will be successfully bundled) and connect it to my express `app`, that I can provide via `context` param, but if I will add that route to my backend api server in `export default` method, route will be added every time when user requested some from server (and vue-server-renderer call my `entry-server.js` default export method). Also it will not added after server starting, but only after first request. \r\n\r\nWhile my backend api server is bundled I can transparently call it methods in server-side api provider (on client-side api provider I use axios to make HTTP-requests). Writing 'providers' I mean `create-api-*.js` files inside [vue-hackernews/src/api](https://github.com/vuejs/vue-hackernews-2.0/tree/master/src/api)\r\n\r\nI think that it will be very useful.\r\n\r\n### What does the proposed API look like?\r\nMeans code from [vue-hackernews template](https://github.com/vuejs/vue-hackernews-2.0)\r\n\r\n```javascript\r\n// server.js\r\n...\r\n\r\nconst backendRouter = express.Router()\r\napp.use(backendRouter)\r\nrenderer.init({ backendRouter })\r\n\r\n...\r\n\r\napp.get('*', isProd ? render : (req, res) => {\r\n  readyPromise.then(() => render(req, res))\r\n})\r\n\r\n```\r\n\r\n\r\n```javascript\r\n// entry-server.js\r\nconst backendApi = require('../backend/api')\r\n\r\nfunction init(context) {\r\n  context.backendRouter.use(backendApi);\r\n}\r\n\r\nexport { init };\r\n\r\nexport default context => {\r\n  ...\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: entry-server.js init method",
        "labels": "feature request",
        "id": 123338
    },
    {
        "body": "### What problem does this feature solve?\r\nErrors raised by the html parser (`options.warn` in the code) don't register the location of the error.\r\n\r\nWith the location it will be much easier to debug.\r\n\r\nFor example if I forget to close an HTML tag, the compiler will complain and tell me the name of the tag. However I will have no idea where the opening tag is located. For moderately big files it's quite impractical.\r\n\r\n### What does the proposed API look like?\r\nIn `parseHTML` we could add a property in options that will include the line at which the HTML is included in the `.vue` file. We can use this to offset the location before printing it.\r\n\r\nAs for getting the locations themselves I have no idea how to proceed. If someone can give me some pointers I may submit a pull request.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Line numbers for errors in the html parser",
        "labels": "feature request",
        "id": 123339
    },
    {
        "body": "### What problem does this feature solve?\r\nI'm currently working on making a [blog](https://github.com/krestaino/nuepress) using the WordPress REST API as the back end. The API returns the article with HTML markup in it. I'm taking that [JSON response](https://wp.kmr.io/wp-json/wp/v2/posts/1178) and using `v-html` to render it into my Vue app. I understand there are cross-site scripting security risks here.\r\n\r\n### What does the proposed API look like?\r\nIt would be great if `v-html` automatically sanitized the string to remove any `<script>` tags. For those needing script tags, for whatever reason, maybe `v-html-unsafe` can accomplish that.\r\n\r\nI was recently made aware Angular 4 is doing this and think Vue.js would greatly benefit from this feature.\r\n\r\nhttps://angular.io/guide/security#!#xss\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Sanitize v-html",
        "labels": "feature request",
        "id": 123340
    },
    {
        "body": "### What problem does this feature solve?\r\nSync Modifier support object properties. \r\nFor example, I have a myObj object, it has a foo and a bar property.\r\n```javascript\r\nmyObj: {\r\n  foo: 'foo',\r\n  bar: 'bar'\r\n}\r\n```\r\nThis feature could use `update:myObj.foo` and `update:myObj.bar` to update the value.\r\n```javascript\r\nthis.$emit('update:myObj.foo', 'new-foo');\r\nthis.$emit('update:myObj.bar', 'new-bar');\r\n```\r\n\r\n### What does the proposed API look like?\r\nCurrently, I need to use below format\r\n```html\r\n<MyComponent :foo.sync=\"myObj.foo\" :bar.sync=\"myObj.bar\"></MyComponent>\r\n```\r\n```javascript\r\nprops: ['foo', 'bar']\r\n...\r\nthis.$emit('update:foo', 'new-foo');\r\nthis.$emit('update:bar', 'new-bar');\r\n```\r\nBut with this new feature:\r\n```html\r\n<MyComponent :myObj.sync=\"myObj\"></MyComponent>\r\n```\r\n```javascript\r\nprops: ['myObj']\r\n...\r\nthis.$emit('update:myObj.foo', 'new-foo');\r\nthis.$emit('update:myObj.bar', 'new-bar');\r\n```\r\nIt becomes more simple and clear, especially when the object has many properties.\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Sync Modifier support object properties",
        "labels": "feature request",
        "id": 123341
    },
    {
        "body": "## What problem does this feature solve?\r\n\r\nFollowing [this discussion](https://github.com/vuejs/vue/issues/5983#issuecomment-317530106), given a `CustomInput` component with this template:\r\n\r\n``` html\r\n<div>\r\n  <input v-bind=\"$attrs\" v-on=\"$listeners\">\r\n<div>\r\n```\r\n\r\nThe following currently does not work:\r\n\r\n``` html\r\n<CustomInput v-model=\"myValue\" />\r\n```\r\n\r\nThe problem is that `v-model` on a component expects a value on `input` events, but a DOM `Event` is passed to the listener instead.\r\n\r\n## What does the proposed API look like?\r\n\r\n### Option 1: Make `v-model` smarter\r\n\r\nSince I _think_ it's unlikely that anyone will want to use `v-model` with a DOM `Event`, perhaps when `v-model` is used on components, it could check if the argument passed to the listener is `instanceof window.Event`. Then if it is, use `event.target.value` instead.\r\n\r\n### Option 2: Make `v-on` smarter\r\n\r\nMaybe a non-enumerable property could be added to `$listeners` (e.g. `__$listeners__: true`, to help `v-on` detect uses of `v-on=\"$listeners\"`. Then in cases where the `$listeners` object is passed to `v-on` _and_ it's used on an element, listeners relevant to `v-model` could be wrapped:\r\n\r\n``` js\r\nfunction (event) {\r\n  listener(event.target.value)\r\n}\r\n```\r\n\r\nBut now we're throwing away data. If someone wants to access a `keyCode` - e.g. with `@input` instead of `v-model` - they're out of luck. However, if modifiers were also supported for `v-on`'s object syntax, we could fix this by making `.native` disable the automatic wrapping behavior.\r\n\r\n---\r\n\r\nThoughts? Are there strategies or implications I'm not considering? I'm definitely open to alternatives.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Should v-model work on components using both v-bind=\"$attrs\" and v-on=\"$listeners\"?",
        "labels": "feature request",
        "id": 123342
    },
    {
        "body": "### What problem does this feature solve?\r\nIf a single child of a ``v-once`` parent requires reactivity then we can not use ``v-once`` on the parent element but must apply it to all the siblings of the reactive element/component instead. It would be nicer if we could whitelist the reactive children of an element or component that has ``v-once`` with some additional proposed directives.\r\n\r\nWhitelists are usually a better strategy, especially for security, than blacklists.\r\n\r\n### What does the proposed API look like?\r\nIdeally we would be able to do this:\r\n```html\r\n<div v-once>\r\n\t<h1>static text</h1>\r\n\t<h1 v-exclude>{{non-static text}}</h1>\r\n\t<h1>static text</h1>\r\n\t<h1>static text</h1>\r\n</div>\r\n```\r\ninstead of the following:\r\n```html\r\n<div>\r\n\t<h1 v-once>static text</h1>\r\n\t<h1>{{non-static text}}</h1>\r\n\t<h1 v-once>static text</h1>\r\n\t<h1 v-once>static text</h1>\r\n</div>\r\n```\r\n\r\nSome additional directives proposed:\r\n* **v-always**: takes precedent over ``v-never`` and always excludes an element/component and its children\r\n* **v-never**: takes precedent over ``v-exclude`` and never excludes an element/component and its children\r\n* **v-exclude**: exclude a specific element/component and its children from v-once\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-once whitelist and additional directives",
        "labels": "feature request",
        "id": 123343
    },
    {
        "body": "### What problem does this feature solve?\r\nTake this component: \r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <span>Mark</span>\r\n    <span>down</span>\r\n  </div>\r\n</template>\r\n```\r\n\r\nIf preserveWhitespace is enabled in vue-template-compiler then this will get rendered on the page as this:\r\n\r\n> Mark down\r\n\r\nI would have to resort to some sort of CSS to get around this, so that it instead renders as:\r\n\r\n> Markdown\r\n\r\nWhat I would instead like is the ability to have preserveWhitespace enabled by _default_ but have the ability to override this on a per-component basis. If that were an option then I could disable it for the above component and then it would render in HTML as this:\r\n\r\n```html\r\n<div><span>Mark</span><span>down</span></div>\r\n```\r\n\r\n### What does the proposed API look like?\r\nI'm envisioning maybe a new top level property for the exported function within a single-file Vue component. E.g.:\r\n\r\n```js\r\nexport default {\r\n  name: 'Markdown'\r\n  preserveWhitespace: true\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add preserveWhitespace on a per-component basis",
        "labels": "feature request",
        "id": 123344
    },
    {
        "body": "### What problem does this feature solve?\r\nBecause now the render.renderToString function return nothing, but its a async function, i need return response in its callback, it will lead to bug in koa. I have to wrap it to a function return promise to let it to work. Something like this:\r\n\r\n```\r\nfunction render(renderer) {\r\n    let resolve;\r\n    const promise = new Promise(r => resolve = r);\r\n\r\n    renderer.renderToString(context, (err, html) => {\r\n      resolve(html);\r\n    });\r\n\r\n    return promise;\r\n}\r\n\r\nserver.get('*', async ctx => {\r\n    const res = await render(renderer);\r\n    ctx.status = 200;\r\n    ctx.body = res;\r\n})\r\n```\r\nMaybe the render.renderToString return a promise will be better ?\r\n\r\n### What does the proposed API look like?\r\nkoa2:\r\n```\r\nserver.get('*', async ctx => {\r\n    const res = await renderer.renderToString(context);\r\n    ctx.status = 200;\r\n    ctx.body = res;\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support promise for renderToString in vue-server-renderer ",
        "labels": "feature request",
        "id": 123345
    },
    {
        "body": "### What problem does this feature solve?\r\nThere is common \"Show Password\" pattern today and we have to use v-if/v-else for that. Can we consider allowing ternary expression that returns only one of `text,number,password,search,email,tel,url` allowed in `v-bind:type`?\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<input :type=\"showPassword ? 'text' : 'password'\" v-model=\"text\">\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow ternary v-bind:type with v-model.",
        "labels": "feature request",
        "id": 123346
    },
    {
        "body": "### What problem does this feature solve?\r\nIt seems to be very common users trying uses it like `Vue.component(..., require(...))`, which is not supported. You should uses:\r\n\r\n* `Vue.component(..., require(...).default)` or;\r\n* `Vue.component(..., ImportedComponent)` as in `import ImportedComponent from \"MyComponent.vue\"`;\r\n\r\nElse you will receive an error like:\r\n\r\n> **Failed to mount component:** template or render function not defined.\r\n\r\n### What does the proposed API look like?\r\n`Vue.compoent()` 2nd parameter should try identify if you are using a `require()`'d instance, then get the `.default` property automatically as fallback, then this error will be avoided. \r\n\r\n**I guess that it can be done like:**\r\n\r\n```js\r\nif (!arg2.render && !arg2.template && arg2.default) {\r\n    arg2 = arg2.default;\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Supports to Vue.component(..., require(...))",
        "labels": "feature request",
        "id": 123347
    },
    {
        "body": "### Version\r\n2.4.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/47503/](https://jsfiddle.net/50wL7mdz/47503/)\r\n\r\n### Steps to reproduce\r\nUse a Date object as v-model for input[type=date]\r\n\r\n### What is expected?\r\nThe date input should use provided Date value\r\n\r\n### What is actually happening?\r\nDate input shows \"mm/dd/yyyy\" (blank state)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Date input does not accept a Date object as an initial value",
        "labels": "feature request",
        "id": 123348
    },
    {
        "body": "### What problem does this feature solve?\r\nI am trying to integrate Vue with Meteor Blaze and am working on rendering of Vue components from Blaze templates. I would like to programmatically create an Vue instance (`new Vue(...)`) and pass it props and args which would be equivalent to doing `<vue-component :prop=\"propValue\" :arg=\"argValue\">`. So an object of key/values which would then be mapped to props, if keys are among props, or be set as element attributes otherwise. But the important part is to also be able to update all of them afterwards. So if any of the props or args change, allowing to call a function to update them would be great.\r\n\r\n### What does the proposed API look like?\r\nI propose that `propData` could be a function. So that I could provide a reactive function which would be used to populate both props and args (so any keys returned from the function which are not props would become args).\r\n\r\nAlternatively. we could have `vm.$propsUpdate` function which I could run to update props and args in a more imperative way.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "A way to programmatically pass props and args to a new Vue instance and keep it updated",
        "labels": "feature request",
        "id": 123349
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nCurrently, any props registered on a functional component will not appear in `context.data`. The result is that when used as a wrapper component, like this:\r\n\r\n``` js\r\nh(WrappedComponent, context.data, context.children)\r\n```\r\n\r\nThen no props shared between the functional component and `WrappedComponent` will be passed to `WrappedComponent`. \r\n\r\nYou can get around this by adding the missing props to `context.data.props`, but you have to anticipate the behavior. When I encountered a user who noticed a discrepancy between `context.props` and `context.data.props`, they were very confused and I must admit, I was also confused at first.\r\n\r\n### What does the proposed API look like?\r\n\r\nPerhaps `context.data.props` should always match `context.props` and in rare cases where users don't want \"transparent\" wrapper components, they can explicitly create a sanitized data object. \r\n\r\nThis change could technically change rendered results in existing applications, but I think the worst case might be extra attributes added to root elements, so not a _breaking_ change exactly.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Should props registered on a functional component remain in context.data.props?",
        "labels": "feature request",
        "id": 123350
    },
    {
        "body": "### What problem does this feature solve?\r\nIn case of components that can work both as standalone and as children, it would be nice to be able to provide default values for the not provided dependencies.\r\nIt would also avoid the warning for missing inject in case this is one of the expected use case.\r\n\r\n### What does the proposed API look like?\r\ninject: Array<string> | { [key: string]: string | Symbol | { name: string | Symbol, default: any } }\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow defining optional inject dependency with default values",
        "labels": "feature request",
        "id": 123351
    },
    {
        "body": "### What problem does this feature solve?\r\nIt allows for watching an object instead of having to either watch each field independently or having to parse the newVal and oldVal arrays to find out which one changed. I was thinking a third parameter to the watch function that shows what field called this update\r\n\r\n### What does the proposed API look like?\r\n```\r\nvm.$watch('item',(val,oldVal,prop) => server.sendData({`${prop}`:val}),{ deep:true })\r\n```\r\ninstead of \r\n```\r\nfor (let key in vm.item) {\r\n\tvm.$watch(`item.${ key }`,val => {\r\n\t\tserver.sendData({ `${key}`:val })\t\r\n\t}))\r\n}\r\n```\r\nor I guess better yet\r\n```\r\nitem: {\r\n    handler(val,oldVal,prop) {\r\n        server.sendData({`${prop}`:val})\r\n    },deep:true\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow seeing what specific props have changed when watching a deep object",
        "labels": "feature request",
        "id": 123352
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently with `<transition-group>` you can build great JS-only transitions, but there's no way to hook into Vue's move functionality. \r\n\r\nA hook/callback ( `move` or `beforeMove` ?) would be extremely handy allowing for custom JS to handle the FLIP when items need to move.\r\n\r\nThe hook would ideally receive an array of elements that will be moving and an array with the calculated positions/offset that Vue already builds for the CSS FLIP, and if Vue needs it, a `done` callback.\r\n\r\nBased on a quick look at the `<transition-group>` code, this should not add much weight since Vue is already collecting all of that data.\r\n\r\nPossibly related to #5813 or #4885 but this seems distinct.\r\n\r\n### What does the proposed API look like?\r\n```\r\n<transition-group name=\"flip-me\" @move=\"myFlipMethod\"> ... </transition-group>\r\n```\r\n\r\n```\r\n  methods: {\r\n \r\n    // Hook receives an array of elements and an array of the position data\r\n    myFlipMethod(elements, positions, done) {\r\n       // Custom GSAP animation to move the elements, allowing for staggering and fancy effects\r\n       var tl = new TimelineLite({ onComplete: done });\r\n       elements.forEach( (el,i) => {\r\n         tl.from( el, 1, { \r\n           x: positions[i].dx, \r\n           y: positions[i].dy, \r\n           ease: Elastic.easeOut,\r\n           delay: i * 0.01\r\n         });\r\n       });\r\n    }\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "move hook for transition-group",
        "labels": "feature request",
        "id": 123353
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently if you want to use refs to elements (DOM elements or Vue components - see attribute/prop \"ref\") you have to provide a string as \"ref\" attribute. A callback function as \"ref\" attribute like in React is currently not supported in Vue.\r\nIt would be great if also callback functions could be provided as \"ref\" attributes (especially when doing a bit more advanced stuff using the \"render\" function).\r\n\r\nThe callback function should be called both when the referred element is created and also when it is disposed (React for example passes null in the latter case).\r\n\r\nIt seems that this feature had already been implemented in the past but has been reverted later (I do not know for what reasons the changes have been reverted) => see: \"[WIP] Support for ref callback #4807\"\r\n\r\nThank you very much.\r\n\r\n### What does the proposed API look like?\r\nPlease see line 178 here:\r\nhttps://github.com/vuejs/vue/pull/4807/commits/90c6c2902b1f124093ad0d514984230194cb818e\r\n\r\nconst myRefCallback(ref, remove) {...} (where \"remove\" is boolean) seems to me like a better solution that the one that is used in React where in the \"remove\" case the ref callback function is just called with null.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Callback refs as additional alternative to \"named\" refs",
        "labels": "feature request",
        "id": 123354
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nThere are many cases where attributes passed to a Vue component should not be added to the root element, but rather a sub-element. For example, in [this UI component](https://github.com/almino/semantic-ui-vue2/blob/master/src/elements/Input.vue), an incredible amount of props must be used to ensure that attributes are added to the `input` element, instead of the wrapper `div`.\r\n\r\nAdditionally, it's often desirable to expose all event listeners on a form element to the parent, which also requires a lot of boilerplate currently if the element is not the root (in which case, the `.native` modifier can solve the problem).\r\n\r\n### What does the proposed API look like?\r\n\r\n**EDIT: [Start here](https://github.com/vuejs/vue/issues/5983#issuecomment-312085126) to catch up on the discussion.**\r\n\r\nCurrently by default, the \"exposed\" element (the one that arbitrary attributes can be added to) is always the root element. A new directive could be used to define a different exposed element. Some ideas for the name of the directive:\r\n\r\n- `v-expose` (probably my personal favorite)\r\n- `v-expose-attrs` (probably clearer, but lengthier)\r\n- `v-main`\r\n- `v-primary`\r\n\r\nIf `v-expose` is added to an element, it will accept attributes passed to its component - and these attributes will __no longer__ be passed to the root element.\r\n\r\nOther features that may be nice:\r\n\r\n- If the directive is defined on multiple elements, attributes will be duplicated across each of them\r\n- In the case where a subset of attributes should be accepted by an element, `v-expose` could accept a string or array of strings (e.g. `v-expose=\"class\"` or `v-expose=\"['class', 'type', 'placeholder']\"`). In this case, these attributes would be added to the element (again, instead of to the root element), but all other attributes would be added to the root element or to the element(s) with a valueless `v-expose`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Improved API for UI components, reducing boilerplate for forwarding attributes and events",
        "labels": "feature request",
        "id": 123355
    },
    {
        "body": "### What problem does this feature solve?\r\nUsing the modifiers is greate (.ctrl, .alt, .meta, .shift).\r\nBut there is no modifier indicating that ONLY that key was pressed (without ctrl, alt, shift or meta simultaneously.\r\n\r\n### What does the proposed API look like?\r\n@keydown.space**.none**=\"myEventWhenEnterIsPressedAlone()\"\r\n@keydown.space=\"myEventWhenEnterIsPressedWithOrWithoutAnyModifier()\"\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "add .none modifier to keyboard",
        "labels": "feature request",
        "id": 123356
    },
    {
        "body": "### What problem does this feature solve?\r\nA project may contains different versions of Vue, but the designing of plugin system is not designed for that.\r\n\r\nThe plugin would be available for only one vue library, no matter how many vue libs you require.\r\n\r\n```javascript\r\n// My Plugin.\r\nexport default {\r\n  install (Vue, options) {\r\n    Vue.doSomething = function () {...}\r\n  }\r\n}\r\n```\r\n\r\n```javascript\r\n// Module 01 in my project.\r\nimport Vue from 'vue'  // Maybe vue 2.2\r\nimport MyPlugin from 'my-plugin'\r\n\r\nVue.use(MyPlugin)\r\nVue.doSomething()  // Yeah.\r\n```\r\n\r\n```javascript\r\n// Module 02 in my project.\r\nimport Vue from 'vue'  // Maybe vue 2.3.\r\nimport My Plugin from 'my-plugin'\r\n\r\nVue.use(MyPlugin)  // It doesn't work because \"installed\" has already been set to \"true\".\r\nVue.doSomething()  // Boom! Undefined!\r\n```\r\n\r\n### What does the proposed API look like?\r\nSo this is what I'm doing:\r\n\r\n```javascript\r\n// My Plugin.\r\nexport default function () {\r\n  return {\r\n    install (Vue, options) {\r\n       Vue.doSomething = function () {...}\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```javascript\r\n// Module 01 and 02 in my project.\r\nimport Vue from 'vue'\r\nimport MyPlugin from 'my-plugin'\r\n\r\nVue.use(MyPlugin())\r\nVue doSomething()  // Yeah!\r\n```\r\n\r\nSame as \"data\" properity.\r\n\r\nHope can be improved.\ud83d\ude00\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Suggestion about using a plugin in a single project contains multi versions of vue",
        "labels": "feature request",
        "id": 123357
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently when we pass a slot to a recursive component, it is only effective in the first level. And it would be nice if it can be passed recursively.\r\n\r\n### What does the proposed API look like?\r\n```jade\r\nmy-recursive-component(:model=\"nested-obj\")\r\n  template(recursive-scope)\r\n    span client content\r\n\r\n//- my-recursive-component\r\ndiv \r\n  div component content\r\n  slot\r\n  my-recursive-component(v-if=\"model.hasChild\", :model=\"model.child\")\r\n\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Recursively pass slots in a recursive component",
        "labels": "feature request",
        "id": 123358
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen using Vue to create a static site (like via `nuxt generate`) every code split asset is getting prefetched. This is an awesome feature if we were thinking about offline mode, but when you're trying to create a site with triple digit  routes and little concern for offline browsing (i.e. a marketing site) this is creating some pretty beefy code overhead.\r\n\r\nIt would be great if there was a way to get a shouldPrefetch in vue-server-renderer, similar to shouldPreload.\r\n\r\n### What does the proposed API look like?\r\nExactly like shouldPreload(), but for prefetching would be great.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add shouldPrefetch() in vue-server-renderer",
        "labels": "feature request",
        "id": 123359
    },
    {
        "body": "### What problem does this feature solve?\r\nI just wasted ~5 hours debugging https://github.com/JosephusPaye/Keen-UI/issues/332, which was caused by importing a pre-compiled template that was compiled by an older version of Vue that had subtle differences in `VNode`.\r\n\r\nA simple warning that the objects passed to `VNode` don't look like they're expected to would have saved me hours.\r\n\r\n### What does the proposed API look like?\r\nAFAICT, at least for this particular issue, you can simply warn if `data.directives` exists.\r\n\r\nFor the future, you may want to include a semver version number in compiled templates so you can more-reliably check for any kind of issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Warn when using incompatible pre-compiled templates",
        "labels": "feature request",
        "id": 123360
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, this syntax is supported,\r\n\r\n```\r\n<component v-bind=\"{propA, propB}\" />\r\n```\r\n\r\nHowever, if you want to use the `.sync` modifier on the props, then you can't use the ES6 object destructuring syntax anymore.\r\n\r\n```\r\n<component :propA.sync=\"propA\" :propB.sync=\"propB\" />\r\n```\r\n\r\n### What does the proposed API look like?\r\n```\r\n<component v-bind.sync=\"{propA, propB}\" />\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add .sync modifier to v-bind directive",
        "labels": "feature request",
        "id": 123361
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen declaring components, this sort of repetitive syntax occurs a lot:\r\n\r\n```\r\n<component @log=\"log\" @alert=\"alert\" />\r\n```\r\n\r\nThis feature would allow event declarations to be more DRY, similar to the way v-bind currently works:\r\n\r\n```\r\n<component v-bind=\"{foo, bar}\" />\r\n```\r\n\r\n### What does the proposed API look like?\r\n```\r\n<component v-on=\"{log, alert}\" />\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Add support for object destructuring in v-on",
        "labels": "feature request",
        "id": 123362
    },
    {
        "body": "### What problem does this feature solve?\r\nThe comma-delimited string syntax is not so intuitional, and actually it is splitting the string into an array. So  why not support array syntax directly?\r\n\r\n### What does the proposed API look like?\r\n``` html\r\n<keep-alive :include=\"['a', 'b', 'c']\">\r\n</keep-alive>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow use array syntax in keep-alive include/exclude",
        "labels": "feature request",
        "id": 123363
    },
    {
        "body": "### What problem does this feature solve?\r\nAllow iterating over smart Arrays that extend/inherit the Array (instance of the Array) or something like arguments (not an instance of the Array).\r\n\r\n### What does the proposed API look like?\r\nNo change in API\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-for to support Array-like objects",
        "labels": "feature request",
        "id": 123364
    },
    {
        "body": "### What problem does this feature solve?\r\nFor now you are stuck with one computed class. It would make code cleaner, if transition class syntax were as powerful as normal class syntax.\r\nI mean array syntax, object syntax, direct javascript and a mix of binded and static classes.\r\n\r\n### What does the proposed API look like?\r\n```html\r\n\r\n<transition\r\n    leave-active-class=\"animated\"\r\n    enter-active-class=\"animated position-absolute\"\r\n    :leave-active-class=\"currentIndex > previousIndex ? 'fadeOutLeft' : 'fadeOutRight'\"\r\n    :enter-active-class=\"currentIndex > previousIndex ? 'fadeInRight' : 'fadeInLeft'\"\r\n>\r\n    <component\r\n        :is=\"views[currentIndex].component\"\r\n        :key=\"views[currentIndex].key\"\r\n        v-bind=\"views[currentIndex].props\"\r\n    ></component>\r\n</transition>\r\n\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "support transition classes as they are normal classes",
        "labels": "feature request",
        "id": 123365
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen passing props to a component, the following pattern is very common,\r\n\r\n`<my-component :propA=\"propA\" :propB=\"propB\" />`\r\n\r\nI am proposing that when the prop name is the same as the variable name being passed to it, that the following more concise syntax be applicable,\r\n\r\n`<my-component :propA :propB :propC />`\r\n\r\nThis would mimic ES6's object property declaring shorthands (like here http://www.benmvp.com/learning-es6-enhanced-object-literals/)\r\n\r\n### What does the proposed API look like?\r\n`<my-component :propA :propB :propC />`\r\n\r\ninstead of\r\n\r\n`<my-component :propA=\"propA\" :propB=\"propB\" />`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "New prop shorthand",
        "labels": "feature request",
        "id": 123366
    },
    {
        "body": "### What problem does this feature solve?\r\nWhen setting directives in a Render Function, if `expression` is provided, shouldn't `value` be automatically evaluated from `expression` instead (and not allow `value` to be set)? It would also be nice if `expression` is not allowed to be set if `value` is provided.\r\n\r\n### What does the proposed API look like?\r\n```javascript\r\ncreateElement('div', {\r\n    directives: [\r\n        {\r\n            name: 'my-custom-directive',\r\n            // value should not be allowed to be set, instead be automatically evaluated from expression as 2\r\n            expression: '1 + 1',\r\n            arg: 'foo',\r\n            modifiers: {\r\n                bar: true\r\n            }\r\n        }\r\n    ],\r\n}\r\n\r\nor \r\n\r\ncreateElement('div', {\r\n    directives: [\r\n        {\r\n            name: 'my-custom-directive',\r\n            value: 2,\r\n            // expression should not be allowed to be set\r\n            arg: 'foo',\r\n            modifiers: {\r\n                bar: true\r\n            }\r\n        }\r\n    ],\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Render Function: Data.directives should not allow both value and expression to be set",
        "labels": "feature request",
        "id": 123367
    },
    {
        "body": "### What problem does this feature solve?\r\nUsing vue-server-renderer with typescript, it seems vue and vue-router are supported it would be nice if vue-server-renderer came with typings to.\r\n\r\n### What does the proposed API look like?\r\nThe same but with types directory.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer type definitions",
        "labels": "feature request",
        "id": 123368
    },
    {
        "body": "### What problem does this feature solve?\r\nIn v2.3.0, vue-server-renderer create a helper, client-plugin, that used to replace the html-webpack-plugin in server render situation. \r\n\r\nHowever, the new plugin doesn't watch the template file change. If the plugin add this feature, like html-webpack-plugin, that will improve development experience.\r\n\r\n### What does the proposed API look like?\r\nNot changes.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR client plugin should watch template change ",
        "labels": "feature request",
        "id": 123369
    },
    {
        "body": "### What problem does this feature solve?\r\nIt's possible to have [async local component registration](https://vuejs.org/v2/guide/components.html#Async-Components):\r\n```\r\nnew Vue({\r\n  // ...\r\n  components: {\r\n    'my-component': () => import('./my-async-component')\r\n  }\r\n})\r\n```\r\n\r\nThis is very convenient when you have Webpack code splitting, however, when you are using provide/inject with Symbols (or unique hashes), it becomes hard to share the symbol across all components. This is because the Symbol is in a separate file, which is asynchronously loaded via import, and needs to be passed in via `inject`.\r\n\r\n### What does the proposed API look like?\r\n\r\n**Parent.vue**\r\n```\r\n<script>\r\n\r\nconst Parent = {\r\n\r\n   key: Symbol('Parent'),\r\n\r\n   provide() {\r\n      return {\r\n         [Parent.key]: { sharedState: 1 },\r\n      };\r\n   },\r\n};\r\n\r\nexport default Parent;\r\n</script>\r\n```\r\n\r\n**Child.vue**\r\n```\r\n<script>\r\nconst Parent = () => import('./Parent.vue');\r\n\r\nconst Child = {\r\n\r\n   components: {\r\n      Parent,\r\n   },\r\n\r\n   inject() {\r\n      const Parent = this.components.Parent; // Made up\r\n\r\n      return {\r\n         parent: Parent.key,\r\n      };\r\n   },\r\n};\r\n\r\nexport default Child;\r\n</script>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "`inject` as a function",
        "labels": "feature request",
        "id": 123370
    },
    {
        "body": "### What problem does this feature solve?\r\nIt may sounds awkward when using the modified AST to generate render function instead of using template files as input. But, in the following cases, it might be useful:\r\n\r\nWhat if:\r\n- people want to do some optimized operations on AST like what the `optimizer.js` does before jump into the codegen method in the baseCompile function.\r\n-  a pre-disposed component can be loaded via webpack loader which implements the exposed generate function to get the new render function. In this case, I can initially load some customized vue components with new added dom elements, attributes, events and etc.\r\n- I can visually edit the rendered components by modifying the ASTs instead of the original template which is considered to be much easier.\r\n- After the previous step, I can even generate the new template file like the reverse way of template -> AST -> render function.\r\n\r\nI'm not sure whether there is an alternative way of doing the things above, but it might be helpful when it comes to something like visualized vue components development IDE.\r\n\r\n### What does the proposed API look like?\r\nMaybe in the createCompilerCreator function, we can add a function as property in compile method like:\r\n```\r\ncompile.fromAST = function fromAST(\r\n    ast\r\n  ) {\r\n    return generate(ast, baseOptions)\r\n  };\r\n```\r\nin line 49, src/compiler/create-compiler.js\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Expose the api for directly generating render function code from element ASTs in createCompiler function",
        "labels": "feature request",
        "id": 123371
    },
    {
        "body": "### Version\r\n2.3.3\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/zna06rq4/1/](http://jsfiddle.net/zna06rq4/1/)\r\n\r\n### Steps to reproduce\r\nRun fiddle, error will be shown in console:\r\n\r\n```\r\nError in callback for watcher \"hello\": \"TypeError: this.cb.call is not a function\"\r\n```\r\n\r\n### What is expected?\r\n\"child\" should be logged to the console via the watch handler in Child.\r\n\r\n### What is actually happening?\r\nThe watch is not being fired\r\n\r\n---\r\nIn strats.watch (https://github.com/vuejs/vue/blob/086ae4469b0200e94b1ad0f70771e57c63ce18af/src/core/util/options.js#L175) the function unconditionally converts child to an array.\r\nIf this has already been converted to an array (via a previous merge operation) it will convert it to a nested array `[[child]]`.\r\n\r\nThe fix for this seems to be updating line 175 to have:\r\n`Array.isArray(child) ? child : [child]`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Support using result of Vue.extend in mixins",
        "labels": "feature request",
        "id": 123372
    },
    {
        "body": "### What problem does this feature solve?\r\nNow that the `sync` modifier is back, make sense to recover the sync validator as well.\r\n\r\n### What does the proposed API look like?\r\nIf an component relies on the sync modifier should be possible to state it on the prop declaration as:\r\n\r\n```\r\nprops: {\r\n  syncedProp: {\r\n   sync: true\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Sync prop validation",
        "labels": "feature request",
        "id": 123373
    },
    {
        "body": "### What problem does this feature solve?\r\nFirst off, thank you for all of the work that is put in to this library.  In all honestly it has saved me well over a year of my life already while also being able to write better code.\r\n\r\nAlso before I begin, I am not trying to regress back to what Angular 1 does by silently failing when a variable is missing, I see this as a different use case.\r\n\r\nI have built quite a robust solution for sending customized text messages/emails with the ability to add variables based on user data, timestamps, etc.  The end user is able to write a message such as this:\r\n\r\nHey there {{user.first_name}}, here is your requested code {{code}}.\r\n\r\n-or-\r\n\r\nHey {{user.first_name || 'there'}}! <template v-if=\"user.preferences.sms_enabled\">Thanks for giving us your permission to text you.</template><template v-else>We will not send you any further messages.</template>\r\n\r\nUp until this point I've been using the Nunjucks library to interpolate variables in a message, but I can't shake the idea of being able to use SSR with Vue for this instead.  I've created a solid proof of concept for this using Vue.  The only issue I'm running into with this the fact that when I use a property such as {{user.preferences.sms_enabled}} where `user` or `preferences` is undefined it throws an exception rather than silently failing.\r\n\r\nI 100% agree that it's better to throw an exception rather than silently fail (as Angular 1 does), I do see this being the first exception to this rule that I have encountered, when utilizing Vue in a situation where the data put into a vm varies so much while templating for purposes other than what will be rendered in a browser \r\n\r\nI send millions of text messages per month and all of my customers would prefer to send out a message that interpolates blank values over a complete failure to interpolate.  The average user doesn't think in terms of Javascript, and when they add the variable {{us3r.first_name}} it would be much better for the template to render an empty string for that one variable rather than fail to render.\r\n\r\nIt's also noteworthy that some users can have a fair bit of variation in the data that they have.  Objects that exist for one user may not exist at all for another user.  Being that we have mostly non-developers using this utility it's not easy to instruct them to do this instead: {{user && user.preferences && user.preferences.sms_enabled}}.\r\n\r\n### What does the proposed API look like?\r\nI'd propose that there be a simple way to override how properties on the vm are accessed.  Lodash has a 'property' lib that functions exactly how I'd see this working.  Something like this:\r\n\r\n```\r\nlet property = require('lodash/property')\r\n\r\nconst app = new Vue({\r\n  template: '<div>Simple Property: {{first_name}} Deep Property: {{nonexisting.object.first_name}}</div>',\r\n  data () {\r\n    return {\r\n      first_name: 'simple'\r\n    }\r\n  },\r\n  $get (path) {\r\n    return property(path)(this)\r\n  }\r\n})\r\n```\r\nThe above $get method would make it possible to do 2 things:\r\n1) It would make it possible to just return empty values if they do not exist.\r\n2) It would make it possible to create a list of all variables used in the template (especially if there is any conditional rendering).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Ability to not be strict (silently fail) when referencing properties on vm",
        "labels": "feature request",
        "id": 123374
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently when an `inject` fails to resolve, nothing happens, and the injected value just remains untouched. This seems like an opportunity to warn the developer that an `inject` could not be resolved.\r\n\r\nPerhaps this is intended behavior. Maybe it makes sense that sometimes an injection would not be resolved. If that is the case, could there be a way to indicate a given inject is required? A stricter injection method?\r\n\r\nMy current workaround is to throw an error if the object is undefined as of `create` (since injects are resolved by then), but it's a manual step that must be made in many places.\r\n\r\n### What does the proposed API look like?\r\nIf a new API is needed to support this, I am not sure how to design it.\r\n\r\nAs for warning, I was hoping that when an `inject` could not be resolved, there would be a warning in the browser console.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Improve error reporting/debugging of provide/inject, or allow require flag for inject",
        "labels": "feature request",
        "id": 123375
    },
    {
        "body": "### What problem does this feature solve?\r\nMake it more flexible it terms of SSR, allows developers decide on placeholder name, rather strictly dictate which one to use (i.e. `<!--vue-ssr-outlet-->`).\r\n\r\n### What does the proposed API look like?\r\nAssume following is `options` object for `createBundleRender` function\r\n```\r\n{\r\n  ...\r\n  contentPlaceholder: '{{{ app }}}'\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Expose an option to change contentPlaceholder value in createBundleRenderer function",
        "labels": "feature request",
        "id": 123376
    },
    {
        "body": "### What problem does this feature solve?\r\nI was running into an issue when using `this.$watch` instead of, what I'm usually doing, using a property within the watch object.\r\nI tried the following signature as this is what I was accustomed:\r\n\r\n```js\r\n{\r\n    mounted() {\r\n        if (!this.someTest) {\r\n            return;\r\n        }\r\n\r\n        this.$watch('prop', {\r\n            handler() {\r\n                console.log('triggered!');\r\n            },\r\n            immediate: true,\r\n            deep: true,\r\n        });\r\n    },\r\n}\r\n```\r\n\r\ninstead of\r\n\r\n```js\r\nthis.$watch('field', function() {\r\n        console.log(`[${ this.field.id }] Watcher triggered!`);\r\n        this.updateVal();\r\n    }, {\r\n    immediate: true,\r\n    deep: true,\r\n});\r\n```\r\n\r\nIs there a reason that this signature is not supported?\r\n\r\n### What does the proposed API look like?\r\n```js\r\nthis.$watch('prop', {\r\n    handler() {},\r\n    immediate: true,\r\n    deep: true,\r\n});\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow vm.$watch signature similar to watch property",
        "labels": "feature request",
        "id": 123377
    },
    {
        "body": "### What problem does this feature solve?\r\nIt could make binding a bunch of events to an element more clear. It would also make `v-bind` and `v-on` work similarly.\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\n```\r\nv-on=\"{ 'click.shift': methodOne, 'keyup.left': methodTwo, 'keyup.right.stop': methodTwo }\"\r\n```\r\n\r\nThis way we can create a computed list that returns a hash if there's too many event listeners / repetitive events.\r\n\r\nI can get something close with a directive but without the modifiers it's not nearly as useful. It also doesn't remove the events but it was a quick attempt.\r\n\r\nhttps://jsfiddle.net/crswll/2fL6gtbg/4/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Multiple events in single v-on similar to v-bind=\"object\"",
        "labels": "feature request",
        "id": 123378
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently when declaring functional components all you have to do is specify the `functional: true` field and supply a render method. It would be a lot clearer if instead of this the framework could figure it out by itself when it sees a function instead of an object.\r\n\r\n### What does the proposed API look like?\r\nRegistering a function as functional component:\r\n```\r\nVue.component('hello-world', function (h, context) {\r\n  return h('h1', 'Hello, world!')\r\n})\r\n```\r\nRegistering components in for example .vue files:\r\n```\r\nexport default {\r\n  components: {\r\n    hello (h, context) {\r\n      return h('h1', 'Hello, world!')\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Make creating functional components easier",
        "labels": "feature request",
        "id": 123379
    },
    {
        "body": "### What problem does this feature solve?\r\nRight now,we need set a data filed or a computed prop for the component prop we wanted modify,we modify the data filed or a computed prop and emit a update event to parent,but it's complicated to decited where and when to emit it,and it's unnecessary,the framework can do it for us.\r\n\r\n### What does the proposed API look like?\r\nWe can specify a binding data prop when using props, like this:\r\n````javascript\r\n<xxx :value.sync=\"parentValue\"></xxx>\r\nexport default = {\r\n    props: {\r\n        value: {\r\n           type: String,\r\n           default: 'foo',\r\n           bind: 'innnerValue'\r\n        }\r\n    }\r\n}\r\n<xxx v-model=\"parentValue\"></xxx>\r\nexport default = {\r\n    props: {\r\n        value: {\r\n           type: String,\r\n           default: 'foo',\r\n           bind: 'innnerValue'\r\n        }\r\n    },\r\n    model: {\r\n         prop:  'value'\r\n    }\r\n}\r\n````\r\nthen it can generate a field called 'innnerValue' on this.$data and its defalut value is 'foo',when we modify this.innnerValue,the framework can emit a 'update:value' event automatically.And,if you modify the prop 'value' by parent,it also will update to innnerValue.You can use 'sync' to accept the change,you also can use 'v-model' after you specify model.prop.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "a better way for sync and v-model",
        "labels": "feature request",
        "id": 123380
    },
    {
        "body": "### What problem does this feature solve?\r\nI'm using the decorator syntax which consists of putting @Watch(path) before a class method so that method is called when the property at the specified path changes. It is quite natural to put this decorator with the same path before more than one method, expecting the method to be called whenever an update occurs, but actually the last @Watch(path) decorator overwrites all the others. In order to support this, I think the handler option of the watch component option would need to allow an array of functions. (Then only a small update to the @Watch decorator definition would be required - at the moment I am using a variant of the code in the vue-property-decorator package).\r\n\r\n### What does the proposed API look like?\r\nThe handler option of the watch component option should allow an array of functions.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow watch handler option to be an array of functions (not just one function)",
        "labels": "feature request",
        "id": 123381
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrent Server-Side-Rendering implementation is bond to Node.js, makes it hard to use in Nashorn (lightweight high-performance JavaScript runtime in Java with a native JVM) or other JavaScript runtime.\r\n\r\nFoundations needed by Vue like `vm` and `fs` modules may be passed into renderer or runner as parameter which implements some interfaces.\r\n\r\n### What does the proposed API look like?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide Server-Side-Rendering helper using more purely JavaScript",
        "labels": "feature request",
        "id": 123382
    },
    {
        "body": "### What problem does this feature solve?\r\nIn large applications, there are often families of components, within which components share most of the look/behavior, but vary slightly. This makes it desirable to reuse code between them. Some reuse can be achieved with slots, other is better with component inheritance. But while most of the parent component definition can be smart-merged with child definition, the template has to be either kept as is, or replaced entirely.\r\n\r\nI have seen multiple approaches to reusing component templates:\r\n\r\n1. Write very granular appearance-only components with many slots. While this sounds good in theory, in practice the granularity needed often makes this approach into an obstruction rather than abstraction.\r\n\r\n2. Implement all required variation in a single component and make it configurable with slots and props. The downside is that you are stuck with a god-component, which is hard to maintain and extend further.\r\n\r\n3. Extend the component, and use `<parent>...</parent>` in the child template, using slots as \"parts\". The downside is that you have to \"proxy\" all props and slots down and events up. This is very cumbersome and fragile.\r\n\r\n4. Split the component in question further into \"part\" components, so that you can override only certain part. This gets tedious very quickly, especially when you need `v-bind` or `v-on` inside of the overridden part.\r\n\r\n5. Define \"part\" render functions among the methods, so that they can be overridden. The downside is that you can not really write such parts in template DSL, and the parts get disconnected from the main template, which makes it harder to understand.\r\n\r\n### What does the proposed API look like?\r\nThe Pug template engine (former Jade) implements a feature called [*blocks*](https://pugjs.org/language/inheritance.html), which allows templates to extend other templates while overwriting (or extending) certain named blocks. I think this feature ported to Vue would fill the gap described above, and allow the templates to be more reusable.\r\n\r\nA possible syntax:\r\n\r\n```vue\r\n<!-- parent.vue -->\r\n<template>\r\n  <div>\r\n    <block name=\"header\">\r\n      <h3>Default header</h3>\r\n    </block>\r\n    <block name=\"body\">\r\n      <p>Default body</p>\r\n    </block>\r\n    <block name=\"footer\">\r\n      <!-- no footer by default -->\r\n    </block>\r\n  </div>\r\n</template>\r\n```\r\n\r\n```vue\r\n<!-- child.vue -->\r\n<!-- there is no root element (only blocks), so the parent template is reused -->\r\n<template>\r\n  <block name=\"header\">\r\n    <h2>More pronounced header</h2>\r\n  </block>\r\n  <block name=\"footer\">\r\n    <p>Footer added by the child</p>\r\n  </block>\r\n</template>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Template blocks for component inheritance",
        "labels": "feature request",
        "id": 123383
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, we cannot validate Symbol prop-types. It would be nice to have this ability.\r\n\r\n### What does the proposed API look like?\r\nAdd additional check for type \"Symbol\" [here](https://github.com/vuejs/vue/blob/01151ce3fa3cb346443d086332ec053c389ee619/src/core/util/props.js#L135)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Prop type validation for type \"Symbol\"",
        "labels": "feature request",
        "id": 123384
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently Vue removes HTML Comments from the templates. It would be nice if we could disable this behavior via a configuration. The specific use case is that we are trying to use Vue with Magnolia CMS and Magnolia uses comments to figure out where to display its contribution interface. When Vue removes the comments Magnolia cannot place its contribution interface anymore, which renders the Page useless.\r\n\r\n### What does the proposed API look like?\r\nnew Vue({\r\n  comments: true | false\r\n});\r\nfalse: would function like the current behavior, true: would not remove the comments and keep them in the DOM.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Allow HTML Comments to not be removed from the DOM.",
        "labels": "feature request",
        "id": 123385
    },
    {
        "body": "### Version\r\n2.2.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/qk4ofq1q/](https://jsfiddle.net/qk4ofq1q/)\r\n\r\n### Steps to reproduce\r\n1. Create a component which will raise any error. (In my reproduction sample I defined a required prop and didn't referenced it later)\r\n2. Create another component which will use the first component in its template.\r\n\r\n\r\n### What is expected?\r\nWhen an error occures in a component, I think error message should also contain the components name tree. Because when the error occurred from a common component like `<some-button>` we can't locate which component included this node.\r\nSo a detailed error message is expected.\r\n\r\nLike:\r\n> [Vue warn]: Missing required prop: \"must\" (found in <Demo>)\r\n> Component Trace: Container (err line) -> Demo\r\n\r\n### What is actually happening?\r\nWhen an error is raised, browser's console mentions only the problematic component. Not it's parents...\r\n> [Vue warn]: Missing required prop: \"must\" (found in <Demo>)\r\n\r\n---\r\nMy application is built by webpack/vue-loader. So it is much harder to locate the problem as the source codes are being parsed by some tools.\r\nSo I think when this issue is solved, webpack/vue-loader structured projects will receive those detailed errors too?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Some error messages are not detailed enough to locate the problem",
        "labels": "feature request",
        "id": 123386
    },
    {
        "body": "### What problem does this feature solve?\r\nI've been working with @jeffreyguenther on making a VueJS app compatible with Turbolinks and so far it's been pretty good. For anyone not familiar with Turbolinks, it replaces link clicks with AJAX requests so the browser doesn't have to reload the CSS/JS and it provides an HTML cache to make perceived load times faster.\r\n\r\nVue works pretty well with Turbolinks out of the box, the problem is that Vue doesn't have a way to fully unmount the component's template. Since the original element on the gets replaced with the Vue template, Turbolinks caches the Vue template, not the original element. That means that Vue naturally can't re-render if you view a cached page and unfortunately there's no built-in way for us to clean up Vue's html on one of the Turbolinks lifecycle events.\r\n\r\nWe built a little mixin for Vue that caches the original element to an internal variable and on the `destroyed` event we replace the Vue $el with the original element again. For reference, this is what we did: https://github.com/jeffreyguenther/vue-turbolinks/blob/master/index.js\r\n\r\nThis works well but it would be nice if Vue provided a way to return to the original element. It would provide a fully safe cleanup mechanism inside Vue and means that Turbolinks doesn't have to be intertwined inside of Vue's lifecycle events.\r\n\r\nI feel like it makes sense to have a way to fully unmount the Vue app's template alongside of the existing $destroy method that Vue provides. I'd love to hear what you guys think about this idea!\r\n\r\n### What does the proposed API look like?\r\nThis could either be an option you can pass into $destroy or a separate unmountComponent method that replaces the element. It could also be something passed in with the constructor so it could cache that original element then and remember that later on $destroy. I'm not quite sure what the best solution would look like for this but would love to hear some thoughts on it!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Adding an unmount process",
        "labels": "feature request",
        "id": 123387
    },
    {
        "body": "### What problem does this feature solve?\r\nI'm working on creating a compiler & runtime of Vue for a library I'm interested in. At the moment I'm putting my code inside Vue's source code as a platform. It is good that I can leverage existing functions & toolings from Vue for sure. But by doing this also means that I need to include the external library my runtime depends on into Vue's dependencies, which is ok if there's not that many runtimes around, but it surely will become a problem when the community grow.\r\n\r\nIn the progress I found that I only need createCompiler, createPatchFunction & the core of Vue to make my own runtime for Vue. It would be good to expose those along in a smaller npm package so that people can maintain their code in a separate codebase. \r\n\r\nThoughts?\r\n\r\n### What does the proposed API look like?\r\nWhat's been proposed is a smaller npm package as vue-core\r\n\r\nbesides exposing the vue/core/index as default. it should also expose createCompiler from src/compiler/index.js & createPatchFunction from src/core/vdom/patch\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Expose createCompiler in src/compiler/index.js and createPatchFunction from core/vdom/patch as a smaller package.",
        "labels": "feature request",
        "id": 123388
    },
    {
        "body": "### Version\r\n2.2.5\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/ianhk/huc4z8gm/](https://jsfiddle.net/ianhk/huc4z8gm/)\r\n\r\n### Steps to reproduce\r\n\r\n\r\n### What is expected?\r\nnextTick and $nextTick callbacks run the Vue errorHandler.\r\n\r\n### What is actually happening?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue.config.errorHandler to handle Vue.nextTick and vm.$nextTick exceptions",
        "labels": "feature request",
        "id": 123389
    },
    {
        "body": "### What problem does this feature solve?\r\nThis would provide something akin to a `with` block. It would be useful to me especially in cases like the one shown here. During iterations where your context is essentially a superset of the current component's, you can't have a computed property that defines `person` since it would be different for every `meeting`.\r\n\r\nThere are, of course, ways around this. The most straightforward would be to set `person` on the `meeting` object during creation. The issue is that creating the object might be done in different ways (locally, initial data load, server broadcast, etc) and you would need to handle all those cases, preferably in a DRY manner.\r\n\r\nIt could be made to only work with `v-for` to avoid [this](https://blogs.msdn.microsoft.com/csharpfaq/2004/03/11/why-doesnt-c-have-vb-nets-with-operator/).\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<template>\r\n  <table>\r\n    <tbody>\r\n      <tr\r\n        v-for=\"meeting in meetings\"\r\n        with=\"{ person: people.find(person => person.id === meeting.personId) }\"\r\n      >\r\n        <td>{{ meeting.date }}</td>\r\n        <td>{{ person.firstName }}</td>\r\n        <td>{{ person.lastName }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      people: [\r\n        { id: 1, firstName: 'Felix', lastName: 'Hudson' },\r\n        { id: 2, firstName: 'Gaby', lastName: 'R\u00e1palo' }\r\n      ],\r\n      meeting: [\r\n        { date: '2017-01-01', personId: 1 },\r\n        { date: '2017-03-02', personId: 1 },\r\n        { date: '2017-02-07', personId: 2 }\r\n      ]\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "with directive",
        "labels": "feature request",
        "id": 123390
    },
    {
        "body": "### What problem does this feature solve?\r\nTypeScript introduced jsxFactory four months ago to allow TSX to specify a variable to act as the createElement.  This works correctly when rendering a single element, but does not map properly when an element has more than one child.\r\n\r\n**Works**\r\n```ts\r\nrender(h) {\r\n     return <div>{this.text}</div>;\r\n}\r\n```\r\n\r\n**Breaks**\r\n```ts\r\nrender(h) {\r\n     return <div><small>prefix</small> {this.text}</div>;\r\n}\r\n```\r\n\r\nI have worked around this issue by preprocessing my vue components like so, but that is a difficult ask for some:\r\n\r\n```ts\r\n/** This attempts to bridge the gap between React and Vue render() */\r\nexport const fixRenderFunction = (options: Vue.ComponentOptions<any>) => {\r\n    if (options.render) {\r\n        const orender = options.render;\r\n        options.render = function(h) {\r\n            const self = this;\r\n            const f = function (tagName: string, attr: {}) {\r\n                return h.apply(self, [tagName, attr, Array.prototype.slice(arguments, 2)]);\r\n            }\r\n            return orender.call(self, f);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### What does the proposed API look like?\r\nI think that if createElement had an overload that supported variardic VNodes, it would make these map up nicely and make support for TSX better in VueJS\r\n\r\n**Change in typings**\r\n```ts\r\nexport type CreateElement = {\r\n  /* ... */ \r\n\r\n  (tag: string, data: VNodeData, ...children: (VNode | string | VNodeChildren)): VNode; \r\n\r\n  /* ... */ \r\n}\r\n```\r\n\r\n**Usage**\r\n```ts\r\nrender(h) {\r\n    return h('div', null, h('small', null, 'prefix'), this.text)\r\n}\r\n```\r\n\r\nI am willing to do the legwork (Pull Request) to make this possible\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Better TSX render() support",
        "labels": "feature request",
        "id": 123391
    },
    {
        "body": "### What problem does this feature solve?\r\n\r\nThis is for users who are implementing bridges between the reactivity of VueJS and external systems which manage their own data internally and which have their own reactivity system.\r\n\r\nGiving a way to users to access `Dep` will allow them to define a dependency in a simple way. The use case is for defining changing values from other systems (mini-mongo's reactive queries, for instance) as dependencies in watched functions.\r\n\r\nCurrently, the users can only use `defineReactive()`, which means that there should be an object and a field for the dependency to exist. It is quite painful since the only thing needed is a `const dep = new Dep()` on which we would call `depend()` each time the external resource (function, db cursor, etc ...) changed.\r\n\r\n### What does the proposed API look like?\r\nI propose to expose `Dep` in the object `Vue.util`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Please expose Dep in Vue.util",
        "labels": "feature request",
        "id": 123392
    },
    {
        "body": "### What problem does this feature solve?\r\nDefine two keyframes with same name in different scoped style tag, \r\nthe latter will replace the former.\r\n\r\nComponentA\r\n\r\n```vue\r\n<template>\r\n<div class=\"active\">ComponentA</div>\r\n</template>\r\n<style scoped lang=\"stylus\">\r\n.active\r\n  animation active 1s\r\n\r\n@keyframes active\r\n  0%\r\n    transform translateY(0)\r\n  50%\r\n    transform translateY(100%)\r\n  100%\r\n    transform translateY(0)\r\n</style>\r\n```\r\n\r\nComponentB\r\n\r\n```vue\r\n<template>\r\n<div class=\"active\">ComponentB</div>\r\n</template>\r\n<style scoped lang=\"stylus\">\r\n.active\r\n  animation active 1s\r\n\r\n@keyframes active\r\n  0%\r\n    transform scale(1)\r\n  50%\r\n    transform scale(2)\r\n  100%\r\n    transform scale(1)\r\n</style>\r\n```\r\n\r\nThe stylesheet of these two components will be compiled like this:\r\n\r\n```css\r\n.active[data-v-HASH-OF-COMPOENT-A] {\r\n  animation: active 1s;\r\n}\r\n\r\n@keyframes active {\r\n0% {\r\n    transform: scale(transform translateY(0));\r\n}\r\n50% {\r\n    transform: scale(transform translateY(100%));\r\n}\r\n100% {\r\n    transform: scale(transform translateY(0));\r\n}\r\n}\r\n\r\n.active[data-v-HASH-OF-COMPOENT-B] {\r\n  animation: active 1s;\r\n}\r\n\r\n@keyframes active {\r\n0% {\r\n    transform: scale(1);\r\n}\r\n50% {\r\n    transform: scale(1.5);\r\n}\r\n100% {\r\n    transform: scale(1);\r\n}\r\n}\r\n```\r\n\r\n### What does the proposed API look like?\r\nThe result of compilation might be like this:\r\n\r\n```css\r\n.active[data-v-HASH-OF-COMPOENT-A] {\r\n  animation: active--HASH-OF-COMPOENT-A 1s;\r\n}\r\n\r\n@keyframes active--HASH-OF-COMPOENT-A {\r\n  ...\r\n}\r\n\r\n.active[data-v-HASH-OF-COMPOENT-B] {\r\n  animation: active--HASH-OF-COMPOENT-B 1s;\r\n}\r\n\r\n@keyframes active--HASH-OF-COMPOENT-B {\r\n  ...\r\n}\r\n```\r\n\r\nIf there is no keyframes defination of current scope, The result might be like this case:\r\n\r\n```css\r\n.active[data-v-HASH-OF-COMPOENT-A] {\r\n  animation: active--HASH-OF-PARENT-COMPOENT 1s;\r\n}\r\n\r\n.active[data-v-HASH-OF-COMPOENT-B] {\r\n  animation: active--HASH-OF-PARENT-COMPOENT 1s;\r\n}\r\n```\r\n\r\nIf there is no keyframes defination of any parent scope, The result might be like this case:\r\n\r\n```css\r\n.active[data-v-HASH-OF-COMPOENT-A] {\r\n  animation: active 1s;\r\n}\r\n\r\n.active[data-v-HASH-OF-COMPOENT-B] {\r\n  animation: active 1s;\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Keyframes in scoped style should be private",
        "labels": "feature request",
        "id": 123393
    },
    {
        "body": "### What problem does this feature solve?\r\nIt would allow a parent components to inject a local component registration in a child component.\r\n\r\nConsider cases like custom `<select>` component which would accept a prop `component` (name of component) to render `<option>` but then `component` should be globally registered.\r\n\r\n### What does the proposed API look like?\r\n```js\r\n...\r\ninheritComponents: true,\r\n...\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide components to immediate children",
        "labels": "feature request",
        "id": 123394
    },
    {
        "body": "### What problem does this feature solve?\r\nI have some case, when it will be very useful: [fiddle](https://jsfiddle.net/3tyxjgao/4/)\r\nIn this case creation of properties in constructor by custom function like:\r\n`\r\ncomputed { ...putSomeProps() }\r\n`\r\ndoes not fit, because there used information, created with inheritance chain of components.\r\nAnd may be it will also useful in the case of vuex store bindings.\r\n\r\n### What does the proposed API look like?\r\n`\r\ncomputed() {\r\n  return {prop1() {...}}\r\n}\r\n`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "computed as a function",
        "labels": "feature request",
        "id": 123395
    },
    {
        "body": "### What problem does this feature solve?\r\nNow, page (component) which rendered after server request and after browser history navigation is equal. It's mean that we can't check how user navigate to this endpoint.\r\nKey problem:\r\nAfter server request we use vuex cache, and don't make any API calls, but if we came from other page we should do it. On store level we should validate requests like here - https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/store/index.js#L59 \r\n\r\nCache control is very hard way and better control it's on view layer.\r\n\r\n### What does the proposed API look like?\r\nAdd flag $serverRendered for all components that rendered on served and not updated on client, then you can on any hook make decision - do or not do request to API.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "$serverRendered",
        "labels": "feature request",
        "id": 123396
    },
    {
        "body": "### What problem does this feature solve?\r\nAJAX calls in filter. I tried to create a filter that translates the given text with a Google Translator API. I already created a directive that can do that: http://codepen.io/123Jon4/pen/RpxWqo \r\n\r\n### What does the proposed API look like?\r\n````\r\n<div>{{text | translate('auto', 'en')}}</div>\r\n````\r\n````\r\nVue.filter('translate',function(value, arg1, arg2){\r\n   return function(asyncValue){\r\n     axios.get('http://api.com', {\r\n      params: {\r\n        param1 : '1'\r\n      }\r\n    })\r\n    .then(function(response) {\r\n      //AJAX call succeeded\r\n      asyncValue.set(response.data.result);\r\n    })\r\n    .catch(function(error) {\r\n      //AJAX call failed\r\n      //do nothing or\r\n      asyncValue.set('error message');\r\n    });\r\n   }\r\n});\r\n````\r\nThis is just a suggestion, because I don't really know the behavior of a filter. To say it simply: It should be possible to set the value by returning the value in synchronous functions and setting the value in asynchronous functions.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Possibility for asynchronous filters",
        "labels": "feature request",
        "id": 123397
    },
    {
        "body": "I understand that functional components are instanceless, but given that they still have access to the parent context, wouldn't it make sense to also give them access to provided ancestor properties? \r\n\r\nFor example, I created [vue-mobiledoc-editor](https://github.com/alidcastano/vue-mobiledoc-editor). In the current version, I used a shared Vue instance that I passed to the editor and button components so that they could communicate with each other; and since there were various types of buttons (e.g. section, markup, and link buttons), I made the component functional. \r\n\r\nI want to upgrade the code to using provide/inject since not having to pass the shared instance to every component makes the code more maintainable and will also make it easier to create multiple editor instances. However, it is not possible to inject exposed ancestor data and methods in functional components. If there is no specific reason for this, I'd like to make this a feature request. \r\n\r\n\r\n",
        "title": "Provide/Inject in functional components ",
        "labels": "feature request",
        "id": 123398
    },
    {
        "body": "## Versions\r\n\r\nVue 2.0.1\r\nvue-server-renderer 2.0.1\r\nWindows 7\r\n\r\n## What is Expected?\r\nvue-server-renderer faster.\r\nserver-render is just for rendering html string, reusing code with browser side maybe easier to maintenance, but still cause lower performance which can't be ignore, especially using it with giant number of users(qq qzone hybrid website).\r\n\r\n## What is actually happening?\r\nUsing virtual dom to render html string on server side will cost more time which is about 10-20 times than traditional template engine without using virtual dom.\r\n\r\n## Reproduction repository\r\nI write a small js called jscHelper to convert vue virtual dom tree to normal render function for improving performance. \r\nBut the compatibility is not good. \r\nSo I hope there will be an original way to solving it.\r\nhttps://github.com/jialunguo/vue-server-render-jscHelper.git\r\n\r\n",
        "title": "Improve server rendering performance with string templates",
        "labels": "feature request",
        "id": 123399
    },
    {
        "body": "## Vue.js version\r\n2.2.2\r\n## Reproduction Link\r\nhttps://jsfiddle.net/6ofnoyg6/1/\r\n\r\n## What is expected?\r\nI'd think that the templates defined in the \"main\" component would get passed down to all the components, including the full hierarchy. As you can see in the example, only the `container` has the `$scopedSlots`, while the `#app` component does not. Hence you can't overwrite slots over multiple levels, which would force you to either \r\n - define the `template`s inside `container` component -> lose the ability to customize the components output / you need multiple prerendered files for each customization\r\n - or not using the `child` component and instead define everything in the `container` component -> more unreadable, unmaintainable code.\r\n\r\nI've also asked on gitter and [stackoverflow](http://stackoverflow.com/questions/42626147/vuejs-pass-scope-templates-down-multiple-child-levels), but didn't get any answers (so far). I think this isn't possible by design, but is this intended?",
        "title": "Make scopes available for all components in the hierarchy",
        "labels": "feature request",
        "id": 123400
    },
    {
        "body": "Ref: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n\r\nMaybe we can add an event modifier: `passive` ?",
        "title": "Support passive event listeners",
        "labels": "feature request",
        "id": 123401
    },
    {
        "body": "### Vue.js version\r\n2.2.0\r\n\r\n### Reproduction Link\r\n\r\nhttp://jsfiddle.net/wdgfnn0h/3/\r\n\r\n### Steps to reproduce\r\n\r\nCreate a `<select v-model=\"value\">` tag with a selected option: `<option selected>Value</option>`.\r\n\r\n### What is Expected?\r\n\r\nI expect not warning because in my app, I initialize the Vue values with the values extracted from the HTML (to keep a no-js compatibility). \r\nThis has been discussed in https://github.com/vuejs/vue/issues/4733 and implemented in https://github.com/vuejs/vue/pull/4770\r\n\r\n### What is actually happening?\r\n\r\nA warning is shown in the console:\r\n\r\n> [Vue warn]: Error compiling template:\r\n> ```html\r\n> <div id=\"app\">\r\n> <select v-model=\"first\">\r\n> <option value=\"0\">option0</option>\r\n> <option value=\"1\" selected=\"\">option1</option>\r\n> </select>\r\n> </div>\r\n> ```\r\n> - `<select v-model=\"first\">`:\r\n> inline selected attributes on <option> will be ignored when using v-model. Declare initial values in the component's data option instead.",
        "title": "Disabling warnings about inline value attributes for v-model on select",
        "labels": "feature request",
        "id": 123402
    },
    {
        "body": "Allow this kind of feature for transition-group or transition\r\n\r\n```html\r\n<transition-group tag=\"todo-layout-container\">\r\n    <!-- Which will render a component rather a tag -->\r\n</transition-group>\r\n```\r\n\r\nand will compile to\r\n```html\r\n\r\n<todo-layout-container>\r\n\r\n</todo-layout-container>\r\n```\r\nand compiles to what is inside of the todo-layout-container\r\n```js\r\nlet Todo = Vue.extend({\r\n   name: 'todo-layout-container',\r\n   methods: {\r\n      //Per todo methods\r\n   }\r\n});\r\n```",
        "title": "Allow Component Tag in Transition Group",
        "labels": "feature request",
        "id": 123403
    },
    {
        "body": "When an external tool is using vue-template-compiler to grab the script block, `{ pad: true }` fills in preceding non-script lines with `//` so that line+column-oriented tools can get the line numbers right. \r\n\r\nHowever, this doesn't work as well for character-oriented tools like the Typescript language service, which treat positions as a single index into a single string. It would be better if `{ pad: true }` replaced the contents of all non-script blocks with spaces.\r\n\r\nFor example:\r\n\r\n```js\r\nimport { parseComponent } from 'vue-template-compiler'\r\nconst desc = parseComponent(`<template>\r\nblah\r\n</template>\r\n<script>\r\nexport default {\r\n  data: { example: 12 }\r\n  // etc etc\r\n}\r\n</script>`, { pad: true })\r\nconsole.log(desc.script.content)\r\n```\r\n\r\nCurrent behaviour prints:\r\n\r\n```\r\n//\r\n//\r\n//\r\n\r\nexport default {\r\n  data: ...\r\n```\r\n\r\nDesired behaviour prints:\r\n\r\n```\r\n......................................................\r\n.......................................\r\n....\r\n...........\r\n........\r\nexport default {\r\n  data: ...\r\n```\r\n\r\nexcept instead of `.`, it should print ` `.\r\n\r\n## Motivation\r\n\r\nFor background, I'm working on a Vue plugin for the Typescript language service so that editors like VS Code, Visual Studio, Sublime, emacs, etc, can get Javascript and Typescript completions inside .vue files. The next version of Typescript will support full completions on Vue and Vue options objects with no type annotations, and the plugin will make that work inside `.vue` files as well as `.js` and `.ts` files.\r\n\r\nI tried using the `start/end` offsets returned from `parseComponent`, which kind of works, but Typescript has previously only used offsets for non-critical parsing like JSDoc. I'd like to use the space-replacing technique since I know it has worked in the past, for example in Visual Studio's handling of Javascript embedded in HTML.\r\n\r\n## Implementation\r\n\r\nReplace the body of `padContent` in `src/sfc/parser.js` with `return content.slice(0, block.start).replace(/./g, ' ')`. This correctly avoids replacing both `\\n` and `\\r\\n`, at least on node 7.4 on Linux.\r\n\r\nI'll send a PR as soon as I get Vue building and have added a test.",
        "title": "Feature request: parseComponent's pad: true option should use spaces for padding",
        "labels": "feature request",
        "id": 123404
    },
    {
        "body": "I just started working with Vuejs and have been using React and Mobx for a long time.\r\n\r\nI quickly realized that the concept of modifiers was missing in Vuex. Furthermore i was wondering how to improve performance of large arrays of objects without having modifiers. In Vuex all the objects in an array must be converted to reactive object which might not be required and might be way less performant.\r\n\r\nWouldn't modfiers give the ability to further improve performance of Vuejs by giving the developer a way to tell Vuejs which parts of the data that have to be reactivity :) ?\r\n\r\nSee MobX modifiers: https://mobx.js.org/refguide/modifiers.html",
        "title": "Modifiers to improve performance of larger datasets",
        "labels": "feature request",
        "id": 123405
    },
    {
        "body": "Like Components, Directives can help split the application into smaller pieces and reusable functionality.\r\nIn some situations Directives may become big and it would be convenient to load them when they actually needs to be used, exactly how Async Component does.\r\n\r\n",
        "title": "Feature request: Async Directives",
        "labels": "feature request",
        "id": 123406
    },
    {
        "body": "Hello!\r\n\r\nI have used Vue.js from version 0.* and very excited by it! :) Now i use latest version.\r\nBut during all time I have a question, that worry me.\r\n\r\nI have chat application and need to render many objects (talks, messages...). That's why I have tried to improve performance all time during development. And also I need to have computed properties on my entities.\r\n\r\nFor example,  I have message body and parsed version of message body (parsed links, maybe preview of http links, images by links and other). And I want field `parsedBody` to be computed property, that changed when some other properties changed. This is only one example, but I often need this functionality.\r\n\r\nOf course, I can define computed properties in component `Message`, but after switching to another dialog and returning  back all my computed properties will be recalculated again. And if I have hundreds of messages - it's not very fast. And it's sad.\r\n\r\nI know that one of inspired projects is Knockout.js. And Knockout.js has computed properties on data level, not component (aka visual layer). That's why I can define computed property on data layer without dependency to visual layer and switching between pages. And it's very useful in some cases.\r\n\r\nI tried in my project to wrap every message object to `new Vue(...)`. Something like:\r\n```\r\nvar MessageVue = Vue.extend({\r\n   computed: {\r\n      parsedBody: function(){ ... },\r\n      anotherComputedProp: function(){ ... }\r\n   }\r\n});\r\n\r\nfunction MessageVue(data){\r\n   var result = new MessageVue({ data: data });\r\n   return result;\r\n}\r\n```\r\n\r\nAnd it works!\r\n**But it's interesting, how fast it to create many `new Vue`?**\r\nAnd another interesting issue: Vuex in strict mode throws stack overflow error when you try to put this object in state.\r\n\r\nOr maybe you can advise something else in this situation?\r\nI need to operate with many objects and big arrays, that's why performance is very important to me. And I don't want to recalculate all computed properties between switching pages in vue-router (you can say that I can cache pages with keep-alive, but it's not good idea to have cache for hundreds of pages).",
        "title": "[Feature] Computed properties on data objects, but not on components.",
        "labels": "feature request",
        "id": 123407
    },
    {
        "body": "Example\r\n```\r\nv-bind:class.class-name=\"expression\"\r\n//is equivalent to\r\nv-bind:class=\"{'class-name': expression}\"\r\n```\r\nMore about:\r\nhttps://scotch.io/tutorials/angular-2-classes-with-ngclass-and-ngstyle#using-the-styleproperty-binding",
        "title": "Feature request: Angular2 like class and style property binding [class.property]=\"expresion\"",
        "labels": "feature request",
        "id": 123408
    },
    {
        "body": "I try to create a plugin that can handle component declaration with a specific format:\r\n```\r\n  ...\r\n  components: {\r\n    myComponent: 'url:<URL_OF_THE_COMPONENT>',\r\n    ...\r\n```\r\n\r\nCurrently, `function createComponent() in vue.js`, can only support `function` else it fails with `\"Invalid Component definition: ...\"`.\r\nIs it possible to have a hook or a fallback that can be defined in a plugin definition ?\r\nOr maybe a generic way for resolving assets from a plugin ?\r\n\r\n",
        "title": "Feature request: fallback for unresolved components",
        "labels": "feature request",
        "id": 123409
    },
    {
        "body": "When an external tool is using `vue-template-compiler` it would be very useful to have access to any attributes that are set on the `template`, `script`, or `style` sections. Custom blocks [already do this](https://github.com/vuejs/vue/blob/dev/packages/vue-template-compiler/build.js#L5850), but the previously mentioned three don't. \r\n\r\nThis specifically applies to the [parseComponent](https://github.com/vuejs/vue/blob/dev/packages/vue-template-compiler/build.js#L5810) method. \r\n\r\nIn my use case I'm building a webpack loader to separate out component themes into a separate file.\r\n\r\nCalling parseComponent on a file that contained the following...\r\n\r\n```\r\n<style theme=\"site\" lang=\"stylus\">\r\n```\r\n\r\nThis would allow me to do `processComponent(src).output.styles[0].attrs.theme` in my tool. Without doing this I'm forced to do the parsing myself which seems unnecessary. \r\n\r\nI would use custom blocks for this, but custom blocks don't have syntax highlighting in any editor that supports *.vue files. ",
        "title": "Feature Request: Pass attributes back from each section on call to parseComponent",
        "labels": "feature request",
        "id": 123410
    },
    {
        "body": "Hi,\r\nThis will allow more control on transitions. My use-case is a transition in two steps :\r\n`giving an array model like [1, 2, 3]`\r\n\r\n1\r\n2\r\n3\r\n\r\n**1.  that reorder elements (`[2, 3, 1]`) with move transition**\r\n\r\n2\r\n3\r\n1\r\n\r\n**2.  that remove elements (`[2]`)**\r\n2\r\n<- 3\r\n<- 1\r\n \r\nIf I had a hook I will be firing the second step after 1 has finished moving. Instead, as a workaround, I'm firing it after a timeout.\r\n\r\nhttps://github.com/vuejs/vue/blob/ae93d2bef8e20402ae3501aa5cdcf14b0ee19c12/src/platforms/web/runtime/components/transition-group.js\r\nLooking at the sources, it seems to be pretty trivial to implement, since moving is all about setting and remove class. We could fire an event after all transitionend events are finished. Could provide a PR if accepted.\r\n\r\nThanks\r\n\r\n",
        "title": "Feature request: transition-group provide hook when all children moves are finished ",
        "labels": "feature request",
        "id": 123411
    },
    {
        "body": "### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\n\r\n\r\n### Steps to reproduce\r\n\r\n\r\n### What is Expected?\r\nAn error/stracktrace that points me to the code/component that caused the real error.\r\n\r\n### What is actually happening?\r\nThis morning i had an error during de server side rendering of my app. This resulted in the app not being available to everybody.\r\n\r\nWhen started with SSR i already noticed the error reporting lacks some critical information as to where exactly errors happen. \r\n\r\nThis is my current error handling during renderStream, almost the same as the hackernews 2.0 example because i used that example as my boilerplate:\r\n\r\n```javascript\r\nrenderStream.on('error', err => {\r\n  // 404 error\r\n  if (err && err.code === '404') {\r\n    if (isProd) {\r\n      var errorMessage = new Error(`404 during renderStream: ${req.url}`)\r\n      opbeat.captureError(errorMessage)\r\n    }\r\n    res.status(404).end('404 | Page Not Found')\r\n    return\r\n  } else {\r\n    // Render Error Page or Redirect\r\n    if (isProd) {\r\n      var errorMessage = new Error(`Error during renderStream: ${req.url}. ${err}`)\r\n      var errorMessage2 = new Error(err)\r\n      opbeat.captureError(errorMessage2)\r\n    }\r\n    // console.error(errorMessage)\r\n    res.status(500).end('Internal Error 500')\r\n  }\r\n})\r\n```\r\n\r\nI use opbeat to track errors in my app and get nofications about them as soon as they happen.\r\n\r\nThis morning, it resulted in this error: \r\n`Error: TypeError: Cannot read property 'path' of undefined`\r\nWith no hints to look for where this happend in my code/components.\r\n\r\nThe stacktrace provided only points me to *node_modules/vue-server-renderer/build.js* (see attached screenshot) and there it ends. Which seems not the root of the problem, just where the error gets passed on to my server.js.\r\n\r\n<img width=\"942\" alt=\"screen shot 2017-02-06 at 09 07 47\" src=\"https://cloud.githubusercontent.com/assets/5155373/22638997/15bbcc6e-ec4c-11e6-838d-421ac33f5a33.png\">\r\n\r\nIt would be really great if there's a better error stacktrace for SSR apps or somebody here knowing how to proper debug this. Unfortunately these errors just don't help enough :(\r\n",
        "title": "Not enough information in SSR error / stacktraces",
        "labels": "feature request",
        "id": 123412
    },
    {
        "body": "Would be neat if `$on` supported an array of events:\r\n\r\n```js\r\nbus.$on(['CLICK_BODY', 'KEYUP_ESCAPE'], () => {\r\n  this.active = false\r\n})\r\n```\r\n\r\nWithout it we need duplication\r\n\r\n```js\r\nbus.$on('CLICK_BODY', () => {\r\n  this.active = false\r\n})\r\nbus.$on('KEYUP_ESCAPE', () => {\r\n  this.active = false\r\n})\r\n\r\n// or\r\n\r\nbus.$on('CLICK_BODY', deactivate)\r\nbus.$on('KEYUP_ESCAPE', deactivate)\r\n```",
        "title": "$on with an array of events",
        "labels": "feature request",
        "id": 123413
    },
    {
        "body": "What do you think about extending the modifier keys by these:\r\n\r\n`.cmd` - only for macOS and represents the command key\r\n`.cmdOrCtrl` - represents command key on macOS and control key on Linux/Windows\r\n\r\nThe second one (`cmdOrCtrl`) is a widely used concept in [Electron apps](https://github.com/electron/electron/blob/master/docs/api/accelerator.md#platform-notice) to create shortcuts in a more natural way for users of specific systems.\r\n\r\nPersonally, I have a custom textarea component which implements custom key bindings i.e. `cmd/ctrl + \u2190` to move the caret to the beginning of textarea. I would love to make this work by using a single, OS-aware modifier.",
        "title": "Extend support for modifier keys (.cmd, .cmdOrCtrl)",
        "labels": "feature request",
        "id": 123414
    },
    {
        "body": "Hello there! Sorry, if it's wrong place to post such a thing. It's more like a question, but may be as feature request as well. What is the current official way of creating portal component? Portal is a component that helps mount the child component to targeted DOM point. For example, React exposes official API for doing portals (i.e. `React.unstable_renderSubtreeIntoContainer`).",
        "title": "Portal implementation in Vue.",
        "labels": "feature request",
        "id": 123415
    },
    {
        "body": "atm vue treats the data coming from the instance as the only truthy source https://vuejs.org/v2/guide/forms.html#Basic-Usage which is fine in most of the time, but what if am using something like **Laravel** or any backend where we could send something to the view file.\r\n\r\n> but why not get those data through ajax ?\r\n\r\nbecause when we use the **inline-template** feature, we can then use the code we are already used to in blade while using the full power of vue \ud83d\udc83 \r\n```blade\r\n@extends('layouts.app')\r\n\r\n@section('content')\r\n    <auth-form inline-template>\r\n        {{ Form::open(['route' => 'post.resetpassword', 'class'=>'form-horizontal','@submit.prevent'=>'FormSubmit']) }}\r\n        \r\n            {{-- Token --}}\r\n            <form-input inline-template>\r\n                <input type=\"hidden\" name=\"token\" value=\"{{ $token }}\">\r\n            </form-input>\r\n\r\n            {{-- Email --}}\r\n            <form-input inline-template :has-errors=\"errors.email\">\r\n                <div :class=\"[{'has-error': hasErrors}, 'form-group']\">\r\n                    {{ Form::label('email', 'E-Mail Address', ['class'=>'col-md-4 control-label']) }}\r\n                    <div class=\"col-md-6\">\r\n                        {{ Form::email('email', $email, ['class'=>'form-control','autofocus','v-model'=>'input']) }}\r\n                        <form-errors :errors=\"hasErrors\"></form-errors>\r\n                    </div>\r\n                </div>\r\n            </form-input>\r\n       \r\n            ...\r\n        {{ Form::close() }}\r\n    </auth-form>\r\n@endsection\r\n```\r\n\r\nbut the problem starts to raise when we want to add a pre-init value to the `v-model` like\r\n```blade\r\n<form-input inline-template>\r\n    <input type=\"hidden\" name=\"token\" value=\"{{ $token }}\" v-model=\"input\" >\r\n</form-input>\r\n```\r\nwhich is sadly is not available for the input fields https://vuejs.org/v2/guide/forms.html#Value-Bindings\r\n\r\nhowever, we can still achieve that through a dirty hacky fix, like\r\n```blade\r\n<form-input inline-template>\r\n    <input type=\"text\" name=\"token\" data-token=\"{{ $token }}\" @blur=\"hiddenValue\" autofocus style=\"opacity: 0;height: 0;width: 0\">\r\n</form-input>\r\n```\r\n```js\r\nmethods: {\r\n    hiddenValue() {\r\n        this.input = event.target.dataset.token\r\n    }\r\n},\r\n```\r\n\r\n\r\n### But \r\nwhat if we instead got an `event` instance available for us through the lifecycle hooks, same as `watch,computed,event methods`, and now we can make things even cleaner by\r\n```blade\r\n<form-input inline-template>\r\n    <input type=\"hidden\" name=\"token\" data-token=\"{{ $token }}\">\r\n</form-input>\r\n```\r\n```js\r\ncreated(event) {\r\n    this.input = event.target.dataset.token\r\n},\r\n```",
        "title": "[Feature Req] bind 'event' to lifecycle hooks",
        "labels": "feature request",
        "id": 123416
    },
    {
        "body": "Occasionally I will run into situations in my project where I need data to be bound to my callback for events such as in the example below.\r\n\r\n```vue\r\n<!-- app.vue -->\r\n<my-component @test:event=\"testHandler('someValue', arguments)\"></my-component>\r\n\r\nmethods: {\r\n    testHandler(componentValue, args) {\r\n    }\r\n}\r\n```\r\n\r\n```html\r\n<!-- MyComponent.vue -->\r\n<button @click=\"$emit('emitValue1', 'emitValue2')\">Click me</button>\r\n```\r\n\r\nI think that explicitly accessing the arguments object is a bit tedious. I propose creating a new modifier `.bind` which will automatically apply the arguments object to the function, such that the final syntax would look like:\r\n\r\n```vue\r\n<!-- app.vue -->\r\n<my-component @test:event=\"testHandler.bind('someValue')\"></my-component>\r\n\r\nmethods: {\r\n    testHandler(componentValue, emitValue1, emitValue2) {\r\n    }\r\n}\r\n```\r\n\r\n```html\r\n<!-- MyComponent.vue -->\r\n<button @click=\"$emit('emitValue1', 'emitValue2')\">Click me</button>\r\n```\r\n\r\nI have already looked into this and it is a fairly small change to the compiler. I don't know if `bind` is the correct word to use for this, as it doesn't allow change to the `this` context, maybe `apply`? Anyway feedback is welcome, and if this is a desirable feature I can write tests for this and create a PR.",
        "title": "Simplify use of arguments object in events",
        "labels": "feature request",
        "id": 123417
    },
    {
        "body": "Sometimes the connection between data and displays is not so direct. For example I need a list of checkboxes, but store only the checked one's ids in an array. It would be useful to be able to add a get/set function pair in v-bind, with the ability to pass an aditional value to it. So it would be called with set(id, true) on clicking the checkbox, and get(id) when initialising it. Or perhaps extend the computed property's get/set functions with this ability.\r\n\r\n(See: https://forum.vuejs.org/t/checkboxes-based-on-wether-a-value-is-in-an-array/5752)",
        "title": "v-bind with get/set function",
        "labels": "feature request",
        "id": 123418
    },
    {
        "body": "Hi, I wonder if it would be good to have something like this. (maybe it's already achievable via current Vue functional, but I didn't find it)\r\nImagine I have a 12 rows Grid component that has props of xs, sm,md and lg, has a single slot and\r\nlooks like this:\r\n``` html\r\n<Grid xs='12' sm='6' lg='3'>\r\n   slot content here\r\n</Grid>\r\n```\r\n\r\nWhat I want is to have something like a modifier for the wrapped components, so it would be possible to do something like this\r\n\r\n``` html\r\n<ElementsList xs='1' sm='2' lg='3' passToSlot='true'>\r\n     <Grid>Content</Grid>\r\n     <Grid>Content</Grid>\r\n     <Grid>Content</Grid>\r\n</ElementsList>\r\n```\r\n\r\nThe ElementsList takes the props, transforms them and passes to Grid accordingly.\r\n\r\nSo after the component passes props to slot I have something like this:\r\n``` html\r\n<ElementsList xs='1' sm='2' lg='3' passToSlot='true'>\r\n <Grid xs='12' sm='6' lg='3'>\r\n   slot content here\r\n</Grid>\r\n <Grid xs='12' sm='6' lg='3'>\r\n   slot content here\r\n</Grid>\r\n <Grid xs='12' sm='6' lg='3'>\r\n   slot content here\r\n</Grid>\r\n```\r\n\r\n</ElementsList>\r\n",
        "title": "Props to slots",
        "labels": "feature request",
        "id": 123419
    },
    {
        "body": "Hi,\r\n\r\nForms generated by Phoenix HTML helpers have an inline value (like on Rails). I use Vue.js on those forms by creating the View Model data on the fly by introspecting the form inputs and values. I works fine but these warnings are no longer necessary in my case. I wonder if there could be a way to disable them?",
        "title": "Disabling warnings about inline value attributes for v-model",
        "labels": "feature request",
        "id": 123420
    },
    {
        "body": "### Vue.js version\r\n2.1.9\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/o2azdhbx/\r\n\r\n### Steps to reproduce\r\n\r\n### What is Expected?\r\nExpect to see an alert saying \"Caught an error\"\r\n\r\n### What is actually happening?\r\nSee an uncaught exception in the console",
        "title": "`Vue.config.errorHandler` does not catch errors thrown in lifecycle hooks",
        "labels": "feature request",
        "id": 123421
    },
    {
        "body": "Our app attempts to catch unexpected exceptions so they can be captured and reported back to base. \r\n\r\nI can use Vue.config.errorHandler for Vue render and watch exceptions, but this doesn't catch exceptions within Vue.nextTick or vm.$nextTick closures. \r\n\r\nFor now I've interposed the nextTick and prototype.$nextTick functions to catch the errors, but this feels fragile. \r\n\r\nThe suggestion is that the existing errorHandler should be used to report Vue.nextTick and vm.$nextTick exceptions.",
        "title": "Vue.config.errorHandler to handle Vue.nextTick and vm.$nextTick exceptions",
        "labels": "feature request",
        "id": 123422
    },
    {
        "body": "This special syntax is somewhat inspired by the `v-bind:class`.\r\n\r\nLet's take this component as an example:\r\n\r\n```html\r\n<template>\r\n  <test />\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  methods: {\r\n    handleEvents (type, ...args) {\r\n      console.log('event=' + type, ...args)\r\n    },\r\n    handleAction (...args) {\r\n      console.log('action!', ...args)\r\n    },\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nThese call the `handleEvents` method when any event is emitted, with the following signature: `function (eventType, ...args)`.\r\n\r\n```html\r\n<test v-on=\"handleEvents\" />\r\n<test v-on=\"'handleEvents'\" />\r\n<test v-on=\"[handleEvents]\" />\r\n<test v-on=\"['handleEvents']\" />\r\n```\r\n\r\nThese call both `handleEvents` and `handleEvents2` methods.\r\n\r\n```html\r\n<test v-on=\"[handleEvents, handleEvents2]\" />\r\n<test v-on=\"['handleEvents', 'handleEvents2']\" />\r\n```\r\n\r\nThese call the `handleAction` method when the `action` event is emitted, with the usual signature: `function (...args)`.\r\n\r\n```html\r\n<test v-on=\"{ action: handleAction }\" />\r\n<test v-on=\"{ action: 'handleAction' }\" />\r\n```\r\n\r\nYou can mix everything!\r\n\r\n```html\r\n<test v-on=\"[handleEvents, { action: handleAction }]\" />\r\n```\r\n\r\nOr store it all in a reactive property!\r\n\r\n```html\r\n<template>\r\n  <test v-on=\"handlers\" />\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: {\r\n    handlers: ['handleEvents', {action: 'handleAction'}],\r\n  },\r\n  methods: {\r\n    handleEvents (type, ...args) { ... },\r\n    handleAction (...args) { ... },\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nWith the [$props](https://github.com/vuejs/vue/issues/4571), it could allow making specialized components out of generic ones much easier:\r\n\r\n```html\r\n<template>\r\n  <ui-modal v-bind=\"$props\" v-on=\"$emit\">\r\n    <input :value=\"value\" :placeholder=\"placeholder\" />\r\n  </ui-modal>\r\n</template>\r\n\r\n<script>\r\nimport Modal from 'components/Modal.vue'\r\n\r\nexport default {\r\n  name: 'ui-input-modal',\r\n\r\n  props: {\r\n    ...Modal.props,\r\n    value: {},\r\n    placeholder: String,\r\n  },\r\n}\r\n</script>\r\n```\r\n\r\nIn this example, we expose the same interface as the `Modal` component (props and events), while making it more specialized with news props/events and a pre-made template.\r\n\r\nIf you want, take a look at [this working proof of concept](https://jsfiddle.net/Akryum/8rrauyw0/).",
        "title": "Generic v-on syntax without argument",
        "labels": "feature request",
        "id": 123423
    },
    {
        "body": "Component properties are converted to the same name of the vm member variable, personally think that it should provide the relevant configuration to modify the component's property name.\r\nFor example, we can use the following code convert 'name' attribute to 'componentName' member variable\r\n```html:\r\n<template>\r\n    <div :class=\"componentName\"></div>\r\n</template>\r\n<script>\r\n    export default {\r\n        props: {\r\n            componentName: {\r\n                name: 'name',\r\n                type: String\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n```\r\n\r\n```html:\r\n<my-component name=\"name\">\r\n```",
        "title": "Defines the name of props",
        "labels": "feature request",
        "id": 123424
    },
    {
        "body": "I'm building a cordova app using vue.js and vue-router. In order for it to feel more like a **native** app, I'm trying to support swiping from left to right, to go back to the previous view. \r\n\r\nI have prepared an example here: http://jsfiddle.net/tillsanders/hzkq20yt/10/ \r\n\r\nJust run this fiddle, drag the view *foo* to the right and let go. Behind *foo*, *bar* is already waiting \u2013 I'm sure, you have seen this before in many native apps. Take facebook, for example: \r\n\r\n![img](https://cloud.githubusercontent.com/assets/1533846/21570787/955fdcee-cec9-11e6-889e-634d43fa79b8.png)\r\n\r\nThanks to the [transition hooks](https://vuejs.org/v2/guide/transitions.html#JavaScript-Hooks), this already works (more or less \ud83d\ude09). But what if the user stops swiping to early or with little to no velocity? You would expect the view/*foo* to slide back into its original position, because you probably intended to cancel the navigation. Unfortunately, there is no way for me to cancel the transition inside the hooks. So all I can do is sliding the view back into its original position, then *bar* appears, and then I immediately navigate back to 'foo' (ll. 65 - 78 in the fiddle). This is of course a really nasty workaround.\r\n\r\nWhat I would need for this to work is something like an `abort()` function in the transition hooks:\r\n\r\n```js\r\nonLeave(element, done, abort) {\r\n    // ...\r\n        // If the swipe was short and at a low speed, we cancel it and revert to the original position\r\n        if(remainingDistancePercent < 15 && event.velocityX < 0.1) {\r\n            // Cancel routing and revert to original position\r\n            element.css({\r\n                transition: 'transform 500ms ease-out',\r\n                transform: 'translate3d(0, 0, 0)'\r\n            })\r\n            abort() // ideally, this would wait for above css transitions to finish\r\n        }\r\n    // ...\r\n}\r\n```\r\n\r\n*(I thought about whether this is an issue with vue-router or vue.js and I thought the reason vue-router doesn't offer this functionality is because vue.js doesn't. I'm sorry if this is not the case and I should have posted it in the vue-router repository!)*",
        "title": "Ability to abort transition between dynamic components using javascript hooks",
        "labels": "feature request",
        "id": 123425
    },
    {
        "body": "A `$props` special attribute would be very handy to reuse generic components inside more specific ones. It would hold the props passed down to the component.\r\n\r\nFor example, I'd like to create a `InputModal` which would be a `Modal` with some predefined content (for example,one `<input/>`).\r\n\r\n```html\r\n<template>\r\n  <modal v-bind=\"$props\">\r\n    <input v-model=\"inputValue\" :placeholder=\"placeholder\" />\r\n  </modal>\r\n</template>\r\n\r\n<script>\r\nimport Modal from './Modal.vue'\r\n\r\nexport default {\r\n  props: {\r\n    ...Modal.props,\r\n    value: {},\r\n    placeholder: String,\r\n  },\r\n\r\n  // ...\r\n}\r\n</script>\r\n```\r\n\r\nHere is a [jsfiddle](https://jsfiddle.net/Akryum/z66hve7n/) of the use case.",
        "title": "$props",
        "labels": "feature request",
        "id": 123426
    },
    {
        "body": "The v-html attribute should be able to use filters because it is only use to display formated text. This should be working :\r\n\r\n`<span v-html=\"myParam | line_break\"></span>`\r\n\r\nWhere, in this case, line_break detect \\n and replaces them with `<br />`\r\n\r\n",
        "title": "Custom filters should be working on v-html.",
        "labels": "feature request",
        "id": 123427
    },
    {
        "body": "A way to change the `value` and `input` defaults would be great, especially for ui toolkits.\r\nMy use case here is to create a Radio button component that would behave like a standard HTML one:\r\n\r\n```html\r\n<ui-radio value=\"unknown\" v-model=\"answer\">I don't know</ui-radio>\r\n<ui-radio value=\"42\" v-model=\"answer\">42</ui-radio>\r\n```\r\n\r\nHere I'd like to change the prop used by `v-model` to something other that `value`, like for example a `currentValue` prop.\r\n\r\nSyntax proposal:\r\n\r\n```javascript\r\nexport default {\r\n  name: 'ui-radio',\r\n\r\n  props: ['value', 'currentValue'],\r\n\r\n  model: {\r\n    prop: 'currentValue',\r\n    event: 'input',\r\n  },\r\n\r\n  computed: {\r\n    componentClasses () {\r\n      return {\r\n        active: this[this.$model.prop] === this.value,\r\n      }\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    handleClick () {\r\n      this.$emit(this.$model.event, this.value)\r\n    },\r\n  },\r\n}\r\n```\r\n",
        "title": "Customize v-model in components",
        "labels": "feature request",
        "id": 123428
    },
    {
        "body": "I would like to request a new feature.\r\nI want to determine if a reactive object is observed by any Vue instances.\r\n\r\nExample:\r\n```\r\nvar obj1 = {name: 'obj1'};\r\nvar obj2 = {name: 'obj2'};\r\n\r\nvar app = new Vue({\r\n  el: '#app',\r\n  data: {\r\n    item: {}\r\n  },\r\n  mounted: function onMounted(){\r\n    this.item = obj1;\r\n    this.item = obj2;\r\n  },\r\n  methods: {\r\n    pickItem: function pickItem() {\r\n    \tthis.item = items[this.pickedElemId];\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nI want to determine if _obj1_ is observed by any Vue instances. In this example it is clear that the _obj2_ is observed but _obj1_ is not.\r\n\r\nThe reasons behind this feature request is discussed in this issue:\r\nhttps://github.com/vuejs/vue/issues/4384",
        "title": "Feature Request: determine if a reactive object is observed by any Vue instance",
        "labels": "feature request",
        "id": 123429
    },
    {
        "body": "According to the document, the filterId would be parsed by using the text after | as the filterId. Is there possible to support use expression as the filterId. For example: we can use obj.filter as the filterId. vue can calc the expression, then use the result to be the filterId? Thx for your time:)",
        "title": "Dynamic filter names",
        "labels": "feature request",
        "id": 123430
    },
    {
        "body": "(After reading this posts, please read my comment after this thread was closed. Thanks)\r\n\r\nAs an app will use many more different fields than generic display components needed to display them, for keeping low the amount of code to send client side, and templates as clean as possible, developers should be able to position a fieldname on a template, (the perfect context for positionning and program surrounding behaviours), and be understood as a sub-component selection with parameter passing. (see more details below)\r\n\r\n1) A fieldname would translate to a component selection/call, according to a meta data vuex structure. (I am still not an expert in JS nor Vue, so the syntax is an approximate). Here is an example of such structure:\r\n\r\n```\r\nPUBLISH  // client side version\r\n\r\n{'pubName'\u00a0:<name>,\r\n\r\n CD\u00a0: ''    //Table level permissions (Create Delete) (see billow)\r\n Fields:[\r\n\t     {Name\u00a0:< >\r\n\t     VE\u00a0: '',   //Field level permissions (View Edit) (see billow)\r\n             Type // text, currency...\r\n\t     Component\r\n             Optional\r\n\t     Width,height\r\n\t     Min\r\n\t     Max\r\n\t     Regex\r\n\t     ListType},\r\n\r\n\t    {},   //other fields\r\n\t    {}\r\n         ]\u00a0\r\n}\r\nOther contexts\r\n```\r\n\r\nThis structure is to be standardized a way or another such as \r\n-For a context (pubName) and field name, be able to access field parameters, including Component.\r\n\r\n**Table level permissions**\u00a0\r\n'' Cannot Create nor Delete\r\n'C' Can Create not Delete\r\n'D' Can Create and Delete\r\n\r\n**Field level permissions**\u00a0\r\n'' Cannot View nor Edit // In fact, this value would result in not even including this field in this list in   the version sent to client\r\n'V' Can View not Edit\r\n'E' Can View and Edit\r\n\r\n2) Some parameters need to be passed forward to the called component.\r\nAlso, in complexe components such as data grids, a component might need to call an even lower component, thus needing again to call a component and pass parameters.\r\nThis should ideally be done without defining this call in code, because it would increase code size (to pass to client, to display in the code file, and to code error free, and would make less clean templates for each field insert).\r\n\r\nThis is why, it would be really useful to have asap (my wish! : ) ) a feature that does this\u00a0:\r\n\r\nThe following\u00a0: `<f FirstName>` would replace it with something like\u00a0:\r\n\r\n`<component\u00a0:is=\"Publish.(context).fields['Firstname'].Component\" name='FirstName' :value='FirstName' :context='context' :mode.sync ='mode'>` \r\n\r\nBut WITHOUT defining components (in the actual component) to be used in the actual dynamic component use.\r\n\r\n`<f`' would stand for field or forward (if not already in use in HTML specifications)\r\n\r\n**FirstName**\u00a0: the field to display. A lookup in the meta data would select what component to call. But also, it would be passed to that called component to an attribute named FieldName (for further use of metadata by the called component).\r\n\r\n**Value**\u00a0: the value received by data received, passed to a generic FieldValue attribute in the called component.\r\n\r\n**Context**\u00a0: Selecting which section of the meta data to look at the specified field (here, the pubName in the meta data), also passed to Context attribute (for further use of metadata by the called component). This attribute in the calling component is the same for all fields in the template.\r\n\r\n**Mode**\u00a0: a 2 way (possibly an array of multiple attributes).\r\nThis would allow subcomponents to set a record wide or form wide status) AND as well, react to them.\r\nIf this is conceptually considered bad, at least we need to pass a reference to what variable we need to call the setter and listen to the getter.\r\n\r\n**Finally**, it could be very interesting to have a version of this feature that takes a list of fields and loops through them and perform the call for each one. \r\n\r\nFor previous reflexions leading to this model, you can look at https://forum.vuejs.org/t/frontend-framework-structure/3704\r\nOne element in my reflexion is that we can have several contexts for the same template. Thus, we can have a template that includes a field but that is set as non editable or editable, or is not present in the specified context, so leading to an empty display of that field. This context would be provided from a query to the server and would be returned to the client, according to allowed permissions. This context would be added to those already in the meta data list.\r\nThis would allow flexible use of the same template (quick view or full view, or user permissions).\r\n\r\nThe whole system would also allow to simplify templates by not patching multiple exceptions, but by stating what we want in a specific context, in a meta data driven way.\r\n\r\nI think it is a good way towards cleaner templates, incapsulating more code in lower but reusable components despite more complex behaviours. It also addresses somehow the fatness of an application that can inflate its code only once arrived on the client side, leveraging metadata.\r\nIt also opens the door to form based customization, without coding.",
        "title": "Fieldname to Component selection (feature suggestion)",
        "labels": "feature request",
        "id": 123431
    },
    {
        "body": "I am writing a simple todo list component with:\r\n```javascript\r\nVue.component('todo-list', {\r\n    props: ['todos'],\r\n    template:\r\n    `<ol>\r\n        <li v-for=\"(td, ix) in todos\">\r\n            {{td}}\r\n            <button title=\"delete\"  @click=\"todos.splice(ix,1)\">X</button>\r\n            <button title=\"move up\" @click=\"todos.swap(ix,ix-1)\" v-show=\"ix>0\">^</button>\r\n        </li>\r\n    </ol>`,\r\n})\r\n```\r\nFor this to work I need (in core/observer/array.js) something like:\r\n```javascript\r\nArray.prototype.swap = function(x,y) {\r\n  var t = this[x]\r\n  this[x] = this[y]\r\n  this[y] = t\r\n}\r\nconst arrayProto = Array.prototype\r\nexport const arrayMethods = Object.create(arrayProto)\r\n\r\n/**\r\n * Intercept mutating methods and emit events\r\n */\r\n;[\r\n  'push',\r\n  'pop',\r\n  'shift',\r\n  'unshift',\r\n  'splice',\r\n  'swap', // added\r\n  'sort',\r\n  'reverse'\r\n]\r\n```\r\nIt works when I (lazily) fixed dist/vue.js, but did not run the tests.\r\nI think it is worth to add swap this way because notify() is run just once, am I wrong?",
        "title": "add reactive array swap",
        "labels": "feature request",
        "id": 123432
    },
    {
        "body": "As briefly discussed here: https://github.com/vuejs/vue-hackernews-2.0/issues/78#issuecomment-264642351\r\n\r\nAfter a quick check I have found there are at least 3 separate 3rd party libraries attempting to tackle this problem. None of them are particularly complete. The only one that handles server-side rendering is https://github.com/declandewet/vue-meta, and it is still quite buggy. The maintainer has told me that he doesn't have time at the moment to work on it due to working on his real project.\r\n\r\nAdjusting page metadata is something that every serious site needs. It is as important as server-side rendering, and goes hand-in-hand with it.\r\n\r\nThere should probably be an official way to handle it, just like there is an official routing library, which is beautifully integrated into Vue and will always be kept up-to-date.",
        "title": "Official way to modify page metadata/title/etc.",
        "labels": "feature request",
        "id": 123433
    },
    {
        "body": "# Proposed change\r\n\r\nAdd the option to pass the total transition duration in seconds wia a new prop:\r\n\r\n```html\r\n<!-- Both enter and leave explicit total duration -->\r\n<transition name=\"complex-animation\" duration=\"1.5\">\r\n<!-- Specific enter and leave explicit total durations -->\r\n<transition name=\"complex-animation\" duration-enter=\"1.5\" duration-leave=\"2\">\r\n```\r\n\r\n# What does it solves?\r\n\r\nHere is an example transition that demonstrate that the duration automatically detected by Vue can be wrong because of nested css transitions with different durations or delays:\r\n\r\n```scss\r\n/* Modal */\r\n\r\n.modal-enter-active {\r\n  transition: opacity .3s;\r\n\r\n  .modal-dialog {\r\n    transition: opacity .3s .15s, transform .3s .15s;\r\n  }\r\n}\r\n\r\n.modal-leave-active {\r\n  transition: opacity .3s .15s;\r\n\r\n  .modal-dialog {\r\n    transition: opacity .3s, transform .3s;\r\n  }\r\n}\r\n\r\n.modal-enter,\r\n.modal-leave-active {\r\n  opacity: 0;\r\n\r\n  .modal-dialog {\r\n    opacity: 0;\r\n    transform: translateY(-40px);\r\n  }\r\n}\r\n```\r\n\r\nHere the transition should last .45 s, but Vue only detect the first transition duration .3s for the enter part.",
        "title": "Explicit duration for <transition>",
        "labels": "feature request",
        "id": 123434
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\nHello everyone\r\n\r\nI think a pretty useful feature of Vue 1.X was the ability to have transition mode between components with different transitions, especially useful with vue-router. And extremely useful on sites that rely on transitions.\r\n\r\nAs an example of what im saying is this jsfiddle: http://jsfiddle.net/Mendieta/fb215702/\r\n\r\nThat was achieved using \r\n\r\n`<router-view keep-alive transition-mode=\"out-in\"></router-view>`\r\n\r\nWith Vue 2.X , now keep alive is a component and there is no way to achieved the example above. So i figure it would be useful for the keep alive component to have a transition mode directive to use in such cases.\r\n\r\n`<keep-alive transition-mode=\"out-in\"></keep-alive>`\r\n\r\nor maybe a transition shallow/wrapper component. If you do not declare a name for the transition and only the mode it will orchestrate the transitions on the child components.\r\n\r\n`<transition mode=\"out-in\"></transition>`\r\n\r\nI place the feature request here, as i think it is more related to the keep alive component  rather than the vue-router.\r\n\r\nIf i missed something out, please let me now.\r\n\r\n\r\n",
        "title": "Feature Request: keep-alive component transition mode directive",
        "labels": "feature request",
        "id": 123435
    },
    {
        "body": "I'm not sure about how computed property caching works, but it seems the caching is done on the fly during the render() logic cycle? Why not do it before render()? (Sort of like \"precompute\").\r\n\r\nI was thinking, since you collect binding dependencies along the first render() , (anyway to trace this on end-user developer side?) you determine first which properties within the computed property methods has been invalidated and needs to be re-calculated (this is already done by VueJS), BUT, on the next state change but before render() is called, re-execute and pre-cache the invalidated computed properties' final values to determine if anything has changed from before? If no computed property has changed and no other dependency exists, however, render() can be skipped entirely.\r\n\r\nOne might say,  howeve,r with this approach includes the chance of wastefully pre-computing computed properties in situations where it might be not needed in a particular situation, if it exist in a different if/else block within the render() method. But then again, pre-computing outside of if/else blocks are always required as part of the initial scan render() logic (as stated in documentation) if one wishes to ensure those are made as invalidation dependencies regardless of the if/else state situation (short of having a render(firstTime:Boolean) parameter flag where firsttime renders require reflection of all property invalidation dependencies to VueJS). Thus, in any case, there is already precomputation of invalidated properties, so why not do it before render() since their bound to be used anyway?\r\n\r\nAnyway, if you precomputed \"computed\" properties before render() as a further pre-condition to render(), this would allow better integration with \"replace with immutable state atom\" approaches as shown in example below, since replacing the root state atom will not trigger a render() in situations where all pre-computed properties' leaf values remain unchanged and no other dependencies has been invalidated except for those computed properties. Also, behind the scenes, it means that computed properties' leaf values are can always be automatically assumed be cached by default during the render() logic cycle.\r\n\r\nhttp://jsfiddle.net/xu7ba2gu/\r\n",
        "title": "Feature Request: Precompute/pre-cache \"computed\" bindings beforehand to determine if need to render() or not.",
        "labels": "feature request",
        "id": 123436
    },
    {
        "body": "@yyx990803 mentioned in #2000\r\n... might work on a  \"virtual scroll list\" where it only renders items in the viewport in the future\r\n\r\njust wondering if this could be logged as feature request as it would be a really great solution for many use cases.\r\n\r\nthank you all for great work that makes vuejs what it is !!!",
        "title": "virtual scroll list - feature",
        "labels": "feature request",
        "id": 123437
    },
    {
        "body": "A Parent component should have the ability to overwrite a child components style when both components only have `scoped` styles.\r\n\r\nCurrently there is no way to overwrite a child components css style with scoped styling. \r\n\r\nAngular2 has a selecor called `/deep/`, It would be nice to have a similar feature in Vue\r\n```/deep/\r\nComponent styles normally apply only to the HTML in the component's own template.\r\n\r\nWe can use the /deep/ selector to force a style down through the child component tree into all the child component views. The /deep/ selector works to any depth of nested components, and it applies both to the view children and the content children of the component.\r\n\r\nIn this example, we target all <h3> elements, from the host element down through this component to all of its child elements in the DOM:\r\n\r\nCOPY CODE\r\n:host /deep/ h3 {\r\n  font-style: italic;\r\n}\r\nThe /deep/ selector also has the alias >>>. We can use either of the two interchangeably.\r\n\r\nThe /deep/ and >>> selectors should only be used with emulated view encapsulation. This is the default and it is what we use most of the time. See the Controlling View Encapsulation section for more details.\r\n```\r\nhttps://angular.io/docs/ts/latest/guide/component-styles.html#!#sts=%2Fdeep%2F",
        "title": "Overwrite child components CCS with scoped styles (feature)",
        "labels": "feature request",
        "id": 123438
    },
    {
        "body": "I think it would be useful to have a hook like React's [shouldComponentUpdate](https://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate) in the Vue lifecycle. The idea behind this hook would be to dynamically prevent the DOM from refreshing the component with data change.\r\n\r\nFor my use case I am attempting to build a component that uses Contenteditable as a text editor interface which updates on keyup. The DOM refresh in the lifecycle results in the caret / cursor resetting with the refreshed component. Having the option to define when the component should update would allow use of Contenteditable while continuing to update the state (vuex) and keep any of the component {{references}} in the template reactive.\r\n\r\nFrom my understanding of React, the ability to make re-render conditional would also be a big performance booster for components with lots of DOM refreshes like my example above. I'm a big fan of Vue and I think adding this lifecycle hook would open up a lot of doors.",
        "title": "Feature Request: React like hook shouldComponentUpdate for Vue lifecycle",
        "labels": "feature request",
        "id": 123439
    },
    {
        "body": "It would be nice to share `v-on` modifier for functional components to add ability to extend standard `v-on` modifiers. \r\n\r\nIn simple cases we can work around of this by adding additional props to the functional component `e.g. <my-comp @reset=\"process\" modifier=\"hard\"></my-comp>`. \r\n\r\nBut there are cases when it is very difficult to do it the same way. I believe, this feature will help with this. \r\n\r\nAs an example with this feature we can create something like `input-context` component which handles input event when it is in focus:\r\n```vue\r\n<input-context \r\n    :focus=\"isFocused\" \r\n    @click=\"isFocused = true\" \r\n    @key.down=\"scrollDown(1)\" \r\n    @wheel.down=\"scrollDown(3)\">\r\n      ...\r\n</input-context>\r\n```",
        "title": "Feature request: allow to acess to the modifier for v-on when bound to functional component",
        "labels": "feature request",
        "id": 123440
    },
    {
        "body": "### Vue.js version\r\n2.0.7\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/df4Lnuw6/55/\r\n\r\nThe classname generator outputs the string 'undefined' instead of an empty string when a computed key is `undefined`. Of course it's possible to avoid this issue in userland, but it would be nice if it was handled in core.\r\n\r\nThis issue happens mainly in combination with css-modules. The same thing happens in the `classnames` repo: https://github.com/JedWatson/classnames/issues/96. You can check that issue for more details if necessary. \r\n",
        "title": "Undefined computed classname keys",
        "labels": "feature request",
        "id": 123441
    },
    {
        "body": "",
        "title": "keep-alive activated and deactivated hooks should trigger recursively when toggled",
        "labels": "feature request",
        "id": 123442
    },
    {
        "body": "```\r\n<div id=\"app\">\r\n  <demo key=\"key1\"></demo>\r\n</div>\r\n</body>\r\n<script>\r\n    import Vue from 'vue';\r\n    import demo from '../demo.vue';\r\n    new Vue({\r\n        el: '#app',\r\n        components: {\r\n           demo\r\n        }\r\n    })\r\n</script>\r\n```\r\n\r\n//demo components\r\n\r\n```\r\n<template>\r\n     <div>test demo</div>\r\n</template>\r\n<script>\r\n    export default{\r\n        props: {\r\n            key:String\r\n        },\r\n        created(){\r\n            console.log(this.key);  //print undefined\r\n        }\r\n    }\r\n</script>\r\n```",
        "title": "Warn when key, ref or slot are declared in props",
        "labels": "feature request",
        "id": 123443
    },
    {
        "body": "Hello,\r\n\r\nI would like to propose add some some new lifecycle hooks for components including [async ones](https://vuejs.org/v2/guide/components.html#Async-Components).\r\n\r\nNow it too difficult to know when async components are loaded and you need to add some wrappers:\r\n\r\nhttps://github.com/vuejs/vue/blob/dev/test/unit/features/component/component-async.spec.js#L62\r\nhttps://github.com/vuejs/vue/blob/dev/test/unit/features/component/component-async.spec.js#L70\r\n\r\nIt would nice to use built in [lifecycle hooks](https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram) instead:\r\n\r\n```js\r\nimport Vue from 'vue';\r\n\r\nconst vm = new Vue({\r\n    components: {\r\n        component1: resolve => {\r\n            require(['./component1'], resolve);\r\n        },\r\n        component2: resolve => {\r\n            require(['./component2'], resolve);\r\n        },\r\n        component3: resolve => {\r\n            require(['./component3'], resolve);\r\n        }\r\n        // etc\r\n    },\r\n    ready() {\r\n        console.log('All components are loaded', components);\r\n        // For instance, you may use `expect` here for tests\r\n    }\r\n});\r\n\r\nvm.$mount();\r\n```",
        "title": "Add some new lifecycle hooks for components",
        "labels": "feature request",
        "id": 123444
    },
    {
        "body": "It's a common issue when rendering lists to show a message in case the list is empty. In Django, for example, `{% for %}` template tag supports `{% empty %}` for this:\r\n\r\n```django\r\n{% for platform in game.platform_set.all %}       \r\n    <td>{{ platform.system }} -- ${{ platform.price}}</td> \r\n{% empty %}\r\n    <td>No Platforms</td>\r\n{% endfor %}\r\n```\r\n\r\nProbably we could benefit from the similar feature in Vue.\r\n\r\nThere are cases with the list being contained inside an element to be hidden when the list is empty, and it works just fine with Vue if we want to hide the whole container:\r\n\r\n```html\r\n<ul v-if=\"items.length\">\r\n  <li v-for=\"item in items\">\r\n    {{ item.message }}\r\n  </li>\r\n</ul>\r\n<p v-else>Empty list</p>\r\n```\r\n\r\nWhen it's not the case, however, the syntax is getting a little verbose. Emulating the Django example mentioned above:\r\n\r\n```html\r\n<td v-for=\"platform in game.platforms\" v-if=\"game.platforms.length\">\r\n  {{ platform.system }} -- ${{ platform.price }}\r\n</td>\r\n<td v-else>No Platforms</p>\r\n```\r\n\r\nwe could benefit from a simplification, getting rid of expicit `v-if`:\r\n\r\n```html\r\n<td v-for=\"platform in game.platforms\">\r\n  {{ platform.system }} -- ${{ platform.price }}\r\n</td>\r\n<td v-else>No Platforms</p>\r\n```\r\n\r\nUPD: `v-empty` could form a nice name as well, in case we'd like to avoid conflicts with existing `v-else` implementation.",
        "title": "[feature request] v-empty for v-for",
        "labels": "feature request",
        "id": 123445
    },
    {
        "body": "freeMarker\u6a21\u677f\u5f15\u64ce\u652f\u6301\u7684nested\u529f\u80fd\u975e\u5e38\u5f3a\u5927\u597d\u7528\uff0c\u5e0c\u671bvuejs\u63d0\u4f9b\u7c7b\u4f3c\u7684\u529f\u80fd\uff1b\r\n\u4f8b\u5982list\u7ec4\u4ef6render item\u65f6\uff0c\u7528\u6237\u53ef\u80fd\u5bf9\u5c55\u793a\u65b9\u5f0f\u7684\u8981\u6c42\u5404\u4e0d\u76f8\u540c\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f\u7ec4\u4ef6\u80fd\u8ba9\u4f7f\u7528\u8005\u81ea\u5df1\u6307\u5b9aitem template\uff0c\u5e0c\u671b\u63d0\u4f9b\u5982\u4e0b\u7c7b\u4f3c\u5b9e\u73b0\uff1a\r\nin child:\r\n\r\n``` html\r\n<template>\r\n    <div v-for=\"item in list\">\r\n         <callback name=\"listItemCallback\" context=\"item\"/>\r\n   </div>\r\n</template>\r\n```\r\n\r\nin parent:\r\n\r\n``` html\r\n<template>\r\n    <child :list=\"list\">\r\n         <callbackTemplate name=\"listItemCallback\" context=\"item\">\r\n                 <img :src=\"item.url\"/>< span>{{item.title}}< /span>  //\u6b64\u5904\u4e0d\u8981\u6709\u5355\u6839\u9650\u5236\r\n         </callbackTemplate>\r\n   </child>\r\n<template>\r\n```\r\n\u5982\u679c\u4e0d\u80fd\u652f\u6301\uff0c\u662f\u5426\u6709\u5176\u4ed6\u7684\u65b9\u6cd5\u5b9e\u73b0\u76f8\u540c\u7684\u9700\u6c42",
        "title": "feature request:\u63d0\u4f9bfreeMarker\u6a21\u677fnested\u8bed\u6cd5\u7c7b\u4f3c\u7684\u529f\u80fd",
        "labels": "feature request",
        "id": 123446
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n1.0.26\r\n\r\n### What is Expected?\r\nThe checkboxes binded with Vuejs can have THREE states: true, false, or indeterminate. For example, when binded with a checkbox and the value is \"indeterminate\", the checkbox's indeterminate property is set to true.\r\n\r\n### What is actually happening?\r\nThe checkboxes that binded with Vuejs only got two states: true or false.\r\n",
        "title": "Can Vue add support for checkbox's indeterminate state?",
        "labels": "feature request",
        "id": 123447
    },
    {
        "body": "<!--\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\nHave you tried [vue-async-computed](https://github.com/foxbenjaminfox/vue-async-computed) ? It is incredibly awesome, because it allows *asynchronous computed properties.* Among other things, this makes it incredibly easy to source your Vue data from AJAX calls. I will try to convince you that this feature is SO good, that it is worthy of including in Vue's core instead of being relegated to this lowly plugin.\r\n\r\n## Code sample\r\nHere's an example application that uses two properties to seamlessly interact with the server. Actions are \"dispatched\" by setting properties. (I clump mine in a object called \"active\".) This flags them as dirty, causing Vue to automatically re-compute any async properties that depend on that property.\r\n\r\nHere, `$vm.active.lang` is a read-write property containing the current language. The `$vm.i18n` property contains all the i18n strings. Changing `$vm.active.lang` causes Vue to pull the appropriate language file from the server and update the text on the page. Is that simple or what?\r\n\r\n```vue\r\n<template>\r\n  <p>{{i18n.hello}}, {{CurrentUser.name}}!</p>\r\n</template>\r\n\r\n<script>\r\nconst Ajax = (url, opts) => window.fetch(url, opts).then((response) => response.json())\r\n\r\nlet App = new Vue({\r\n  el: '#app',\r\n  data () {\r\n    return {\r\n      active: {\r\n        lang: 'en'\r\n      }\r\n    }\r\n  },\r\n  asyncComputed: {\r\n    i18n () {\r\n      return Ajax('/lang/' + this.active.lang)\r\n    },\r\n    CurrentUser () {\r\n      return Ajax('/logged_in_user.json', {credentials: 'include'})\r\n    }\r\n  }\r\n})\r\n</script>\r\n```\r\n\r\nI also left in some code that fetches the current user from the server so we can greet the user by name.\r\n\r\n## How will it make current work-arounds straightforward?\r\nRight now, it requires conceiving the idea of \"async properties\", searching the web to see if someone has done it, and then using this plugin. But I really think it is *extremely elegant* and intuitive, and having it baked into Vue's core and documented in the Vue guide would encourage more people to think, \"Oh, this is a really great way to get data from my server into Vue\" and would simplify a lot of people's spaghetti code, which would make the world a better place.\r\n\r\n## What potential bugs and edge cases does it help to avoid? \r\nMany beginners (and even experts) still have not fully committed to using a Flux-architecture framework, or are dealing with horrendous legacy applications and \"vueifying\" pieces of it as we go. But it is well established that this unidirectional data flow from server to client is a great idea and simplifies state management and reduces spaghetti code. Adding native support for asynchronous properties would enable and promotes a *very simple*, declarative unidirectional server-to-client data flow that has the advantage of being easily injected into existing legacy code without having to learn a new framework.\r\n\r\nI'm sure there are other uses for asynchronous computed properties too (dispatching a long-running task to a WebWorker comes to mind) but I've only used it for AJAX so that's the example I've used.",
        "title": "asyncComputed",
        "labels": "feature request",
        "id": 123448
    },
    {
        "body": "Currently, properties that start with `_` or `$` are not proxied on the Vue instance because they may conflict with Vue\u2019s internal. The same doesn't apply for _methods_, leading to problematic cases like [this one](https://jsfiddle.net/phanan/ruvft5cy/1/), where users may (accidentally) define methods which override Vue's internal API. \n\nSuggestion: Though this arguably belongs in userland, it might be helpful of Vue to introduce a console warning (`Warn: You're overriding Vue's internal method $emit. Be aware of misbehaviors.`) for such cases.\n",
        "title": "[Suggestion] Warn if user overrides Vue's internal methods",
        "labels": "feature request",
        "id": 123449
    },
    {
        "body": "### Vue.js version\n\n2.0.3\n### Reproduction Link\n\nhttps://jsfiddle.net/WhiteCusp/gmve9d3p/35/\n### Steps to reproduce\n### What is Expected?\n\nthis.$refs.a should be a dom node list\n### What is actually happening?\n\nthis.$refs.a is a single dom\n",
        "title": "same ref name in multiple item do not create array in this.$refs when in render function",
        "labels": "feature request",
        "id": 123450
    },
    {
        "body": "Would a React context-like feature ever be added?\n\nContext is an implicit way to pass down data from a component without having to pass them through props on every level.\n\nhttps://facebook.github.io/react/docs/context.html\n\nIt's generally not a good idea to use context for application-specific logic, but it's very useful for objects like stores.\n\nCurrently working on a helper mixin that achieves something similar, but would prefer to see this baked in the core.\n",
        "title": "React context-like feature",
        "labels": "feature request",
        "id": 123451
    },
    {
        "body": "Is there any method to restrain the data responsive for a while?\n\nI mean, since v-once directive seems to restrain the data responsive like for ever, should it be data-bound to indicate when to restrain the data responsive and when not to. The DOM won't re-render while the data is true, and while the data is false, the DOM will be still data responsive.\n\nI'm making a search result page. I want to hold the search result static while the user is entering a new search term and the page's fetching search result to fulfill autocomplete.\n\nAfter the user hit the return key or click the search button, the search result will be refreshed.\n\npseudo-code\n\n``` html\n<template>\n  <div>\n    <input @keyup.enter=\"doSearch\" @keyup=\"preSearch\" v-model=\"searchTerm\">\n    <search-auto-complete-list :result=\"searchResult\"></search-auto-complete-list>\n    <search-result v-once=\"!enterHit\" :result=\"searchResult\"></search-result>\n  </div>\n</template>\n\n<script>\n  // ... import ...\n\n  export default {\n    data () {\n      return {\n        enterHit: false\n      }\n    },\n    vuex: {\n      getters: {\n        _searchTerm: state => state.searchTerm,\n        searchResult: state => state.searchResult\n      },\n      actions: {\n        setSearchTerm,\n        search\n      }\n    },\n    computed: {\n      searchTerm: {\n        get () {\n          return this._searchTerm\n        },\n        set (term) {\n          this.setSearchTerm(term)\n        }\n      }\n    },\n    methods: {\n      preSearch (term) {\n        this.searchTerm = term\n        // ... debounce search implementation ...\n      },\n      doSearch (term) {\n        if (term !== this.searchTerm) {\n          this.searchTerm = term\n          // ... stop debounce search ...\n          // and do it immediately\n          search(term).then(() => {\n            this.enterHit = true\n          })\n        } else {\n          this.enterHit = true\n        }\n      }\n    }\n    // ... other options ...\n  }\n<script>\n```\n",
        "title": "[feature request] v-once data-bound",
        "labels": "feature request",
        "id": 123452
    },
    {
        "body": "This topic was discussed a long time ago in #1297, but I want to return to it, because I think many developers will benefit of this feature.\n\nWe all try to make apps as modular as possible. Moreover, component approach forces us to make many simple, mostly stateless, components. All these components are set in tree-like hierarchy, that often leads to situation, when some set of components is used in only one branch of this tree. In this case registering components globally is a bad thing, obviously \u2014 we should register them globally only if they are truly global, if they are used all over the app. On the other hand registering them locally will lead to code overbloat and repeatings, that rises possibility of errors and makes app support harder.\n\nI'll show a real example, an app I am currently working on (but there are many other cases). structure is cutted just to illustrate the case\n\n```\napp\n|-blog\n|-projects-registry\n|-presentation-builder\n|-|-menu\n|-|-previews\n|-|-|-slides-templates\n|-|-editor\n|-|-|-slides-templates\n```\n\nSo in an app there is a `presentation-builder` that can be considered a a sort of sub-application (it's a thing like keynote or powerpoint). It consists of various components, but the key here are `slides-templates`, that are used only in builder, but in various sub-components (in `previews`, `editor` and more). There are lots (tens) o templates, but they are never used outside the builder.\n\nObviously, it is not good to register them globally. It's also obviously that repeated local registration of 10\u201420\u201430 components in many places is horrible. \n\nYes, probably I could collect these components in a single file, that will export an object with them and require this file in several places. With es6 object destruction this can work not bad. In fact, that's the way I am forced to do it now:\n\n``` js\n// components/slides/index.js\nexport default {\n    'slide-idea': require('./slide-idea.vue'),\n    //....\n}\n```\n\n``` html\n// editor.vue\n...\n<script>\n  export default {\n    components: {\n      ...require('../../components/slides').default\n    },\n   //...\n</script>\n```\n\nBut I really don't think that it is a proper solution, it's more like a hack and this will not work in more granular cases.\n\nI also don't think that local components inheritance will break dependency tree's lucidity, especially with vue inspector that could tip you where this component came from.\n\nMaybe this type of components should b registered in other property, not in `components`, but in something like `globalComponents` or `sharedComponents`, this is a thing to think of, but I suggest that this feature will make life easier in many scenarios.\n",
        "title": "Local components inheritance",
        "labels": "feature request",
        "id": 123453
    },
    {
        "body": "I'd like to be able to write templates and `.vue` files for functional components the same way as standard components.\n\nI made a proof-of-concept in [this fiddle](https://jsfiddle.net/Akryum/roLarvdf/), but it's quite hacky. Maybe the template compiler could have a `functional` option to make the resulting functions more adapted to the `context` object and not `this`.\n\nIt would look like this:\n\n```\nVue.component('test', {\n  functional: true',\n  props: ['msg'],\n  template: `<div>\n    <h1>{{props.msg}}</h1>\n    <h2>Static content</h2>\n    <span v-for=\"n in 10\">{{n}} </span>\n    <button @click=\"console.log('click', props.msg)\"><slot></slot></button>\n  </div>`,\n});\n```\n\nOr:\n\n```\n<template>\n  <div class=\"test\">\n    <h1>{{props.msg}}</h1>\n    <h2>Static content</h2>\n    <span v-for=\"n in 10\">{{n}} </span>\n    <button @click=\"console.log('click', props.msg)\"><slot></slot></button>\n  </div>\n</template>\n\n<script>\nexport default {\n  functional: true,\n  props: ['msg'],\n}\n</script>\n\n<style scoped>\n.test {\n  margin: 12;\n}\n</style>\n```\n",
        "title": "[2.0] Templates for functional components",
        "labels": "feature request",
        "id": 123454
    },
    {
        "body": "The standalone demo repo https://github.com/rightaway/demo shows the issue. If you click the **message1** button once and then click it again, the second **message1** notification appears and then the first one disappears. This is what `mode=out-in` is meant to solve for the `transition` tag, but there's no equivalent for `transition-group`. It leads to a very unattractive transition effect.\n\nIn this example I could use `transition mode=\"out-in\"` instead of `transition-group` (in https://github.com/rightaway/demo/blob/master/src/Notify.vue#L3) except for the fact that if you click the **message1** button and then the **message2** button, Vue gives an error saying I need to use `transition-group`.\n",
        "title": "Allow mode for transition-group",
        "labels": "feature request",
        "id": 123455
    },
    {
        "body": "like this:\n\n``` html\n<keep-alive :max-stack='10'>\n    ....\n</keep-alive>\n```\n\nvue will only cache 10 switched-out components \n",
        "title": "[feature request] Add 'max-stack' in component 'keep-alive'",
        "labels": "feature request",
        "id": 123456
    },
    {
        "body": "If there were a function in Vue core to reset a component's state (like `this.$reset()`), then it will simplify a common pattern and lead to clearer code.\n\nThis code\n\n```\nfunction getInitialData() {\n    return {\n        a: 1,\n        b: 2,\n    }\n}\n\nexport default {\n    data: getInitialData,\n    methods: {\n       reset() {\n         this.$data = getInitialData()\n       },\n       submit() {\n         // do stuff\n         this.reset()\n       }\n    }\n};\n```\n\nWould become\n\n```\nexport default {\n    data() {\n      return {\n        a: 1,\n        b: 2,\n      }\n    }\n    methods: {\n       submit() {\n         // do stuff\n         this.$reset()\n       }\n    }\n};\n```\n",
        "title": "Add a function to reset a component's state",
        "labels": "feature request",
        "id": 123457
    },
    {
        "body": "Now that refs are no longer reactive, we need to emit events and payloads from child components.\nThis is fine and works well, but it becomes hard to maintain in the following scenario:\n\nWhen you create a custom form input component, that basically wraps an input into it's own re-usable component, we can no longer access the input's value (and other props) reactively in e.g. a computed prop in the parent.\n\nTake the following use-case:\n\n```\n<my-input ref=\"email\"></my-input>\n<my-input ref=\"password\"></my-input>\n<p>This is {{ isValid ? 'valid' : 'invalid' }}</p>\n```\n\nPreviously we could create a computed prop like this:\n\n```\nisValid() {\n  return this.$refs.email.isValid && this.$refs.password.isValid\n}\n```\n\nSince refs don't work reactively anymore, we now need to use `$emit` to inform the parent of changes.\nHowever, these emits are handled by methods, so we need a separate handler per input to deal with the events.\n\nSomething like:\n\n```\n<my-input @valid=\"handleValidEmail\"></my-input>\n<my-input @valid=\"handleValidPassword\"></my-input>\n\nhandleValidEmail(value) {\n  this.email = value\n  this.emailIsValid = true\n},\n\nhandleValidPassword(value) {\n  this.password = value\n  this.passwordIsValid = false\n}\n```\n\nYou could refactor this a bit, but it's not a nice way of dealing with this and I'm assuming using forms is quite a common occurence for a lot of devs.\n\nCan we think about a better solution to something like this?\n",
        "title": "$refs should be reactive to be able to use them in computed properties",
        "labels": "feature request",
        "id": 123458
    },
    {
        "body": "If I have a component like\n\n```\nVue.component(\"cell\", {\n  template: \"<cell></cell>\"\n})\n```\n\nIt obviously causes an stack overflow, but it would be a nice to have in terms of having nice output HTML and not having to have a different component name like \"my-cell\" or \"cell-component\".\n\nI wondered if it would make sense if Vue could ignore root elements of the same name in terms of recursing ? \n\nJ\n",
        "title": "allow template to have root element the same as the name",
        "labels": "feature request",
        "id": 123459
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0-rc.7\n### Reproduction Link\n\nhttp://codepen.io/codysherman/pen/qaArqJ?editors=1010\n### Steps to reproduce\n\nHave an element already have an !important display trait, such as one of Bootstrap's 'visible-*' classes.\n### What is Expected?\n\nVue should hide the element based on the v-show.\n### What is actually happening?\n\nBecause v-show doesn't have an !important tag, it is overruled. In my opinion, in the event of a conflict, the tie should obviously go to Vue, as it is getting its logic dynamically. Angular's ng-show applies the !important tag for this reason.\n",
        "title": "v-show should be !important",
        "labels": "feature request",
        "id": 123460
    },
    {
        "body": "We have `.lazy`, `.number`, `.trim` and `.undef` is on the way.\n\nApart from `.lazy` they all work like two-way filters.\n\nSince 2.0 does not support 2 way filters, may be there should be a new api to add custom v-model modifiers to fulfill the same need.\n",
        "title": "Add custom v-model modifiers",
        "labels": "feature request",
        "id": 123461
    },
    {
        "body": "I have a feature request  - In order to fully replace templating engine server should be able to output raw unescaped contents for some tags like &lt;script&gt;. Currently all the transcluded content or the content provided by v-text/v-html is automatically escaped and the script becomes unusable. \n\nExample of usage - output json-ld: \n\n```\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Person\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Graduate research assistant\",\n  \"affiliation\": \"University of Dreams\",\n  \"additionalName\": \"Johnny\",\n  \"url\": \"http://www.example.com\",\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"1234 Peach Drive\",\n    \"addressLocality\": \"Wonderland\",\n    \"addressRegion\": \"Georgia\"\n  }\n}\n</script>\n```\n",
        "title": "Allow SSR to render unescaped inlined script tags.",
        "labels": "feature request",
        "id": 123462
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.23\n### Reproduction Link\n\n``` html\n<div id=\"currencies\">\n    <br />{{currencies[0] | currency}}\n    <br />{{currencies[1] | currency}}\n    <br />{{currencies[2] | currency}}\n    <br />{{currencies[0] | currency '&#8377;' 0}}\n    <br />{{currencies[1] | currency '&#8377;' 0}}\n    <br />{{currencies[2] | currency '&#8377;' 0}}\n    <br />{{currencies[0] | currency '&#8364;'}}\n    <br />{{currencies[1] | currency '&#8364;'}}\n    <br />{{currencies[2] | currency '&#8364;'}}\n    <br />{{currencies[0] | currency '&#8364;'}}\n    <br />{{currencies[1] | currency '&#8364;'}}\n    <br />{{currencies[2] | currency '&#8364;'}}\n</div>\n<script type=\"text/javascript\">\nvar app = new Vue({\n    el: '#currencies',\n    data: { currencies: [10, 1000, 10000000] }\n});\n</script>\n```\n### Steps to reproduce\n### What is Expected?\n\nIndian numbering (as well as several other Asian countries) don't use the same number separations as western countries.  They place the first comma after three digits, and the rest every two digits, so large numbers like currencies become:\n\n`\u20b91,00,000`\n\nInstead of:\n\n`\u20b9100,000`\n\nFurther, many (but not all) European countries have a \"decimal comma\" and use a dot to separate thousands groups, so the equivalent large amount would become:\n\n`\u20ac100.000,00`\n\nI'm aware (from reading previous discussions on the `| currency` directive) that inferring settings from the currency marker is not desired, but there should be a way to specify the following outputs:\n\n```\n$10.00\n$1,000.00\n$10,000,000.00\n\u20b910\n\u20b91,000\n\u20b91,00,00,000\n\u20ac10.00\n\u20ac1,000.00\n\u20ac10,000,000.00\n\u20ac10,00\n\u20ac1.000,00\n\u20ac10.000.000,00\n```\n\nNote the two different euro variants.\n### What is actually happening?\n\nCurrently, all the outputs are:\n\n```\n$10.00\n$1,000.00\n$10,000,000.00\n\u20b910\n\u20b91,000\n\u20b910,000,000\n\u20ac10.00\n\u20ac1,000.00\n\u20ac10,000,000.00\n\u20ac10.00\n\u20ac1,000.00\n\u20ac10,000,000.00\n```\n",
        "title": "Currency directive separators (European and Indian).",
        "labels": "feature request",
        "id": 123463
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttps://jsfiddle.net/59Lh3310/\n### Steps to reproduce\n- Click on the input\n- Click somewhere else\n### What is Expected?\n\nEmpty input\n### What is actually happening?\n\nThe value is set to 0 (even if the default value is set to null) because of Param Attributes Number (http://vuejs.org/guide/forms.html#number)\n",
        "title": "Param attribute \"number\" set 0 as default",
        "labels": "feature request",
        "id": 123464
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.23\n### Reproduction Link\n\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\n### Steps to reproduce\n### What is Expected?\n\nWe can use `twoWay: true` to validate the `prop` has set `sync`, but we can't validate `once` binding.\n### What is actually happening?\n",
        "title": "Need a validate for :prop.once bind",
        "labels": "feature request",
        "id": 123465
    },
    {
        "body": "The straightforward reason for this request is that there's currently no way to create an optional numeric field using v-model since empty inputs are reset to zero.\n\nThe fuzzier reason is that in many if not most models an empty input signifies the absence of its value, hence the error message \"Please enter a username\" instead of \"Please enter a username that isn't empty,\" and the fact that, in contrast to data validation tools like JSON schema, HTML5 doesn't allow `required` fields to be empty.\n\nI have no idea what this modifier should be called, though.\n",
        "title": "Add a v-model modifier to treat empty input values as null",
        "labels": "feature request",
        "id": 123466
    },
    {
        "body": "In the watchers example for 2.0  \n\n``` javascript\n<script src=\"https://npmcdn.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://npmcdn.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('http://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      // This is the number of milliseconds we wait for the\n      // user to stop typing.\n      500\n    )\n  }\n})\n</script>\n```\n\nWe keep having to do hackey workarounds to keep the \"this\" context, by doing `var vm = this;`  \nIn angular, they got around this by passing a variable $scope, so you didn't have to wory about \"this\" scope, you would just use $scope. It would be nice if we could do the same for vue, either through a passed variable similar to how $scope worked, or if possible, something like this:  \n\n``` javascript\n<script src=\"https://npmcdn.com/axios@0.12.0/dist/axios.min.js\"></script>\n<script src=\"https://npmcdn.com/lodash@4.13.1/lodash.min.js\"></script>\n<script>\nvar vm = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question: function (newQuestion) {\n      vm.answer = 'Waiting for you to stop typing...'\n      vm.getAnswer()\n    }\n  },\n  methods: {\n    getAnswer: _.debounce(\n      function () {\n        if (vm.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('http://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      // This is the number of milliseconds we wait for the\n      // user to stop typing.\n      500\n    )\n  }\n})\n</script>\n```\n\nLet me know your thoughts. Thanks.\n",
        "title": "context of \"this\" within nestings.",
        "labels": "feature request",
        "id": 123467
    },
    {
        "body": "Vue.components allow promise (resolve, reject), but they don't allow returnable promises. I want to be able to return a promise for async components.  \nI want to do this:  \n\n``` javascript\nVue.component('async-component', function () {\n  return new Promise(function (resolve, reject) {\n    //step 1\n  }).then(function () {\n    //step 2\n  }).then(function () {\n    return { \n      template: '<p>hi</p>' \n    }\n  })\n\n})\n\nnew Vue({ \n    el: '#demo' \n})\n```\n\nrather than this:  \n\n``` javascript\nVue.component('async-component', function (resolve, reject) {\n  new Promise(function (resolve, reject) {\n    //step 1\n  }).then(function () {\n    //step 2\n  }).then(function () {\n    resolve({ \n      template: '<p>hi</p>' \n    })\n  }).catch(function (error) {\n    reject(error)\n  })\n\n})\n\nnew Vue({ \n    el: '#demo' \n})\n```\n",
        "title": "Returnable async promises",
        "labels": "feature request",
        "id": 123468
    },
    {
        "body": "Request from @dmx374 (who couldn't open an issue himself, appearantly for technical reasons)\n\nAlso, it would be really great to add an $update method to arrays, so we can update existing properties or add new ones (and make them reactive).\n\nI've made a quick and dirty patch working for my needs :\n\n```\n/**\n * update an element at the given index with new keys,\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} keys\n * @return {*} - replaced element\n */\ndef(arrayProto, '$update', function $update(index, keys) {\n    if (index >= this.length) {\n        this.length = Number(index) + 1;\n    }\n    var val = [],\n        source = this[index];\n\n    for (var i in source) {\n        val[i] = source[i];\n    }\n    for (var i in keys) {\n        val[i] = keys[i];\n    }\n    return this.splice(index, 1, val)[0];\n});\n```\n",
        "title": "Add $update method to arrays",
        "labels": "feature request",
        "id": 123469
    },
    {
        "body": "When using `<component :is>` syntax, the fragment instance warning message `Attribute 'something' is ignored on component '<component>' because the component is a fragment instance` is confusing if I have multiple dynamic components in my app. I don't know which component it is coming from.\nMaybe the compileRoot method can check whether the tagName is 'component' and if so, use `options.name` in the error message instead of `options.el.tagName`. I will submit a PR for this if you guys think this is a valid issue/solution\n\nThanks!\n",
        "title": "Feature Request: Better warning message when a dynamic component is a fragment instance ",
        "labels": "feature request",
        "id": 123470
    },
    {
        "body": "Given the following:\n\n``` html\n<button :value.sync=\"missing\">click</button>\n```\n\nresults in the following error in the Chrome console:\n\n`Uncaught TypeError: Cannot read property 'length' of undefined`\n\nThere is no mention:\n- that a bound property is missing\n- that its name is 'missing'\n- that it's on an element `<button>`\n- that it come from file `foo.vue`\n\nAn improvement would be to say:\n\n`Error: bound object 'missing' on element``<button>``can't be found` in file `foo.vue`\n",
        "title": "Better error message for undefined bound property",
        "labels": "feature request",
        "id": 123471
    },
    {
        "body": "Something I've always wanted working with Vue components was an ability to pass some child/component data to a `<slot>` (while still compiling in parent scope), like the way `v-for` works. I've seen a few issues others have had with this use case, with some weird workarounds (see below).\n- http://forum.vuejs.org/topic/366/slot-as-an-item-row-template\n- http://forum.vuejs.org/topic/526/repeating-table-row-with-slot\n- https://forum.vuejs.org/topic/3456/slots-but-with-data-binding/2\n\nLooking through the source code it seems like this is definitely achievable with a small modification to the slot elementDirective by some sort of scope param, to be merged with the parent somewhere around [here](https://github.com/vuejs/vue/blob/dev/src/directives/element/slot.js#L41).\n\nAs an example, here's a jsfiddle with a (hacked-in) `<scoped-slot>` elementDirective which is used to build a sortable table component with a custom column template.\n\nhttps://jsfiddle.net/joshglendenning/7r86jmu3/3/\n\nIt would be fairly straightforward to integrate this sort of `:scope=\"...\"` behavior in the native <slot>, but I wanted to greenlight it on here before doing a pull request.\n",
        "title": "[feature-request] Add scope prop to <slot>",
        "labels": "feature request",
        "id": 123472
    },
    {
        "body": "It would be nice if, when evaluating `:track-by` in `v-for=\"item in items\"`, we can have access to the `item` object in order to inspect it and return an appropriate track field.\nThis would be useful when iterating over a collection that contains two or more different types of objects, with each type having a different id field.\n### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttps://jsfiddle.net/yMv7y/1615/ - A contrived example but hopefully simple enough to demonstrate what I mean.\n",
        "title": ":track-by with function",
        "labels": "feature request",
        "id": 123473
    },
    {
        "body": "There are many times when it's using to do something like `:item=\"item\"`. Would it be useful and feasible to have `:item` be a shorthand for that?\n",
        "title": ":item as shorthand for :item=\"item\"",
        "labels": "feature request",
        "id": 123474
    },
    {
        "body": "I have been searching all over the web (I think, but hopefully not) for an answer. I have set up a UI framework, that uses some custom HTML tags for CSS only, so they don't have any Vue attached. I would like Vue to ignore those, so I don't have to skip all those lines of warnings in my debug console.\n\nIs this possible or do I have to create an empty component for each one?\n",
        "title": "Ignore some custom HTML components",
        "labels": "feature request",
        "id": 123475
    },
    {
        "body": "First of all, I'd like to thank everyone who has contributed to this absolutely wonderful library.\n\nI was reading the docs on [key modifiers](https://vuejs.org/guide/events.html#Key-Modifiers) (for example, `@keyup.enter`) and was wondering if it would be worth having the same kind of thing for mouse buttons. This would make handling much simpler since the same events that are available for the left button by default would be for the other ones as well without the need for repetitive checking in the JS code.\n\nFor instance:\n\n```\n<button @click.left=\"hello\" @click.right=\"bye\">Say hello or bye</button>\n<div @mousedown.middle=\"drag\">I'm draggable!</div>\n```\n\nThe only possible \"downside\", I guess, is that `@click.right` would become a synonym for `@contextmenu`, but it doesn't sound that bad.\n\nIs this viable?\n\nThanks in advance!\n",
        "title": "[Feature] Mouse event listener modifiers",
        "labels": "feature request",
        "id": 123476
    },
    {
        "body": "sometimes, we want to control two-way binding of v-model with bind the value (`false` or `true`) to a dynamic property on the Vue instance.\nrelated issue: https://github.com/vuejs/vue-validator/issues/149\n### use-cases\n\nform field validation\n### case1: vue-validator\n\n``` html\n<validator name=\"validation1\">\n  <input type=\"text\" :sync=\"$validation1.username.valid\" v-model=\"user.name\" v-validate:username=\"{ minlength: { rule: 32 } }\">\n</validator>\n```\n### case2: user custom validation\n\n``` html\n<input type=\"text\" :sync=\"valid\" v-model=\"user.name\" @input=\"onInputValidator\">\n```\n\n``` js\nnew Vue({\n  ...\n  data: {\n    user: {\n      name: ''\n    },\n    valid: false\n  },\n  methods: {\n    onInputValidator: function (e) {\n      this.valid = e.target.value.length > 32\n    }\n  }\n})\n```\n### spec\n- if `sync` attribute value is `true`, two-way binding of v-model become enable. data **is updated** when occured user input events,\n- if `sync` attribute value is `false`, two-way binding of v-model become disable. data **is not updated** when occured user input events,\n",
        "title": "feature request: control the two-way binding for v-model",
        "labels": "feature request",
        "id": 123477
    },
    {
        "body": "This pattern is quite common. The intent of the shorthand seems clear to me, and it currently has no effect I'm aware of.\n",
        "title": "Feature request: `<div v-bind:content>` as a shorthand for `<div v-bind:content=\"content\">`",
        "labels": "feature request",
        "id": 123478
    },
    {
        "body": "As I remember, angular's `ng-model` will trim it's value by default.\nI've tested that using vue's `v-model`, the binding value will leave trailing spaces.\n\nHow about adding a `trim` **param attribute** to `v-model` ?\nSo the tailing spaces will be trimmed automatically.\n\nscenario: \nin register form, to deal with the 'tailing space' issue,\nI have to either replace every `this.email` into `this.email.trim()`\nor make an computed `email` property to do the trim\n",
        "title": "[feature request] v-model add 'trim' param attribute",
        "labels": "feature request",
        "id": 123479
    },
    {
        "body": "### Vue.js version\n\n1.0.20\n### Reproduction Link\n\nhttps://jsfiddle.net/ardoramor/hyk86ca3/\n### Steps to reproduce\n\nRun fiddle, examine console.\n### What is Expected?\n\nEntries will be tracked by the specified path, just like in filters (e.g., `orderBy`)\n### What is actually happening?\n\nVueJs prints out a warning and fails to get the unique value specified by path\n### Required change\n\nThere are three lines that would need to change from `value[trackByKey]` to `getPath(value, trackByKey)` in functions `cacheFrag`, `getCachedFrag`, and `deleteCachedFrag`. I can make a PR but maybe such a small change doesn't require it?\n\nAlso, is it possible to add expression evaluation for `track-by`? This way, a combination of fields can yield a unique identifier (e.g., `track-by=\"employee.company + employee.id\"`, in case `id` can be reused by companies). I have a different application but this should make sense as well.\n",
        "title": "[enhancement] track-by to allow using path instead of key",
        "labels": "feature request",
        "id": 123480
    },
    {
        "body": "### Feature request\n\nWhen there are long object paths to set, `vm.$set()` comes handy: `vm.$set('a.b.c', val)`. But this works only if you are setting path on `vm`, not outside of it. If your app is state-managed via Vuex or similar library, these kind of tasks introduce verbosity:\n\n```\nif (!state.a.hasOwnProperty(b)) {\n  Vue.set(state.a, b, {})\n}\n\nVue.set(state.a[b], 'c', val)\n```\n\nUnfortunately, `Vue.set()` does not accept keypath as a second argument, it accepts single key.\nYou may think, that I could initiate whole object structure, but it isn't always possible and/or not best choice. Sometimes we add dynamic sub-objects into object and setting path easy like following would be useful:\n\n```\nVue.setPath(state.a, 'b.c', val)\n```\n\nIf you think this shouldn't be in Vue core, maybe it could go into Vuex core as helper?\nOr, any good workaround for this? \nThanks\n",
        "title": "Ability to set object paths outside vm",
        "labels": "feature request",
        "id": 123481
    },
    {
        "body": "### Feature Request\n\nIt would be nice to be able to use a variable to specify a filter. For example, a table component could have a column definition passed as a prop:\n\n```\ncolumns: [\n    {\n        key: 'cost',\n        label: 'Cost',\n        filter: 'currency',\n    }\n]\n```\n\nAnd the implementation of the column could use the filter from the prop:\n\n```\n<td v-for=\"column in columns\">\n    <span>{{ row[column.key] | column.filter }}</span>\n</td>\n```\n\nAs of now, I'm using a filter-loading filter as a workaround (obviously far from ideal):\n\n```\nVue.filter('getFilter', (value, filter) => {\n    if (filter !== undefined) {\n        filter = Vue.filter(filter)\n        return filter.read !== undefined ? filter.read(value) : filter(value)\n    }\n    return value\n})\n```\n\n```\n<td v-for=\"column in columns\">\n    <span>{{ row[column.key] | getFilter column.filter }}</span>\n</td>\n```\n",
        "title": "Specify Filter with Variable",
        "labels": "feature request",
        "id": 123482
    },
    {
        "body": "Now we have to use \n\n``` javascript\n:is-boolean=false  \n:min=10\n```\n\n instead of \n\n``` javascript\nis-boolean=false\nmin=10\n```\n\nIf we want to set the props as written above, we have to add a coerce function:\n\n``` javascript\n{\n  type: Number,\n  coerce: function (val) {\n    return val * 1\n  }\n}\n```\n\nBut I think the value should be automatically converted to a number when the type is `Number`.\nIf I have may number-props, then I have to add the coerce option many times.\n",
        "title": "Automatically converting the value to a number when the prop's type is Number?",
        "labels": "feature request",
        "id": 123483
    },
    {
        "body": "just like this\n`:class=\"{'a b c': flag, d: flag2}\"`\nas well as this\n`:class=\"[flag?'a b c':'']\"`\n",
        "title": "[feature request] :class object support multiple class names as key",
        "labels": "feature request",
        "id": 123484
    },
    {
        "body": "Just formalizing [these](https://github.com/vuejs/vue/issues/2428#issuecomment-193020645) comments as a feature request.\n\nThere seem to be some common pitfalls with two-way data binding, and you've expressed a desire to deprecate it. Currently though, there is at least one good use case for `.sync`, which revolves around higher level input components. eg:\n- split value inputs (date/time, feet/inches)\n- wrappers around existing input libraries (select2)\n- [vue-select](https://github.com/sagalbot/vue-select)\n- [vue-datepicker](https://github.com/hilongjw/vue-datepicker)\n\nAdding a component strategy for v-model would reduce the need for the `.sync` modifier while providing a nicer API for input-like components.\n\n**Proposal:**\nUse `model` as a component option that behaves similarly to a single value `props`. \n- signals that the component is compatible with v-model\n- the bound value is stored in the property specified by model.\n\n**Example component:**\n\n``` html\n<!-- height.html -->\n<input type=\"number\" min=\"0\" v-model=\"feet\" number />\n<input type=\"number\" min=\"0\" max=\"11\" v-model=\"inches\" number/>\n```\n\n``` js\n// height-input.js\nimport template from './height.html';\n\nexport default {\n  name: 'height-input',\n  model: 'value',\n  template: template,\n\n  data: function() {\n    return {\n      feet: this.value ? Math.trunc(this.value / 12) : '',\n      inches: this.value ? this.value % 12 : '',\n    };\n  },\n  ...\n\n};\n```\n\n**Example usage:**\n\n``` html\n<!-- form.html -->\n<height-input v-model=\"user.height\"></height-input>\n```\n",
        "title": "[feature] Add component strategy for v-model",
        "labels": "feature request",
        "id": 123485
    },
    {
        "body": "It would be great if all Vue directives would support `.once`: `v-for.once`, `:class.once`, `v-if.once` for situations where you know the binded data won't change. I imagine this will increase performance.\n",
        "title": "[Suggestion for Performance] `.once` directive argument for v-for, :class etc",
        "labels": "feature request",
        "id": 123486
    },
    {
        "body": "From knockout to angular to react, now i'm new to Vue. Really love this library, feels like \"angular+react for humans\".\n\n:class now support array **OR** object, but sometimes it's still a little tedious\nif :class support classnames(https://github.com/JedWatson/classnames) like syntax will be better.\n\nexample:\nfrom\n`:class=\"[type, checked?'checked':'', readOnly?'read-only':'', disabled?'disabled':'', fitted?'fitted':''\"`\ninto\n`:class=\"type, {checked, disabled, fitted}, readOnly&&'read-only'\"`\n\nSure, I can always use a computed method, but by doing this class names are defined in one more place(props+template -> props+template+computed), which harms readability.\n",
        "title": "support \"classnames\" syntax in :class",
        "labels": "feature request",
        "id": 123487
    },
    {
        "body": "it would be really nice to have option for sorting like this `user in users | orderBy 'name' 'lastName'`. if multiple users have same name they get sorted by lastname\n",
        "title": "orderBy mutlitple parameters [fetaure request]",
        "labels": "feature request",
        "id": 123488
    },
    {
        "body": "since now users can customize modifier keycodes, say, use `.f1` for `.112`, it would be nice to take this a little bit further, putting more modifiers into the default modifier list? for example:\n`.f1` = `.112`\n`.shift` = shift pressed down\n`.alt` = alt pressed down\n`.ctrl` = ctrl pressed down\n`.meta` = window\\meta pressed down\n",
        "title": "feature request: more built-in modifiers such as 'f1', 'shift', 'control'",
        "labels": "feature request",
        "id": 123489
    },
    {
        "body": "# Motivation\n\nAs you might already know, `<slot>` does not allow attributes whether html or vue directives (except v-if) the main reason behind this is \n\n> Directives are ignored on <slot> because it's only a placeholder for parent inserted content, and it may contain non-elements, e,g, just text nodes. \n\nMy feature request aims to provide a way to create an exception for the non-elements. so that we can use `v-el`, `v-show` etc on `<slot>`\n\nthis is a pretty popular request https://github.com/vuejs/vue/issues/2494 https://github.com/vuejs/vue/issues/2390 https://github.com/vuejs/vue/issues/2128\n# Syntax\n\nthe core idea is that in most use-cases, we will be using directives on _named_ slots instead of default slot and those named slots are more likely to not be a fragment instance. so we basically need mechanism to handle edge cases only.\n\nTo that end, I propose to add a directive `v-fragment-root` (name will hopefully change in future ).\n\nSyntax:\n\n```\n<slot name=\"item\" \n      v-fragment-root=\"div\"   //use <div> tag for fragments   \n      class=\"my-item\"         //add attributes on slot\n></slot>\n\n<slot \n     v-fragment-root=\"\"      //this causes current behavior\n     class=\"my-item\"         //attribute is ignored and a warning is raised.\n></slot>\n```\n# Possible Problems\n\n1)  `v-for` will either not work or will be confusing to use. As `<slot>` will depend on both props passed to component and `<slot>` tags passed.\n2)  `v-el` is slightly different case. a named `<slot>` can be targetted multiple times but `v-el` can target only one element. like in following code.\n\n```\n <my-tag class=\"hack\">\n    <child1 slot=\"item\"> </child1>\n    <child2 slot=\"item\"> </child2>\n   <child3 slot=\"item\"> </child3>\n </my-tag>\n```\n",
        "title": "Feature request: v-fragment-root on <slot>",
        "labels": "feature request",
        "id": 123490
    },
    {
        "body": "At some situations, plain object isn't the best choise. I tried to render a `Map` object by `v-for`, but seems `Vue` does not support it currently. (Here's a [post](http://forum.vuejs.org/topic/2638/how-to-use-v-for-to-iterate-over-a-map-object/5) I created in the Help thread on the forum.)    \n\nHope `Vue` can provide the `for ... of` syntax in `v-for` to iterate over data types like `Map` and `Set`.     \n\nFor example:\n\n``` javascript\nconst map = new Map();\nmap.set('key1', 'val1');\nmap.set('key2', 'val2');\n```\n\nand we can render `map` in this way:\n\n``` html\n<ul>\n    <li v-for=\"[key, val] of map\">{{key}} - {{val}}</li>\n</ul>\n```\n",
        "title": "Support more collection data types in v-for",
        "labels": "feature request",
        "id": 123491
    },
    {
        "body": "Hi, I would like to request a`not` key option for the FilterBy filter. Currently it's only possible to filter by positive values and for negative would require a custom filter.  Ex: A list of products with prices, being some of them free set with `price = 0`. A list of commercial and free products could look like this:\n\n```\n// free products\n...<li v-for=\"prod in products | filterBy 0 in 'price'\"></li>\n// commercial products\n...<li v-for=\"prod in products | customFilter\"></li>\n```\n\nWith the new option we could just add `not` making the code much easier to read and understand.\n\n```\n...<li v-for=\"prod in products | filterBy 0 in 'price'\"></li>\n...<li v-for=\"prod in products | filterBy 0 not in 'price'\"></li>\n```\n\nThanks for considering.\n",
        "title": "FilterBy not",
        "labels": "feature request",
        "id": 123492
    },
    {
        "body": "Similar to jQuery:\n\n```\nvar $j = jQuery.noConflict(true);\n```\n",
        "title": "Allow loading Vue in \"no conflict\" mode",
        "labels": "feature request",
        "id": 123493
    },
    {
        "body": "At the minute, prop types can only be custom/native constructors. It would be helpful if the type could be an array of custom/native constructors, and if the passed in prop value matches any of these functions, it would be deemed valid.\n\nFor example, a prop with name `value` that can accept either an `Array` or `Number` as its type:\n\n``` js\nprops: {\n    value: {\n        type: [Array, Number],\n        default: 5 // or: default: [1, 2, 3]\n    }\n}\n```\n",
        "title": "Allow component prop type to be an array of accepted types",
        "labels": "feature request",
        "id": 123494
    },
    {
        "body": "IE9+ supports EventTarget.addEventListener() with capture and bubble phases. Events default to the bubble phase but sometimes, it is handy to catch the event as it heads to the target across the DOM.\n\nI would love to see an event modifier added to support making capture easy to add into template/components.\n\nExample:\n\n``` html\n<div @click.capture=\"captureClick\" @click=\"bubbleClick\" >\n     <a @click=\"doThat\">CLICK ME</a>\n</div>\n```\n",
        "title": "Event Modifier:  @click.capture=\"captureClick\"",
        "labels": "feature request",
        "id": 123495
    },
    {
        "body": "Hello,\n\nright now when we use v-el we are able to register a reference to a DOM element on its owner Vue instance\u2019s $els object for easier access.\n\nit could be great if it could retrieve an array of object by using v-els for example\n\n``` html\n<span v-els:msg>hello</span>\n<span v-els:msg>world</span>\n```\n\n``` javascript\nthis.$els.msg // -> array(<span>hello</span>,<span>world</span>);\n```\n",
        "title": "v-el behaviour",
        "labels": "feature request",
        "id": 123496
    },
    {
        "body": "I want to using a modifier to ignore bubbled event, and it will be very convenient if I can using something like `v-on:click.only` to limit the handler only be called when event only happened on the element.\nWould it possible to expose the api ?\n",
        "title": "expose the api for adding custom modifier",
        "labels": "feature request",
        "id": 123497
    },
    {
        "body": "Hello!\nSometimes its nice to have an option to pass custom params into a partial. Like that:\n\n`<partial name=\"block\" :add-link=\"true\">`\nThe principle I see is the same as lightweight VMs in `v-for` elements.\n\nThis would also require (probably) alternative syntax for partials: \n\n```\npartials: {\n    block: {\n        props: {addLink: null},\n        template: '<div>123</div>'\n    }\n}\n```\n\nYou could say \"use components then\", but the point is I don't want most of components' features here. Just new data scope.\n",
        "title": "Suggestion: partial params",
        "labels": "feature request",
        "id": 123498
    },
    {
        "body": "According to the HTML5 spec:\n\n> The values \"true\" and \"false\" are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether.\n> - https://www.w3.org/TR/html5/infrastructure.html#boolean-attributes\n\nSo, in order to make my code spec compatible, i'd do in this way in vue: `<input :checked=\"checked ? '' : false\">`, do you think it is necessary to directly support boolean attributes in vue? @yyx990803 \n\nSolutions I can think of are these:\n- By another directive: `v-add:selected=\"true\"` (not recommand)\n- By modifier: `v-bind:selected.boolean=\"true\"` (recommand)\n- Auto: `v-bind:selected=\"true\"`, we need to mantain a boolean attribute list([see](https://github.com/kangax/html-minifier/issues/63)), and this may have compatibility problems.\n\nAgain, if you think it is necessary, let me handle this! :trollface: \n",
        "title": "Boolean attributes",
        "labels": "feature request",
        "id": 123499
    },
    {
        "body": "Any plans to support stateful filters? \nThe purpose is to implement async filters that handle promises directly.\n",
        "title": "Stateful filters",
        "labels": "feature request",
        "id": 123500
    },
    {
        "body": "We may need DOM place in some other location in some situations, eg:  place `<modal>` in root element(body).\n\n`position: fixed` is not a perfect solution, when inside parent with z-index, it may be overlap by other elements: http://stackoverflow.com/a/16756277\n\nI made some experiments and it seems impossible to achieve this by custom directive, so i made some modifications in source code and it works as expected:\nhttp://jsfiddle.net/rhyzx/s3L0emxy/\n\ncommit is here: https://github.com/rhyzx/vue/commit/8430843342beed71953da8de00c87dd45cbb250b\n\nHow do you think about this feature? @yyx990803 \n",
        "title": "transfer DOM",
        "labels": "feature request",
        "id": 123501
    },
    {
        "body": "It would be great if we could use v-bind with an object of attributes to pass props to a component.\n\n```\n<component is=\"component\" v-bind=\"data\"></component>\n```\n\nCurrently we need to explicitly state the props we are passing to the component.\n\n```\n<component is=\"component\" :prop-a=\"propA\" :prop-b=\"propB\"></component>\n```\n\nhttp://jsbin.com/yudivokovi/edit?html,js,output\n",
        "title": "Passing data to a component with props using v-bind with an object of attributes",
        "labels": "feature request",
        "id": 123502
    },
    {
        "body": "# Support alternate dialects in Vue expressions.\n## Introduction\n\nI was thinking about implementing support for using other dialects of JavaScript (ES6/Babel, CoffeeScript, Opal) in expressions (handlebars, directives), and figured I would open an issue to see if the Vue community would benefit from this.\n## Motivation\n\nImplementing this would allow developers to use one programming language to form a cohesive application. It would remove the need for a developer to use multiple programming languages to build an application. While the amount of vanilla JavaScript used in expressions is small, it can cause a hiccup if a developer wants to use a sugar that is available in their language, that would be cumbersome to write in vanilla JavaScript, in an expression.\n## Pros\n- One JavaScript dialect for all code\n- Use syntactic sugar of desired dialect\n## Cons\n- Could cause confusion if another developer attempts to read/modify the code\n  and is unaware of a special dialect\n  - Resolution: Brief developer of custom Vue configuration.\n- If syntax highlighting inside of expressions is supported in the future, this could cause the syntax highlighter to break.\n  - Resolution: Since the syntax highlighter doesn't have access to the Vue runtime, one would specify a tag similar to `lang`, such as `dialect/expression=\"coffee-script\"` for the syntax highlighter to interpret.\n## Detailed Example\n\nThe workflow to use this would be something like this (example is for a webpack-enabled app)\n\n``` coffee-script\n# app.coffee\n# ==========\n# Probably better to require these as a webpack.ProvidePlugin\ncoffee = require 'coffee-script'\nVue = require 'vue'\n\n# Could be .compiler or .dialect (or whatever makes the most sense)\n# The config value would be set to the function that transpiles \n# the language to Javascript.\nVue.config.expressionDialect = coffee.compile\n\n## Alternate method if compiler requires extra options\nVue.config.expressionDialect = (expression) ->\n  coffee.compile expression, bare: true\n\nVue.component 'app', require 'app.vue'\n\nvm = new Vue\n  el: 'body'\n  methods:\n    someMethod: (options) ->\n      options.opt1 && options.opt2 is 'bar'\n\n```\n\n``` jade\n//- app.jade\n//- ========\nhtml\n  body\n    app(v-if=\"someMethod opt1: 'foo', opt2: 'bar'\")\n\n    script(src=\"app.js\")\n```\n\n``` vue\n<!-- app.vue -->\n<!-- ======= -->\n<template lang=\"jade\">\n#app\n  .my-class {{ if getDate '10/10/2015' then 'Today' else 'Not Today' }}\n</template>\n\n<script lang=\"coffee\">\nmodule.exports =\n  data: ->\n    someVar: 1234\n  methods:\n    getDate: (date) ->\n      d = new Date date\n      today = new Date\n      if d.toDateString() is today.toDateString()\n        return true\n      else\n        return false\n\n</script>\n```\n## Detailed Implementation\n1. The developer would set `Vue.config.expressionDialect` equal to the dialect's transpilation function.\n2. The developer would write their Vue components using their desired dialect in expressions.\n3. When Vue parses an expression, it will check if `Vue.config.expressionDialect` is defined.\n   1. If `expressionDialect` is defined, the parser will pass the expression to the transpile function, and eval (and return) the transpiled expression.\n   2. If `expressionDialect` is not defined, the parser will simply eval (and return) the expression.\n## Impact on existing code\n\nThis would not affect existing codebases as the default value of\n`Vue.config.expressionDialect` would be to use vanilla JavaScript.\n## Miscellaneous Commentary\n\nOne may argue that using logic in expressions is unnecessary since all logic could be moved to a method. A counter-argument to this could be the ability to call a nested function in an object tree structure using CoffeeScript's existential operator.\n\nThe vanilla JavaScript is either significantly more verbose, or simply doesn't handle undefined children.\n\n``` jade\n//- Vanilla JavaScript\n#some-component\n  .some-div {{ app ? app.foo ? app.foo.bar ? app.foo.bar.baz ? app.foo.bar.baz.someMethod('args') :null:null:null:null }}\n\n  //- One could simply write this as\n\n  .some-div {{ app.foo.bar.baz.someMethod('args') }}\n\n  //- and just accept the fact that Vue will throw a warning.\n```\n\nThe CoffeeScript syntax would handle any undefined child and simply stop walking the tree.\n\n``` jade\n//- CoffeeScript\n#some-component\n  .some-div {{ app?.foo?.bar?.baz?.someMethod('args') }}\n```\n\nAnother example for this implementation's usefulness could be the ability to use CoffeeScript's list comprehension.\n\n(This is an extremely contrived, probably useless, example)\n\n``` vue\n<template lang=\"jade\">\n//- Vanilla JavaScript\n#some-component\n  .some-div(v-repeat=\"arr in fooTheFoo(foo)\")\n    .some-other-div {{ arr[0] }}\n</template>\n\n<script lang=\"coffee\">\nmodule.exports = \n  data: ->\n    foo:\n      bar: [1, 2, 3]\n      baz: [4, 5, 6]\n      qux: [7, 8, 9]\n  methods:\n    fooTheFoo: (foo) ->\n      results = []\n      for val in foo\n        results.push val\n      results\n\n      # Obviously since the script is written in CoffeeScript one could simply write the following\n      # but this is to provide an example of not being able to write a list comprehension\n      # in the v-repeat directive.\n      val for val of foo\n</script>\n```\n\n``` vue\n<template lang=\"jade\" dialect=\"coffee-script\">\n//- CoffeeScript\n#some-component\n  .some-div(v-repeat=\"arr in foos = (val for val of foo)\")\n    .some-other-div {{ arr[0] }}\n</template>\n\n<script lang=\"coffee\">\nmodule.exports = \n  data: ->\n    foo:\n      bar: [1, 2, 3]\n      baz: [4, 5, 6]\n      qux: [7, 8, 9]\n</script>\n```\n\nIf you have any questions, or comments, feel free to reply to this issue or contact me on Twitter ([@thetaylorzane](https://twitter.com/thetaylorzane)) or on Gitter ([@taylorzane](https://gitter.im/taylorzane))\n",
        "title": "Support for multiple JavaScript dialects in expressions",
        "labels": "feature request",
        "id": 123503
    },
    {
        "body": "From @Morgul's comment in #1713:\n\n> ``` html\n> <!-- Cast to number -->\n> <input type=\"number\" v-model.number=\"foo\">\n> \n> <!-- Cast to boolean -->\n> <input type=\"text\" v-model.boolean=\"bar\">\n> ```\n\nIt would also seem useful to be able to register custom transformations. eg, datetime transformations for Moment.js objects.\n",
        "title": "Type transformation modifiers for v-model",
        "labels": "feature request",
        "id": 123504
    },
    {
        "body": "Hi,\n\nI see that transitions are just for show/hide an element. I would it be easy to make it available on any property so the transition would play between changing state ? (lets call it state property)\nExample :\n\n``` html\n<div v-state=\"state\" transition=\"my-transition\"></div>\n```\n\n``` javascript\nVue.transition('expand', {\n\n  beforeStateEnter: function (el) {\n    el.textContent = 'beforeEnter'\n  },\n  stateEnter: function (el) {\n    el.textContent = 'enter'\n  },\n...\n\n})\n```\n",
        "title": "Transitions for everything",
        "labels": "feature request",
        "id": 123505
    },
    {
        "body": "I want something like this:\n\n```\n{\n  data() {\n    return {\n      song: {\n        tracks: [...]\n      }\n    }\n  },\n  computed: {\n    'song.duration'() {\n      return max(this.song.tracks.map(track => track.duration))\n    }\n  }\n}\n```\n\nin such a way that `duration` is an actual (computed) property on the song object.\n\nI have a feeling this may be quite easy to add. With some pointers where to start, I'd be happy to try to add this myself.\n",
        "title": "Allow computed properties of subobjects.",
        "labels": "feature request",
        "id": 123506
    },
    {
        "body": "##### when using other lib like animate.css, can't integration easy with Vue.\n\n> expect this \n\n```\n<div v-show=\"showFlag\" transition=\"transitionId:transitionEnter,transitionLeave\">\n```\n\n> for integration with animate.css\n\n```\n<div v-show=\"showFlag\" transition=\"transitionId:bounceInRight,bounceOutRight\">\n```\n",
        "title": "Suggestion:directly declared enter class and leave class in transition definition",
        "labels": "feature request",
        "id": 123507
    },
    {
        "body": "In relation to:\nhttps://github.com/fergaldoyle/vue-form/issues/7\n\nWhen authoring a plugin I found `el._vue_directives` very useful, only to find it's removed in production.\n\nWould it be possible to keep it in production builds? Maybe with the same naming convention as v-models internal object.\n\n```\n__v_model\n__v_directives\n```\n",
        "title": "Suggestion: expose _vue_directives in production",
        "labels": "feature request",
        "id": 123508
    },
    {
        "body": "Consider a component caled Box with the following property:\n\n``` js\nexport default {\nprops: {\n    type: {\n        type: String,\n        default: \"text\"\n    }\n}\n}\n```\n\nThe intension of the component designer here is that anything we don't have a **meaningful** input for \"type\", it should be \"text\".\n\nIn Vue it seems that defaults are assigned only if the property is omitted. Consider the following example of using the box component.\n\n``` html\n<template>\nBox type:\n   <box :type=\"box_type\" />\n\nBox text type:\n  <box />\n</template>\n```\n\nIn the first case if \"box_type\" is defined, this works well and good. If \"box_type\" is undefined for whatever reason, this causes the Box component's type property to be unset and a warning to be issued in the console.\n\nThe second usage of <box> works as expected and the property defaults to \"text\".\n\nShould undefined property values cause defaults to be assigned? I think it would make for a nicer development practice.\n",
        "title": "Thoughts on property defaults.",
        "labels": "feature request",
        "id": 123509
    },
    {
        "body": "Current the model binding will obtain the value of a disabled selected item (commonly used for default load state akin to placeholder in input fields). For example:\n\n```\n                    <select v-model=\"type\">\n                        <option disabled selected>Type of Change</option>\n                        <option>Added</option>\n                        <option>Fixed</option>\n                        <option>Changed</option>\n                        <option>Removed</option>\n                    </select>\n```\n\nThis will return \"Type of Change\" when querying `this.type`, unless the selection is changed. Would it not be more in-line with expectations to not get values of disabled items, even if they are selected?\n",
        "title": "Model-binding with Select Drop-Down Syncs Disabled Selected Value",
        "labels": "feature request",
        "id": 123510
    },
    {
        "body": "Is there a proper way for a component to access its transcluded children ?\n\nThis will allow to:\n- change the component behavior  depending on transcluded content presence\n- use child component data, properties or method from parent\n",
        "title": "Programmatic slot access API",
        "labels": "feature request",
        "id": 123511
    },
    {
        "body": "It should be great if we could write\n\n```\n<input type=\"number\">\n```\n\nin place of\n\n```\n<input type=\"number\" number>\n```\n\nWhat do you think?\n",
        "title": "input type=\"number\" should not need an extra attribute \u201cnumber\u201d",
        "labels": "feature request",
        "id": 123512
    },
    {
        "body": "When using v-ref combined with v-for, it will give you an array of _refs_. It would be nice to have this feature for v-el too.\n",
        "title": "[Feature] have v-el be a list combined with v-for",
        "labels": "feature request",
        "id": 123513
    },
    {
        "body": "I created a hightlighted-code component, you can find the definition here :\n\nhttps://gist.github.com/JulienTant/a81d0441fe2fbd97a05a\n\nMy problem is that if the code inside my slot contains {{ }}, then it breaks. So i immediatly thought about v-pre on the slot, but it doesn't work. i'm not sure if it's an issue, a request or a simple question actually, sorry about that.\n",
        "title": "[Question/Suggestion] Using v-pre on a slot ?",
        "labels": "feature request",
        "id": 123514
    },
    {
        "body": "Hi, \nI have a list of components which are rendered via an array prop like such :\n\n```\n<child-component is=\"example\"\n    v-for=\"item in myArrayProp\"\n    transition=\"bounce\"\n    stagger=\"200\"\n</child-component>\n```\n\nFact is `myArrayProp` is already filled from the beginning and I would like to transition (bounce-in) the list at the beginning for the first time.\n\nI could do it by triggering myself some class but I'll loose the benefit from the stagger effect.\n\nTo achieve it, I found no other way to dirty hack it with flush the prop at the beginning and refills after `nextTick`\n\nSo why not give the option to trigger the \"enter\" transition for the first time ?\nThanks\n",
        "title": "[suggestion] Add a transition mode for transition on list (v-for)",
        "labels": "feature request",
        "id": 123515
    },
    {
        "body": "I think it would make sense to allow methods to be nested under sub-objects:\n\n``` js\nnew Vue({\n    methods: {\n        group: {\n            foo() {\n                // `this` should be the vm\n            },\n            bar() {\n                // `this` should be the vm\n            },\n        }\n    }\n});\n```\n",
        "title": "Allow methods to be nested",
        "labels": "feature request",
        "id": 123516
    },
    {
        "body": "Vue removes all directive attributes after compiling them.\nIs it difficult to do so that they were not removed in debug mode?\nIt would be very convenient for debugging.\n\n[suggestion]\n",
        "title": "Don't remove attributes directives in debug mode",
        "labels": "feature request",
        "id": 123517
    },
    {
        "body": "Is there a way to assign the same value for multiples modifiers for v-on directive ?\n\n```\n<!-- now -->\nv-on:focus=\"resetErrorDisplay\":input=\"resetErrorDisplay\"\n\n<!-- suggestion -->\nv-on:focus:input=\"resetErrorDisplay\"\n\n```\n\nThanks\n",
        "title": "Binding syntax suggestion",
        "labels": "feature request",
        "id": 123518
    },
    {
        "body": "optionally binding the iteration index (or key when iterating over an object) to a name will simplify work with nested `v-for`s.\n\n``` html\n<ul v-for=\"(name,rows) in table | groupByFirst\">\n    <li v-for=\"row in rows\">{{name}} - {{row}}</li>\n</ul>\n```\n\nvs\n\n``` html\n<ul v-for=\"rows in table | groupByFirst\">\n    <li v-for=\"row in rows\">{{$parent.$key}} - {{row}}</li>\n</ul>\n```\n\ni have this feature implemented in my private fork, would submit a pull-request if wanted (or patch as this is few lines only)\n",
        "title": "allow optional `(key,val) in arr` syntax for `v-for`",
        "labels": "feature request",
        "id": 123519
    },
    {
        "body": "Sometimes we need to set objects/arrays as default values of property in `props`. In these cases we need to specify a function that will return default value ([docs link](http://vuejs.org/guide/components.html#Prop_Specification)). \n\nMy suggestion is to automatically bind this kind of functions to current vm. So we can get access to vm context.\n\nNow there are in global context:\n\n``` js\nprops: {\n  myProp: {\n    type: Object,\n    default: function () {\n      console.log(this) // Window\n      return {}\n    }\n  }\n}\n```\n",
        "title": "Suggestion: automatically bind props default value functions to current vm",
        "labels": "feature request",
        "id": 123520
    },
    {
        "body": "I find it pretty cumbersome to add an event parameter and write `e.preventDefault();` in every single method of my components.\n\nIt would be nice to add a `v-on` filter that automatically does that. It would be used like this:\n\n``` js\n<form v-on=\"click:submit | preventDefault\"> ... </form>\n```\n\nIt looks better to me because the method itself shouldn't really know about the original event that triggered the call (but the template should, and does).\n",
        "title": "Add a preventDefault event filter",
        "labels": "feature request",
        "id": 123521
    },
    {
        "body": "Hi\n\nI has modified [\"Quick example\"](http://jsfiddle.net/yMv7y/943/) with using the Iterator protocol.\nWill be great if it will work in `1.0` version for es6 environments.\n\nUseful links:\nhttps://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols\nhttp://www.2ality.com/2015/02/es6-iteration.html\n",
        "title": "[Feature]: Add support of the iterator protocol (es6) for v-for directive (map, weakset, weakmap)",
        "labels": "feature request",
        "id": 123522
    },
    {
        "body": "Example:\nhttp://jsfiddle.net/5sH6A/164/\n\nShould the element be removed if a component is a factory function? I may want to have \"Loading\" text within the element before the Async component has loaded, or classes on the element to show a loading animation.\n",
        "title": "Preserve async component element until loaded",
        "labels": "feature request",
        "id": 123523
    },
    {
        "body": "Hello!\nSpotted such a thing here: http://raptorjs.org/marko/try-online/#Simple_Hello_World\nRemembered I wanted it so badly sometimes. Any hope to implement?\n",
        "title": "Suggestion: v-else",
        "labels": "feature request",
        "id": 123524
    },
    {
        "body": "Disallowing unobservable objects in data makes sense, but... Sometimes, you really need to pass them. For example, for different kinds of Drag-n-drop implementations. Of course, it can be avoided with Flux-like architecture, but as all we know - there is nothing like, say Lux.js for Vue now.\nSo, I offer to add an option to allow unobservable objects for certain props explicitly, like this:\n\n``` javascript\nvar component = Vue.extend({\n  props: {\n    property: {\n       unobservable: true\n    }\n  }\n})\n```\n\nSo, these objects should not be observed, but should be passed at least, to allow an access to the data without hacks.\n",
        "title": "Unobservable objects in data in \"I know what I am doing\" mode.",
        "labels": "feature request",
        "id": 123525
    },
    {
        "body": "It would be nice to be able to pass a plugin configuration using the component options. Therefore the plugin needs a way to register a event/callback which will be called when the component instance is created (or on other lifecycle events). This would allow the plugin to apply configuration values and for example create instance properties accordingly. Which is basically what the native options like `data`, `filters` and `methods`do already.\n\nIt would be great to offer this flexibility for plugins as well.\n",
        "title": "Suggestion: Using component options for passing plugin configuration",
        "labels": "feature request",
        "id": 123526
    },
    {
        "body": "The next code works fine:\n\n``` vue\n<template>\n  <input type=\"text\" value=\"{{@property | filter}}\">\n <!-- where filter is two-way filter -->\n</template>\n```\n\nbut this one does not:\n\n``` vue\n<template>\n  <custom-input value=\"{{@property | filter}}\">\n  <!-- where filter is two-way filter -->\n</template>\n```\n\nIt fails with `Cannot bind two-way prop with non-settable parent path: ...` message, because `compileProps` function does not recognise complex binding expressions with filters for custom components. This can be worked around, but is not intuitive and requires lots of a boilerplate code (especially taking in account, that it does work for standard html elements).\n",
        "title": "Improvement: Consistent filter behavior for custom components",
        "labels": "feature request",
        "id": 123527
    },
    {
        "body": "I find that some features are easier  than ever to be implemented using fragment factory (`src/fragment/factory`), so what about to expose it to let user to create some advance directive?\n",
        "title": "expose the fragment factory api in 1.0.0",
        "labels": "feature request",
        "id": 123528
    },
    {
        "body": "Currently, transitions are only available when using `v-repeat` or `v-if`. It would be very useful to make transitions available for components without these directives, and (most importantly) for a root Vue instance. \n\nUse case examples: \n1. A lightbox or a popup. Its whole content should fade in on creation in most cases.\n2. Toolbar panels (visual-studio like) may slide from outside of the window.\n",
        "title": "Transitions during instance initialisation.",
        "labels": "feature request",
        "id": 123529
    },
    {
        "body": "Now it seems to call .use for every try; I think it would be cool if Vue checked if this plugin already applied.\nWould be helpful in modular JS systems builds, such as browserify.\n",
        "title": "Add a check for adding plugins only once",
        "labels": "feature request",
        "id": 123530
    },
    {
        "body": "I find that the default of cache for computed prop is true, however, in my case, most of computed props are simple enough are in most of time they are not changed. So it means caching them is wasting memory. Should its default configurable in `config` or default to false?\n",
        "title": "should cache of computed prop be default to false or configurable?",
        "labels": "feature request",
        "id": 123531
    },
    {
        "body": "Sometimes, I'm not actually interested in two-way binding on a `select`, and all I care about is listening to the `change` event. However, without `v-model`, `options` doesn't work.\n\nSo what I have to do instead is use `v-model` and set up a watcher, which works, but is more than I should need<sup>1</sup>.\n\nI'm not sure this can even be \"fixed\", since `options` is a directive argument of `v-model`.\n\n---\n\n<sup>1</sup> I could also manually create the `option`s with `v-repeat`, but that's being discouraged by the framework.\n",
        "title": "Can't use options without v-model",
        "labels": "feature request",
        "id": 123532
    },
    {
        "body": "Sometimes, I want to access the wrapped component's vm inline. For example as followed:\n\n```\n<comp>\n<div v-class=\"invalid: /* according to comp's invalid state */\">...</div>\n</comp>\n```\n\nIf we want to do something according to `comp`'s `invalid` value, we have to rewrite the `comp` to receive an `oninvalid` function property (or watch the property by the `comp`'s context) and create a property `invalid` on their common vm.\n\n``` html\n<comp oninvalid=\"{{oninvalid}}\"> // oninvalid = invalid => this.invalid = invalid\n<div v-class=\"invalid:invalid\">...</div>\n</comp>\n```\n\nSo I think should vue support the feature as followed?\n\n```\n<comp v-ref=\"comp\">\n<!-- It is impossible to do this because the ref is set after the compiling the comp and its transcluded content. -->\n<div v-class=\"invalid: $.comp.invalid\">{{$.comp.invalid}}</div>\n</comp>\n```\n\nor\n\n```\n<comp>\n<v-inline as=\"$inline\"> // element directive to create an anonymous component like v-repeat with a $meta property $inline.\n<div v-class=\"invalid: $inline.invalid\">{{$inline.value}}</div>\n</v-inline>\n</comp>\n```\n\nor\n\n```\n<comp>\n<div v-class=\"invalid: component.invalid\" v-inline=\"component\">{{component.value}}</div>\n</comp>\n\n```\n",
        "title": "[suggestion] access the wrapped component inline",
        "labels": "feature request",
        "id": 123533
    },
    {
        "body": "Hi, I've been experimenting on Vue.js a little bit and feel really great about it. \n\nHowever, in my opinion, the `currency` filter is a bit restricted that it doesn't allow `''` empty string to be used. As in my country, the currency symbol is not very popular and most of the time get ignored by the users; therefore, no symbol is used in that place. But we do format the currency using thousand separator and decimal point as usual.\n\nI know that I can pass a space to get rid of the currency symbol, but that actually use a space in front of the currency value is not very ideal. I think allowing an empty string to be used in the currency symbol would be more appropriate (so there will be no space in front of the currency value).\n\nThis is just a suggestion. Thanks for you excellent work on Vue.js anyway.\n\nCheers,\nRati\n",
        "title": "Suggestion about `currency` filter",
        "labels": "feature request",
        "id": 123534
    },
    {
        "body": "When using the `{text:'', value:''}` format for dynamic `<select>` options it becomes complex to get the `text` back out again for display since the `v-model` binds the `value`. One must then run a computed property and filter the `options` again and... you get the point.\n\nWould it be possible to to support a syntax like this?\n\n```\noptions: [\n  {this: 'This One'},\n  {that: 'That One'}\n]\n```\n\nWhich would then let us get that value back out like `this.options[this.selected]`. Just an idea. Feel free to say nay.\n",
        "title": "Support object values in `v-model` for <select>",
        "labels": "feature request",
        "id": 123535
    },
    {
        "body": "When the model is `null` or an empty string, the static option will be selected. For example:\n\n``` html\n<select v-model=\"user\" options=\"users | optionify 'name' 'id'\">\n    <option>Select a user...</option>\n</select>\n```\n\nWithout this, you have to fiddle around with the `users` array to add a \"Select a user...\" option.\n\nAngular has been supporting this for a long time...\n\n---\n\nBTW, I really think that `optionify` filter should ship in core...\n",
        "title": "Allow one static empty option in a select element with dynamic options",
        "labels": "feature request",
        "id": 123536
    },
    {
        "body": "When a `<component>` with a `v-ref` changes its content to another component, and the two components have the same property with different values, manually accessing the property via $.ref.property returns the correct value, but data-bindings are not updated\n\nhttp://jsfiddle.net/t2u6bvqh/5/\n\n``` html\n<component is=\"{{componentId}}\" v-ref=\"child\"></component>\n{{$.child.val}} <-- this value will never be updated (essentially a one-time binding)\n```\n",
        "title": "v-el and v-ref bindings should be reactive",
        "labels": "feature request",
        "id": 123537
    },
    {
        "body": "A common requirement for a `filterBy search in ...` is to specify multiple keys to look, but not all of them (as that might produce false positives from fields irrelevant/invisible to the user).\n\nBelow is a crude modification of `filterBy`, dubbed `filterByKeys`. Usage example:\n\n``` html\n<li v-repeat=\"users | filterByKeys searchText in 'firstname' 'lastname'\">{{username}}</li>\n```\n\nWould it be possible to add this filter to the core (or perhaps replace `filterBy` with it, as it should be backwards compatible)?\n\nCurrently, keeping this in a separate custom filters file requires duplicating the `contains` function and pulling in the same requirements as for `array-filters.js` itself.\n\n``` javascript\nvar filterByKeys = function(){\n    // Convert arguments to an actual Array\n    var args = [].slice.call(arguments)\n    var arr = args.shift()\n    var search = args.shift()\n    // cast to lowercase string\n    search = ('' + search).toLowerCase()\n    // strip optional 'in'\n    if (args[0] == 'in'){\n      delete args[0]\n    }\n    // if left with 0 keys, fall back to all keys\n    var keys = args.length > 0 ? args : Object.keys(args);\n\n    // filter input array\n    return arr.filter(function (item) {\n      var result = false\n      keys.forEach(function(datakey){\n        result = result || contains(Path.get(item, datakey), search)\n      })\n      return result;\n    })\n  }\n```\n\nPS. Possible issues might arise from the `arguments` conversion as that is a bit funky and I'm not 100% sure of browser compatibility\n",
        "title": "Suggestion/Patch: filterByKeys - filter array by multiple keys",
        "labels": "feature request",
        "id": 123538
    },
    {
        "body": "So it could be used like async components and make development with SystemJS a breeze.\n",
        "title": "Template option should accept a function too",
        "labels": "feature request",
        "id": 123539
    },
    {
        "body": "Now for any form we use \"on\" directive and manually prevent default action:\n\n``` html\n<form id=\"as-is\" v-on=\"submit: addTask\">\n  <input type='submit'/>\n</form>\n\n<script type=\"text/javascript\">\n  new Vue({\n    el: \"#as-is\",\n    methods: {\n      addTask: function(e) {\n        e.preventDefault();\n        // do the work\n      }\n    }\n  });\n</script>\n```\n\nMy idea is to made this approach more simpler, like this:\n\n``` html\n<form id=\"to-be\" v-submit=\"addTask\">\n  <input type='submit'/>\n</form>\n\n<script type=\"text/javascript\">\n  new Vue({\n    el: \"#to-be\",\n    methods: {\n      addTask: function() {\n        // do the work\n      }\n    }\n  });\n</script>\n```\n",
        "title": "Submit directive",
        "labels": "feature request",
        "id": 123540
    },
    {
        "body": "It really is ridiculous to have to convert data to the text/value JSON object format in order to correctly render select options dynamically.\n\nIdeally we would have something along these lines:\n\n``` html\n<select v-model=\"selectedItem\" v-options=\"array\" v-text=\"item.firstName\" v-value=\"item.id\">\n</select>\n```\n",
        "title": "Dynamic Select Options is impractical",
        "labels": "feature request",
        "id": 123541
    },
    {
        "body": "Sometimes we want to create a component that really needs a two-way prop, if Vue could throw a warning when this validation is configured on the component it would be nice.\n",
        "title": "Props validation to enforce binding type",
        "labels": "feature request",
        "id": 123542
    },
    {
        "body": "Developing the custom directive, custom filter and plugin it sometimes happens that custom assets is needed.\n\nIf have any API that the user register custom asset, and using it, I think that it's very useful.\n\nThe following validation example:\n\n``` html\n<form>\n  <input type=\"text\" name=\"threshold\" value=\"5\" v-validate=\"min: 1, max: 10\">\n</form>\n```\n\n``` js\n// register `min` validator to custom assets\nVue.customAssets('validator', 'min', function (val) {\n  // something ...\n})\n\n\nVue.directive('validate', {\n  bind: function () {\n    var el = this.el\n    var validatorName = this.arg\n\n    // retrieve validator from custom assets\n    this.validator = Vue.customAssets('validator', validatorName)\n\n    // something ...\n  },\n  update: function (val, old) {\n    var vm = this.vm\n    var el = this.el\n    var validatorName = this.arg\n    var validator = this.validator\n    var validatorArg = this.expression\n    var model = el.getAttribute('name')\n    var value = el.getAttribute('value')\n    var keypath = ['validation', model, validatorName].join('.')\n\n    // validate !!\n    var ret = validator.call(this, value, validatorArg)\n\n    // set validation result\n    vm.$set(keypath, ret)\n\n    // something ...\n  }\n})\n\n```\n",
        "title": "suggestion: user custom assets",
        "labels": "feature request",
        "id": 123543
    },
    {
        "body": "Using the v-repeat directive it sometimes happens that a related object is needed depending on the current value. Example: When iterating an array of items, the getType() method is used to get a related type object if it exists.\n\n``` html\n<ul>\n    <li v-repeat=\"items\">\n        {{ name }} <span v-if=\"getType($value)\">{{ getType($value).name }}</span>\n    </li>\n</ul>\n```\n\nBut it would be nice to create other computed variables for the v-repeat, like this:\n\n``` html\n<ul>\n    <li v-repeat=\"items\" var=\"type: getType($value)\">\n        {{ name }} <span v-if=\"type\">{{ type.name }}</span>\n    </li>\n</ul>\n```\n\nSince the type depends on the item object, the $value can be omitted and automatically passed to the getType($value) method.\n\n``` html\n<ul>\n    <li v-repeat=\"items\" var=\"type: getType\">\n        {{ name }} <span v-if=\"type\">{{ type.name }}</span>\n    </li>\n</ul>\n```\n\nFor now i created my own directive doing this, but i seems like a useful addition for the v-repeat directive.\n",
        "title": "Suggestion for v-repeat directive, to provide computed variables/values",
        "labels": "feature request",
        "id": 123544
    },
    {
        "body": "I'm commonly using props start with `data-`. `data-*` is recommended to exchange proprietary information. Through this way, I don't need to worry about the attribute that I use to exchange data will cause any impact on dom.\n\n``` JavaScript\nprops: {\n    \"data-checked\": {\n        type: Boolean\n    }\n}\n```\n\nIf hyphenated prop names have been deprecated, I wish I can use props start with 'data-' like this in future:\n\n``` HTML\n<my-component data-checked></my-component>\n```\n\n``` JavaScript\nprops: {\n    \"checked\": Boolean\n}\nthis.checked //true\n```\n\nAnd\n\n``` HTML\n<my-component data-my-msg=\"something\"></my-component>\n```\n\n``` JavaScript\nprops: {\n    \"myMsg\": String\n}\nthis.myMsg //\"something\"\n```\n\nIf not find properer attribute, then\n\n``` HTML\n<my-component my-msg=\"something\"></my-component>\n```\n\n``` JavaScript\nprops: {\n    \"myMsg\": String\n}\nthis.myMsg //\"something\"\n```\n",
        "title": "The solution for props name start with \"data-\" when hyphenated prop names been deprecated",
        "labels": "feature request",
        "id": 123545
    },
    {
        "body": "One of my devs is getting tripped up that we're using camelCase for props, dash case for components\n\nCould you bring over the camelCase to dash-case conversion for component dependency names as well?\n\n``` js\nnew Vue({\n    el: 'body',\n    replace: false,\n    data: {\n    },\n    methods: {\n    },\n    template: '<my-component></my-component>',\n    components: {\n        'myComponent': {\n            template: 'blah'\n        }\n    }\n})\n```\n\nhttp://jsfiddle.net/gk2vozpu/\n\nThanks\n",
        "title": "Specify component dependencies using camelCase",
        "labels": "feature request",
        "id": 123546
    },
    {
        "body": "Instead of registering global assets (components, directives, etc) I prefer the pattern of registering private assets as it explicitly states what assets are available to a component.\n\nCurrently if I want to register a private asset I need to use a hash, e.g. \n\n``` javascript\n{\n    components: {\n        'componentId' : {\n            ...\n        }\n    },\n    directives: {\n        'directiveId' : {\n            ...\n        }\n    }\n}\n```\n\nBut this means that I have to manually maintain the id / selector of the asset. I'd want the asset to have the same id / selector across all components in an app for consistancy.\n\nConsider something like this:\n\n``` javascript\nimport { paginComponent } from 'components/pagin/pagin';\nimport { actionMenuComponent } from 'components/action-menu/action-menu';\nimport { inputDirective } from 'directives/input';\n\nexport var pageManager = {\n    template: require('./page-manager.html'),\n    components: [paginComponent, actionMenuComponent],\n    directives: [inputDirective],\n    ...\n};\n```\n\n`paginComponent` `actionMenuComponent` and `inputDirective` would all self define thier default id / selector, e.g:\n\n``` javascript\nexport var paginComponent = {\n    selector: 'pagin',\n    props: ['item-count', 'page-size', 'current-page', 'page-change'],\n    template: require('./pagin.html'),\n    ...\n}\n```\n\nWhen an asset is registered with an array opposed to an object hash, the id / selector is pulled from the `selector` property (might be better to use `id` property for consistency with all asset types)\n\nCurrently to achieve this, i have a small utility function to register assets which creates a hash out of an array of assets, using the `selector` property of each asset create a hash as Vue expects:\n\n``` javascript\n{\n    ...\n    components: reg(paginComponent, actionMenuComponent, subComponent),\n    directives: reg(inputDirective),\n    ...\n}\n\nfunction reg() {\n    var out = {};\n    for (var i = 0; i < arguments.length; i++) {\n        out[arguments[i].selector] = arguments[i];\n    }\n    return out;\n}\n```\n\nAllowing the use of array vs object when registering assets would be a non breaking change and allows for the above syntax which I think is nice.\n",
        "title": "Allow register of asset with array rather than object",
        "labels": "feature request",
        "id": 123547
    },
    {
        "body": "Wouldn't this ...\n\n```\nprops: {\n  'prop-a': String, // type check constructor\n  'prop-b': null, // accept any type\n  'prop-c': { // object descriptor\n    type: Number,\n    required: true,\n    default: 100 // new: default value\n  }\n}\n```\n\nMatch the other options more if it was ...\n\n```\nprops: {\n  propA: String, // type check constructor\n  propB: null, // accept any type\n  propC: { // object descriptor\n    type: Number,\n    required: true,\n    default: 100 // new: default value\n  }\n}\n```\n\nThe camel case would appear in the html as `prop-a` of course.\n",
        "title": "allowing camel-case props",
        "labels": "feature request",
        "id": 123548
    },
    {
        "body": "We known that the CSS lib Semantic-UI provides  3 level styles. There are Lib level -- Theme level -- Site level. Similarly, Component option also have multiple level settings. \n\nAt present, I can only use the inheritance mode of Vue to achieve the different levels of component. like below code:\n\n``` javascript\nVue.component('pagination', {\n  template: 'size\uff1a<span>{{pagesize}}</span>',\n  data: function(){\n    return {\n      pagesize: 10\n    };\n  }\n});\n\nvar appPagination = Vue.component('pagination').extend({\n  data: function(){\n    return {pagesize: 15};\n  }\n});\n\nnew Vue({\n  el: '#wrap',\n  data: { },\n  components: {\n    pagination: appPagination\n  }\n});\n```\n\nor like this:\n\n``` javascript\nvar AppComponentDefaults = {\n    pagination: {\n        data: function(){\n            return { pagesize: 15 }\n        }\n    }\n}\n\nnew Vue({\n  el: '#wrap',\n  mixins: [AppComponentDefaults.pagination]\n  data: {}\n});\n```\n\nI think it is too complex. I just want to replace some defaults data, or add some hook of the life cycle, not to create a sub component.\n\nSo.  I proposed to provide a more lightweight approach to extends component option. like below:\n\n``` javascript\nVue.component('pagination').defaults({\n   data: function(){\n       return { pagesize: 15}\n   }\n});\n```\n",
        "title": "Lite way to extend component option",
        "labels": "feature request",
        "id": 123549
    },
    {
        "body": "For some reason boolean attributes go completely against [the html5 spec](http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#boolean-attributes):\n\nhttps://jsfiddle.net/vqm9burf/1/\n\nSince blindly following the spec will break compat, I suggest the following middle-ground:\n1. If the boolean attribute doesn't exist, set it to false as per the spec\n2. If the boolean attribute exists and is either \"true\" or \"false\", use the current handling. Since the spec prohibits such values, maybe deprecate this syntax?\n3. If the boolean attribute exists and is either an empty string or the name of the attribute[1], set it to true as per the spec\n\nAny other values should trigger a warning and map to undefined.\n\n[1] Technically, the spec mandates case insensitive comparison. I'm unsure how this would translate to Vue because I believe properties are case sensitive on the javascript end and I don't know how they are handled.\n\nEdit: seems that attribute mapping only works for lowercase properties. As such, case insensitive comparison is acceptable\n",
        "title": "Rework boolean attributes",
        "labels": "feature request",
        "id": 123550
    },
    {
        "body": "Currently, properties are defined as an array of names:\n\n``` javascript\nVue.component(\"test\", {\n    \"props\": [\"hello\", \"world\"]\n})\n```\n\nOr as an array of objects:\n\n``` javascript\nVue.component(\"test\", {\n    \"props\": [{\n        \"name\": \"hello\",\n        \"type\": String\n    }, {\n        \"name\": \"world\",\n        \"type\": Boolean\n    }]\n})\n```\n\nWhile the first syntax is okay for enumerating properties, the second one is a bit awkward and inconsistent with the way `data` entries are specified.\n\nI propose the following syntax extensions inspired from [mongoose](http://mongoosejs.com/):\n\n``` javascript\nVue.component(\"test\", {\n    \"props\": {\n        \"hello\": String,\n        \"world\": {\n            \"type\": Boolean,\n            \"required\": false\n        }\n})\n```\n\nI believe this could be implemented without breaking compatibility.\n",
        "title": "Alternate props syntax",
        "labels": "feature request",
        "id": 123551
    },
    {
        "body": "Current Version: 0.12.4\n\nCurrently, defining a watcher via the Vue constructor does _not_ register the watcher as a deep watcher. However, passing `deep: true` to the `watch` property of the constructor options sets all watchers to deep.\n\nIt'd be nice to be able to set `deep:true` on a specific watcher, possibly like this:\n\n``` js\nnew Vue({\n  watch: {\n    'foo': {\n      handler: function(val, oldVal) {},\n      options: { deep: true }\n    }\n  }\n});\n```\n\nThis could be accomplished by modifying the `register` function in `/src/instance/events.js` as follows:\n\n``` js\nfunction register (vm, action, key, handler) {\n  var type = typeof handler\n  if (type === 'function') {\n    vm[action](key, handler)\n  } else if (type === 'object' && action === '$watch') { // Line Added\n    vm[action](key, handler.handler, handler.options) // Line Added\n  } else if (type === 'string') {\n    var methods = vm.$options.methods\n    var method = methods && methods[handler]\n    if (method) {\n      vm[action](key, method)\n    } else {\n      _.warn(\n        'Unknown method: \"' + handler + '\" when ' +\n        'registering callback for ' + action +\n        ': \"' + key + '\".'\n      )\n    }\n  }\n}\n```\n\nThe special case for `action === '$watch'` is necessary, since the `$on` method doesn't support an options argument, thus making this a tad less flexible for any future watchers that may get added. However, it would work!\n",
        "title": "Watcher-Specific Options (namely `deep:true`)",
        "labels": "feature request",
        "id": 123552
    },
    {
        "body": "Would be nice to have:\n\n``` javascript\nVue.component(\"test\", {\n    \"props\": [{\n        \"name\": \"visible\"\n        \"type\": Boolean\n        \"default\": true\n    }]\n})\n```\n\nApologies if there are easy ways to implement this (i.e. not by setting manually in the constructor)\n",
        "title": "Default value for component props",
        "labels": "feature request",
        "id": 123553
    },
    {
        "body": "I know the most of callbacks can be passed as props, but in some cases we use `v-events` as a simple way to listen hook events (like ready) for dynamic components (like controlled by `v-if`).\n\nOf course, we can expose a property to accept the hook callback and call it explicitly in component, but this will couple and the component have to check the callback.\n",
        "title": "Keep v-events as a special way to pass callbacks for hooks",
        "labels": "feature request",
        "id": 123554
    },
    {
        "body": "See this fiddle:\n\nhttps://jsfiddle.net/davidkhess/vh1uzs5h/3/\n\nFor formatting purposes, it would be nice to be able to use newlines in the formatting of the attribute value.\n",
        "title": "Mustache evaluation fails on props attribute if it contains a newline",
        "labels": "feature request",
        "id": 123555
    },
    {
        "body": "It would be nice to have strings and have much less noise and typing.\n\n```\n  paramAttributes: 'cur-page'\n  paramAttributes: 'cur-page, cur-heading'\n  paramAttributes: 'curPage'   // auto-conversion from camel-case\n```\n",
        "title": "suggestion: support string as paramAttributes value",
        "labels": "feature request",
        "id": 123556
    },
    {
        "body": "Currently the syntax to not escape HTML is to use triple mustache like {{{ safeHTMLString }}}. It would be really neat to change it to be {!! variable !!} like Laravel. \n\nIt's easier to see unescaped variables and also emphasizes the potential danger. Thoughts? I'd make a pull request, but I've only found the normal delimiters in the `config.js` so far.\n",
        "title": "Use {!! safeHTMLString !!} syntax",
        "labels": "feature request",
        "id": 123557
    },
    {
        "body": "http://jsfiddle.net/4ty2v4fc/57/\n\nThe thing is `v-ref` always returns an array of items, while those indexes are synthetic and have no relation with actual data object (which has key-names vs indexes), so from parent's vm I can't surely match indexes with object's keys.\n\nMaybe in the case `v-ref` should return an object with matching key-names?\nWould be nice to get the feature.\n",
        "title": "Suggestion: v-ref with v-repeat-ing an object",
        "labels": "feature request",
        "id": 123558
    },
    {
        "body": "I understand that it's possible to communicate between parent and child components via events but it would be very convenient if vue.js supported what I'm calling _callback attributes_.  This would allow you to write HTML something like this:\n\n```\n<parent-component>\n  <child-component on-callback=\"doSomething\">\n  </child-component>\n</parent-component>\n```\n\nWith Javascript code like this:\n\n```\nvar parent = {\n  methods: {\n    doSomething: function (args) {\n      // Do something\n    }\n  }\n}\n\nvar child = {\n  cbAttributes: ['on-callback'],\n\n  ready: function () {\n    this.onCallback(/* Args */);\n  }\n}\n\n$(function () {\n  new Vue({\n    el: 'body',\n\n    components: {\n      'parent-component': parent,\n      'child-component': child,\n    }\n  }\n})\n```\n\nCurrently, I can fake this using `paramAttributes` by passing the function name as a string and then calling the function from the child like this:\n\n```\nthis.$parent[this.onCallback](/* args */);\n```\n\nbut it would be much nicer if this was explicitly supported.\n\nI've tried passing callbacks as `paramAttributes` like this:\n\n```\n<parent-component>\n  <child-component on-callback=\"{{doSomething}}\">\n  </child-component>\n</parent-component>\n```\n\nbut it does not seem to work.\n\nAlso, I want to point out that this does not couple the parent and child.\n\nI searched for similar issues but did not find one.  I apologize in advance if this is a duplicate.\n",
        "title": "Support callback parameters",
        "labels": "feature request",
        "id": 123559
    },
    {
        "body": "I am writing a component of `<table>` & `<td>`\n\nWhen Vue compile my template `<table><tbody><tr><content></content></tr></tbody></table>`\n\nAfter compiled, we saw that `<content>` tag moved outside the `<table>`\n![image](https://cloud.githubusercontent.com/assets/2500247/5915870/bbecda3c-a645-11e4-8a96-54677be1c60d.png)\n\nMy opinion is add `content` attribute as well as tag name to serve as insertion points\n![image](https://cloud.githubusercontent.com/assets/2500247/5915897/0331cef2-a646-11e4-802d-649c0e139f4f.png)\n\nOr `? _.toArray(el.querySelectorAll('content, [content]'))` at [transclude.js#L126](https://github.com/yyx990803/vue/blob/master/src/compiler/transclude.js#L126)\n\nSorry for my poor English.\n",
        "title": "<content> tag may not be enough to serve as insertion points in <table>",
        "labels": "feature request",
        "id": 123560
    },
    {
        "body": "It seems that Vue.js cannot properly parse mustache bindings start with an underscore like: {{_type}}. It works fine with Handlebars.js\n\nCould you please add support to this kind of binding?\n\ndemo: http://jsfiddle.net/maxjiang23326/oc0y33Lx/\n",
        "title": "Mustache binding doesn't work when starting with an underscore",
        "labels": "feature request",
        "id": 123561
    },
    {
        "body": "I suggest to allow frozen trees into a data model. Example:\n\n```\nfunction makeSubModel(val) {\n    return Object.freeze({\n        key1: Object.freeze({\n            key2: val\n        })\n    });\n}\nvar data = {\n    frozenSubModel: makeSubModel('init')\n}\nnew Vue({\n    // \u2026,\n    data: data\n});\ndata.frozenSubModel = makeSubModel('changed');\n```\n\nThe current version rejects the frozen model: `\"Cannot define property:__ob__, object is not extensible.\"` But frozen objects don't need to be observed.\n\n---\n\nI have several instances of Vue that share the same template. Is there a means to compile the template once?\n\nMy current code:\n\n```\nvar myTpl = '<div>\u2026</div>';\nvar vm1 = new Vue({\n    // \u2026,\n    template: myTpl\n});\nvar vm2 = new Vue({\n    // \u2026,\n    template: myTpl\n});\n```\n\nI would like to have:\n\n```\nvar compiledTpl = Vue.compile('<div>\u2026</div>');\nvar vm1 = new Vue({\n    // \u2026,\n    template: compiledTpl\n});\nvar vm2 = new Vue({\n    // \u2026,\n    template: compiledTpl\n});\n```\n",
        "title": "Frozen data models",
        "labels": "feature request",
        "id": 123562
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/fxdez9qh/](https://jsfiddle.net/fxdez9qh/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nType some text in the input field.\r\n\r\n### What is expected?\r\nThe input handler is executed and the value in the input is updated.\r\n\r\n### What is actually happening?\r\nThe input handler is executed but the first update to the model is not applied. This means the first character typed will not show up.\r\n\r\n---\r\nI found this issue: https://github.com/vuejs/vue/issues/6552 It's a few years old and it was fixed but it seems to be the same problem.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "`.once` modifier on input event prevents v-model from updating value on input element.",
        "labels": "bug",
        "id": 123563
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://github.com/TrueCarry/linktest](https://github.com/TrueCarry/linktest)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun server, open localhost:8080. Problem is in components/textWrapper.vue file. I've used some vue ssr template and removed almost everything unneeded. Same error as before.\r\n\r\n### What is expected?\r\nssr and client side versions are the same. It works if we don't use v-text on span. I changed it to v-text1, to test.\r\nNo hydration errors with v-text1\r\n![image](https://user-images.githubusercontent.com/5431520/99122979-58700280-2610-11eb-8b5c-0952d78fe951.png)\r\n\r\n\r\n### What is actually happening?\r\nServer doesn't render custom element.\r\nConsole output: \r\n![image](https://user-images.githubusercontent.com/5431520/99123015-70e01d00-2610-11eb-8196-28840adbdfc8.png)\r\nServer generated html:\r\n![image](https://user-images.githubusercontent.com/5431520/99123039-7b9ab200-2610-11eb-85e4-2fcce636ae34.png)\r\n\r\n\r\n---\r\nCan you give me few hours to respond next time you decide to close issue please? \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Strange ssr behavior in v-for loop with if-else and v-text",
        "labels": "bug",
        "id": 123564
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/kaelwd/pen/rNLNYGL?editors=1011](https://codepen.io/kaelwd/pen/rNLNYGL?editors=1011)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the console\r\n\r\n### What is expected?\r\n`\"ScopedComponent beforeMount\" true` to be logged\r\n\r\n### What is actually happening?\r\n`\"ScopedComponent beforeMount\" false`\r\n\r\n---\r\nThis was discovered in vuetify: https://github.com/vuetifyjs/vuetify/issues/11533#issuecomment-705058227\r\n\r\nThe real setup is a watcher on a computed property that depends on `$slots`. The watcher is called before mount to get an initial value, causing the computed property to be executed and return an incorrect value. \r\n\r\nMinimal example with the watcher if that helps: https://codepen.io/kaelwd/pen/vYKYWbV?editors=1010\r\n\r\nThis works as expected in vue 3: https://codepen.io/kaelwd/pen/gOMOXoB?editors=1011\r\n\r\nThe bug seems to have existed since scoped slots were introduced in v2.1, but it wasn't a problem here until v2.6 when scoped slots started being used everywhere with `v-slot`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "$scopedSlots is empty until render()",
        "labels": "bug",
        "id": 123565
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/serene-thunder-0hxw2?file=/src/components/HelloWorld.vue](https://codesandbox.io/s/serene-thunder-0hxw2?file=/src/components/HelloWorld.vue)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Click the buttons to see that the computed fields work.\r\n2. Uncomment the watcher.\r\n3. Click buttons again and notice that computed fields don't work, and the watcher is never triggered.\r\n\r\n### What is expected?\r\nComputed fields work and watcher is triggered.\r\n\r\n### What is actually happening?\r\nComputed fields don't work and watcher is never triggered.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->\r\n\r\n\r\n\r\n### Code\r\nApp.vue\r\n```vue\r\n<template>\r\n  <div id=\"app\">\r\n    <button @click=\"slotOneActive = !slotOneActive\">toggle slot</button>\r\n\r\n    <HelloWorld>\r\n      <template v-slot:one>\r\n        <span v-if=\"slotOneActive\">I am active</span>\r\n      </template>\r\n    </HelloWorld>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport HelloWorld from \"./components/HelloWorld\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    HelloWorld,\r\n  },\r\n  data() {\r\n    return {\r\n      slotOneActive: true,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  text-align: center;\r\n  margin-top: 60px;\r\n}\r\n</style>\r\n```\r\nHelloWorld.vue\r\n```vue\r\n<template>\r\n  <div>\r\n    <slot name=\"one\" />\r\n    <p><strong>computedSlotValue:</strong> {{ computedSlotValue }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"HelloWorld\",\r\n  computed: {\r\n    computedSlotValue() {\r\n      return !!this.$slots.one;\r\n    },\r\n  },\r\n  // watch: {\r\n  //   computedSlotValue() {\r\n  //     console.log(\"watch triggered\");\r\n  //   },\r\n  // },\r\n};\r\n</script>\r\n```\r\n\r\nEdit: I updated the code example to make it easier.",
        "title": "Computed fields for named slots stop working if I add watchers to them",
        "labels": "bug",
        "id": 123566
    },
    {
        "body": "### Version\r\n2.6.12\r\n\r\n### Reproduction link\r\n[https://codepen.io/jiankafei/pen/jOqZdpG](https://codepen.io/jiankafei/pen/jOqZdpG)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nClick the switch button, it will switch between two components with slots and without slots. The components without slots should not appear the slots passed to the components with slots\r\n\r\n### What is expected?\r\n\r\nShould display the fallback slot\r\n\r\n### What is actually happening?\r\n\r\nDisplays the previous slot\r\n\r\n---\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "slot is reused with v-if/v-else",
        "labels": "bug",
        "id": 123567
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/0jh1psog/](https://jsfiddle.net/0jh1psog/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the console in the provided JSFiddle\r\nor\r\nrun `Vue.config.getTagNamespace('foreignObject')`\r\n\r\n### What is expected?\r\n`Vue.config.getTagNamespace('foreignObject')` should return `'svg'`\r\n\r\n### What is actually happening?\r\nIt returns `undefined`.\r\n\r\nThis causes a warning `Unknown custom element: <foreignObject>` when testing such components using `vue-test-utils`\r\n\r\n---\r\nThis is caused by https://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/src/platforms/web/util/element.js#L29\r\nIt should be `foreignobject` with lowercase `o` here, because of the `makeMap` implementation.\r\n\r\nTo avoid such bugs in the future, even better fix:\r\nhttps://github.com/vuejs/vue/blob/6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0/src/shared/util.js#L113\r\nshould be `map[expectsLowerCase ? list[i].toLowerCase() : list[i]] = true`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Unknown custom element: <foreignObject>",
        "labels": "bug",
        "id": 123568
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n\r\nhttps://jsfiddle.net/posva/vczwh82g/2/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nIn Safari click different links to load iframes\r\n\r\n### What is expected?\r\n\r\nall iframes should load\r\n\r\n### What is actually happening?\r\n\r\nthe one rendered inside vue doesn't load\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Safari doesn't see frame inside vue app",
        "labels": "bug",
        "id": 123569
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\nThe reproduction is updated to use Vue SSR without NUXT\r\n[https://github.com/privatenumber/vue-ssr-vhtml-dyncomp-bug](https://github.com/privatenumber/vue-ssr-vhtml-dyncomp-bug)\r\n\r\n### Steps to reproduce\r\n_Dynamic.vue_\r\n```vue\r\n<template>\r\n  <component is=\"div\">\r\n    content necessary\r\n  </component>\r\n</template>\r\n```\r\n\r\n_App.vue_\r\n```vue\r\n<template>\r\n  <dynamic v-html=\"'<div>trigger hydration warning</div>'\" />\r\n</template>\r\n```\r\n\r\n### What is expected?\r\nThe expected behavior is for there to be no hydration warning when the SSR and client markup are identical.\r\n\r\n\r\n### What is actually happening?\r\nAlthough there isn't a discrepancy in rendered HTML between client and SSR, it gives warnings that there is.\r\n\r\n![warningD](https://user-images.githubusercontent.com/1075694/88136132-a28f2d00-cbb6-11ea-84db-f38d0bf3adf3.png)\r\n![warningE](https://user-images.githubusercontent.com/1075694/88136136-a327c380-cbb6-11ea-81e6-b3830645de60.png)\r\n\r\n### Work around\r\nI used a [render function](https://vuejs.org/v2/guide/render-function.html) instead of a dynamic-component:\r\n```\r\nrender(h) {\r\n    return h(this.component, this.$slots.default);\r\n}\r\n```\r\n\r\n### Other info\r\nPrevious issue: https://github.com/vuejs/vue/issues/11532\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue SSR v-html on dynamic-component hydration warning",
        "labels": "bug",
        "id": 123570
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/kubotafumiya/pen/qBOwEOV](https://codepen.io/kubotafumiya/pen/qBOwEOV)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Set the el option to an element that contains a textarea (or pre) with a newline at the beginning, and  create a Vue instance.\r\n\r\n\r\n```html\r\n<div id=\"app\">\r\n<textarea>\r\n\r\n\r\nThree line breaks are ignored.\r\n</textarea>\r\n</div>\r\n```\r\n\r\n```javascript\r\nnew Vue({\r\n  el: '#app',\r\n});\r\n```\r\n\r\n### What is expected?\r\nThe line breaks are removed.\r\n\r\n\r\n### What is actually happening?\r\nLine breaks are not deleted.\r\n\r\n---\r\nhttps://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\r\n\r\nI think it's okay for a single line break to be ignored according to this specification.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Line breaks in textarea are excessively removed.",
        "labels": "bug",
        "id": 123571
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/AleksandrasNovikovas/w042x1c8/](https://jsfiddle.net/AleksandrasNovikovas/w042x1c8/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun provided fiddle. There are three svg boxes with foreignObject:\r\n1. contains simple html tags\r\n2. contains simple vue component\r\n3. contains complex (with slot) vue component\r\n\r\n\r\n### What is expected?\r\nAll three boxes should show link and input elements\r\n\r\n### What is actually happening?\r\nThird box does not show link and input elements.\r\n\r\n---\r\nWhile inspecting DOM (in chrome or in firefox) you will find that elements of second box and third box are identical.\r\nProblem is their types: (in chome dev console select element and tab properties)\r\nselect input element from second box and you will find following list: Object->EventTarget->Node->Element->HTMLElement->HTMLInputElement->input;\r\nselect input element from third box and you will find following list: Object->EventTarget->Node->Element->SVGElement->input;\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Components slots are not rendered inside svg foreignObject",
        "labels": "bug",
        "id": 123572
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://github.com/tuomassalo/vue-ssr-v-html-bug](https://github.com/tuomassalo/vue-ssr-v-html-bug)\r\n\r\n\r\n### Steps to reproduce\r\n- clone the repo\r\n- run `npm run dev`\r\n- open `localhost:8080`\r\n- observe Console log.\r\n\r\n\r\n### What is expected?\r\nI expect SSR to render \"bar: Bar!\", as the client-side does.\r\n\r\nOr, I'd like to get an eslint warning that this is a bad idea (if that is the problem).\r\n\r\n### What is actually happening?\r\n`App.vue` fails to render `bar-component` on the server. Instead, it outputs `<bar-component></bar-component>`, and the dev server gives the warning \"The client-side rendered virtual DOM tree is not matching server-rendered content.\"\r\n\r\n---\r\n\r\nThe key part of `App.vue` is this:\r\n\r\n```\r\n<div v-if=\"foo\" v-html=\"'Foo.'\"/>\r\n<div v-else>\r\n  bar: <bar-component/>\r\n</div>\r\n```\r\n\r\nMy original component was naturally longer. I ran into this problem after changing the `v-if` line from something like:\r\n\r\n    <div v-if=\"foo\">{{ foo }}</div>\r\n\r\nTo:\r\n\r\n    <div v-if=\"foo\" v-html=\"foo\"/>\r\n\r\n... which *seemed* innocuous to me.\r\n\r\nFinally, apologies for posting a very possible duplicate.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR fails to render component inside v-else of a v-if with v-html",
        "labels": "bug",
        "id": 123573
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://github.com/Tibon4ik/vue-server-renderer-inherit-attrs](https://github.com/Tibon4ik/vue-server-renderer-inherit-attrs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClone the repo\r\n* $ npm install\r\n* $ npm run test\r\n\r\n\r\nOr:\r\n```javascript\r\n// Step 1: Create a Vue instance\r\nconst Vue = require(\"vue\");\r\n\r\nconst AppCard = {\r\n  template: `<div>appCardProp: {{ appCardProp }}</div>`,\r\n  props: {\r\n    appCardProp: {}\r\n  }\r\n}\r\n\r\nconst PlayerCard = {\r\n  template: `<AppCard v-bind=\"$attrs\" />`,\r\n  components: { AppCard },\r\n  inheritAttrs: false\r\n}\r\n\r\nconst app = new Vue({\r\n  template: `\r\n  <div>\r\n    <PlayerCard app-card-prop=\"appCardProp value\" />\r\n  </div>\r\n  `,\r\n  components: { PlayerCard }\r\n});\r\n\r\n// Step 2: Create a renderer\r\nconst renderer = require(\"vue-server-renderer\").createRenderer();\r\n\r\n// Step 3: Render the Vue instance to HTML\r\nrenderer.renderToString(app, (err, html) => {\r\n  if (err) throw err;\r\n  console.log(html);\r\n  // <div data-server-rendered=\"true\"><div app-card-prop=\"appCardProp value\">appCardProp: appCardProp value</div></div>\r\n  // Html attribute \"app-card-prop\" must be missing\r\n});\r\n```\r\n\r\n### What is expected?\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div>\r\n    appCardProp: appCardProp value\r\n  </div>\r\n</div>\r\n```\r\n\r\n### What is actually happening?\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div app-card-prop=\"appCardProp value\">\r\n    appCardProp: appCardProp value\r\n  </div>\r\n</div>\r\n```\r\n\r\n---\r\nThis bug happens when i use component with inheritAttrs: false, which use another component on top level of section or render function.\r\n\r\nI want to pass props to inner component with v-bind=\"$attrs\" and inheritAttrs: false. It passes props inside but still adds attributes to html element.\r\n\r\nI noticed that this bug doesn't occur in next cases:\r\n* if i set inheritAttrs: false on inner component (AppCard of code section).\r\n* if top level of \"template\" or render function is not a component (e.g. simple \"div\" or \"span\").\r\n\r\nRelated: https://github.com/nuxt/nuxt.js/issues/7195\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: inheritAttrs false doesn't work properly",
        "labels": "bug",
        "id": 123574
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/b71adnym/2/](https://jsfiddle.net/b71adnym/2/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nNest a component with an inline-template that has a ref in a v-for.\r\n\r\n\r\n### What is expected?\r\ncomponent.$ref.ref should point to the respective element.\r\n\r\n### What is actually happening?\r\ncomponent.$ref.ref is a singleton array with the element reference.\r\n\r\n\r\n---\r\ncheckInFor loops over the element ancestors up to the document root, so it believes that the ref is in a loop, but it actually isn't.\r\nThe check should stop at the component root.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "\"refInFor\" searches upwards of inline-template boundary",
        "labels": "bug",
        "id": 123575
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/embed/heuristic-brown-u7rvw?fontsize=14&hidenavigation=1&theme=dark](https://codesandbox.io/embed/heuristic-brown-u7rvw?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick the tick box.\r\n\r\n### What is expected?\r\nIt should say \"BLUE BOX\" with a blue background colour.\r\n\r\n### What is actually happening?\r\nIt says \"BLUE BOX\" with no background colour.\r\n\r\n---\r\nThe issue stems from the data-v-* attribute not being re-set for the blue_block div when it is swapped to. It is still using the data-v-* attribute of the child div in the functional component. Thus the CSS class styling does not apply. \r\n\r\n\r\nhttps://imgur.com/a/gukDePJ\r\n\r\n\r\nSwapping from a functional component to something else is useful. E.g. When showing a simple loading bar component before swapping to a more complex component.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Swapping from functional to non-functional component using v-if does not change v-data-* attribute.",
        "labels": "bug",
        "id": 123576
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/deqwin/pen/wvaMxoO](https://codepen.io/deqwin/pen/wvaMxoO)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nopen the reproduction above and you will see a red vue warning in the console\r\n\r\n### What is expected?\r\na successful hydration\r\n\r\n### What is actually happening?\r\nthe hydration fails and the app re-renders absolutely\r\n\r\n---\r\nthis looks like the problem caused by the empty text node (src/core/vdom/patch.js line:646)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Hydration fails when write like \"<div><span>123</span>{{value}}</div>\" in the template and the data \"value\" is a empty string",
        "labels": "bug",
        "id": 123577
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/y9kmcbg6/](https://jsfiddle.net/y9kmcbg6/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. JSFiddle will render both elements.\r\n2. After 3s, it will toggle off\r\n3. After 3s, it will toggle on\r\n4. To see it happen again, rerun the jsfiddle\r\n\r\n### What is expected?\r\nAt step 3, the bottom slot content should re-appear when ToggleComponent toggles back\r\n\r\n### What is actually happening?\r\nThe bottom slot never re-appears\r\n\r\n---\r\nSeems to be related to the `v-if` on line 21. I'm doing this b/c it's useful to have an optional slot, but I don't want an extra div to appear when the slot isn't used (for layout reasons). I'm fairly new to vue, so I don't know if there's a different recommended way to do this.\r\n\r\nNot documented in the example, but if ParentComponent updates, the slot content will re-appear\r\n\r\nexample code included here for perusal:\r\n\r\n```vue\r\nconst ToggleComponent = {\r\n  data() {\r\n    return {\r\n      toggleEl: true,\r\n    };\r\n  },\r\n\r\n  created() {\r\n    setTimeout(() => this.toggleEl = false, 3000);\r\n    setTimeout(() => this.toggleEl = true, 6000);\r\n  },\r\n  render(h) {\r\n    return this.toggleEl ? h('div', this.$slots.default) : null\r\n  }\r\n};\r\n\r\nconst SlotComponent = {\r\n  template: `\r\n    <div>\r\n      <slot></slot>\r\n      <div v-if=\"$slots.other\">\r\n        <slot name=\"other\"></slot>\r\n      </div>\r\n    </div>\r\n  `\r\n}\r\n\r\nconst ParentComponent = {\r\n  template: `\r\n    <ToggleComponent>\r\n      <SlotComponent>\r\n        <template v-slot:default>\r\n          I should have an element below me\r\n        </template>\r\n        <template v-slot:other>\r\n          I am the element below you\r\n        </template>\r\n      </SlotComponent>\r\n    </ToggleComponent>\r\n  `,\r\n\r\n  components: {\r\n    ToggleComponent,\r\n    SlotComponent\r\n  },\r\n}\r\n\r\nvar demo = new Vue({\r\n  el: '#demo',\r\n  template: `\r\n    <ParentComponent/>\r\n  `,\r\n\r\n  components: {\r\n    ParentComponent\r\n  },\r\n});\r\n\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Slot wrapped in `v-if` disappears after re-render",
        "labels": "bug",
        "id": 123578
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://gist.github.com/aimozg/c073eea5a55062e3dcd8f887a8567807](https://gist.github.com/aimozg/c073eea5a55062e3dcd8f887a8567807)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun example.js in Node.\r\n\r\nAlternative steps/Detailed explanation:\r\n1. Setup Vue template compiler with `whitespace: 'condense'`. (it is default for vue-cli).\r\n2. Render template with `&nbsp;` entity, e.g. `<p>a&nbsp;b</p>`\r\n3. Inspect template for actual non-breaking space character\r\n\r\n### What is expected?\r\n`&nbsp;` entity rendered as non-breaking space character; example.js output should contain\r\n```\r\n---- whitespace: condense\r\n// code\r\nNBSP FOUND\r\n```\r\n\r\n### What is actually happening?\r\n`&nbsp;` entity is rendered as plain space, example.js output contains\r\n```\r\n---- whitespace: condense\r\n// code\r\nNBSP NOT FOUND\r\n```\r\n\r\n---\r\nThe whitespace is stripped by this compiler code:\r\n\r\n```js\r\nif (!inPre && whitespaceOption === 'condense') {\r\n  // condense consecutive whitespaces into single space\r\n  text = text.replace(whitespaceRE, ' ')\r\n}\r\n```\r\n\r\nand `\"&nbsp;\"`s are replaced by `\"\\xA0\"`s with entity decoder earlier.\r\n\r\nRelated issues is https://github.com/vuejs/vue/issues/10485\r\n\r\n**Suggestion**:\r\n\r\nNarrower whitespaceRE regexp, like `/[ \\t\\r\\n]+/g`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "With `whitespace:condense` all &nbsps;, even meaningful, are converted to spaces",
        "labels": "bug",
        "id": 123579
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/practical-shaw-br23c](https://codesandbox.io/s/practical-shaw-br23c)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the codesandbox and you'll see a warning like `[Vue warn]: Duplicate keys detected: 'constructor'. This may cause an update error.`\r\n\r\nClick the \"swap\" button TWICE to swap the list in the data, triggering the error.\r\n\r\nIf the literal string \"constructor\" in the first list is changed for any other string, there are no errors or warnings.\r\n\r\n### What is expected?\r\nThe list should swap between the \"first\" and \"second\" list\r\n\r\n### What is actually happening?\r\n\"TypeError: Cannot read property 'key' of undefined\"\r\n\r\n---\r\n:( this was a hard bug to track down.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "the string constructor cannot be used as a `key`",
        "labels": "bug",
        "id": 123580
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/yamelkaya/pen/KKwvdrY](https://codepen.io/yamelkaya/pen/KKwvdrY)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen codepen example. There are 3 components `test-x` on the page which set text color and background. Each label tells about text color and background.\r\n\r\n\r\nChrome: everything works as expected \r\n\r\nEdge 18: 1st and 3rd labels have incorrect color\r\n\r\n### What is expected?\r\n1: red text on yellow bg\r\n2: red on gray\r\n3: black on yellow \r\n\r\n### What is actually happening?\r\n1: black on gray\r\n2: red on gray\r\n3: black on gray\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Problem with v-bind:class in Microsoft Edge for components",
        "labels": "bug",
        "id": 123581
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/xiangyuecn/pen/eYmmPNP](https://codepen.io/xiangyuecn/pen/eYmmPNP)\r\n\r\nmoved from https://github.com/vuejs/vue/issues/10892\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nThe repro adds entries to an array, causing a re render that. The template intentionally displays the elapsed time to see which v-once work and which do not\r\n\r\n### What is expected?\r\n\r\nAll v-once to never render again\r\n\r\n### What is actually happening?\r\n\r\nTest 3 first template with a `v-once` re renders all the time. **Workaround** is to append an empty `span`: `<template v-once>[{{ getTime() }}] {{ obj.msg }}<span/></template>`\r\nTest 5: the second template with `v-once` still rerenders. **Workaround** is to use a different tag like a span or use the `v-once` on the parent.\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-once on template not working inside a v-for in two cases",
        "labels": "bug",
        "id": 123582
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/30115/](https://jsfiddle.net/50wL7mdz/30115/)\r\n\r\n### Steps to reproduce\r\nAdd a modifier to one of the event listeners. e.g. @emission.once\r\n\r\n### What is expected?\r\nThat all arguments will be passed to the function\r\n\r\n### What is actually happening?\r\nOnly the first argument is passed\r\n\r\n---\r\nMy guess is that it lies in the template compiler which creates a function($event){...}  and calling the handler with $event instead of ...arguments?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Multiple arguments in custom event with a modifier are not passed to handler",
        "labels": "bug",
        "id": 123583
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/vuejs/vue/blob/dev/dist/vue.esm.browser.js#L3296](https://github.com/vuejs/vue/blob/dev/dist/vue.esm.browser.js#L3296)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nSee the link https://github.com/vuejs/vue/blob/dev/dist/vue.esm.browser.js#L3296\r\n\r\n### What is expected?\r\nfunction createComponentInstanceForVnode (\r\n  vnode, // we know it's MountedComponentVNode but flow doesn't\r\n  parent // activeInstance in lifecycle state\r\n) {\r\n...\r\n}\r\n\r\n### What is actually happening?\r\nfunction createComponentInstanceForVnode (\r\n  vnode, // we know it's MountedComponentVNode but flow doesn't\r\n  parent, // activeInstance in lifecycle state\r\n) {\r\n...\r\n}\r\n\r\n---\r\nI've got an error when trying to add the vue.esm.browser.js file into a bundle using systemjs-builder\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Unexpected comma in the function declaration",
        "labels": "bug",
        "id": 123584
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/codesandbox-nuxt-vdcv8](https://codesandbox.io/s/codesandbox-nuxt-vdcv8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nView page source\r\n\r\n### What is expected?\r\n```html\r\n<textarea id=\"input-62\" rows=\"5\"></textarea>\r\n```\r\n\r\n### What is actually happening?\r\n```html\r\n<textarea id=\"input-62\" rows=\"5\">null</textarea>\r\n```\r\n\r\n---\r\nSimilar to #9231\r\n\r\nRepro in `vue/test/ssr/ssr-string.spec.js`:\r\n```js\r\n  it('falsy domProps value', done => {\r\n    renderVmWithOptions({\r\n      render (h) {\r\n        return h('div', [\r\n          h('textarea', {\r\n            domProps: {\r\n              value: null\r\n            }\r\n          })\r\n        ])\r\n      }\r\n    }, result => {\r\n      expect(result).toContain(\r\n        '<div data-server-rendered=\"true\"><textarea></textarea></div>'\r\n      )\r\n      done()\r\n    })\r\n  })\r\n```\r\n\r\nRelevant vuetify code:\r\nhttps://github.com/vuetifyjs/vuetify/blob/243a7c34a1c58dff3753ad35dded13ba5002c8eb/packages/vuetify/src/components/VTextarea/VTextarea.ts#L86-L92\r\nhttps://github.com/vuetifyjs/vuetify/blob/243a7c34a1c58dff3753ad35dded13ba5002c8eb/packages/vuetify/src/components/VTextField/VTextField.ts#L357-L361\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR: textarea domProps keeps falsy values",
        "labels": "bug",
        "id": 123585
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, SSR directives are not applied to used (sub-)components but only to HTML-tags and elements.\r\n\r\n### Reproduction\r\n\r\n```js\r\n// Step 1: Create a Vue instance\r\nconst Vue = require(\"vue\");\r\n\r\nconst Test = {\r\n  template: `<div>This should be red</div>`\r\n}\r\n\r\nconst app = new Vue({\r\n  template: `\r\n  <div>\r\n    <Test v-make-red/>\r\n    <div v-make-red>This is red</div>\r\n  </div>\r\n  `,\r\n  components: {\r\n    Test\r\n  }\r\n});\r\n\r\nconst makeRed = (node, dir) => {\r\n  const style = node.data.style || (node.data.style = {});\r\n  if (Array.isArray(style)) {\r\n    style.push({ backgroundColor: \"red\" });\r\n  } else {\r\n    style.backgroundColor = \"red\";\r\n  }\r\n};\r\n\r\n// Step 2: Create a renderer\r\nconst renderer = require(\"vue-server-renderer\").createRenderer({\r\n  directives: {\r\n    makeRed\r\n  }\r\n});\r\n\r\n// Step 3: Render the Vue instance to HTML\r\nrenderer.renderToString(app, (err, html) => {\r\n  if (err) throw err;\r\n  console.log(html);\r\n  // <div data-server-rendered=\"true\"><div>This should be red</div> <div style=\"background-color:red;\">This is red</div></div>\r\n  // But should include red background-color style for the first div as well\r\n});\r\n```\r\n\r\nRelated: https://github.com/nuxt/nuxt.js/issues/6575\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: directive not applied to imported component",
        "labels": "bug",
        "id": 123586
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/zncxud6q/](https://jsfiddle.net/zncxud6q/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse test1, test2, or test3 buttons to see transition without stutter.\r\nUse test4, test5, or test6 buttons to see transition with stutter.\r\n\r\n### What is expected?\r\nNo stutter\r\n\r\n### What is actually happening?\r\nWhile the DOM is updating, the transition restarts, even though the portion updating isn't a child of anything transitioning\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "transition-group has stutter when component updated elsewhere",
        "labels": "bug",
        "id": 123587
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/embed/vue-template-ysl83](https://codesandbox.io/embed/vue-template-ysl83)\r\n\r\n### Steps to reproduce\r\nJust click the link and you see the error and start editing.\r\nGo to the second of the component and you see a red line (line no 24?)\r\nIt says that the string literal is not correct, but its because it loads just a piece of it.\r\n\r\n### What is expected?\r\nNo compilation error\r\n\r\n### What is actually happening?\r\nA compilation error\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Error compiling long string litteral  (many + on many lines)",
        "labels": "bug",
        "id": 123588
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/4fyrj95L/](https://jsfiddle.net/4fyrj95L/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nset model binded to select element and the array that iterated the option list at the same time\r\n\r\nmake sure the new model value do not match any of the new options\r\n\r\nthe model will be set to `undefined`\r\n\r\n### What is expected?\r\n\r\nmodel value to be set to `1`\r\n\r\n### What is actually happening?\r\nmodel's value set to `undefined`\r\n\r\n---\r\nThis bug only appears when model and the options changed at the same and the new model value does not match any option, other situations behaves correctly as far as I tested.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "when <select> model and the option list changed at the same time, model may incorrectly set to `undefined`",
        "labels": "bug",
        "id": 123589
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/oguimbal/vuebug](https://github.com/oguimbal/vuebug)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```\r\ngit clone git@github.com:oguimbal/vuebug.git\r\nnpm i\r\nnpm start\r\n```\r\n\r\nWait a couple of seconds, and your compilation process will be frozen.\r\n\r\nIf you attach a debugger to the node process, you will see the infinite loop in `generateCodeFrame()` method of vue-template-compiler:\r\n\r\n![bug](https://raw.githubusercontent.com/oguimbal/vuebug/master/bug.png)\r\n\r\n### What is expected?\r\nI would expect the compiler not to freeze\r\n\r\n### What is actually happening?\r\nThe compiler is freezing\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Infinite loop in vue-template-compiler",
        "labels": "bug",
        "id": 123590
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\nhttps://codesandbox.io/s/vue-template-7hwty\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Create component with render function which can render another component after time.\r\n2. Rendering component after promise resolution/timeout is causing render twice and change of `$attrs` if child component has any prop with key equal to attr.\r\n3. Comment prop in targetComponent and reload page.\r\n4. All attrs are fine again.\r\n\r\n### What is expected?\r\nRender function is called once and `$attrs` of component are not changed.\r\n\r\n### What is actually happening?\r\nRender is called twice and `attrs` which has key same as `props` of child component are removed.\r\n\r\n---\r\nI created on my project custom loader component which has to handle loading of lazy loaded components and networking errors, because I can't use https://vuejs.org/v2/guide/components-dynamic-async.html#Handling-Loading-State in my case. This bug can be ommited by not adding downloaded component to reactivity (outside data as variable).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Rendering async loaded component is causing attrs change.",
        "labels": "bug",
        "id": 123591
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\n[https://jsfiddle.net/zs5dan7x/](https://jsfiddle.net/zs5dan7x/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- pass a Symbol as the value of a component prop which expects another type\r\n\r\n### What is expected?\r\nthe console should show the validation error message\r\n\r\n### What is actually happening?\r\nthe prop validator tries to build an validation error message, it fails with :\r\n\r\n    TypeError: Cannot convert a Symbol value to a string\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "prop validator fails to generate validation error message when using Symbols",
        "labels": "bug",
        "id": 123592
    },
    {
        "body": "### Version\r\n4.0.0-rc.1\r\n\r\n### Reproduction link\r\n[https://github.com/tobyzerner/vue-cli-nbsp-bug](https://github.com/tobyzerner/vue-cli-nbsp-bug)\r\n\r\n\r\n\r\n\r\n\r\n### Environment info\r\n```\r\nEnvironment Info:\r\n  System:\r\n    OS: macOS 10.14.6\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\r\n  Binaries:\r\n    Node: 10.15.3 - /usr/local/bin/node\r\n    Yarn: 1.17.3 - ~/.npm-global/bin/yarn\r\n    npm: 6.11.3 - ~/.npm-global/bin/npm\r\n  Browsers:\r\n    Chrome: 76.0.3809.132\r\n    Firefox: 68.0.2\r\n    Safari: 12.1.2\r\n  npmPackages:\r\n    @vue/babel-helper-vue-jsx-merge-props:  1.0.0\r\n    @vue/babel-plugin-transform-vue-jsx:  1.0.0\r\n    @vue/babel-preset-app:  4.0.0-rc.1\r\n    @vue/babel-preset-jsx:  1.1.0\r\n    @vue/babel-sugar-functional-vue:  1.0.0\r\n    @vue/babel-sugar-inject-h:  1.0.0\r\n    @vue/babel-sugar-v-model:  1.0.0\r\n    @vue/babel-sugar-v-on:  1.1.0\r\n    @vue/cli-overlay:  4.0.0-rc.1\r\n    @vue/cli-plugin-babel: ^4.0.0-rc.1 => 4.0.0-rc.1\r\n    @vue/cli-plugin-eslint: ^4.0.0-rc.1 => 4.0.0-rc.1\r\n    @vue/cli-service: ^4.0.0-rc.1 => 4.0.0-rc.1\r\n    @vue/cli-shared-utils:  4.0.0-rc.1\r\n    @vue/component-compiler-utils:  3.0.0\r\n    @vue/preload-webpack-plugin:  1.1.1\r\n    @vue/web-component-wrapper:  1.2.0\r\n    eslint-plugin-vue: ^5.0.0 => 5.2.3\r\n    vue: ^2.6.10 => 2.6.10\r\n    vue-eslint-parser:  5.0.0\r\n    vue-hot-reload-api:  2.3.3\r\n    vue-loader:  15.7.1\r\n    vue-style-loader:  4.1.2\r\n    vue-template-compiler: ^2.6.10 => 2.6.10\r\n    vue-template-es2015-compiler:  1.9.1\r\n  npmGlobalPackages:\r\n    @vue/cli: 4.0.0-rc.1\r\n```\r\n\r\n\r\n### Steps to reproduce\r\nClone the repo, `npm install && npm run serve`\r\n\r\n### What is expected?\r\nThe template contains a span containing a `&nbsp;` character. This span has a red background. Thus you should see a small red box on the page.\r\n\r\n### What is actually happening?\r\nThe `&nbsp;` in the template is being ignored and converted into a normal space, which means the span element is not displayed.\r\n\r\n---\r\nI cannot replicate this bug in a plain Vue jsfiddle, nor a project using vue-loader without vue-cli. Thus I think something in vue-cli may be the culprit rather than vue-template-compiler or Vue itself.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "With `whitespace: 'condense'`, elements contain only &nbsp; and spaces are condensed into empty tags",
        "labels": "bug",
        "id": 123593
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Minimal reproduction\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <script src=\"https://unpkg.com/vue\"></script>\r\n\r\n    <div id=\"app\">\r\n      <base-link>Link</base-link>\r\n    </div>\r\n\r\n    <button id=\"action\">Load</button>\r\n\r\n    <script>\r\n      let vm\r\n      const button = document.getElementById('action')\r\n      button.addEventListener('click', () => {\r\n        if (vm) {\r\n          vm.$destroy()\r\n          vm = null\r\n          button.textContent = 'Load'\r\n        } else {\r\n          vm = new Vue({\r\n            el: '#app',\r\n            components: {\r\n              BaseLink: {\r\n                template: `<a href=\"#\" @click=\"onClick\"><slot /></a>`,\r\n                methods: {\r\n                  onClick(evt) {\r\n                    evt.preventDefault()\r\n                    console.log('clicked')\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          })\r\n          button.textContent = 'Destroy'\r\n        }\r\n      })\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n- Load the app by clicking the button and take a heap snapshot\r\n- Load/unload the app multiple times by clicking the button\r\n- End in loaded stat and take a heap snapshot\r\n- Search `Vue` in the memory snapshot viewer\r\n\r\nI've personally tested this in Chrome.\r\n\r\n### What is expected?\r\n\r\nVue retained size should not increase\r\n\r\n![Screen Shot 2019-09-06 at 09 42 58](https://user-images.githubusercontent.com/664177/64410231-de96cd80-d08a-11e9-968c-fee7ae1815a7.png)\r\n![Screen Shot 2019-09-06 at 09 43 03](https://user-images.githubusercontent.com/664177/64410232-de96cd80-d08a-11e9-85d8-5ee29bc0818e.png)\r\n\r\n### What is actually happening?\r\n\r\nVue retained size increases\r\n\r\n---\r\n**Background:** I'm using Vue and Turbolinks together in a project where the backend serves HTML with Vue templates inlined. This means I have to create and destroy Vue instances when navigating between pages.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "VueComponent instances retained after calling vm.$destroy",
        "labels": "bug",
        "id": 123594
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/keegan_openbay/nhvemx32/](https://jsfiddle.net/keegan_openbay/nhvemx32/) (be aware that JSFiddle does not show TypeScript compiler errors)\r\n\r\n### Steps to reproduce\r\n- use TypeScript >= 3.6.1-beta (currently stable at 3.6.2)\r\n- have at least one prop\r\n- correctly type all your methods\r\n- use a non-string `data` property in your component options\r\n\r\n### What is expected?\r\nNormal behavior; the `data` property is correctly typed and found on the instance.\r\n\r\n### What is actually happening?\r\nErrors arise because:\r\n\r\n- in `methods`, the data properties are not found on the component type.\r\n- in `watch`, the data properties are typed `string | WatchOptionsWithHandler<any> | WatchHandler<any>`.\r\n- in `computed`, the data properties are typed `(() => any) | ComputedOptions<any>`.\r\n\r\n---\r\n<img width=\"517\" alt=\"Screen Shot 2019-08-29 at 6 50 52 PM\" src=\"https://user-images.githubusercontent.com/18669659/63982476-aee73480-ca90-11e9-9231-44bf8c0aa9f7.png\">\r\n<img width=\"565\" alt=\"Screen Shot 2019-08-29 at 7 00 23 PM\" src=\"https://user-images.githubusercontent.com/18669659/63982477-aee73480-ca90-11e9-9593-b0d11eb1007d.png\">\r\n<img width=\"528\" alt=\"Screen Shot 2019-08-29 at 7 10 17 PM\" src=\"https://user-images.githubusercontent.com/18669659/63982478-aee73480-ca90-11e9-94c2-ee798f972fae.png\">\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Data properties not found and/or incorrectly typed in TypeScript 3.6.2",
        "labels": "bug",
        "id": 123595
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\n- Functional components: [https://github.com/sin1ght/test](https://github.com/sin1ght/test)\r\n- Regular components and slots: https://codesandbox.io/embed/vue-template-3pnsx\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nAfter npm run serve, click the toggle button and find that child has no style.\r\n\r\nChild and child2 components are reused, child's data-v-* disappears, causing the style to disappear\r\n\r\n### What is expected?\r\n\r\nChild should have a black background scope style\r\n\r\n### What is actually happening?\r\n\r\nChild without style\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Scoped CSS attribute is reused or discarded when switching between components with scoped CSS",
        "labels": "bug",
        "id": 123596
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/vue-ssr-nested-async-components-repro-script-ozze7](https://codesandbox.io/s/vue-ssr-nested-async-components-repro-script-ozze7)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nWhen the codesandbox starts up, it should run the ```npm start``` script. If it doesn't, open a bash terminal and run ```npm start``` to see the HTML generated from SSR. You can also take a look at the components in the ```src``` folder to see how they are configured.\r\n\r\n### What is expected?\r\nExpected the HTML for the nested async component (called \"SomeComponent\") to be rendered during SSR:\r\n\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div class=\"Grid\">\r\n    <div class=\"Grid__left\">Left\r\n      <div class=\"SomeComponent\">Somecomponent with value: first</div>\r\n    </div>\r\n    <div class=\"Grid__right\">Right\r\n      <div class=\"SomeComponent\">Somecomponent with value: second</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n### What is actually happening?\r\nThe HTML for the nested async component (called \"SomeComponent\") is not rendered during SSR. Only the HTML for the outer async component (called \"Grid\" ) is rendered:\r\n\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div class=\"Grid\">\r\n    <div class=\"Grid__left\">Left\r\n    </div>\r\n    <div class=\"Grid__right\">Right\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n---\r\nI have an App that is composed of many async components. Some of these components have named slots. I was trying to build a render function that will accept a config object to render these components in various setups (for example, an async component set to a named slot of another async component). I noticed that if I nest async components within another, the HTML for the async component does not render during SSR. The codesandbox is simplified scenario of this\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Nested async components passed as slots are not rendered in SSR",
        "labels": "bug",
        "id": 123597
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/vue-template-j1w3r](https://codesandbox.io/s/vue-template-j1w3r)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn my example change the value by typing in the input field.\r\nIn the working example both values change.\r\nIn the not working example only the nested value changes.\r\nThe only difference is the wrapping `<template>` node\r\n\r\n### What is expected?\r\nscoped slot params (controllerSlotData) should be reactive in both cases\r\n\r\n### What is actually happening?\r\nscoped slot params (controllerSlotData) is not reative\r\n\r\n---\r\nThe problem exists only when combining v-slot on component itself in combination with v-if/v-else\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "nested v-slot is not reactive when using abbreviated syntax (v-slot on component itself) combined with an v-if/v-else",
        "labels": "bug",
        "id": 123598
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/zrh122/scg6eq1t/](https://jsfiddle.net/zrh122/scg6eq1t/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. open the reproduction link\r\n2. look at the rendered result\r\n\r\n### What is expected?\r\n```js\r\na: a\r\nb: b\r\n```\r\n\r\n### What is actually happening?\r\n```js\r\na:\r\nb: b\r\n```\r\n\r\n---\r\nThis is an english version of issue #10165.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "dynamic v-slot maybe overwite when used together with v-for on same element",
        "labels": "bug",
        "id": 123599
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/maunier/nuxt-learning](https://github.com/maunier/nuxt-learning)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nnpm install\r\nnpm run dev\r\nhttp://127.0.0.1:8080/\r\n\r\n### What is expected?\r\ni expect the div is like this:\r\n```\r\n<div text=\"isClient\">isClient</div>\r\n```\r\n\r\n### What is actually happening?\r\nbut now it is:\r\n```\r\n<div text=\"isServer\">isClient</div>\r\n```\r\n\r\n---\r\nit is not Nuxt's issue, I have tested in my own vue-ssr server without Nuxt, the problem is exsist still.  but the that project is not on the github, so i paste the nuxt project's link here\r\n\r\nthe core code is like this:\r\n```\r\n<div :text=\"text\">{{ text }}</div>\r\n```\r\n```\r\ndata () {\r\n      return {\r\n        text: ''\r\n      }\r\n    },\r\n\r\n    created () {\r\n      this.text = Vue.prototype.$isServer ? 'isServer' : 'isClient'\r\n    },\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-bind not update dom in client side when data in client side is different from the server side",
        "labels": "bug",
        "id": 123600
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/kk445knpx3](https://codesandbox.io/s/kk445knpx3)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn the `Child.vue` we have a slot with a default slot content. In the `Parent.vue` we override the default content of the child. \r\n\r\n### What is expected?\r\nIMO the content of the slot in child component should not be evaluated since the content provided from the parent will be used.\r\n\r\n### What is actually happening?\r\nThe content of the parent it renders which is what I expect.\r\n\r\nThe default content of the `Child.vue` it's evaluated even if it not renders. That's why you see in the console: `Cannot read property 'length' of null`\r\n\r\n---\r\nMaybe that's not a bug and instead it's the intentional behavior, but it doesn't make sense to me, to evaluate something that will not render.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Default slot content should not be evaluated when the parent is providing it",
        "labels": "bug",
        "id": 123601
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/mybeta/1dfwsazn/](https://jsfiddle.net/mybeta/1dfwsazn/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nWhen I use DOM Template Parsing Caveats to add a component (e.g. `<tr is=\"custom-row\">` ) I can't use scoped slots (slotProps) without receiving a warning in the console. I would like to use it this way:\r\n```html\r\n<tr is=\"custom-row\" v-slot=\"slotProps\">\r\n    slotProps: {{slotProps.test}}\r\n</tr>\r\n```\r\n\r\n### What is expected?\r\nNo warning.\r\n\r\n### What is actually happening?\r\nI get the following warning in the console. \r\n>```\r\n>[Vue warn]: Error compiling template:\r\n>v-slot can only be used on components or <template>.\r\n>```\r\n\r\nThe rest looks like it works as expected.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Scoped Slot warns when used inside of dynamic component on regular element",
        "labels": "bug",
        "id": 123602
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/fp1omdaw/1/](https://jsfiddle.net/fp1omdaw/1/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn a v-pre tag or child, use an attribute listed under the `isBooleanAttr` list in `src\\platforms\\web\\util\\attrs.js`\r\n\r\n### What is expected?\r\nThe attribute value is unchanged\r\n\r\n### What is actually happening?\r\nThe attribute value is changed, e.g. `open` has the value to set to `open`\r\n\r\n---\r\nWhen working with MathML, we need to use the `open` attribute\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Attributes listed under isBooleanAttr are altered under v-pre attributed tags",
        "labels": "bug",
        "id": 123603
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/action-hong/pen/eaKmOy](https://codepen.io/action-hong/pen/eaKmOy)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. click \"show/hide button\" to hide button \"add 1\"\r\n2. click \"show/hide button\" to show button \"add 1\"\r\n3. click \"add 1\"\r\n\r\n### What is expected?\r\nRepeat step 1 and step 2, Click the \"add 1\" to add 1 to the number\r\n\r\n### What is actually happening?\r\nRepeat step 1 and step 2 , Click the \"add 1\" to add n(repeat times) to the number\r\n\r\n---\r\n5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "bug about keep-alive and @click.native caused repeated attach event handler?",
        "labels": "bug",
        "id": 123604
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/ebgj6fra/2/](https://jsfiddle.net/ebgj6fra/2/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Access the fiddle\r\n- click the \"change\" button\r\n\r\n### What is expected?\r\n*Hello world!* should change to *tada!*\r\n\r\n### What is actually happening?\r\nIn latest Safari (12.1) on Mac OS, nothing happens, but it works as expected in other browsers.\r\n\r\n---\r\nRemoving the `iframe` from the page makes the issue go away, as seen here: https://jsfiddle.net/ebgj6fra/3/\r\n\r\nSeems like maybe there's a difference in how/when the latest Safari runs the `flushCallbacks`.\r\n\r\nConditionally rendering the iframe (`v-if=\"myExpression !== null`), triggering the listener inside a `setTimeout` or calling `$forceUpdate` circumvents the issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Triggering a listener of a functional component breaks reactivity in Safari 12.1, if iframe is on the page",
        "labels": "bug",
        "id": 123605
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <script src=\"https://unpkg.com/vue\"></script>\r\n\r\n    <div id=\"app\">\r\n      <div id=\"nav\">\r\n        <button @click=\"goHome\">go to Home</button>\r\n        <button @click=\"goAbout\">go to About</button>\r\n      </div>\r\n      <component :is=\"current\"></component>\r\n    </div>\r\n\r\n    <script>\r\n      const Home = {\r\n        name: 'Home',\r\n        template: `\r\n      <div>\r\n        <h2>Home</h2>\r\n      </div>\r\n      `,\r\n      }\r\n\r\n      const About = {\r\n        template: `\r\n        <div class=\"about\">\r\n    <h1>This is an about page</h1>\r\n    <input type=\"text\" v-model=\"input\">\r\n  </div>\r\n      `,\r\n        name: 'about',\r\n        data: () => ({\r\n          input: '',\r\n        }),\r\n      }\r\n\r\n      const vm = new Vue({\r\n        el: '#app',\r\n        data() {\r\n          return {\r\n            current: 'Home',\r\n          }\r\n        },\r\n\r\n        methods: {\r\n          goHome() {\r\n            this.current = 'Home'\r\n          },\r\n          goAbout() {\r\n            this.current = 'About'\r\n          },\r\n        },\r\n        components: { Home, About },\r\n      })\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n\r\n![Screen Shot 2019-05-09 at 18 59 07](https://user-images.githubusercontent.com/664177/57471906-8a224380-728c-11e9-832d-f1ce989ee1e0.png)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n- go to the about page\r\n- type in the input\r\n- leave the page\r\n- collect garbage and take a snapshot with devtools\r\n\r\n### What is expected?\r\n\r\nVueComponent count should be stable\r\n\r\n### What is actually happening?\r\n\r\nVueComponent count keeps increasing.\r\n\r\n---\r\n\r\nseems to be related to typing in the input\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Memory leak with component with input with v-model",
        "labels": "bug",
        "id": 123606
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/r2xjo5cf/7/](https://jsfiddle.net/r2xjo5cf/7/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open dev tools to see console\r\n2. Cycle through the routes\r\n3. View console and observe lifecycle hook logging\r\n\r\n### What is expected?\r\nI'd expect once the `max` cache is reached (in the example case of 1), the component that gets pruned also gets destroyed. In [the documentation](https://vuejs.org/v2/api/#keep-alive) it states (emphasis mine): \r\n\r\n> `max`\r\n>\r\n> The maximum number of component instances to cache. Once this number is reached, the cached component instance that was least recently accessed **will be destroyed** before creating a new instance.\r\n\r\n### What is actually happening?\r\nThe pruned component is never destroyed, it's just removed from the cache. In the example, the `beforeDestroy` hook is never called.\r\n\r\n---\r\nRelated code: https://github.com/vuejs/vue/blob/636c9b4ef17f2062720b677cbbe613f146f4d4db/src/core/components/keep-alive.js#L37-L49\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "<keep-alive> doesn't `destroy` cached components after when max is 1",
        "labels": "bug",
        "id": 123607
    },
    {
        "body": "### Version\r\n2.5.9\r\n\r\n### Reproduction link\r\n[https://github.com/lk19940215/vue-issue](https://github.com/lk19940215/vue-issue)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. clone my github project\r\n\r\n2. \r\n  npm i\r\n  npm run dev\r\n\r\n3. \r\n      <div @click=\"functionClickHandle(i)\">{{i}}</div>  //  looks like '()\u2018 is required.\r\n\r\nsomething happend\r\n\r\nwindow.alert(1i am big boss)\r\nwindow.alert(2i am big boss)\r\n\r\nbecause it run's automatically.\r\n\r\n4. \r\n but `window.alert('item click changed')` did not.\r\n\r\n\r\n\r\n\r\n\r\n### What is expected?\r\ni just want to report.\r\n\r\n### What is actually happening?\r\nrun automatically\r\n\r\n---\r\nvue version >= 2.5.2\r\n\r\nOne day I maintain an old project,  something just happend, my web page always redirected to anothoer page. until i change the function named 'functionClickHandle' with 'itemClick'.  because 'functionClickHandle' has some judgments inside, and run automatically.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "build project with 'vue-cli 2', if some function named 'functionClickHandle' and bind with '@click=\"functionClickHandle()\"', It will run automatically.",
        "labels": "bug",
        "id": 123608
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/bponomarenko/uom10qd2/](https://jsfiddle.net/bponomarenko/uom10qd2/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open browser console.\r\n2. Click on Toggle button two times. \r\n\r\n### What is expected?\r\nDirective will emit the same console messages when applied to DOM elements and to components (on init and after click on button).\r\n\r\nI'm not sure what should be expected output. Either\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: first comp\r\nunbind: first elem\r\nbind: first comp\r\nbind: first elem\r\n```\r\n\r\nor \r\n\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: second comp\r\nunbind: second elem\r\nbind: first comp\r\nbind: first elem\r\n```\r\n\r\n### What is actually happening?\r\nMessages from the directive are the same on init, but different after button have been clicked.\r\n\r\nActual console output:\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: first comp\r\nunbind: second elem\r\nbind: second comp\r\nbind: first elem\r\n```\r\n\r\n---\r\nIt seems that order in which directives are applied to DOM elements and components are different. In my setup I have custom directive which relies on some DOM attribute with configuration data. When this custom directive is bound/unbound in a \"regular flow\" \u2013 everything works as expected (directive binds after element attributes are updated). However when directive is bound/unbound in case of Vue \"in-place patch strategey\", behavior seems to be different.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Custom directive binds differs on components vs elements",
        "labels": "bug",
        "id": 123609
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/aaronbird/pen/JVRKwa](https://codepen.io/aaronbird/pen/JVRKwa)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nI wrote a demo:  \r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <title>demo</title>\r\n    <style>\r\n      .link {\r\n        cursor: pointer;\r\n        user-select: none;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\r\n\r\n    <div id=\"app\">\r\n      <transition>\r\n        <keep-alive include=\"foo\">\r\n          <component :is=\"target\" @change=\"onChange\"></component>\r\n        </keep-alive>\r\n      </transition>\r\n    </div>\r\n    <script>\r\n      const Foo = {\r\n        name: \"foo\",\r\n        template: `<div class=\"link\" @click=\"$emit('change', 'bar')\">Go to Bar</div>`\r\n      };\r\n      const Bar = {\r\n        name: \"bar\",\r\n        template: `<div class=\"link\" @click=\"$emit('change', 'foo')\">Go to Foo</div>`\r\n      };\r\n      Vue.component(\"foo\", Foo);\r\n      Vue.component(\"bar\", Bar);\r\n      const app = new Vue({\r\n        data: {\r\n          target: \"foo\"\r\n        },\r\n        methods: {\r\n          onChange(target) {\r\n            this.target = target;\r\n          }\r\n        }\r\n      }).$mount(\"#app\");\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe debugging process is as follows:  \r\n1 Click \"Collect garbage\" and \"Take heap snapshot\"(snapshot 1)  \r\n2 Click the routing button on the left 10 times, then click \"Collect garbage\" and \"Take heap snapshot\"(snapshot 2)   \r\n3 Click the routing button on the left 10 times, then click \"Collect garbage\" and \"Take heap snapshot\"(snapshot 3)   \r\n![](https://i.imgur.com/FCe40P6.gif)  \r\n\r\nThe generated \"snapshot\" is as follows:\r\n\r\nsnapshot 1:\r\n![](https://i.imgur.com/S49oSJo.png)  \r\nsnapshot 2:\r\n![](https://i.imgur.com/X1bbOgU.png)  \r\nsnapshot 3:\r\n![](https://i.imgur.com/lLD8z7Y.png)\r\nAfter clicking 100 times:  \r\n![](https://i.imgur.com/E0bjppJ.png)  \r\n\r\nVueComponent is not being recycled, is this a bug?  \r\n\r\n### What is expected?\r\nWhy is this happening, is this a bug?\r\n\r\n### What is actually happening?\r\nComponent will not be cleared when switching components.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Memory leak when using \"transition\" and \"keep-alive\"",
        "labels": "bug",
        "id": 123610
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/tbutcaru/v-issue-multiple-dynamic-slot-names](https://github.com/tbutcaru/v-issue-multiple-dynamic-slot-names)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Clone this repo: https://github.com/tbutcaru/v-issue-multiple-dynamic-slot-names\r\n2. Run: `npm install`\r\n3. Run: `npm run serve`\r\n\r\n### What is expected?\r\nMultiple dynamic slot names should work as expected.\r\n\r\n### What is actually happening?\r\nThe following error is thrown:\r\n```\r\nInvalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.#[headerslot]>Header slot</template>\r\n    Default slot\r\n    <template #[footerslot]\r\n```\r\n\r\n---\r\n**If one of the dynamic slot names is made static (doesn't matter which), the application is working.**     \r\n\r\n##### My investigation\r\n- file: `node_modules/vue-template-compiler/build.js`\r\n- line: 2563 (inside `attrs.forEach(function (attr) {`) added the following warn:   \r\n```\r\nwarn$1('--------------->> ' +  attr.name);\r\n```\r\n\r\n##### Investigation results:\r\n1. In the working scenario with only one dynamic slot name: the value of that dynamic slot name is `#[headerslot]`\r\n2. In the error scenario with two dynamic slot names: the value of the first dynamic slot name is\r\n```\r\n#[headerslot]>Header slot</template>\r\n    Default slot\r\n    <template #[footerslot]\r\n```\r\n\r\nSo, it looks like the compiler doesn't know how to extract just the attribute when there are multiple dynamic slot names.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Error using multiple dynamic slot names (Invalid dynamic argument expression)",
        "labels": "bug",
        "id": 123611
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/m7thp9o8/](https://jsfiddle.net/m7thp9o8/)\r\n\r\n### Steps to reproduce\r\n- Check console logs\r\n\r\n### What is expected?\r\nI expect `data.scopedSlots` to always be the same as its mirrored object `scopedSlots` in functional component context.\r\n\r\n### What is actually happening?\r\nDefault scoped slot function is undefined in `data.scopedSlots` (but not in `context.scopedSlots`) object unless I explicitly use default scoped slot the template, \r\n\r\n```vue\r\n<template #default>\r\n  <p>main content</p>\r\n</template>\r\n```\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Default scoped slot is not present under data.scopedSlots object in functional component",
        "labels": "bug",
        "id": 123612
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://codepen.io/zhangenming/pen/GexZQK](https://codepen.io/zhangenming/pen/GexZQK)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n```html\r\n    <input :value=\"price\" @input=\"e=>price=e.target.value\">\r\n```\r\n\r\nCompiled:\r\n\r\n```js\r\n    with(this){return _c('input',{domProps:{\"value\":price},on:{\"input\":e=>price=e.target.value}})}\r\n```\r\n\r\n```html\r\n    <input :value=\"price\" @input=\"function f(e){price=e.target.value}\">// this wont' be work\r\n```\r\n\r\n Compiled:\r\n\r\n```js\r\n    with(this){return _c('input',{domProps:{\"value\":price},on:{\"input\":function($event){function f(e){price=e.target.value}}}})}\r\n```\r\n\r\n\r\n### What is expected?\r\ncan be work\r\n\r\n### What is actually happening?\r\nthis wont' be work\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": " Different behaviors of  Arrow function and function ",
        "labels": "bug",
        "id": 123613
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://codepen.io/peterhpchen/pen/MxrRre?editors=1010](https://codepen.io/peterhpchen/pen/MxrRre?editors=1010)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n* First number picker is declared in container-two\r\n* Second number picker is declared by footer slot\r\n* Change number picker\r\n* The value of the first number picker would be changed, but the value of the second number picker would not be changed\r\n* If add slot content in container-two(js code line: 59-61), the value of the second number picker will be changed\r\n\r\n### What is expected?\r\nThere are two situations:\r\n* If this code is correct(without line:59-61): Both number value should be changed when picker changed.\r\n* If this code is wrong(should add line:59-61): It should have error message or even not render slot.\r\n\r\n### What is actually happening?\r\n* The value of the second number picker should be changed\r\n**Or**\r\n* Error message should be shown or even not render slot.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Slot props in render function is not sync",
        "labels": "bug",
        "id": 123614
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/chrisvfritz/50wL7mdz/](https://jsfiddle.net/chrisvfritz/50wL7mdz/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIt is throwing from the vue/dist/vue.js file of the latest version I am currently trying to isolate it, yet it seems connected with the new code added recently. Will add more steps ASAP if you still don't observe it.\r\n1) replicated with this repo - https://github.com/vuejs/vue-test-utils-mocha-webpack-example\r\n2) clone it\r\n3) npm i\r\n4) npm test - no error\r\n4) npm update vue\r\n5) npm test - ReferenceError: performance is not defined\r\n\r\nGreetings,\r\nPlamen \r\n\r\n\r\n### What is expected?\r\nno error observed\r\n\r\n### What is actually happening?\r\nan error  is observed\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Runtime exception: performance is not defined - with v2.6.9",
        "labels": "bug",
        "id": 123615
    },
    {
        "body": "### Version\r\n2.6.4\r\n\r\n### Reproduction lin\r\n~~[https://jsfiddle.net/0p6t7csx/3/](https://jsfiddle.net/0p6t7csx/3/)~~\r\nhttps://jsfiddle.net/n5wm23jt/\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nuse the toggle button - the syntax used in line 29 seems to not work as expected\r\n\r\n### What is expected?\r\nAll 3 paragraphs should always print the same text \r\n\r\n\r\n### What is actually happening?\r\nthe default slot without the new template syntax will only rerender once and then stay the same,\r\n\r\n---\r\nim not sure if the syntax for default slots is now still to be used that way - or if we always need to use a template now - but it worked with 2.6.0 to 2.6.3 and then stopped working in 2.6.4\r\n\r\n//EDIT: updated reproduction (closed that slot tag) \r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "default slots without the new template syntax  wont reevaluate v-if",
        "labels": "bug",
        "id": 123616
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/54v49n1nzn](https://codesandbox.io/s/54v49n1nzn)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nThe repro shows the issue directly.\r\n\r\n```\r\n<Child\r\n      v-bind=\"{\r\n        appleColor: 'objective red',\r\n        bird: 'objective sparrow'\r\n      }\"\r\n      :apple-color=\"`proper red`\"\r\n      :bird=\"`proper sparrow`\"\r\n    />\r\n```\r\n\r\n### What is expected?\r\nI wanted to know what takes precedence when something is bound using `v-bind={}` vs set explicitly as a prop. I would expect this to always be one or the other, or to be resolved in order of declaration as when merging objects in JS ({...boundProps, specificProp })\r\n\r\n### What is actually happening?\r\nThe precedence is determined based on whether a prop has multiple words. duplicate keys are set by the object when they are declared in dash-case, and set by the prop/attribute if they are camelCase or a single word.\r\n\r\n---\r\nThis can be made 'consistent' by declaring multiword props using camelcase, but that's against the recommendations in the styleguide which suggest using dash case for multiword props inside templates: https://vuejs.org/v2/style-guide/#Prop-name-casing-strongly-recommended.\r\n\r\nI ran into this when an undefined value bound to a parent was overriding the same value explicitly set in the child, but it wasn't happening consistently depending on what the names of the props were.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "camelCased props bound through an object take precedence over a kebab cased specific prop",
        "labels": "bug",
        "id": 123617
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\nhttps://jsfiddle.net/shai/nujtes67/15/\r\n\r\n### Steps to reproduce\r\nPress the `Change screen` button to toggle between screen `1` and screen `2`.\r\n\r\n### What is expected?\r\nNothing should fade, and nothing should be logged to console, because the `v-if` within the `<transition>` is always `true`.\r\n\r\n### What is actually happening?\r\nOn each press B fades in again and `enter: B (custom component)` gets logged to the console.\r\n\r\n---\r\nI've included A as well as B, to show that the bug only occurs when using a custom component with a `<transition>` and `<slot>`. A uses the `<transition>` directly, and doesn't exhibit the buggy behavior.\r\n\r\nNB I've also noticed that if the custom component is switched to being functional instead, then it begins working correctly the same as A.\r\n\r\nSo it appears to only be reproducible when using a custom component and `<slot>`, even though this is what the docs recommend: https://vuejs.org/v2/guide/transitions.html#Reusable-Transitions\r\n\r\n**Or, it's possible that I've misunderstood the expected behavior of a `<transition>` inside of a keyed or otherwise newly appearing component. In which case there's still a bug**, because in that case A and B should BOTH be fading and logging to console (though that seems weird to me: the `<transition>` isn't `appear=true`, so the fact that its parent is newly appearing shouldn't affect it\u2026)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition component animates when wrapper is replaced",
        "labels": "bug",
        "id": 123618
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://github.com/romansp/functional-scoped-slots-type](https://github.com/romansp/functional-scoped-slots-type)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```\r\nyarn install\r\nyarn serve\r\n```\r\n\r\n### What is expected?\r\n`yarn serve` without errors\r\n\r\n### What is actually happening?\r\nType error:\r\n```\r\nArgument of type '{ functional: boolean; render(h: CreateElement, ctx: RenderContext<Record<never, any>>): string | true | VNode | ScopedSlotReturnArray; }' is not assignable to parameter of type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Record<string, any>>, Record<string, any>>'.\r\n  Object literal may only specify known properties, and 'functional' does not exist in type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Record<string, any>>\r\n, Record<string, any>>'.\r\n    15 | \r\n    16 | export default Vue.extend({\r\n  > 17 |   functional: true,\r\n       |   ^\r\n    18 |   render(h, ctx) {\r\n    19 |     const children = ctx.scopedSlots.default && ctx.scopedSlots.default({});\r\n    20 |     return children || h();\r\nVersion: typescript 3.3.3333\r\n```\r\n\r\n---\r\nPR #9563 introduced `NormalizedScopedSlot` type, but `RenderContext` type for functional components still uses `scopedSlots: { [key: string]: ScopedSlot };`. Is it expected?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "types: NormalizedScopedSlot for scopedSlots on RenderContext?",
        "labels": "bug",
        "id": 123619
    },
    {
        "body": "### Version\r\n2.6.7\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/3qbky0z7/4/](https://jsfiddle.net/3qbky0z7/4/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nCreate custom directive with a dynamic argument:\r\n```v-test:[deep.arg]=\"value\"```\r\n\r\n### What is expected?\r\nIt should get the value from path `deep.arg`.\r\n\r\n### What is actually happening?\r\nInside the binding object of a custom directive, `arg` key have value `[deep`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Deep object as dynamic argument in custom directive [RFC-0003]",
        "labels": "bug",
        "id": 123620
    },
    {
        "body": "### Version\r\n2.6.7\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/239l9qnkxn](https://codesandbox.io/s/239l9qnkxn)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open https://codesandbox.io/s/239l9qnkxn\r\n2. Immediately (before the async component is resolved within 7 sec) click on the \"Some Page\" link\r\n3. Click on the \"Home\" link (before 7s are elapsed)\r\n\r\n### What is expected?\r\nThe AsyncReady component should render after 7 seconds.\r\n\r\n### What is actually happening?\r\nThe AsyncLoading component is shown forever\r\n\r\n---\r\nThe problem is that the `currentRenderingInstance` is `Home`. After rendering the `SomePage` route, the initial `Home` instance (which is stored as the `owner` of the factory) is destroyed. As soon as the factory calls `forceRender`, triggering `$forceUpdate()` on the owner does nothing because the old `Home` instance already was destroyed and a new one was created when navigating back to `Home`.\r\n\r\nThis is problematic on very slow connections when users click a link before all dynamic components were resolved or in case of automatic redirects which are triggered immediately after a page is loaded (after checking auth for example).\r\n\r\nSee: https://github.com/vuejs/vue/blob/dev/src/core/vdom/helpers/resolve-async-component.js#L58-L74\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Components created with async component factory break on route change",
        "labels": "bug",
        "id": 123621
    },
    {
        "body": "### Version\r\n2.6.6\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/qgQYra?editors=1011](https://codepen.io/anon/pen/qgQYra?editors=1011)\r\n\r\n### Steps to reproduce\r\nThe problem seems to happen when I handle an event emitted from a component and return a rejected promise. To see the problem in action, open the codepen link, click the button and you will see in the console two logs of the same error, which means the Vue.config.errorHandler was called twice.\r\n\r\n### What is expected?\r\nI expect the errrorHandler called once.\r\n\r\n### What is actually happening?\r\nthe errorHandler function is called twice.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue.config.errorHandler called twice when I return a rejected Promise from a handler of a component event",
        "labels": "bug",
        "id": 123622
    },
    {
        "body": "### Version\r\n2.6.0\r\n\r\n### Reproduction link\r\n[https://github.com/jedrula/slot-updates-on-vue-2.6](https://github.com/jedrula/slot-updates-on-vue-2.6)\r\njsfiddle: http://jsfiddle.net/sj8wcx0k/\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nYou can see the problem on a deployed version of https://github.com/jedrula/slot-updates-on-vue-2.6 here: http://slot-updates-vue-26.surge.sh/\r\n\r\nYou run into a problem like that if\r\n1. you have a v-slot inside a v-for and in that v-slot you render an item from v-for\r\n2. you update whole array that drives the v-for\r\n\r\n### What is expected?\r\nRendered item in v-for should behave in a same way as rendered item in v-for inside a v-slot - it should be re-rendered when the whole array driving the v-for changes.\r\n\r\nI'd expect no changes in behavior from Vue 2.5.22. You can see how it behaves on the same code with `vue 2.5.22`. I have deployed same code with downgraded Vue version here: http://slot-updates-vue-25.surge.sh/\r\n\r\n### What is actually happening?\r\nThe item inside v-for in a v-slot is not re-rendered:\r\nhttps://github.com/jedrula/slot-updates-on-vue-2.6/blob/master/src/App.vue#L6\r\n\r\n---\r\nI know that the issue can be resolved by providing proper v-key to the v-for. The confusing part though is that the even without the v-key this line is updated: https://github.com/jedrula/slot-updates-on-vue-2.6/blob/master/src/App.vue#L4 but this line is not: https://github.com/jedrula/slot-updates-on-vue-2.6/blob/master/src/App.vue#L6.\r\n\r\nIf that's not a bug but something I don't understand about scoped slots it might be good to add some information about that in some Vue reactivity gotchas ? I wonder why it bit me given a change from 2.5 -> 2.6 should not be breaking.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Value inside v-slot in a v-for won't update",
        "labels": "bug",
        "id": 123623
    },
    {
        "body": "### Version\r\n2.6.0\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/r749jp21o4](https://codesandbox.io/s/r749jp21o4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nI made a simple button component which does not emit any events. In the app there are three instances of it with the `@click.native` event bound in different way.\r\n\r\nYou can see the first button component which was bound with `@click.native` works and increases the counter, but the rest which use v-on and the new conditional binding syntax do not.\r\n\r\nI thought it might have been some limitation of native events but this also happens with other modifiers, like `keydown.somekey`.\r\n\r\n### What is expected?\r\nThe events should be bound and all the buttons should work.\r\n\r\n### What is actually happening?\r\nThe buttons do not work. The events are not bound. Only the first button actually gets a listener attached when I inspect them with chrome's devtools.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-on dynamic argument doesn't work with .native modifier",
        "labels": "bug",
        "id": 123624
    },
    {
        "body": "### Version\r\n2.6.0-beta.3\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/JxEpJK?editors=1011](https://codepen.io/anon/pen/JxEpJK?editors=1011)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- click the \"root\" button\r\n\r\n### What is expected?\r\n`\"update root\"` should be logged\r\n\r\n### What is actually happening?\r\n`\"update ChildComponent\"` is also logged\r\n\r\n---\r\nIf you add `v-slot:default` it works as expected: https://codepen.io/anon/pen/exgVVm?editors=1011\r\nVue 2.5.22 also works correctly: https://codepen.io/anon/pen/KJaQQL?editors=1011\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[2.6-beta] regression: component without slots re-renders when parent updates",
        "labels": "bug",
        "id": 123625
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://jsbin.com/dobagokure/1/edit?html,js,output](https://jsbin.com/dobagokure/1/edit?html,js,output)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open https://jsbin.com/dobagokure/1/edit?html,js,output in IE 11.\r\n\r\n2. Enter a single character in the text input just after 'Hello Vue!'\r\n\r\n3. Model will not be updated on the first character input but will be on subsequent inputs\r\n\r\n*Note to reproduce a second time you will need to refresh the page.\r\n\r\n### What is expected?\r\nWhen a single character is entered the model should update\r\n\r\n### What is actually happening?\r\nThe input event is blocked and the model does not update until a second character is entered.\r\n\r\n---\r\nI believe it could be related to a previous fix for an issue that IE11 is firing an input event when the placeholder is set:\r\n\r\nhttps://github.com/lovelope/vue/commit/15e8fa59b99890268b9a06ff263a6db131e0aa63\r\n\r\nPerhaps it should check if the value is set first before blocking the initial event?\r\n\r\n\r\n\r\nMany Thanks,\r\nDeclan\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "In IE 11 the first input event on a text input is blocked if placeholder is set and the model is initialised",
        "labels": "bug",
        "id": 123626
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/rm36pyr37q](https://codesandbox.io/s/rm36pyr37q)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nGiven a very simple component:\r\n\r\n```\r\n<template>\r\n  <div v-bind:style=\"styleObject\">This div should have a large z-index</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"HelloWorld\",\r\n  data() {\r\n    return {\r\n      styleObject: {\r\n        maxWidth: \"400px\",\r\n        minWidth: \"auto\",\r\n        opacity: 1,\r\n        padding: \"5px\",\r\n        position: \"fixed\",\r\n        right: \"10px\",\r\n        top: \"10px\",\r\n        zIndex: \"100 !important\" // this doesn't work\r\n        // \"z-index\": \"100 !important\" // this works\r\n      }\r\n    };\r\n  }\r\n};\r\n</script>\r\n```\r\n\r\n`zIndex` is not bound to style\r\n\r\n### What is expected?\r\nBinding `zIndex` does not get kebab-cased like `maxWidth` and `minWidth`. I expected it to work the same way. Passing `z-index` works as expected.\r\n\r\n### What is actually happening?\r\nThe `zIndex` variable is ignored entirely.\r\n\r\n---\r\nI was creating an alert-style box that needs a high z-index to appear \"on top\" of other elements on the page.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vbind:style does not work with zIndex",
        "labels": "bug",
        "id": 123627
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codepen.io/bogdan-muranets/pen/ErjOXy](https://codepen.io/bogdan-muranets/pen/ErjOXy)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen repro, click on the \"show\" button and note that \"animated on enter\" text appeared.\r\n\r\n### What is expected?\r\nTo see a text \"animated on appear\" which has to be added by `@appear` hook.\r\n\r\n### What is actually happening?\r\nThe `@enter` hook is called instead of `@appear`.\r\n\r\n---\r\nImportant is that `transition` is moved to separate component. Also, everything works as expected if `transition` isn't a root element in a separate component or the component is `functional`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition not triggering @appear when used as the root of a component with appear attr",
        "labels": "bug",
        "id": 123628
    },
    {
        "body": "**Note: this issue only refers to v-model for components, and is not considering v-model on DOM elements.** There was a discussion which included this unexpected behavior in #6216 , and also a PR #6327 that tried to fixed that, but those also included being able to pass-through `v-model` to DOM elements, which is not the case with this issue.\r\n\r\n### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/933003yx6w](https://codesandbox.io/s/933003yx6w)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse `v-model` on a component that doesn't have `value` defined in its `props`.\r\n\r\n### What is expected?\r\n`value` is added to component's instance `$attrs`\r\n\r\n### What is actually happening?\r\n`value` is not added to component's instance `$attrs`\r\n\r\n---\r\nBecause of that, when wrapping **a component** and passing through the props and event handlers using `v-bind=\"$attrs\" v-on=\"$listeners\"`, `v-model` will not be (completely) passed through, and will require explicitly defining `value` in wrapping component's `props` and passing it using `:value=\"value\"` to the wrapped component (see the linked sandbox).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-model's value not in $attrs if value not defined as a prop",
        "labels": "bug",
        "id": 123629
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/jXdLGV](https://codepen.io/anon/pen/jXdLGV)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the repro and note that the rendered page says \"initial appear\".\r\n\r\n### What is expected?\r\nThe `@appear` hook should not be invoked and the page should just say \"initial\".\r\n\r\n### What is actually happening?\r\nThe `@appear` hook is invoked even though the `transition` doesn't have an `appear` attribute, and hence shouldn't be triggering on appear.  The same thing happens if you add `:appear =\"false\"` to the `transition`.\r\n\r\n---\r\nRan into this when building some custom transition components where `appear` should be user-controlled, but was being invoked all the time instead.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition's @appear hook invoked even when appear not specified / falsy",
        "labels": "bug",
        "id": 123630
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/y05q554q71](https://codesandbox.io/s/y05q554q71)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\ncode sandbox will illustrate the issue. (may take a few seconds to load)\r\n\r\nNotice how `{{ isActive() }}` prints true, yet the class isn't binded\r\n\r\n### What is expected?\r\n`:class` to bind class attribute `class=\"nav-link active` and cause nav-link to turn red\r\n\r\n### What is actually happening?\r\nNot binding class and making nav-link red\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "class binding not updating on client after using `$isServer` with boolean values",
        "labels": "bug",
        "id": 123631
    },
    {
        "body": "\r\n### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/analyzeplatypus/eywraw8t/513878/](https://jsfiddle.net/analyzeplatypus/eywraw8t/513878/)\r\n\r\n![screen recording 2018-12-20 at 8 21 07 pm mov](https://user-images.githubusercontent.com/18376110/50303197-00b4d500-0495-11e9-9f02-145099a68d15.gif)\r\n\r\n### Steps to reproduce\r\nThe fiddle contains a seemingly random sequence of elements that illustrates the issue (described below). \r\n\r\n1. Open the JSFiddle\r\n2. Click the \"Change\" button\r\n3. The transition plays (it should not).\r\n\r\nTry removing any of the DOM elements and the errant transition no longer plays!\r\n\r\n### What is expected?\r\nThe transition should not run.\r\n(CSS transition classes should not be applied, hooks should not be called, etc.)\r\n\r\n### What is actually happening?\r\nThe transition is run (CSS transition classes are applied).\r\n\r\n---\r\nI came across this while building a complex form with multiple buttons that appear/disappear based on form state.\r\nI noticed duplicated buttons in one of my unit tests, and found that a transition was being run even though its child's `v-if` binding was not being changed. I duplicated the component and whittled it down until I arrived at the attached JSFiddle.\r\n\r\n\r\nThis issue appears when the following sequence of elements are aligned:\r\n1. A boolean entry in the Vue component's `data` dictionary (`hasChanges: false`, in the JSFiddle)\r\n\r\nThe DOM contains\r\n2. A `<div>` whose `v-if` is bound to the boolean entry (1).\r\n2. A `<transition>` containing a button which modifies the boolean entry (1).\r\n3. An empty `<transition>` element.\r\n4. A `<div>` whose `v-if` is bound to the boolean entry (1) modified by logical NOT (!). (In the fiddle, `v-if=\"!hasChanges\"`).\r\n\r\nWith this exact structure, modifying the boolean entry (1) will run the transition - even though the transition is not bound to the boolean at all!\r\n\r\nIf you remove any of the above elements, **or even reorder them** (!) the errant transition will not run (which is the correct behavior).\r\n\r\n\r\nWhy does the transition run when placed with this particular set of siblings in this particular order?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition is erroneously run when placed with bizarre sequence of sibling elements. ",
        "labels": "bug",
        "id": 123632
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/o95x14r0xz](https://codesandbox.io/s/o95x14r0xz) (I know, minimal repro below)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nView page source\r\n\r\n### What is expected?\r\n```html\r\n<div class=\"v-responsive\" style=\"height:480px;\" data-v-2a183b29>\r\n```\r\n\r\n### What is actually happening?\r\n```html\r\n<div class=\"v-responsive\" style=\"height:480px;max-height:undefined;max-width:undefined;width:undefined;\" data-v-2a183b29>\r\n```\r\n\r\n---\r\nReproduce in `vue/test/ssr/ssr-string.spec.js` then run `npm run test:ssr`:\r\n```js\r\n  it('falsy style value', done => {\r\n    renderVmWithOptions({\r\n      template: '<div :style=\"style\"></div>',\r\n      data: {\r\n        style: {\r\n          opacity: 0,\r\n          color: null\r\n        }\r\n      }\r\n    }, result => {\r\n      expect(result).toContain(\r\n        '<div data-server-rendered=\"true\" style=\"opacity:0;></div>'\r\n      )\r\n      done()\r\n    })\r\n  })\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR: style binding keeps falsy values",
        "labels": "bug",
        "id": 123633
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/oJLdMN](https://codepen.io/anon/pen/oJLdMN)\r\n\r\nOpen the link and see the error message in dev console.\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nCreate two mixins with a provide object using Symbol as it's key field. Then assign these mixins to a component.\r\n\r\n### What is expected?\r\nThe child component can access two provide object without any error.\r\n\r\n### What is actually happening?\r\nThe child component can only access the last provide object, while the first one is undefined.\r\n\r\n---\r\nDiving into the source code, the reason of this issue is that Vue uses `Object.keys` to iterate over the `provide` object while merging mixins. However, `Object.keys` won't return Symbol keys. see [the code](https://github.com/vuejs/vue/blob/52719ccab8/src/core/util/options.js#L51).\r\nMaybe we should use `for ... in` loop, which will iterate through Symbol keys correctly.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provided values in mixin are not accessible",
        "labels": "bug",
        "id": 123634
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codepen.io/hikerpig/pen/dwYEej](https://codepen.io/hikerpig/pen/dwYEej)\r\n\r\n### Steps to reproduce\r\nGoto the minimal reproduction link\r\n\r\nOr simply add this to test/unit/features/options/mixins.spec.js\r\n\r\n```js\r\n  it('should not mix global mixined lifecycle hook twice', () => {\r\n    const spy = jasmine.createSpy('global mixed in lifecycle hook')\r\n    Vue.mixin({\r\n      created() {\r\n        spy()\r\n      }\r\n    })\r\n\r\n    const mixin = Vue.extend({})\r\n\r\n    const Child = Vue.extend({\r\n      mixins: [mixin],\r\n      created() {}\r\n    })\r\n\r\n    const vm = new Child()\r\n\r\n    expect(spy.calls.count()).toBe(1)\r\n  })\r\n```\r\n\r\n### What is expected?\r\nspy to be called once\r\n\r\n### What is actually happening?\r\nspy is called twice\r\n\r\n---\r\nWhen using vue-class-component , it's easy to pass not-plain-object to Vue.extends mixins\r\n\r\nI've added a similar issue in https://github.com/vuejs/vue-class-component/issues/291 , and it is still not fixed\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue does not correctly dedupe global mixin, global mixined lifecycle hook be called twice",
        "labels": "bug",
        "id": 123635
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://github.com/sqal/vue-ssr-bug-reproduction](https://github.com/sqal/vue-ssr-bug-reproduction)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Clone, install dependencies\r\n- run `npm run ssr:serve`\r\n\r\n\r\n\r\n### What is expected?\r\nShould render the app.\r\n\r\n### What is actually happening?\r\nWhen you start the server you should see that application throws following error: `Cannot read property '$store' of undefined`. This happens because in SSR computed property don't receive component's instance as the first argument, therefore I cannot access `$store` property. I am not sure if this is a bug or not, I think it is because i could not find anything about in vue or vue-ssr docs. I would appreciate if someone could clarify this issue. Thank you :)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Computed property don't receive component's instance as first argument in SSR",
        "labels": "bug",
        "id": 123636
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/pcb17vq4/](https://jsfiddle.net/pcb17vq4/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nSee Fiddle.\r\n\r\n### What is expected?\r\nOnly a 'leave' is triggered when removing any item from the list displayed with display: flex.\r\n\r\n### What is actually happening?\r\nBoth a 'leave' and a 'move' are triggered\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Both move and leave triggered for removed transition-group item if transition-group has display: flex",
        "labels": "bug",
        "id": 123637
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, SSR directives can be only passed in with 'kebab-case' keys. This isn't denoted anywhere (except in the tests, luckily!) and not \"intuitive\" as they can be provided as camelCased ones on the client as well.\r\n\r\nCan we introduce camelCased SSR directives?\r\nI'd be available to work on the impl.\r\n\r\n### What does the proposed API look like?\r\n```js\r\ndirectives: {\r\n  classPrefixer: (node, dir) => {/*...*/}\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: camelCased local directives are not applied in SSR",
        "labels": "bug",
        "id": 123638
    },
    {
        "body": "### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https://gist.github.com/kissge/b02de2b2aacb33c9645da2c5a89cb1ac](https://gist.github.com/kissge/b02de2b2aacb33c9645da2c5a89cb1ac)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Run a unit test\r\n\r\n### What is expected?\r\nnewline after &lt;input> is preserved\r\n\r\n### What is actually happening?\r\nnewline after &lt;input> is removed\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue template removes whitespace immediately after <input>inside of a pre",
        "labels": "bug",
        "id": 123639
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n\r\n### Reproduction link\r\nhttps://codepen.io/avertes/pen/LYYpNRe\r\n[https://jsfiddle.net/50wL7mdz/756973/](https://jsfiddle.net/50wL7mdz/756973/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Create a new component that accepts a string prop.\r\n1. Display the prop within the component's template.\r\n1. Use the component in a Vue application and pass a string containing a non-breaking space character for the prop.\r\n\r\n### What is expected?\r\nThe output should contain a non breaking space\r\n\r\n### What is actually happening?\r\nThe output shows `&nbsp;`\r\n\r\n---\r\nIn the example provided I've made 3 cases\r\n\r\n- First case is that `&#160;` get turned into `&nbsp;`\r\n- Second case is that in a long list of UTF-8 characters only `NON-BREAKING SPACE` is escaped.\r\n- And third when getting the same list of characters, but retrieving it from a regular `HTMLElement` with `document.querySelector('#test').title` the character aren't escape.\r\n\r\n\r\n**Note**: When copying the non-breaking space character it might turn into a regular space in the clipboard. Therefor use https://en.wikipedia.org/wiki/Non-breaking_space#Keyboard_entry_methods to make sure how to insert the character.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Non-breaking space acts different than other characters - outputs \"&nbsp;\" in template when passed via props",
        "labels": "bug",
        "id": 123640
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/1zr10x8rpq](https://codesandbox.io/s/1zr10x8rpq)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Create two child components with the same prop in camelCase\r\n- Bind props from first child to second\r\n- Try to override camelCase prop in hypenated syntax from first child to second\r\n\r\n### What is expected?\r\nProp override correctly\r\n\r\n### What is actually happening?\r\nProp keep parent value\r\n\r\n---\r\n\r\nMeet this issue because I have a camelCase coding stye. But eslint vue-recommended throw an error if prop is not hypenated.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Overriding a binded prop with hypenated syntax instead of camelCase not working",
        "labels": "bug",
        "id": 123641
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/du578xc0/32/](https://jsfiddle.net/du578xc0/32/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nchange first select to \"Some\", then change newly displayed select. You will see that val2 is being set to the bound vals from the val1 select instead of it's own values.\r\n\r\nYou can change the first select to use the .number modifier on the v-model and exchange the bound number values for strings to fix this issue. (at least for this very specific desired effect).\r\n\r\nYou can \"fix\" the problem by either using v-bind:value on all values, or by using non-bound values on all values - but as far as I can tell, if you mix them, then it will cause this override bug\r\n\r\n### What is expected?\r\ndifferent values for each variable\r\n\r\n### What is actually happening?\r\nsecond variable is being overwritten with the first's value\r\n\r\n---\r\nThis was posted/discussed in the discord chat\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Using multiple selects with v-model and bound and unbound values causes value overriding",
        "labels": "bug",
        "id": 123642
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/4k43rylw0](https://codesandbox.io/s/4k43rylw0)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Load the reproducer and take a memory heap snapshot. Searching the heap you will find 4 VueComponents (App, Container, Child, Async Child)\r\n![image](https://user-images.githubusercontent.com/1207606/44921752-6c6e0900-ad11-11e8-81e9-6751416a49ff.png)\r\n\r\n2. Click the Destroy button. This toggles a v-if which will remove Child component and thus AsyncChild component as well.\r\n3. At this point, the page is updated as expected\r\n4. Take another memory heap snapshot. Search the heap again for \"VueComponent\" and you will see that 4 VueComponents still exist\r\n![image](https://user-images.githubusercontent.com/1207606/44921772-7a238e80-ad11-11e8-9215-c6ca2bd14706.png)\r\n![image](https://user-images.githubusercontent.com/1207606/44921791-8a3b6e00-ad11-11e8-82d9-a52d4f9c0e52.png)\r\n\r\n\r\n### What is expected?\r\nAfter destroying Child component, the component and it's asynchronously loaded child component should be destroyed and the memory freed up.\r\n\r\n### What is actually happening?\r\nVue is holding on to a context reference which is preventing these components from being garbage collected\r\n\r\n---\r\nThis is happening due to the resolve-async-component logic located here: https://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/src/core/vdom/helpers/resolve-async-component.js#L57-L68\r\n\r\nIn the forceRender function on line 64, after calling $forceUpdate, the contexts array should be cleared to free up those references so that the components will be able to be garbage collected at a later point in time\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Memory Leak When Using Async Components",
        "labels": "bug",
        "id": 123643
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/wkpy6x5r25](https://codesandbox.io/s/wkpy6x5r25)\r\n\r\n### Steps to reproduce\r\nSimply opening and running the sandbox should show the error. Instead of getting an alert that App.vue caught the error in HelloWorld's watcher, the error escapes all the way to the top level. To see the expected behavior, open Hello World and set the watcher to immediate: false. Then hit the button to trigger the watcher. In this case the error is caught by the parent, App.vue. In the immediate case, this does not happen.\r\n\r\n### What is expected?\r\nErrors in immediate watchers should be caught by the parent component(s)'s errorCaptured().\r\n\r\n### What is actually happening?\r\nThe error escapes to the nextTick hander. This handler has no ctx or vm to pass to the errorHandler. When errorHandler does not receive a vm, it cannot call the parent errorCaptured handlers.\r\n\r\n---\r\nThis appears to be an oversight in src/core/instance/state.js. In the case options.immediate is true, cb.call(vm, watcher.value) should be wrapped in a try catch that explicitly calls handleError with the vm.\r\n\r\nA proposed fix:\r\n```\r\n    if (options.immediate) {\r\n      try {\r\n        cb.call(vm, watcher.value)\r\n      } catch (e) {\r\n        handleError(e, vm, `immediate call for watcher ${watcher.expression}`)\r\n      }\r\n    }\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Immediate watcher skips parent(s) errorCaptured and jumps straight to the top error handler",
        "labels": "bug",
        "id": 123644
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://github.com/vuejs/vue](https://github.com/vuejs/vue)\r\n\r\n### Steps to reproduce\r\nSorry I failed to visit gist or other online code share platforms.\r\n\r\nJust run the following script with Node@8.9.0 and Vue@2.5.16 installed. But in Node@6, it is ok.\r\n\r\n\r\n```\r\nprocess.env.VUE_ENV = 'server'; // very important\r\n\r\nconst Vue = require('vue');\r\nconst renderer = require('vue-server-renderer').createRenderer({\r\n});\r\n\r\nVue.component('c-child', {\r\n    template: '<div class=\"c-child\"></div>'\r\n});\r\n\r\nconst vueInstance = new Vue({\r\n    template: `<div class=\"root\">\r\n        <c-child v-for=\"(x, i) in items\" :key=\"i\"></c-child>\r\n    </div>`,\r\n    data: {\r\n        items: Array(1000).fill(0)\r\n    }\r\n})\r\n\r\nconsole.log('start to renderToString...');\r\nrenderer.renderToString(vueInstance, (error, html) => {\r\n    if (error) {\r\n        console.error(`render error!\\n${error.stack}`);\r\n        return;\r\n    }\r\n\r\n    console.log('what?!', html)\r\n});\r\n```\r\n\r\n### What is expected?\r\nOutput the html.\r\n\r\n### What is actually happening?\r\n```\r\nrender error!\r\nRangeError: Maximum call stack size exceeded\r\n    at insert (timers.js:158:16)\r\n    at Object.exports._unrefActive (timers.js:149:3)\r\n    at WriteStream._unrefTimer (net.js:260:12)\r\n    at WriteStream.Socket._writeGeneric (net.js:723:8)\r\n    at WriteStream.Socket._write (net.js:786:8)\r\n    at doWrite (_stream_writable.js:387:12)\r\n    at writeOrBuffer (_stream_writable.js:373:5)\r\n    at WriteStream.Writable.write (_stream_writable.js:290:11)\r\n    at WriteStream.Socket.write (net.js:704:40)\r\n    at write (console.js:108:12)\r\n```\r\n\r\n---\r\nSomeone used to mention this bug but without reproduction, https://github.com/vuejs/vue/issues/5445.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Maximum call stack size exceeded in SSR with a v-for with 1000 components",
        "labels": "bug",
        "id": 123645
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/kb9x8rLf/](https://jsfiddle.net/kb9x8rLf/)\r\n\r\n### Steps to reproduce\r\nCreate a functional component that returns multiple root elements via an array, i.e.:\r\n\r\n```javascript\r\nreturn [h('span'), h('span')];\r\n```\r\nThen use the functional component alongside `v-for`:\r\n\r\n```html\r\n<my-component v-for=\"item in items\" />\r\n```\r\n\r\n### What is expected?\r\nIt should render the functional component as expected.\r\n\r\n### What is actually happening?\r\nThe rendered view contains \"undefined\" for each item in the array.\r\n\r\n---\r\nThe JSFiddle demonstrates how wrapping the functional component in a `<template>` tag with the `v-for` directive fixes the issue, but the `<template>` tag should not be required for this.  Oddly enough, there are some circumstances where it renders properly. In my use-case, I had no issues with the multiple root elements when I put the component inside a `<table>`, but when I wrapped the component with a `<tbody>` I ran into this issue I'm reporting.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Functional components with multiple roots don't render properly when used with v-for",
        "labels": "bug",
        "id": 123646
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/twyqL8k4/](https://jsfiddle.net/twyqL8k4/)\r\n\r\n### Steps to reproduce\r\n1. Type Jacob into the input.\r\n2. Hit enter.\r\n\r\n### What is expected?\r\nValue property of the input element should be changed to Joseph, as was the value of the name property in the Vue instance.\r\n\r\n### What is actually happening?\r\nValue property of the input element is not being changed.\r\n\r\n---\r\nThe value of the input is correctly being updated when using v-model without .lazy modifier.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-model.lazy is not updating the value of an input when it has a focus",
        "labels": "bug",
        "id": 123647
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/gamperl/pen/JZGMWK](https://codepen.io/gamperl/pen/JZGMWK)\r\n\r\n### Steps to reproduce\r\nRun the provided JSFiddle\r\n\r\n### What is expected?\r\nThe component in the slot should be moved from the table to the div element. Or a new one is created and the old one is destoryed.\r\n\r\n### What is actually happening?\r\nIf a slot is moved from a table to a div using a v-if directive, the slot ist recreated. But before the new component is mounted, vuejs picks the wrong component to destroy: it destoyes the new component instead of the old one.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Component is destroyed and then mounted",
        "labels": "bug",
        "id": 123648
    },
    {
        "body": "### Version\r\n2.5.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/hgp7w8kr/1/](https://jsfiddle.net/hgp7w8kr/1/)\r\n\r\n### Steps to reproduce\r\nAs you can see the `<v-input>` element is still rendered while the `<component>`-element is not rendered (as in the test, [here](https://github.com/vuejs/vue/blob/ae93d2bef8e20402ae3501aa5cdcf14b0ee19c12/test/unit/features/directives/pre.spec.js))\r\n\r\n### What is expected?\r\n```\r\n<v-input></v-input>\r\n<component></component>\r\n```\r\n\r\n### What is actually happening?\r\n```\r\n<div>Hello World</div>\r\n<component></component>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-pre is still parsing/compiling custom components",
        "labels": "bug",
        "id": 123649
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/6sny3yq9/](https://jsfiddle.net/6sny3yq9/)\r\n\r\n### Steps to reproduce\r\n1. Open fiddle and type anything into the first field marked \"broken\". \r\n2. See in the console the error message \"Error in nextTick: \"TypeError: Cannot read property '_pending' of null\"\r\n3. Notice that Vue has stopped working\r\n4. Refresh the fiddle and type anything into the second field marked \"working\"\r\n5. Notice that everything works as expected\r\n\r\n### What is expected?\r\nWhen the value of the input field is \"foo\" the computed property `bar` will evaluate to true and the \"a\" span will display. \r\n\r\nWhen the user changes the value in the input field from \"foo\" to anything else, the computed property `bar` will evaluate to false and the \"b\" span (rendered using v-html) will display.\r\n\r\n### What is actually happening?\r\nInitially, the value of the input field is \"foo\" and the computed property `bar` is evaluated to true, so the \"a\" span is displaying. \r\n\r\nBut, when the user changes the value in the input field from \"foo\" to anything else, Vue crashes and this error message is displayed: Error in nextTick: \"TypeError: Cannot read property '_pending' of null\"\r\n\r\n---\r\nIt takes this very specific scenario for the error to appear. In the fiddle, I've shown that by removing the `@click=\"show = !show\"` event listener, Vue works as expected with no errors.\r\n\r\nHere are three other changes that, when made individually, result in Vue working as expected:\r\n  - removing the `<transition>` component surrounding the \"a\" span\r\n  - using `<span v-else>{{ b }}</span>` instead of `<span v-else v-html=\"b\"></span>`\r\n  - using `v-show=\"bar\"` and `v-show=\"!bar\"` instead of the `v-if=\"bar\"` and `v-else` directives\r\n\r\nFound via this question on Stack Overflow:\r\nhttps://stackoverflow.com/questions/50400131/cannot-read-property-pending-of-null-when-using-v-html-and-transition#\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "\"Cannot read property '_pending' of null\" when using transition component.",
        "labels": "bug",
        "id": 123650
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/6jnlpno3lw](https://codesandbox.io/s/6jnlpno3lw)\r\n\r\n### Steps to reproduce\r\nThis issue happens, when the root element is not indented and the mustache is split into several lines.\r\n```html\r\n<template>\r\n<div>\r\n\t<p>{{\r\n\t\tmyVar\r\n\t}}</p>\r\n</div>\r\n</template>\r\n```\r\n\r\nOnly when the root element is indented, the mustache gets rendered correctly.\r\n```html\r\n<template>\r\n\t<div>\r\n\t\t<p>{{\r\n\t\t\tmyVar\r\n\t\t}}</p>\r\n\t</div>\r\n</template>\r\n```\r\n\r\nWhat also works, is when mustache is put into a single line and the root element is not indented.\r\n```html\r\n<template>\r\n<div>\r\n\t<p>{{ myVar }}</p>\r\n</div>\r\n</template>\r\n```\r\n\r\n### What is expected?\r\nThe mustache should bind data\r\n\r\n### What is actually happening?\r\nThe mustache gets rendered plain text\r\n\r\n---\r\nOnly wanted to prettify my code, so I split the mustache into several lines and removed the indent of the root element.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue.js mustach not correctly rendered only after indenting root element",
        "labels": "bug",
        "id": 123651
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/lykahb/9grbbt4b/](https://jsfiddle.net/lykahb/9grbbt4b/)\r\n\r\n### Steps to reproduce\r\n1. Create a functional component that returns several root nodes\r\n2. Use it with is binding, like `<div is='my-component'>` with no siblings around it\r\n3. Render the template\r\n\r\n### What is expected?\r\nRenders correctly\r\n\r\n### What is actually happening?\r\nRenders a string \"undefined\" with no console errors\r\n\r\n---\r\nIt is interesting that it may render successfully depending on the siblings around it. There are several examples in the link.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Functional component fails depending on the siblings around it",
        "labels": "bug",
        "id": 123652
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/ympx4pk72z](https://codesandbox.io/s/ympx4pk72z)\r\n\r\n### Steps to reproduce\r\n1\u3001click the home link\r\n2\u3001click the test link\r\n\r\n### What is expected?\r\nafter the Home component destroyed,its updated hook should not be called\r\n\r\n### What is actually happening?\r\nafter the Home component destroyed,its updated hook is called\r\n\r\n---\r\nhere is the log information\r\n\r\nHome beforeCreate\r\nHome created\r\nHome beforeMount\r\nHome mounted\r\nTest beforeCreate\r\nTest created\r\nTest beforeMount\r\nHome beforeDestroy\r\nHome destroyed\r\nTest mounted\r\nHome updated\r\n\r\nwhy the Home component can call updated hook after it is destroyed?\r\nIs Vue designed to do so?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "component calls update hook after it is destroyed",
        "labels": "bug",
        "id": 123653
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/katedo17/pen/rdXMbp](https://codepen.io/katedo17/pen/rdXMbp)\r\n\r\n### Steps to reproduce\r\nEnter \"3\" in the input field, and click the link \"Test Btn 2\". \r\n\r\n### What is expected?\r\nIt should only trigger the on click event that was configured for the \"Test Btn 2\".\r\n\r\n### What is actually happening?\r\nIt triggers the function binded to \"Test Btn 1\" and then trigger the \"Test Btn 2\". \r\n\r\n---\r\nThis only happens when I use v-if in the parent element of the link. But if I use v-show, it doesn't have the issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "bound event with once gets reused in v-if/else condition",
        "labels": "bug",
        "id": 123654
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/hL0rrbs9/6/](https://jsfiddle.net/hL0rrbs9/6/)\r\n\r\n### Steps to reproduce\r\nRun code, and watch.\r\n\r\n### What is expected?\r\n\"Yay Yay ;)\" values should not change to \"hell naw!\" in 3 seconds.\r\n\r\n### What is actually happening?\r\n\"Yay Yay ;)\" values are changing in to \"hell naw!\" in 3 seconds.\r\n\r\n---\r\n<h2>\r\n  Wait 3 seconds. Behavior is not consistent. \"component\" tag in v-for should not change. \r\n</h2>\r\n<div id=\"app\">\r\n  <component :is=\"comp\" v-once></component>\r\n  <p v-once>{{comp}}</p>\r\n  \r\n  <div v-for=\"n in items\" :key=\"n.id\">\r\n    <component :is=\"comp\" v-once></component>\r\n    <p v-once>{{comp}}</p>\r\n  </div>\r\n</div>\r\n<script>\r\nvar z = new Vue({\r\n\tel: \"#app\",\r\n  data: {\r\n  \tcomp:\t\"comp1\",\r\n    items: [{id:1}, {id:2}]\r\n  },\r\n  components: {\r\n  \t\"comp1\": {\r\n    \ttemplate: \"<p style='background:green;color:white'>yay yay ;)</p>\"\r\n    },\r\n  \t\"comp2\": {\r\n    \ttemplate: \"<p style='background:red;color:white'>hell naw!</p>\"\r\n    }\r\n  }\r\n});\r\n\r\nsetTimeout(function() {\r\n\tz.comp = \"comp2\"\r\n}, 3000);\r\n</script>\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-once for component tag doesn't work in v-for",
        "labels": "bug",
        "id": 123655
    },
    {
        "body": "### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/9bzw21no/28/](https://jsfiddle.net/9bzw21no/28/)\r\n\r\n### Steps to reproduce\r\n1. Use '}}' in the data binding\r\n\r\n```html\r\n{{true ? '}}' : '{{' }}\r\n```\r\n\r\n### What is expected?\r\n`}}`\r\n\r\n### What is actually happening?\r\n`)+\"`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Compilation of mustaches in mustaches expression doesn't work",
        "labels": "bug",
        "id": 123656
    },
    {
        "body": "### Version\r\n2.5.14+\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/cLdbL2t2/22/](https://jsfiddle.net/cLdbL2t2/22/)\r\n\r\n### Steps to reproduce\r\nClicking \"update message\" button adds dots after message.\r\nOnce \"alter\" button is clicked, the message is no longer updated.\r\n\r\n### What is expected?\r\nUpdating message continues working even after slot is altered.\r\n\r\n### What is actually happening?\r\nProp value stops being reactive, without error nor warning.\r\n\r\n---\r\nThis behavior takes place after v2.5.14  including v2.5.17-beta.0.\r\nAny version 2.5.13 and lower works as expected.\r\n\r\nUnit test can be found in my github https://github.com/honeroku/vue-slot-investigate\r\n\r\nI am understanding this is edge case and refactoring structure to avoid placing identical slot in conditional positions resolves my problem.\r\nHowever, this behavior was not occurring in older versions and suddenly changed without error or warning,\r\nso I am considering this is a bug and reporting to let you know.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "prop of component, in conditionally rendered slot, stops being reactive",
        "labels": "bug",
        "id": 123657
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/fxdez9qh/](https://jsfiddle.net/fxdez9qh/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nType some text in the input field.\r\n\r\n### What is expected?\r\nThe input handler is executed and the value in the input is updated.\r\n\r\n### What is actually happening?\r\nThe input handler is executed but the first update to the model is not applied. This means the first character typed will not show up.\r\n\r\n---\r\nI found this issue: https://github.com/vuejs/vue/issues/6552 It's a few years old and it was fixed but it seems to be the same problem.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "`.once` modifier on input event prevents v-model from updating value on input element.",
        "labels": "bug",
        "id": 123658
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://github.com/TrueCarry/linktest](https://github.com/TrueCarry/linktest)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun server, open localhost:8080. Problem is in components/textWrapper.vue file. I've used some vue ssr template and removed almost everything unneeded. Same error as before.\r\n\r\n### What is expected?\r\nssr and client side versions are the same. It works if we don't use v-text on span. I changed it to v-text1, to test.\r\nNo hydration errors with v-text1\r\n![image](https://user-images.githubusercontent.com/5431520/99122979-58700280-2610-11eb-8b5c-0952d78fe951.png)\r\n\r\n\r\n### What is actually happening?\r\nServer doesn't render custom element.\r\nConsole output: \r\n![image](https://user-images.githubusercontent.com/5431520/99123015-70e01d00-2610-11eb-8196-28840adbdfc8.png)\r\nServer generated html:\r\n![image](https://user-images.githubusercontent.com/5431520/99123039-7b9ab200-2610-11eb-85e4-2fcce636ae34.png)\r\n\r\n\r\n---\r\nCan you give me few hours to respond next time you decide to close issue please? \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Strange ssr behavior in v-for loop with if-else and v-text",
        "labels": "bug",
        "id": 123659
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/kaelwd/pen/rNLNYGL?editors=1011](https://codepen.io/kaelwd/pen/rNLNYGL?editors=1011)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the console\r\n\r\n### What is expected?\r\n`\"ScopedComponent beforeMount\" true` to be logged\r\n\r\n### What is actually happening?\r\n`\"ScopedComponent beforeMount\" false`\r\n\r\n---\r\nThis was discovered in vuetify: https://github.com/vuetifyjs/vuetify/issues/11533#issuecomment-705058227\r\n\r\nThe real setup is a watcher on a computed property that depends on `$slots`. The watcher is called before mount to get an initial value, causing the computed property to be executed and return an incorrect value. \r\n\r\nMinimal example with the watcher if that helps: https://codepen.io/kaelwd/pen/vYKYWbV?editors=1010\r\n\r\nThis works as expected in vue 3: https://codepen.io/kaelwd/pen/gOMOXoB?editors=1011\r\n\r\nThe bug seems to have existed since scoped slots were introduced in v2.1, but it wasn't a problem here until v2.6 when scoped slots started being used everywhere with `v-slot`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "$scopedSlots is empty until render()",
        "labels": "bug",
        "id": 123660
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/serene-thunder-0hxw2?file=/src/components/HelloWorld.vue](https://codesandbox.io/s/serene-thunder-0hxw2?file=/src/components/HelloWorld.vue)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Click the buttons to see that the computed fields work.\r\n2. Uncomment the watcher.\r\n3. Click buttons again and notice that computed fields don't work, and the watcher is never triggered.\r\n\r\n### What is expected?\r\nComputed fields work and watcher is triggered.\r\n\r\n### What is actually happening?\r\nComputed fields don't work and watcher is never triggered.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->\r\n\r\n\r\n\r\n### Code\r\nApp.vue\r\n```vue\r\n<template>\r\n  <div id=\"app\">\r\n    <button @click=\"slotOneActive = !slotOneActive\">toggle slot</button>\r\n\r\n    <HelloWorld>\r\n      <template v-slot:one>\r\n        <span v-if=\"slotOneActive\">I am active</span>\r\n      </template>\r\n    </HelloWorld>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport HelloWorld from \"./components/HelloWorld\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    HelloWorld,\r\n  },\r\n  data() {\r\n    return {\r\n      slotOneActive: true,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  text-align: center;\r\n  margin-top: 60px;\r\n}\r\n</style>\r\n```\r\nHelloWorld.vue\r\n```vue\r\n<template>\r\n  <div>\r\n    <slot name=\"one\" />\r\n    <p><strong>computedSlotValue:</strong> {{ computedSlotValue }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"HelloWorld\",\r\n  computed: {\r\n    computedSlotValue() {\r\n      return !!this.$slots.one;\r\n    },\r\n  },\r\n  // watch: {\r\n  //   computedSlotValue() {\r\n  //     console.log(\"watch triggered\");\r\n  //   },\r\n  // },\r\n};\r\n</script>\r\n```\r\n\r\nEdit: I updated the code example to make it easier.",
        "title": "Computed fields for named slots stop working if I add watchers to them",
        "labels": "bug",
        "id": 123661
    },
    {
        "body": "### Version\r\n2.6.12\r\n\r\n### Reproduction link\r\n[https://codepen.io/jiankafei/pen/jOqZdpG](https://codepen.io/jiankafei/pen/jOqZdpG)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nClick the switch button, it will switch between two components with slots and without slots. The components without slots should not appear the slots passed to the components with slots\r\n\r\n### What is expected?\r\n\r\nShould display the fallback slot\r\n\r\n### What is actually happening?\r\n\r\nDisplays the previous slot\r\n\r\n---\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "slot is reused with v-if/v-else",
        "labels": "bug",
        "id": 123662
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/0jh1psog/](https://jsfiddle.net/0jh1psog/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the console in the provided JSFiddle\r\nor\r\nrun `Vue.config.getTagNamespace('foreignObject')`\r\n\r\n### What is expected?\r\n`Vue.config.getTagNamespace('foreignObject')` should return `'svg'`\r\n\r\n### What is actually happening?\r\nIt returns `undefined`.\r\n\r\nThis causes a warning `Unknown custom element: <foreignObject>` when testing such components using `vue-test-utils`\r\n\r\n---\r\nThis is caused by https://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/src/platforms/web/util/element.js#L29\r\nIt should be `foreignobject` with lowercase `o` here, because of the `makeMap` implementation.\r\n\r\nTo avoid such bugs in the future, even better fix:\r\nhttps://github.com/vuejs/vue/blob/6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0/src/shared/util.js#L113\r\nshould be `map[expectsLowerCase ? list[i].toLowerCase() : list[i]] = true`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Unknown custom element: <foreignObject>",
        "labels": "bug",
        "id": 123663
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n\r\nhttps://jsfiddle.net/posva/vczwh82g/2/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nIn Safari click different links to load iframes\r\n\r\n### What is expected?\r\n\r\nall iframes should load\r\n\r\n### What is actually happening?\r\n\r\nthe one rendered inside vue doesn't load\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Safari doesn't see frame inside vue app",
        "labels": "bug",
        "id": 123664
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\nThe reproduction is updated to use Vue SSR without NUXT\r\n[https://github.com/privatenumber/vue-ssr-vhtml-dyncomp-bug](https://github.com/privatenumber/vue-ssr-vhtml-dyncomp-bug)\r\n\r\n### Steps to reproduce\r\n_Dynamic.vue_\r\n```vue\r\n<template>\r\n  <component is=\"div\">\r\n    content necessary\r\n  </component>\r\n</template>\r\n```\r\n\r\n_App.vue_\r\n```vue\r\n<template>\r\n  <dynamic v-html=\"'<div>trigger hydration warning</div>'\" />\r\n</template>\r\n```\r\n\r\n### What is expected?\r\nThe expected behavior is for there to be no hydration warning when the SSR and client markup are identical.\r\n\r\n\r\n### What is actually happening?\r\nAlthough there isn't a discrepancy in rendered HTML between client and SSR, it gives warnings that there is.\r\n\r\n![warningD](https://user-images.githubusercontent.com/1075694/88136132-a28f2d00-cbb6-11ea-84db-f38d0bf3adf3.png)\r\n![warningE](https://user-images.githubusercontent.com/1075694/88136136-a327c380-cbb6-11ea-81e6-b3830645de60.png)\r\n\r\n### Work around\r\nI used a [render function](https://vuejs.org/v2/guide/render-function.html) instead of a dynamic-component:\r\n```\r\nrender(h) {\r\n    return h(this.component, this.$slots.default);\r\n}\r\n```\r\n\r\n### Other info\r\nPrevious issue: https://github.com/vuejs/vue/issues/11532\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue SSR v-html on dynamic-component hydration warning",
        "labels": "bug",
        "id": 123665
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/kubotafumiya/pen/qBOwEOV](https://codepen.io/kubotafumiya/pen/qBOwEOV)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Set the el option to an element that contains a textarea (or pre) with a newline at the beginning, and  create a Vue instance.\r\n\r\n\r\n```html\r\n<div id=\"app\">\r\n<textarea>\r\n\r\n\r\nThree line breaks are ignored.\r\n</textarea>\r\n</div>\r\n```\r\n\r\n```javascript\r\nnew Vue({\r\n  el: '#app',\r\n});\r\n```\r\n\r\n### What is expected?\r\nThe line breaks are removed.\r\n\r\n\r\n### What is actually happening?\r\nLine breaks are not deleted.\r\n\r\n---\r\nhttps://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\r\n\r\nI think it's okay for a single line break to be ignored according to this specification.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Line breaks in textarea are excessively removed.",
        "labels": "bug",
        "id": 123666
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/AleksandrasNovikovas/w042x1c8/](https://jsfiddle.net/AleksandrasNovikovas/w042x1c8/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun provided fiddle. There are three svg boxes with foreignObject:\r\n1. contains simple html tags\r\n2. contains simple vue component\r\n3. contains complex (with slot) vue component\r\n\r\n\r\n### What is expected?\r\nAll three boxes should show link and input elements\r\n\r\n### What is actually happening?\r\nThird box does not show link and input elements.\r\n\r\n---\r\nWhile inspecting DOM (in chrome or in firefox) you will find that elements of second box and third box are identical.\r\nProblem is their types: (in chome dev console select element and tab properties)\r\nselect input element from second box and you will find following list: Object->EventTarget->Node->Element->HTMLElement->HTMLInputElement->input;\r\nselect input element from third box and you will find following list: Object->EventTarget->Node->Element->SVGElement->input;\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Components slots are not rendered inside svg foreignObject",
        "labels": "bug",
        "id": 123667
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://github.com/tuomassalo/vue-ssr-v-html-bug](https://github.com/tuomassalo/vue-ssr-v-html-bug)\r\n\r\n\r\n### Steps to reproduce\r\n- clone the repo\r\n- run `npm run dev`\r\n- open `localhost:8080`\r\n- observe Console log.\r\n\r\n\r\n### What is expected?\r\nI expect SSR to render \"bar: Bar!\", as the client-side does.\r\n\r\nOr, I'd like to get an eslint warning that this is a bad idea (if that is the problem).\r\n\r\n### What is actually happening?\r\n`App.vue` fails to render `bar-component` on the server. Instead, it outputs `<bar-component></bar-component>`, and the dev server gives the warning \"The client-side rendered virtual DOM tree is not matching server-rendered content.\"\r\n\r\n---\r\n\r\nThe key part of `App.vue` is this:\r\n\r\n```\r\n<div v-if=\"foo\" v-html=\"'Foo.'\"/>\r\n<div v-else>\r\n  bar: <bar-component/>\r\n</div>\r\n```\r\n\r\nMy original component was naturally longer. I ran into this problem after changing the `v-if` line from something like:\r\n\r\n    <div v-if=\"foo\">{{ foo }}</div>\r\n\r\nTo:\r\n\r\n    <div v-if=\"foo\" v-html=\"foo\"/>\r\n\r\n... which *seemed* innocuous to me.\r\n\r\nFinally, apologies for posting a very possible duplicate.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR fails to render component inside v-else of a v-if with v-html",
        "labels": "bug",
        "id": 123668
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://github.com/Tibon4ik/vue-server-renderer-inherit-attrs](https://github.com/Tibon4ik/vue-server-renderer-inherit-attrs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClone the repo\r\n* $ npm install\r\n* $ npm run test\r\n\r\n\r\nOr:\r\n```javascript\r\n// Step 1: Create a Vue instance\r\nconst Vue = require(\"vue\");\r\n\r\nconst AppCard = {\r\n  template: `<div>appCardProp: {{ appCardProp }}</div>`,\r\n  props: {\r\n    appCardProp: {}\r\n  }\r\n}\r\n\r\nconst PlayerCard = {\r\n  template: `<AppCard v-bind=\"$attrs\" />`,\r\n  components: { AppCard },\r\n  inheritAttrs: false\r\n}\r\n\r\nconst app = new Vue({\r\n  template: `\r\n  <div>\r\n    <PlayerCard app-card-prop=\"appCardProp value\" />\r\n  </div>\r\n  `,\r\n  components: { PlayerCard }\r\n});\r\n\r\n// Step 2: Create a renderer\r\nconst renderer = require(\"vue-server-renderer\").createRenderer();\r\n\r\n// Step 3: Render the Vue instance to HTML\r\nrenderer.renderToString(app, (err, html) => {\r\n  if (err) throw err;\r\n  console.log(html);\r\n  // <div data-server-rendered=\"true\"><div app-card-prop=\"appCardProp value\">appCardProp: appCardProp value</div></div>\r\n  // Html attribute \"app-card-prop\" must be missing\r\n});\r\n```\r\n\r\n### What is expected?\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div>\r\n    appCardProp: appCardProp value\r\n  </div>\r\n</div>\r\n```\r\n\r\n### What is actually happening?\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div app-card-prop=\"appCardProp value\">\r\n    appCardProp: appCardProp value\r\n  </div>\r\n</div>\r\n```\r\n\r\n---\r\nThis bug happens when i use component with inheritAttrs: false, which use another component on top level of section or render function.\r\n\r\nI want to pass props to inner component with v-bind=\"$attrs\" and inheritAttrs: false. It passes props inside but still adds attributes to html element.\r\n\r\nI noticed that this bug doesn't occur in next cases:\r\n* if i set inheritAttrs: false on inner component (AppCard of code section).\r\n* if top level of \"template\" or render function is not a component (e.g. simple \"div\" or \"span\").\r\n\r\nRelated: https://github.com/nuxt/nuxt.js/issues/7195\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: inheritAttrs false doesn't work properly",
        "labels": "bug",
        "id": 123669
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/b71adnym/2/](https://jsfiddle.net/b71adnym/2/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nNest a component with an inline-template that has a ref in a v-for.\r\n\r\n\r\n### What is expected?\r\ncomponent.$ref.ref should point to the respective element.\r\n\r\n### What is actually happening?\r\ncomponent.$ref.ref is a singleton array with the element reference.\r\n\r\n\r\n---\r\ncheckInFor loops over the element ancestors up to the document root, so it believes that the ref is in a loop, but it actually isn't.\r\nThe check should stop at the component root.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "\"refInFor\" searches upwards of inline-template boundary",
        "labels": "bug",
        "id": 123670
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/embed/heuristic-brown-u7rvw?fontsize=14&hidenavigation=1&theme=dark](https://codesandbox.io/embed/heuristic-brown-u7rvw?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick the tick box.\r\n\r\n### What is expected?\r\nIt should say \"BLUE BOX\" with a blue background colour.\r\n\r\n### What is actually happening?\r\nIt says \"BLUE BOX\" with no background colour.\r\n\r\n---\r\nThe issue stems from the data-v-* attribute not being re-set for the blue_block div when it is swapped to. It is still using the data-v-* attribute of the child div in the functional component. Thus the CSS class styling does not apply. \r\n\r\n\r\nhttps://imgur.com/a/gukDePJ\r\n\r\n\r\nSwapping from a functional component to something else is useful. E.g. When showing a simple loading bar component before swapping to a more complex component.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Swapping from functional to non-functional component using v-if does not change v-data-* attribute.",
        "labels": "bug",
        "id": 123671
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codepen.io/deqwin/pen/wvaMxoO](https://codepen.io/deqwin/pen/wvaMxoO)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nopen the reproduction above and you will see a red vue warning in the console\r\n\r\n### What is expected?\r\na successful hydration\r\n\r\n### What is actually happening?\r\nthe hydration fails and the app re-renders absolutely\r\n\r\n---\r\nthis looks like the problem caused by the empty text node (src/core/vdom/patch.js line:646)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Hydration fails when write like \"<div><span>123</span>{{value}}</div>\" in the template and the data \"value\" is a empty string",
        "labels": "bug",
        "id": 123672
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/y9kmcbg6/](https://jsfiddle.net/y9kmcbg6/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. JSFiddle will render both elements.\r\n2. After 3s, it will toggle off\r\n3. After 3s, it will toggle on\r\n4. To see it happen again, rerun the jsfiddle\r\n\r\n### What is expected?\r\nAt step 3, the bottom slot content should re-appear when ToggleComponent toggles back\r\n\r\n### What is actually happening?\r\nThe bottom slot never re-appears\r\n\r\n---\r\nSeems to be related to the `v-if` on line 21. I'm doing this b/c it's useful to have an optional slot, but I don't want an extra div to appear when the slot isn't used (for layout reasons). I'm fairly new to vue, so I don't know if there's a different recommended way to do this.\r\n\r\nNot documented in the example, but if ParentComponent updates, the slot content will re-appear\r\n\r\nexample code included here for perusal:\r\n\r\n```vue\r\nconst ToggleComponent = {\r\n  data() {\r\n    return {\r\n      toggleEl: true,\r\n    };\r\n  },\r\n\r\n  created() {\r\n    setTimeout(() => this.toggleEl = false, 3000);\r\n    setTimeout(() => this.toggleEl = true, 6000);\r\n  },\r\n  render(h) {\r\n    return this.toggleEl ? h('div', this.$slots.default) : null\r\n  }\r\n};\r\n\r\nconst SlotComponent = {\r\n  template: `\r\n    <div>\r\n      <slot></slot>\r\n      <div v-if=\"$slots.other\">\r\n        <slot name=\"other\"></slot>\r\n      </div>\r\n    </div>\r\n  `\r\n}\r\n\r\nconst ParentComponent = {\r\n  template: `\r\n    <ToggleComponent>\r\n      <SlotComponent>\r\n        <template v-slot:default>\r\n          I should have an element below me\r\n        </template>\r\n        <template v-slot:other>\r\n          I am the element below you\r\n        </template>\r\n      </SlotComponent>\r\n    </ToggleComponent>\r\n  `,\r\n\r\n  components: {\r\n    ToggleComponent,\r\n    SlotComponent\r\n  },\r\n}\r\n\r\nvar demo = new Vue({\r\n  el: '#demo',\r\n  template: `\r\n    <ParentComponent/>\r\n  `,\r\n\r\n  components: {\r\n    ParentComponent\r\n  },\r\n});\r\n\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Slot wrapped in `v-if` disappears after re-render",
        "labels": "bug",
        "id": 123673
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://gist.github.com/aimozg/c073eea5a55062e3dcd8f887a8567807](https://gist.github.com/aimozg/c073eea5a55062e3dcd8f887a8567807)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun example.js in Node.\r\n\r\nAlternative steps/Detailed explanation:\r\n1. Setup Vue template compiler with `whitespace: 'condense'`. (it is default for vue-cli).\r\n2. Render template with `&nbsp;` entity, e.g. `<p>a&nbsp;b</p>`\r\n3. Inspect template for actual non-breaking space character\r\n\r\n### What is expected?\r\n`&nbsp;` entity rendered as non-breaking space character; example.js output should contain\r\n```\r\n---- whitespace: condense\r\n// code\r\nNBSP FOUND\r\n```\r\n\r\n### What is actually happening?\r\n`&nbsp;` entity is rendered as plain space, example.js output contains\r\n```\r\n---- whitespace: condense\r\n// code\r\nNBSP NOT FOUND\r\n```\r\n\r\n---\r\nThe whitespace is stripped by this compiler code:\r\n\r\n```js\r\nif (!inPre && whitespaceOption === 'condense') {\r\n  // condense consecutive whitespaces into single space\r\n  text = text.replace(whitespaceRE, ' ')\r\n}\r\n```\r\n\r\nand `\"&nbsp;\"`s are replaced by `\"\\xA0\"`s with entity decoder earlier.\r\n\r\nRelated issues is https://github.com/vuejs/vue/issues/10485\r\n\r\n**Suggestion**:\r\n\r\nNarrower whitespaceRE regexp, like `/[ \\t\\r\\n]+/g`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "With `whitespace:condense` all &nbsps;, even meaningful, are converted to spaces",
        "labels": "bug",
        "id": 123674
    },
    {
        "body": "### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/practical-shaw-br23c](https://codesandbox.io/s/practical-shaw-br23c)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the codesandbox and you'll see a warning like `[Vue warn]: Duplicate keys detected: 'constructor'. This may cause an update error.`\r\n\r\nClick the \"swap\" button TWICE to swap the list in the data, triggering the error.\r\n\r\nIf the literal string \"constructor\" in the first list is changed for any other string, there are no errors or warnings.\r\n\r\n### What is expected?\r\nThe list should swap between the \"first\" and \"second\" list\r\n\r\n### What is actually happening?\r\n\"TypeError: Cannot read property 'key' of undefined\"\r\n\r\n---\r\n:( this was a hard bug to track down.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "the string constructor cannot be used as a `key`",
        "labels": "bug",
        "id": 123675
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/yamelkaya/pen/KKwvdrY](https://codepen.io/yamelkaya/pen/KKwvdrY)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen codepen example. There are 3 components `test-x` on the page which set text color and background. Each label tells about text color and background.\r\n\r\n\r\nChrome: everything works as expected \r\n\r\nEdge 18: 1st and 3rd labels have incorrect color\r\n\r\n### What is expected?\r\n1: red text on yellow bg\r\n2: red on gray\r\n3: black on yellow \r\n\r\n### What is actually happening?\r\n1: black on gray\r\n2: red on gray\r\n3: black on gray\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Problem with v-bind:class in Microsoft Edge for components",
        "labels": "bug",
        "id": 123676
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/xiangyuecn/pen/eYmmPNP](https://codepen.io/xiangyuecn/pen/eYmmPNP)\r\n\r\nmoved from https://github.com/vuejs/vue/issues/10892\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nThe repro adds entries to an array, causing a re render that. The template intentionally displays the elapsed time to see which v-once work and which do not\r\n\r\n### What is expected?\r\n\r\nAll v-once to never render again\r\n\r\n### What is actually happening?\r\n\r\nTest 3 first template with a `v-once` re renders all the time. **Workaround** is to append an empty `span`: `<template v-once>[{{ getTime() }}] {{ obj.msg }}<span/></template>`\r\nTest 5: the second template with `v-once` still rerenders. **Workaround** is to use a different tag like a span or use the `v-once` on the parent.\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-once on template not working inside a v-for in two cases",
        "labels": "bug",
        "id": 123677
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/30115/](https://jsfiddle.net/50wL7mdz/30115/)\r\n\r\n### Steps to reproduce\r\nAdd a modifier to one of the event listeners. e.g. @emission.once\r\n\r\n### What is expected?\r\nThat all arguments will be passed to the function\r\n\r\n### What is actually happening?\r\nOnly the first argument is passed\r\n\r\n---\r\nMy guess is that it lies in the template compiler which creates a function($event){...}  and calling the handler with $event instead of ...arguments?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Multiple arguments in custom event with a modifier are not passed to handler",
        "labels": "bug",
        "id": 123678
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/vuejs/vue/blob/dev/dist/vue.esm.browser.js#L3296](https://github.com/vuejs/vue/blob/dev/dist/vue.esm.browser.js#L3296)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nSee the link https://github.com/vuejs/vue/blob/dev/dist/vue.esm.browser.js#L3296\r\n\r\n### What is expected?\r\nfunction createComponentInstanceForVnode (\r\n  vnode, // we know it's MountedComponentVNode but flow doesn't\r\n  parent // activeInstance in lifecycle state\r\n) {\r\n...\r\n}\r\n\r\n### What is actually happening?\r\nfunction createComponentInstanceForVnode (\r\n  vnode, // we know it's MountedComponentVNode but flow doesn't\r\n  parent, // activeInstance in lifecycle state\r\n) {\r\n...\r\n}\r\n\r\n---\r\nI've got an error when trying to add the vue.esm.browser.js file into a bundle using systemjs-builder\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Unexpected comma in the function declaration",
        "labels": "bug",
        "id": 123679
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/codesandbox-nuxt-vdcv8](https://codesandbox.io/s/codesandbox-nuxt-vdcv8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nView page source\r\n\r\n### What is expected?\r\n```html\r\n<textarea id=\"input-62\" rows=\"5\"></textarea>\r\n```\r\n\r\n### What is actually happening?\r\n```html\r\n<textarea id=\"input-62\" rows=\"5\">null</textarea>\r\n```\r\n\r\n---\r\nSimilar to #9231\r\n\r\nRepro in `vue/test/ssr/ssr-string.spec.js`:\r\n```js\r\n  it('falsy domProps value', done => {\r\n    renderVmWithOptions({\r\n      render (h) {\r\n        return h('div', [\r\n          h('textarea', {\r\n            domProps: {\r\n              value: null\r\n            }\r\n          })\r\n        ])\r\n      }\r\n    }, result => {\r\n      expect(result).toContain(\r\n        '<div data-server-rendered=\"true\"><textarea></textarea></div>'\r\n      )\r\n      done()\r\n    })\r\n  })\r\n```\r\n\r\nRelevant vuetify code:\r\nhttps://github.com/vuetifyjs/vuetify/blob/243a7c34a1c58dff3753ad35dded13ba5002c8eb/packages/vuetify/src/components/VTextarea/VTextarea.ts#L86-L92\r\nhttps://github.com/vuetifyjs/vuetify/blob/243a7c34a1c58dff3753ad35dded13ba5002c8eb/packages/vuetify/src/components/VTextField/VTextField.ts#L357-L361\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR: textarea domProps keeps falsy values",
        "labels": "bug",
        "id": 123680
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, SSR directives are not applied to used (sub-)components but only to HTML-tags and elements.\r\n\r\n### Reproduction\r\n\r\n```js\r\n// Step 1: Create a Vue instance\r\nconst Vue = require(\"vue\");\r\n\r\nconst Test = {\r\n  template: `<div>This should be red</div>`\r\n}\r\n\r\nconst app = new Vue({\r\n  template: `\r\n  <div>\r\n    <Test v-make-red/>\r\n    <div v-make-red>This is red</div>\r\n  </div>\r\n  `,\r\n  components: {\r\n    Test\r\n  }\r\n});\r\n\r\nconst makeRed = (node, dir) => {\r\n  const style = node.data.style || (node.data.style = {});\r\n  if (Array.isArray(style)) {\r\n    style.push({ backgroundColor: \"red\" });\r\n  } else {\r\n    style.backgroundColor = \"red\";\r\n  }\r\n};\r\n\r\n// Step 2: Create a renderer\r\nconst renderer = require(\"vue-server-renderer\").createRenderer({\r\n  directives: {\r\n    makeRed\r\n  }\r\n});\r\n\r\n// Step 3: Render the Vue instance to HTML\r\nrenderer.renderToString(app, (err, html) => {\r\n  if (err) throw err;\r\n  console.log(html);\r\n  // <div data-server-rendered=\"true\"><div>This should be red</div> <div style=\"background-color:red;\">This is red</div></div>\r\n  // But should include red background-color style for the first div as well\r\n});\r\n```\r\n\r\nRelated: https://github.com/nuxt/nuxt.js/issues/6575\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: directive not applied to imported component",
        "labels": "bug",
        "id": 123681
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/zncxud6q/](https://jsfiddle.net/zncxud6q/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse test1, test2, or test3 buttons to see transition without stutter.\r\nUse test4, test5, or test6 buttons to see transition with stutter.\r\n\r\n### What is expected?\r\nNo stutter\r\n\r\n### What is actually happening?\r\nWhile the DOM is updating, the transition restarts, even though the portion updating isn't a child of anything transitioning\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "transition-group has stutter when component updated elsewhere",
        "labels": "bug",
        "id": 123682
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/embed/vue-template-ysl83](https://codesandbox.io/embed/vue-template-ysl83)\r\n\r\n### Steps to reproduce\r\nJust click the link and you see the error and start editing.\r\nGo to the second of the component and you see a red line (line no 24?)\r\nIt says that the string literal is not correct, but its because it loads just a piece of it.\r\n\r\n### What is expected?\r\nNo compilation error\r\n\r\n### What is actually happening?\r\nA compilation error\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Error compiling long string litteral  (many + on many lines)",
        "labels": "bug",
        "id": 123683
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/4fyrj95L/](https://jsfiddle.net/4fyrj95L/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nset model binded to select element and the array that iterated the option list at the same time\r\n\r\nmake sure the new model value do not match any of the new options\r\n\r\nthe model will be set to `undefined`\r\n\r\n### What is expected?\r\n\r\nmodel value to be set to `1`\r\n\r\n### What is actually happening?\r\nmodel's value set to `undefined`\r\n\r\n---\r\nThis bug only appears when model and the options changed at the same and the new model value does not match any option, other situations behaves correctly as far as I tested.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "when <select> model and the option list changed at the same time, model may incorrectly set to `undefined`",
        "labels": "bug",
        "id": 123684
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/oguimbal/vuebug](https://github.com/oguimbal/vuebug)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```\r\ngit clone git@github.com:oguimbal/vuebug.git\r\nnpm i\r\nnpm start\r\n```\r\n\r\nWait a couple of seconds, and your compilation process will be frozen.\r\n\r\nIf you attach a debugger to the node process, you will see the infinite loop in `generateCodeFrame()` method of vue-template-compiler:\r\n\r\n![bug](https://raw.githubusercontent.com/oguimbal/vuebug/master/bug.png)\r\n\r\n### What is expected?\r\nI would expect the compiler not to freeze\r\n\r\n### What is actually happening?\r\nThe compiler is freezing\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Infinite loop in vue-template-compiler",
        "labels": "bug",
        "id": 123685
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\nhttps://codesandbox.io/s/vue-template-7hwty\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Create component with render function which can render another component after time.\r\n2. Rendering component after promise resolution/timeout is causing render twice and change of `$attrs` if child component has any prop with key equal to attr.\r\n3. Comment prop in targetComponent and reload page.\r\n4. All attrs are fine again.\r\n\r\n### What is expected?\r\nRender function is called once and `$attrs` of component are not changed.\r\n\r\n### What is actually happening?\r\nRender is called twice and `attrs` which has key same as `props` of child component are removed.\r\n\r\n---\r\nI created on my project custom loader component which has to handle loading of lazy loaded components and networking errors, because I can't use https://vuejs.org/v2/guide/components-dynamic-async.html#Handling-Loading-State in my case. This bug can be ommited by not adding downloaded component to reactivity (outside data as variable).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Rendering async loaded component is causing attrs change.",
        "labels": "bug",
        "id": 123686
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\n[https://jsfiddle.net/zs5dan7x/](https://jsfiddle.net/zs5dan7x/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- pass a Symbol as the value of a component prop which expects another type\r\n\r\n### What is expected?\r\nthe console should show the validation error message\r\n\r\n### What is actually happening?\r\nthe prop validator tries to build an validation error message, it fails with :\r\n\r\n    TypeError: Cannot convert a Symbol value to a string\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "prop validator fails to generate validation error message when using Symbols",
        "labels": "bug",
        "id": 123687
    },
    {
        "body": "### Version\r\n4.0.0-rc.1\r\n\r\n### Reproduction link\r\n[https://github.com/tobyzerner/vue-cli-nbsp-bug](https://github.com/tobyzerner/vue-cli-nbsp-bug)\r\n\r\n\r\n\r\n\r\n\r\n### Environment info\r\n```\r\nEnvironment Info:\r\n  System:\r\n    OS: macOS 10.14.6\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\r\n  Binaries:\r\n    Node: 10.15.3 - /usr/local/bin/node\r\n    Yarn: 1.17.3 - ~/.npm-global/bin/yarn\r\n    npm: 6.11.3 - ~/.npm-global/bin/npm\r\n  Browsers:\r\n    Chrome: 76.0.3809.132\r\n    Firefox: 68.0.2\r\n    Safari: 12.1.2\r\n  npmPackages:\r\n    @vue/babel-helper-vue-jsx-merge-props:  1.0.0\r\n    @vue/babel-plugin-transform-vue-jsx:  1.0.0\r\n    @vue/babel-preset-app:  4.0.0-rc.1\r\n    @vue/babel-preset-jsx:  1.1.0\r\n    @vue/babel-sugar-functional-vue:  1.0.0\r\n    @vue/babel-sugar-inject-h:  1.0.0\r\n    @vue/babel-sugar-v-model:  1.0.0\r\n    @vue/babel-sugar-v-on:  1.1.0\r\n    @vue/cli-overlay:  4.0.0-rc.1\r\n    @vue/cli-plugin-babel: ^4.0.0-rc.1 => 4.0.0-rc.1\r\n    @vue/cli-plugin-eslint: ^4.0.0-rc.1 => 4.0.0-rc.1\r\n    @vue/cli-service: ^4.0.0-rc.1 => 4.0.0-rc.1\r\n    @vue/cli-shared-utils:  4.0.0-rc.1\r\n    @vue/component-compiler-utils:  3.0.0\r\n    @vue/preload-webpack-plugin:  1.1.1\r\n    @vue/web-component-wrapper:  1.2.0\r\n    eslint-plugin-vue: ^5.0.0 => 5.2.3\r\n    vue: ^2.6.10 => 2.6.10\r\n    vue-eslint-parser:  5.0.0\r\n    vue-hot-reload-api:  2.3.3\r\n    vue-loader:  15.7.1\r\n    vue-style-loader:  4.1.2\r\n    vue-template-compiler: ^2.6.10 => 2.6.10\r\n    vue-template-es2015-compiler:  1.9.1\r\n  npmGlobalPackages:\r\n    @vue/cli: 4.0.0-rc.1\r\n```\r\n\r\n\r\n### Steps to reproduce\r\nClone the repo, `npm install && npm run serve`\r\n\r\n### What is expected?\r\nThe template contains a span containing a `&nbsp;` character. This span has a red background. Thus you should see a small red box on the page.\r\n\r\n### What is actually happening?\r\nThe `&nbsp;` in the template is being ignored and converted into a normal space, which means the span element is not displayed.\r\n\r\n---\r\nI cannot replicate this bug in a plain Vue jsfiddle, nor a project using vue-loader without vue-cli. Thus I think something in vue-cli may be the culprit rather than vue-template-compiler or Vue itself.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "With `whitespace: 'condense'`, elements contain only &nbsp; and spaces are condensed into empty tags",
        "labels": "bug",
        "id": 123688
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Minimal reproduction\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <script src=\"https://unpkg.com/vue\"></script>\r\n\r\n    <div id=\"app\">\r\n      <base-link>Link</base-link>\r\n    </div>\r\n\r\n    <button id=\"action\">Load</button>\r\n\r\n    <script>\r\n      let vm\r\n      const button = document.getElementById('action')\r\n      button.addEventListener('click', () => {\r\n        if (vm) {\r\n          vm.$destroy()\r\n          vm = null\r\n          button.textContent = 'Load'\r\n        } else {\r\n          vm = new Vue({\r\n            el: '#app',\r\n            components: {\r\n              BaseLink: {\r\n                template: `<a href=\"#\" @click=\"onClick\"><slot /></a>`,\r\n                methods: {\r\n                  onClick(evt) {\r\n                    evt.preventDefault()\r\n                    console.log('clicked')\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          })\r\n          button.textContent = 'Destroy'\r\n        }\r\n      })\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n- Load the app by clicking the button and take a heap snapshot\r\n- Load/unload the app multiple times by clicking the button\r\n- End in loaded stat and take a heap snapshot\r\n- Search `Vue` in the memory snapshot viewer\r\n\r\nI've personally tested this in Chrome.\r\n\r\n### What is expected?\r\n\r\nVue retained size should not increase\r\n\r\n![Screen Shot 2019-09-06 at 09 42 58](https://user-images.githubusercontent.com/664177/64410231-de96cd80-d08a-11e9-968c-fee7ae1815a7.png)\r\n![Screen Shot 2019-09-06 at 09 43 03](https://user-images.githubusercontent.com/664177/64410232-de96cd80-d08a-11e9-85d8-5ee29bc0818e.png)\r\n\r\n### What is actually happening?\r\n\r\nVue retained size increases\r\n\r\n---\r\n**Background:** I'm using Vue and Turbolinks together in a project where the backend serves HTML with Vue templates inlined. This means I have to create and destroy Vue instances when navigating between pages.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "VueComponent instances retained after calling vm.$destroy",
        "labels": "bug",
        "id": 123689
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/keegan_openbay/nhvemx32/](https://jsfiddle.net/keegan_openbay/nhvemx32/) (be aware that JSFiddle does not show TypeScript compiler errors)\r\n\r\n### Steps to reproduce\r\n- use TypeScript >= 3.6.1-beta (currently stable at 3.6.2)\r\n- have at least one prop\r\n- correctly type all your methods\r\n- use a non-string `data` property in your component options\r\n\r\n### What is expected?\r\nNormal behavior; the `data` property is correctly typed and found on the instance.\r\n\r\n### What is actually happening?\r\nErrors arise because:\r\n\r\n- in `methods`, the data properties are not found on the component type.\r\n- in `watch`, the data properties are typed `string | WatchOptionsWithHandler<any> | WatchHandler<any>`.\r\n- in `computed`, the data properties are typed `(() => any) | ComputedOptions<any>`.\r\n\r\n---\r\n<img width=\"517\" alt=\"Screen Shot 2019-08-29 at 6 50 52 PM\" src=\"https://user-images.githubusercontent.com/18669659/63982476-aee73480-ca90-11e9-9231-44bf8c0aa9f7.png\">\r\n<img width=\"565\" alt=\"Screen Shot 2019-08-29 at 7 00 23 PM\" src=\"https://user-images.githubusercontent.com/18669659/63982477-aee73480-ca90-11e9-9593-b0d11eb1007d.png\">\r\n<img width=\"528\" alt=\"Screen Shot 2019-08-29 at 7 10 17 PM\" src=\"https://user-images.githubusercontent.com/18669659/63982478-aee73480-ca90-11e9-94c2-ee798f972fae.png\">\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Data properties not found and/or incorrectly typed in TypeScript 3.6.2",
        "labels": "bug",
        "id": 123690
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\n- Functional components: [https://github.com/sin1ght/test](https://github.com/sin1ght/test)\r\n- Regular components and slots: https://codesandbox.io/embed/vue-template-3pnsx\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nAfter npm run serve, click the toggle button and find that child has no style.\r\n\r\nChild and child2 components are reused, child's data-v-* disappears, causing the style to disappear\r\n\r\n### What is expected?\r\n\r\nChild should have a black background scope style\r\n\r\n### What is actually happening?\r\n\r\nChild without style\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Scoped CSS attribute is reused or discarded when switching between components with scoped CSS",
        "labels": "bug",
        "id": 123691
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/vue-ssr-nested-async-components-repro-script-ozze7](https://codesandbox.io/s/vue-ssr-nested-async-components-repro-script-ozze7)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nWhen the codesandbox starts up, it should run the ```npm start``` script. If it doesn't, open a bash terminal and run ```npm start``` to see the HTML generated from SSR. You can also take a look at the components in the ```src``` folder to see how they are configured.\r\n\r\n### What is expected?\r\nExpected the HTML for the nested async component (called \"SomeComponent\") to be rendered during SSR:\r\n\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div class=\"Grid\">\r\n    <div class=\"Grid__left\">Left\r\n      <div class=\"SomeComponent\">Somecomponent with value: first</div>\r\n    </div>\r\n    <div class=\"Grid__right\">Right\r\n      <div class=\"SomeComponent\">Somecomponent with value: second</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n### What is actually happening?\r\nThe HTML for the nested async component (called \"SomeComponent\") is not rendered during SSR. Only the HTML for the outer async component (called \"Grid\" ) is rendered:\r\n\r\n```html\r\n<div data-server-rendered=\"true\">\r\n  <div class=\"Grid\">\r\n    <div class=\"Grid__left\">Left\r\n    </div>\r\n    <div class=\"Grid__right\">Right\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n---\r\nI have an App that is composed of many async components. Some of these components have named slots. I was trying to build a render function that will accept a config object to render these components in various setups (for example, an async component set to a named slot of another async component). I noticed that if I nest async components within another, the HTML for the async component does not render during SSR. The codesandbox is simplified scenario of this\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Nested async components passed as slots are not rendered in SSR",
        "labels": "bug",
        "id": 123692
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/vue-template-j1w3r](https://codesandbox.io/s/vue-template-j1w3r)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn my example change the value by typing in the input field.\r\nIn the working example both values change.\r\nIn the not working example only the nested value changes.\r\nThe only difference is the wrapping `<template>` node\r\n\r\n### What is expected?\r\nscoped slot params (controllerSlotData) should be reactive in both cases\r\n\r\n### What is actually happening?\r\nscoped slot params (controllerSlotData) is not reative\r\n\r\n---\r\nThe problem exists only when combining v-slot on component itself in combination with v-if/v-else\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "nested v-slot is not reactive when using abbreviated syntax (v-slot on component itself) combined with an v-if/v-else",
        "labels": "bug",
        "id": 123693
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/zrh122/scg6eq1t/](https://jsfiddle.net/zrh122/scg6eq1t/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. open the reproduction link\r\n2. look at the rendered result\r\n\r\n### What is expected?\r\n```js\r\na: a\r\nb: b\r\n```\r\n\r\n### What is actually happening?\r\n```js\r\na:\r\nb: b\r\n```\r\n\r\n---\r\nThis is an english version of issue #10165.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "dynamic v-slot maybe overwite when used together with v-for on same element",
        "labels": "bug",
        "id": 123694
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/maunier/nuxt-learning](https://github.com/maunier/nuxt-learning)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nnpm install\r\nnpm run dev\r\nhttp://127.0.0.1:8080/\r\n\r\n### What is expected?\r\ni expect the div is like this:\r\n```\r\n<div text=\"isClient\">isClient</div>\r\n```\r\n\r\n### What is actually happening?\r\nbut now it is:\r\n```\r\n<div text=\"isServer\">isClient</div>\r\n```\r\n\r\n---\r\nit is not Nuxt's issue, I have tested in my own vue-ssr server without Nuxt, the problem is exsist still.  but the that project is not on the github, so i paste the nuxt project's link here\r\n\r\nthe core code is like this:\r\n```\r\n<div :text=\"text\">{{ text }}</div>\r\n```\r\n```\r\ndata () {\r\n      return {\r\n        text: ''\r\n      }\r\n    },\r\n\r\n    created () {\r\n      this.text = Vue.prototype.$isServer ? 'isServer' : 'isClient'\r\n    },\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-bind not update dom in client side when data in client side is different from the server side",
        "labels": "bug",
        "id": 123695
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/kk445knpx3](https://codesandbox.io/s/kk445knpx3)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn the `Child.vue` we have a slot with a default slot content. In the `Parent.vue` we override the default content of the child. \r\n\r\n### What is expected?\r\nIMO the content of the slot in child component should not be evaluated since the content provided from the parent will be used.\r\n\r\n### What is actually happening?\r\nThe content of the parent it renders which is what I expect.\r\n\r\nThe default content of the `Child.vue` it's evaluated even if it not renders. That's why you see in the console: `Cannot read property 'length' of null`\r\n\r\n---\r\nMaybe that's not a bug and instead it's the intentional behavior, but it doesn't make sense to me, to evaluate something that will not render.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Default slot content should not be evaluated when the parent is providing it",
        "labels": "bug",
        "id": 123696
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/mybeta/1dfwsazn/](https://jsfiddle.net/mybeta/1dfwsazn/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nWhen I use DOM Template Parsing Caveats to add a component (e.g. `<tr is=\"custom-row\">` ) I can't use scoped slots (slotProps) without receiving a warning in the console. I would like to use it this way:\r\n```html\r\n<tr is=\"custom-row\" v-slot=\"slotProps\">\r\n    slotProps: {{slotProps.test}}\r\n</tr>\r\n```\r\n\r\n### What is expected?\r\nNo warning.\r\n\r\n### What is actually happening?\r\nI get the following warning in the console. \r\n>```\r\n>[Vue warn]: Error compiling template:\r\n>v-slot can only be used on components or <template>.\r\n>```\r\n\r\nThe rest looks like it works as expected.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Scoped Slot warns when used inside of dynamic component on regular element",
        "labels": "bug",
        "id": 123697
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/fp1omdaw/1/](https://jsfiddle.net/fp1omdaw/1/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn a v-pre tag or child, use an attribute listed under the `isBooleanAttr` list in `src\\platforms\\web\\util\\attrs.js`\r\n\r\n### What is expected?\r\nThe attribute value is unchanged\r\n\r\n### What is actually happening?\r\nThe attribute value is changed, e.g. `open` has the value to set to `open`\r\n\r\n---\r\nWhen working with MathML, we need to use the `open` attribute\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Attributes listed under isBooleanAttr are altered under v-pre attributed tags",
        "labels": "bug",
        "id": 123698
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/action-hong/pen/eaKmOy](https://codepen.io/action-hong/pen/eaKmOy)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. click \"show/hide button\" to hide button \"add 1\"\r\n2. click \"show/hide button\" to show button \"add 1\"\r\n3. click \"add 1\"\r\n\r\n### What is expected?\r\nRepeat step 1 and step 2, Click the \"add 1\" to add 1 to the number\r\n\r\n### What is actually happening?\r\nRepeat step 1 and step 2 , Click the \"add 1\" to add n(repeat times) to the number\r\n\r\n---\r\n5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "bug about keep-alive and @click.native caused repeated attach event handler?",
        "labels": "bug",
        "id": 123699
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/ebgj6fra/2/](https://jsfiddle.net/ebgj6fra/2/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Access the fiddle\r\n- click the \"change\" button\r\n\r\n### What is expected?\r\n*Hello world!* should change to *tada!*\r\n\r\n### What is actually happening?\r\nIn latest Safari (12.1) on Mac OS, nothing happens, but it works as expected in other browsers.\r\n\r\n---\r\nRemoving the `iframe` from the page makes the issue go away, as seen here: https://jsfiddle.net/ebgj6fra/3/\r\n\r\nSeems like maybe there's a difference in how/when the latest Safari runs the `flushCallbacks`.\r\n\r\nConditionally rendering the iframe (`v-if=\"myExpression !== null`), triggering the listener inside a `setTimeout` or calling `$forceUpdate` circumvents the issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Triggering a listener of a functional component breaks reactivity in Safari 12.1, if iframe is on the page",
        "labels": "bug",
        "id": 123700
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <script src=\"https://unpkg.com/vue\"></script>\r\n\r\n    <div id=\"app\">\r\n      <div id=\"nav\">\r\n        <button @click=\"goHome\">go to Home</button>\r\n        <button @click=\"goAbout\">go to About</button>\r\n      </div>\r\n      <component :is=\"current\"></component>\r\n    </div>\r\n\r\n    <script>\r\n      const Home = {\r\n        name: 'Home',\r\n        template: `\r\n      <div>\r\n        <h2>Home</h2>\r\n      </div>\r\n      `,\r\n      }\r\n\r\n      const About = {\r\n        template: `\r\n        <div class=\"about\">\r\n    <h1>This is an about page</h1>\r\n    <input type=\"text\" v-model=\"input\">\r\n  </div>\r\n      `,\r\n        name: 'about',\r\n        data: () => ({\r\n          input: '',\r\n        }),\r\n      }\r\n\r\n      const vm = new Vue({\r\n        el: '#app',\r\n        data() {\r\n          return {\r\n            current: 'Home',\r\n          }\r\n        },\r\n\r\n        methods: {\r\n          goHome() {\r\n            this.current = 'Home'\r\n          },\r\n          goAbout() {\r\n            this.current = 'About'\r\n          },\r\n        },\r\n        components: { Home, About },\r\n      })\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n\r\n![Screen Shot 2019-05-09 at 18 59 07](https://user-images.githubusercontent.com/664177/57471906-8a224380-728c-11e9-832d-f1ce989ee1e0.png)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n- go to the about page\r\n- type in the input\r\n- leave the page\r\n- collect garbage and take a snapshot with devtools\r\n\r\n### What is expected?\r\n\r\nVueComponent count should be stable\r\n\r\n### What is actually happening?\r\n\r\nVueComponent count keeps increasing.\r\n\r\n---\r\n\r\nseems to be related to typing in the input\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Memory leak with component with input with v-model",
        "labels": "bug",
        "id": 123701
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/r2xjo5cf/7/](https://jsfiddle.net/r2xjo5cf/7/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open dev tools to see console\r\n2. Cycle through the routes\r\n3. View console and observe lifecycle hook logging\r\n\r\n### What is expected?\r\nI'd expect once the `max` cache is reached (in the example case of 1), the component that gets pruned also gets destroyed. In [the documentation](https://vuejs.org/v2/api/#keep-alive) it states (emphasis mine): \r\n\r\n> `max`\r\n>\r\n> The maximum number of component instances to cache. Once this number is reached, the cached component instance that was least recently accessed **will be destroyed** before creating a new instance.\r\n\r\n### What is actually happening?\r\nThe pruned component is never destroyed, it's just removed from the cache. In the example, the `beforeDestroy` hook is never called.\r\n\r\n---\r\nRelated code: https://github.com/vuejs/vue/blob/636c9b4ef17f2062720b677cbbe613f146f4d4db/src/core/components/keep-alive.js#L37-L49\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "<keep-alive> doesn't `destroy` cached components after when max is 1",
        "labels": "bug",
        "id": 123702
    },
    {
        "body": "### Version\r\n2.5.9\r\n\r\n### Reproduction link\r\n[https://github.com/lk19940215/vue-issue](https://github.com/lk19940215/vue-issue)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. clone my github project\r\n\r\n2. \r\n  npm i\r\n  npm run dev\r\n\r\n3. \r\n      <div @click=\"functionClickHandle(i)\">{{i}}</div>  //  looks like '()\u2018 is required.\r\n\r\nsomething happend\r\n\r\nwindow.alert(1i am big boss)\r\nwindow.alert(2i am big boss)\r\n\r\nbecause it run's automatically.\r\n\r\n4. \r\n but `window.alert('item click changed')` did not.\r\n\r\n\r\n\r\n\r\n\r\n### What is expected?\r\ni just want to report.\r\n\r\n### What is actually happening?\r\nrun automatically\r\n\r\n---\r\nvue version >= 2.5.2\r\n\r\nOne day I maintain an old project,  something just happend, my web page always redirected to anothoer page. until i change the function named 'functionClickHandle' with 'itemClick'.  because 'functionClickHandle' has some judgments inside, and run automatically.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "build project with 'vue-cli 2', if some function named 'functionClickHandle' and bind with '@click=\"functionClickHandle()\"', It will run automatically.",
        "labels": "bug",
        "id": 123703
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/bponomarenko/uom10qd2/](https://jsfiddle.net/bponomarenko/uom10qd2/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open browser console.\r\n2. Click on Toggle button two times. \r\n\r\n### What is expected?\r\nDirective will emit the same console messages when applied to DOM elements and to components (on init and after click on button).\r\n\r\nI'm not sure what should be expected output. Either\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: first comp\r\nunbind: first elem\r\nbind: first comp\r\nbind: first elem\r\n```\r\n\r\nor \r\n\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: second comp\r\nunbind: second elem\r\nbind: first comp\r\nbind: first elem\r\n```\r\n\r\n### What is actually happening?\r\nMessages from the directive are the same on init, but different after button have been clicked.\r\n\r\nActual console output:\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: first comp\r\nunbind: second elem\r\nbind: second comp\r\nbind: first elem\r\n```\r\n\r\n---\r\nIt seems that order in which directives are applied to DOM elements and components are different. In my setup I have custom directive which relies on some DOM attribute with configuration data. When this custom directive is bound/unbound in a \"regular flow\" \u2013 everything works as expected (directive binds after element attributes are updated). However when directive is bound/unbound in case of Vue \"in-place patch strategey\", behavior seems to be different.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Custom directive binds differs on components vs elements",
        "labels": "bug",
        "id": 123704
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://codepen.io/aaronbird/pen/JVRKwa](https://codepen.io/aaronbird/pen/JVRKwa)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nI wrote a demo:  \r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <title>demo</title>\r\n    <style>\r\n      .link {\r\n        cursor: pointer;\r\n        user-select: none;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\r\n\r\n    <div id=\"app\">\r\n      <transition>\r\n        <keep-alive include=\"foo\">\r\n          <component :is=\"target\" @change=\"onChange\"></component>\r\n        </keep-alive>\r\n      </transition>\r\n    </div>\r\n    <script>\r\n      const Foo = {\r\n        name: \"foo\",\r\n        template: `<div class=\"link\" @click=\"$emit('change', 'bar')\">Go to Bar</div>`\r\n      };\r\n      const Bar = {\r\n        name: \"bar\",\r\n        template: `<div class=\"link\" @click=\"$emit('change', 'foo')\">Go to Foo</div>`\r\n      };\r\n      Vue.component(\"foo\", Foo);\r\n      Vue.component(\"bar\", Bar);\r\n      const app = new Vue({\r\n        data: {\r\n          target: \"foo\"\r\n        },\r\n        methods: {\r\n          onChange(target) {\r\n            this.target = target;\r\n          }\r\n        }\r\n      }).$mount(\"#app\");\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe debugging process is as follows:  \r\n1 Click \"Collect garbage\" and \"Take heap snapshot\"(snapshot 1)  \r\n2 Click the routing button on the left 10 times, then click \"Collect garbage\" and \"Take heap snapshot\"(snapshot 2)   \r\n3 Click the routing button on the left 10 times, then click \"Collect garbage\" and \"Take heap snapshot\"(snapshot 3)   \r\n![](https://i.imgur.com/FCe40P6.gif)  \r\n\r\nThe generated \"snapshot\" is as follows:\r\n\r\nsnapshot 1:\r\n![](https://i.imgur.com/S49oSJo.png)  \r\nsnapshot 2:\r\n![](https://i.imgur.com/X1bbOgU.png)  \r\nsnapshot 3:\r\n![](https://i.imgur.com/lLD8z7Y.png)\r\nAfter clicking 100 times:  \r\n![](https://i.imgur.com/E0bjppJ.png)  \r\n\r\nVueComponent is not being recycled, is this a bug?  \r\n\r\n### What is expected?\r\nWhy is this happening, is this a bug?\r\n\r\n### What is actually happening?\r\nComponent will not be cleared when switching components.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Memory leak when using \"transition\" and \"keep-alive\"",
        "labels": "bug",
        "id": 123705
    },
    {
        "body": "### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https://github.com/tbutcaru/v-issue-multiple-dynamic-slot-names](https://github.com/tbutcaru/v-issue-multiple-dynamic-slot-names)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Clone this repo: https://github.com/tbutcaru/v-issue-multiple-dynamic-slot-names\r\n2. Run: `npm install`\r\n3. Run: `npm run serve`\r\n\r\n### What is expected?\r\nMultiple dynamic slot names should work as expected.\r\n\r\n### What is actually happening?\r\nThe following error is thrown:\r\n```\r\nInvalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.#[headerslot]>Header slot</template>\r\n    Default slot\r\n    <template #[footerslot]\r\n```\r\n\r\n---\r\n**If one of the dynamic slot names is made static (doesn't matter which), the application is working.**     \r\n\r\n##### My investigation\r\n- file: `node_modules/vue-template-compiler/build.js`\r\n- line: 2563 (inside `attrs.forEach(function (attr) {`) added the following warn:   \r\n```\r\nwarn$1('--------------->> ' +  attr.name);\r\n```\r\n\r\n##### Investigation results:\r\n1. In the working scenario with only one dynamic slot name: the value of that dynamic slot name is `#[headerslot]`\r\n2. In the error scenario with two dynamic slot names: the value of the first dynamic slot name is\r\n```\r\n#[headerslot]>Header slot</template>\r\n    Default slot\r\n    <template #[footerslot]\r\n```\r\n\r\nSo, it looks like the compiler doesn't know how to extract just the attribute when there are multiple dynamic slot names.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Error using multiple dynamic slot names (Invalid dynamic argument expression)",
        "labels": "bug",
        "id": 123706
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/m7thp9o8/](https://jsfiddle.net/m7thp9o8/)\r\n\r\n### Steps to reproduce\r\n- Check console logs\r\n\r\n### What is expected?\r\nI expect `data.scopedSlots` to always be the same as its mirrored object `scopedSlots` in functional component context.\r\n\r\n### What is actually happening?\r\nDefault scoped slot function is undefined in `data.scopedSlots` (but not in `context.scopedSlots`) object unless I explicitly use default scoped slot the template, \r\n\r\n```vue\r\n<template #default>\r\n  <p>main content</p>\r\n</template>\r\n```\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Default scoped slot is not present under data.scopedSlots object in functional component",
        "labels": "bug",
        "id": 123707
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://codepen.io/zhangenming/pen/GexZQK](https://codepen.io/zhangenming/pen/GexZQK)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n```html\r\n    <input :value=\"price\" @input=\"e=>price=e.target.value\">\r\n```\r\n\r\nCompiled:\r\n\r\n```js\r\n    with(this){return _c('input',{domProps:{\"value\":price},on:{\"input\":e=>price=e.target.value}})}\r\n```\r\n\r\n```html\r\n    <input :value=\"price\" @input=\"function f(e){price=e.target.value}\">// this wont' be work\r\n```\r\n\r\n Compiled:\r\n\r\n```js\r\n    with(this){return _c('input',{domProps:{\"value\":price},on:{\"input\":function($event){function f(e){price=e.target.value}}}})}\r\n```\r\n\r\n\r\n### What is expected?\r\ncan be work\r\n\r\n### What is actually happening?\r\nthis wont' be work\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": " Different behaviors of  Arrow function and function ",
        "labels": "bug",
        "id": 123708
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://codepen.io/peterhpchen/pen/MxrRre?editors=1010](https://codepen.io/peterhpchen/pen/MxrRre?editors=1010)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n* First number picker is declared in container-two\r\n* Second number picker is declared by footer slot\r\n* Change number picker\r\n* The value of the first number picker would be changed, but the value of the second number picker would not be changed\r\n* If add slot content in container-two(js code line: 59-61), the value of the second number picker will be changed\r\n\r\n### What is expected?\r\nThere are two situations:\r\n* If this code is correct(without line:59-61): Both number value should be changed when picker changed.\r\n* If this code is wrong(should add line:59-61): It should have error message or even not render slot.\r\n\r\n### What is actually happening?\r\n* The value of the second number picker should be changed\r\n**Or**\r\n* Error message should be shown or even not render slot.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Slot props in render function is not sync",
        "labels": "bug",
        "id": 123709
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/chrisvfritz/50wL7mdz/](https://jsfiddle.net/chrisvfritz/50wL7mdz/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIt is throwing from the vue/dist/vue.js file of the latest version I am currently trying to isolate it, yet it seems connected with the new code added recently. Will add more steps ASAP if you still don't observe it.\r\n1) replicated with this repo - https://github.com/vuejs/vue-test-utils-mocha-webpack-example\r\n2) clone it\r\n3) npm i\r\n4) npm test - no error\r\n4) npm update vue\r\n5) npm test - ReferenceError: performance is not defined\r\n\r\nGreetings,\r\nPlamen \r\n\r\n\r\n### What is expected?\r\nno error observed\r\n\r\n### What is actually happening?\r\nan error  is observed\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Runtime exception: performance is not defined - with v2.6.9",
        "labels": "bug",
        "id": 123710
    },
    {
        "body": "### Version\r\n2.6.4\r\n\r\n### Reproduction lin\r\n~~[https://jsfiddle.net/0p6t7csx/3/](https://jsfiddle.net/0p6t7csx/3/)~~\r\nhttps://jsfiddle.net/n5wm23jt/\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nuse the toggle button - the syntax used in line 29 seems to not work as expected\r\n\r\n### What is expected?\r\nAll 3 paragraphs should always print the same text \r\n\r\n\r\n### What is actually happening?\r\nthe default slot without the new template syntax will only rerender once and then stay the same,\r\n\r\n---\r\nim not sure if the syntax for default slots is now still to be used that way - or if we always need to use a template now - but it worked with 2.6.0 to 2.6.3 and then stopped working in 2.6.4\r\n\r\n//EDIT: updated reproduction (closed that slot tag) \r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "default slots without the new template syntax  wont reevaluate v-if",
        "labels": "bug",
        "id": 123711
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/54v49n1nzn](https://codesandbox.io/s/54v49n1nzn)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nThe repro shows the issue directly.\r\n\r\n```\r\n<Child\r\n      v-bind=\"{\r\n        appleColor: 'objective red',\r\n        bird: 'objective sparrow'\r\n      }\"\r\n      :apple-color=\"`proper red`\"\r\n      :bird=\"`proper sparrow`\"\r\n    />\r\n```\r\n\r\n### What is expected?\r\nI wanted to know what takes precedence when something is bound using `v-bind={}` vs set explicitly as a prop. I would expect this to always be one or the other, or to be resolved in order of declaration as when merging objects in JS ({...boundProps, specificProp })\r\n\r\n### What is actually happening?\r\nThe precedence is determined based on whether a prop has multiple words. duplicate keys are set by the object when they are declared in dash-case, and set by the prop/attribute if they are camelCase or a single word.\r\n\r\n---\r\nThis can be made 'consistent' by declaring multiword props using camelcase, but that's against the recommendations in the styleguide which suggest using dash case for multiword props inside templates: https://vuejs.org/v2/style-guide/#Prop-name-casing-strongly-recommended.\r\n\r\nI ran into this when an undefined value bound to a parent was overriding the same value explicitly set in the child, but it wasn't happening consistently depending on what the names of the props were.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "camelCased props bound through an object take precedence over a kebab cased specific prop",
        "labels": "bug",
        "id": 123712
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\nhttps://jsfiddle.net/shai/nujtes67/15/\r\n\r\n### Steps to reproduce\r\nPress the `Change screen` button to toggle between screen `1` and screen `2`.\r\n\r\n### What is expected?\r\nNothing should fade, and nothing should be logged to console, because the `v-if` within the `<transition>` is always `true`.\r\n\r\n### What is actually happening?\r\nOn each press B fades in again and `enter: B (custom component)` gets logged to the console.\r\n\r\n---\r\nI've included A as well as B, to show that the bug only occurs when using a custom component with a `<transition>` and `<slot>`. A uses the `<transition>` directly, and doesn't exhibit the buggy behavior.\r\n\r\nNB I've also noticed that if the custom component is switched to being functional instead, then it begins working correctly the same as A.\r\n\r\nSo it appears to only be reproducible when using a custom component and `<slot>`, even though this is what the docs recommend: https://vuejs.org/v2/guide/transitions.html#Reusable-Transitions\r\n\r\n**Or, it's possible that I've misunderstood the expected behavior of a `<transition>` inside of a keyed or otherwise newly appearing component. In which case there's still a bug**, because in that case A and B should BOTH be fading and logging to console (though that seems weird to me: the `<transition>` isn't `appear=true`, so the fact that its parent is newly appearing shouldn't affect it\u2026)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition component animates when wrapper is replaced",
        "labels": "bug",
        "id": 123713
    },
    {
        "body": "### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https://github.com/romansp/functional-scoped-slots-type](https://github.com/romansp/functional-scoped-slots-type)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```\r\nyarn install\r\nyarn serve\r\n```\r\n\r\n### What is expected?\r\n`yarn serve` without errors\r\n\r\n### What is actually happening?\r\nType error:\r\n```\r\nArgument of type '{ functional: boolean; render(h: CreateElement, ctx: RenderContext<Record<never, any>>): string | true | VNode | ScopedSlotReturnArray; }' is not assignable to parameter of type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Record<string, any>>, Record<string, any>>'.\r\n  Object literal may only specify known properties, and 'functional' does not exist in type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Record<string, any>>\r\n, Record<string, any>>'.\r\n    15 | \r\n    16 | export default Vue.extend({\r\n  > 17 |   functional: true,\r\n       |   ^\r\n    18 |   render(h, ctx) {\r\n    19 |     const children = ctx.scopedSlots.default && ctx.scopedSlots.default({});\r\n    20 |     return children || h();\r\nVersion: typescript 3.3.3333\r\n```\r\n\r\n---\r\nPR #9563 introduced `NormalizedScopedSlot` type, but `RenderContext` type for functional components still uses `scopedSlots: { [key: string]: ScopedSlot };`. Is it expected?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "types: NormalizedScopedSlot for scopedSlots on RenderContext?",
        "labels": "bug",
        "id": 123714
    },
    {
        "body": "### Version\r\n2.6.7\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/3qbky0z7/4/](https://jsfiddle.net/3qbky0z7/4/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nCreate custom directive with a dynamic argument:\r\n```v-test:[deep.arg]=\"value\"```\r\n\r\n### What is expected?\r\nIt should get the value from path `deep.arg`.\r\n\r\n### What is actually happening?\r\nInside the binding object of a custom directive, `arg` key have value `[deep`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Deep object as dynamic argument in custom directive [RFC-0003]",
        "labels": "bug",
        "id": 123715
    },
    {
        "body": "### Version\r\n2.6.7\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/239l9qnkxn](https://codesandbox.io/s/239l9qnkxn)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open https://codesandbox.io/s/239l9qnkxn\r\n2. Immediately (before the async component is resolved within 7 sec) click on the \"Some Page\" link\r\n3. Click on the \"Home\" link (before 7s are elapsed)\r\n\r\n### What is expected?\r\nThe AsyncReady component should render after 7 seconds.\r\n\r\n### What is actually happening?\r\nThe AsyncLoading component is shown forever\r\n\r\n---\r\nThe problem is that the `currentRenderingInstance` is `Home`. After rendering the `SomePage` route, the initial `Home` instance (which is stored as the `owner` of the factory) is destroyed. As soon as the factory calls `forceRender`, triggering `$forceUpdate()` on the owner does nothing because the old `Home` instance already was destroyed and a new one was created when navigating back to `Home`.\r\n\r\nThis is problematic on very slow connections when users click a link before all dynamic components were resolved or in case of automatic redirects which are triggered immediately after a page is loaded (after checking auth for example).\r\n\r\nSee: https://github.com/vuejs/vue/blob/dev/src/core/vdom/helpers/resolve-async-component.js#L58-L74\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Components created with async component factory break on route change",
        "labels": "bug",
        "id": 123716
    },
    {
        "body": "### Version\r\n2.6.6\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/qgQYra?editors=1011](https://codepen.io/anon/pen/qgQYra?editors=1011)\r\n\r\n### Steps to reproduce\r\nThe problem seems to happen when I handle an event emitted from a component and return a rejected promise. To see the problem in action, open the codepen link, click the button and you will see in the console two logs of the same error, which means the Vue.config.errorHandler was called twice.\r\n\r\n### What is expected?\r\nI expect the errrorHandler called once.\r\n\r\n### What is actually happening?\r\nthe errorHandler function is called twice.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue.config.errorHandler called twice when I return a rejected Promise from a handler of a component event",
        "labels": "bug",
        "id": 123717
    },
    {
        "body": "### Version\r\n2.6.0\r\n\r\n### Reproduction link\r\n[https://github.com/jedrula/slot-updates-on-vue-2.6](https://github.com/jedrula/slot-updates-on-vue-2.6)\r\njsfiddle: http://jsfiddle.net/sj8wcx0k/\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nYou can see the problem on a deployed version of https://github.com/jedrula/slot-updates-on-vue-2.6 here: http://slot-updates-vue-26.surge.sh/\r\n\r\nYou run into a problem like that if\r\n1. you have a v-slot inside a v-for and in that v-slot you render an item from v-for\r\n2. you update whole array that drives the v-for\r\n\r\n### What is expected?\r\nRendered item in v-for should behave in a same way as rendered item in v-for inside a v-slot - it should be re-rendered when the whole array driving the v-for changes.\r\n\r\nI'd expect no changes in behavior from Vue 2.5.22. You can see how it behaves on the same code with `vue 2.5.22`. I have deployed same code with downgraded Vue version here: http://slot-updates-vue-25.surge.sh/\r\n\r\n### What is actually happening?\r\nThe item inside v-for in a v-slot is not re-rendered:\r\nhttps://github.com/jedrula/slot-updates-on-vue-2.6/blob/master/src/App.vue#L6\r\n\r\n---\r\nI know that the issue can be resolved by providing proper v-key to the v-for. The confusing part though is that the even without the v-key this line is updated: https://github.com/jedrula/slot-updates-on-vue-2.6/blob/master/src/App.vue#L4 but this line is not: https://github.com/jedrula/slot-updates-on-vue-2.6/blob/master/src/App.vue#L6.\r\n\r\nIf that's not a bug but something I don't understand about scoped slots it might be good to add some information about that in some Vue reactivity gotchas ? I wonder why it bit me given a change from 2.5 -> 2.6 should not be breaking.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Value inside v-slot in a v-for won't update",
        "labels": "bug",
        "id": 123718
    },
    {
        "body": "### Version\r\n2.6.0\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/r749jp21o4](https://codesandbox.io/s/r749jp21o4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nI made a simple button component which does not emit any events. In the app there are three instances of it with the `@click.native` event bound in different way.\r\n\r\nYou can see the first button component which was bound with `@click.native` works and increases the counter, but the rest which use v-on and the new conditional binding syntax do not.\r\n\r\nI thought it might have been some limitation of native events but this also happens with other modifiers, like `keydown.somekey`.\r\n\r\n### What is expected?\r\nThe events should be bound and all the buttons should work.\r\n\r\n### What is actually happening?\r\nThe buttons do not work. The events are not bound. Only the first button actually gets a listener attached when I inspect them with chrome's devtools.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-on dynamic argument doesn't work with .native modifier",
        "labels": "bug",
        "id": 123719
    },
    {
        "body": "### Version\r\n2.6.0-beta.3\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/JxEpJK?editors=1011](https://codepen.io/anon/pen/JxEpJK?editors=1011)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- click the \"root\" button\r\n\r\n### What is expected?\r\n`\"update root\"` should be logged\r\n\r\n### What is actually happening?\r\n`\"update ChildComponent\"` is also logged\r\n\r\n---\r\nIf you add `v-slot:default` it works as expected: https://codepen.io/anon/pen/exgVVm?editors=1011\r\nVue 2.5.22 also works correctly: https://codepen.io/anon/pen/KJaQQL?editors=1011\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "[2.6-beta] regression: component without slots re-renders when parent updates",
        "labels": "bug",
        "id": 123720
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://jsbin.com/dobagokure/1/edit?html,js,output](https://jsbin.com/dobagokure/1/edit?html,js,output)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open https://jsbin.com/dobagokure/1/edit?html,js,output in IE 11.\r\n\r\n2. Enter a single character in the text input just after 'Hello Vue!'\r\n\r\n3. Model will not be updated on the first character input but will be on subsequent inputs\r\n\r\n*Note to reproduce a second time you will need to refresh the page.\r\n\r\n### What is expected?\r\nWhen a single character is entered the model should update\r\n\r\n### What is actually happening?\r\nThe input event is blocked and the model does not update until a second character is entered.\r\n\r\n---\r\nI believe it could be related to a previous fix for an issue that IE11 is firing an input event when the placeholder is set:\r\n\r\nhttps://github.com/lovelope/vue/commit/15e8fa59b99890268b9a06ff263a6db131e0aa63\r\n\r\nPerhaps it should check if the value is set first before blocking the initial event?\r\n\r\n\r\n\r\nMany Thanks,\r\nDeclan\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "In IE 11 the first input event on a text input is blocked if placeholder is set and the model is initialised",
        "labels": "bug",
        "id": 123721
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/rm36pyr37q](https://codesandbox.io/s/rm36pyr37q)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nGiven a very simple component:\r\n\r\n```\r\n<template>\r\n  <div v-bind:style=\"styleObject\">This div should have a large z-index</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"HelloWorld\",\r\n  data() {\r\n    return {\r\n      styleObject: {\r\n        maxWidth: \"400px\",\r\n        minWidth: \"auto\",\r\n        opacity: 1,\r\n        padding: \"5px\",\r\n        position: \"fixed\",\r\n        right: \"10px\",\r\n        top: \"10px\",\r\n        zIndex: \"100 !important\" // this doesn't work\r\n        // \"z-index\": \"100 !important\" // this works\r\n      }\r\n    };\r\n  }\r\n};\r\n</script>\r\n```\r\n\r\n`zIndex` is not bound to style\r\n\r\n### What is expected?\r\nBinding `zIndex` does not get kebab-cased like `maxWidth` and `minWidth`. I expected it to work the same way. Passing `z-index` works as expected.\r\n\r\n### What is actually happening?\r\nThe `zIndex` variable is ignored entirely.\r\n\r\n---\r\nI was creating an alert-style box that needs a high z-index to appear \"on top\" of other elements on the page.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vbind:style does not work with zIndex",
        "labels": "bug",
        "id": 123722
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codepen.io/bogdan-muranets/pen/ErjOXy](https://codepen.io/bogdan-muranets/pen/ErjOXy)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen repro, click on the \"show\" button and note that \"animated on enter\" text appeared.\r\n\r\n### What is expected?\r\nTo see a text \"animated on appear\" which has to be added by `@appear` hook.\r\n\r\n### What is actually happening?\r\nThe `@enter` hook is called instead of `@appear`.\r\n\r\n---\r\nImportant is that `transition` is moved to separate component. Also, everything works as expected if `transition` isn't a root element in a separate component or the component is `functional`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition not triggering @appear when used as the root of a component with appear attr",
        "labels": "bug",
        "id": 123723
    },
    {
        "body": "**Note: this issue only refers to v-model for components, and is not considering v-model on DOM elements.** There was a discussion which included this unexpected behavior in #6216 , and also a PR #6327 that tried to fixed that, but those also included being able to pass-through `v-model` to DOM elements, which is not the case with this issue.\r\n\r\n### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/933003yx6w](https://codesandbox.io/s/933003yx6w)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse `v-model` on a component that doesn't have `value` defined in its `props`.\r\n\r\n### What is expected?\r\n`value` is added to component's instance `$attrs`\r\n\r\n### What is actually happening?\r\n`value` is not added to component's instance `$attrs`\r\n\r\n---\r\nBecause of that, when wrapping **a component** and passing through the props and event handlers using `v-bind=\"$attrs\" v-on=\"$listeners\"`, `v-model` will not be (completely) passed through, and will require explicitly defining `value` in wrapping component's `props` and passing it using `:value=\"value\"` to the wrapped component (see the linked sandbox).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-model's value not in $attrs if value not defined as a prop",
        "labels": "bug",
        "id": 123724
    },
    {
        "body": "### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/jXdLGV](https://codepen.io/anon/pen/jXdLGV)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the repro and note that the rendered page says \"initial appear\".\r\n\r\n### What is expected?\r\nThe `@appear` hook should not be invoked and the page should just say \"initial\".\r\n\r\n### What is actually happening?\r\nThe `@appear` hook is invoked even though the `transition` doesn't have an `appear` attribute, and hence shouldn't be triggering on appear.  The same thing happens if you add `:appear =\"false\"` to the `transition`.\r\n\r\n---\r\nRan into this when building some custom transition components where `appear` should be user-controlled, but was being invoked all the time instead.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition's @appear hook invoked even when appear not specified / falsy",
        "labels": "bug",
        "id": 123725
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/y05q554q71](https://codesandbox.io/s/y05q554q71)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\ncode sandbox will illustrate the issue. (may take a few seconds to load)\r\n\r\nNotice how `{{ isActive() }}` prints true, yet the class isn't binded\r\n\r\n### What is expected?\r\n`:class` to bind class attribute `class=\"nav-link active` and cause nav-link to turn red\r\n\r\n### What is actually happening?\r\nNot binding class and making nav-link red\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "class binding not updating on client after using `$isServer` with boolean values",
        "labels": "bug",
        "id": 123726
    },
    {
        "body": "\r\n### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/analyzeplatypus/eywraw8t/513878/](https://jsfiddle.net/analyzeplatypus/eywraw8t/513878/)\r\n\r\n![screen recording 2018-12-20 at 8 21 07 pm mov](https://user-images.githubusercontent.com/18376110/50303197-00b4d500-0495-11e9-9f02-145099a68d15.gif)\r\n\r\n### Steps to reproduce\r\nThe fiddle contains a seemingly random sequence of elements that illustrates the issue (described below). \r\n\r\n1. Open the JSFiddle\r\n2. Click the \"Change\" button\r\n3. The transition plays (it should not).\r\n\r\nTry removing any of the DOM elements and the errant transition no longer plays!\r\n\r\n### What is expected?\r\nThe transition should not run.\r\n(CSS transition classes should not be applied, hooks should not be called, etc.)\r\n\r\n### What is actually happening?\r\nThe transition is run (CSS transition classes are applied).\r\n\r\n---\r\nI came across this while building a complex form with multiple buttons that appear/disappear based on form state.\r\nI noticed duplicated buttons in one of my unit tests, and found that a transition was being run even though its child's `v-if` binding was not being changed. I duplicated the component and whittled it down until I arrived at the attached JSFiddle.\r\n\r\n\r\nThis issue appears when the following sequence of elements are aligned:\r\n1. A boolean entry in the Vue component's `data` dictionary (`hasChanges: false`, in the JSFiddle)\r\n\r\nThe DOM contains\r\n2. A `<div>` whose `v-if` is bound to the boolean entry (1).\r\n2. A `<transition>` containing a button which modifies the boolean entry (1).\r\n3. An empty `<transition>` element.\r\n4. A `<div>` whose `v-if` is bound to the boolean entry (1) modified by logical NOT (!). (In the fiddle, `v-if=\"!hasChanges\"`).\r\n\r\nWith this exact structure, modifying the boolean entry (1) will run the transition - even though the transition is not bound to the boolean at all!\r\n\r\nIf you remove any of the above elements, **or even reorder them** (!) the errant transition will not run (which is the correct behavior).\r\n\r\n\r\nWhy does the transition run when placed with this particular set of siblings in this particular order?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition is erroneously run when placed with bizarre sequence of sibling elements. ",
        "labels": "bug",
        "id": 123727
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/o95x14r0xz](https://codesandbox.io/s/o95x14r0xz) (I know, minimal repro below)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nView page source\r\n\r\n### What is expected?\r\n```html\r\n<div class=\"v-responsive\" style=\"height:480px;\" data-v-2a183b29>\r\n```\r\n\r\n### What is actually happening?\r\n```html\r\n<div class=\"v-responsive\" style=\"height:480px;max-height:undefined;max-width:undefined;width:undefined;\" data-v-2a183b29>\r\n```\r\n\r\n---\r\nReproduce in `vue/test/ssr/ssr-string.spec.js` then run `npm run test:ssr`:\r\n```js\r\n  it('falsy style value', done => {\r\n    renderVmWithOptions({\r\n      template: '<div :style=\"style\"></div>',\r\n      data: {\r\n        style: {\r\n          opacity: 0,\r\n          color: null\r\n        }\r\n      }\r\n    }, result => {\r\n      expect(result).toContain(\r\n        '<div data-server-rendered=\"true\" style=\"opacity:0;></div>'\r\n      )\r\n      done()\r\n    })\r\n  })\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR: style binding keeps falsy values",
        "labels": "bug",
        "id": 123728
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/oJLdMN](https://codepen.io/anon/pen/oJLdMN)\r\n\r\nOpen the link and see the error message in dev console.\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nCreate two mixins with a provide object using Symbol as it's key field. Then assign these mixins to a component.\r\n\r\n### What is expected?\r\nThe child component can access two provide object without any error.\r\n\r\n### What is actually happening?\r\nThe child component can only access the last provide object, while the first one is undefined.\r\n\r\n---\r\nDiving into the source code, the reason of this issue is that Vue uses `Object.keys` to iterate over the `provide` object while merging mixins. However, `Object.keys` won't return Symbol keys. see [the code](https://github.com/vuejs/vue/blob/52719ccab8/src/core/util/options.js#L51).\r\nMaybe we should use `for ... in` loop, which will iterate through Symbol keys correctly.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provided values in mixin are not accessible",
        "labels": "bug",
        "id": 123729
    },
    {
        "body": "### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https://codepen.io/hikerpig/pen/dwYEej](https://codepen.io/hikerpig/pen/dwYEej)\r\n\r\n### Steps to reproduce\r\nGoto the minimal reproduction link\r\n\r\nOr simply add this to test/unit/features/options/mixins.spec.js\r\n\r\n```js\r\n  it('should not mix global mixined lifecycle hook twice', () => {\r\n    const spy = jasmine.createSpy('global mixed in lifecycle hook')\r\n    Vue.mixin({\r\n      created() {\r\n        spy()\r\n      }\r\n    })\r\n\r\n    const mixin = Vue.extend({})\r\n\r\n    const Child = Vue.extend({\r\n      mixins: [mixin],\r\n      created() {}\r\n    })\r\n\r\n    const vm = new Child()\r\n\r\n    expect(spy.calls.count()).toBe(1)\r\n  })\r\n```\r\n\r\n### What is expected?\r\nspy to be called once\r\n\r\n### What is actually happening?\r\nspy is called twice\r\n\r\n---\r\nWhen using vue-class-component , it's easy to pass not-plain-object to Vue.extends mixins\r\n\r\nI've added a similar issue in https://github.com/vuejs/vue-class-component/issues/291 , and it is still not fixed\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue does not correctly dedupe global mixin, global mixined lifecycle hook be called twice",
        "labels": "bug",
        "id": 123730
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://github.com/sqal/vue-ssr-bug-reproduction](https://github.com/sqal/vue-ssr-bug-reproduction)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Clone, install dependencies\r\n- run `npm run ssr:serve`\r\n\r\n\r\n\r\n### What is expected?\r\nShould render the app.\r\n\r\n### What is actually happening?\r\nWhen you start the server you should see that application throws following error: `Cannot read property '$store' of undefined`. This happens because in SSR computed property don't receive component's instance as the first argument, therefore I cannot access `$store` property. I am not sure if this is a bug or not, I think it is because i could not find anything about in vue or vue-ssr docs. I would appreciate if someone could clarify this issue. Thank you :)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Computed property don't receive component's instance as first argument in SSR",
        "labels": "bug",
        "id": 123731
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/pcb17vq4/](https://jsfiddle.net/pcb17vq4/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nSee Fiddle.\r\n\r\n### What is expected?\r\nOnly a 'leave' is triggered when removing any item from the list displayed with display: flex.\r\n\r\n### What is actually happening?\r\nBoth a 'leave' and a 'move' are triggered\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Both move and leave triggered for removed transition-group item if transition-group has display: flex",
        "labels": "bug",
        "id": 123732
    },
    {
        "body": "### What problem does this feature solve?\r\nCurrently, SSR directives can be only passed in with 'kebab-case' keys. This isn't denoted anywhere (except in the tests, luckily!) and not \"intuitive\" as they can be provided as camelCased ones on the client as well.\r\n\r\nCan we introduce camelCased SSR directives?\r\nI'd be available to work on the impl.\r\n\r\n### What does the proposed API look like?\r\n```js\r\ndirectives: {\r\n  classPrefixer: (node, dir) => {/*...*/}\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: camelCased local directives are not applied in SSR",
        "labels": "bug",
        "id": 123733
    },
    {
        "body": "### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https://gist.github.com/kissge/b02de2b2aacb33c9645da2c5a89cb1ac](https://gist.github.com/kissge/b02de2b2aacb33c9645da2c5a89cb1ac)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Run a unit test\r\n\r\n### What is expected?\r\nnewline after &lt;input> is preserved\r\n\r\n### What is actually happening?\r\nnewline after &lt;input> is removed\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue template removes whitespace immediately after <input>inside of a pre",
        "labels": "bug",
        "id": 123734
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n\r\n### Reproduction link\r\nhttps://codepen.io/avertes/pen/LYYpNRe\r\n[https://jsfiddle.net/50wL7mdz/756973/](https://jsfiddle.net/50wL7mdz/756973/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Create a new component that accepts a string prop.\r\n1. Display the prop within the component's template.\r\n1. Use the component in a Vue application and pass a string containing a non-breaking space character for the prop.\r\n\r\n### What is expected?\r\nThe output should contain a non breaking space\r\n\r\n### What is actually happening?\r\nThe output shows `&nbsp;`\r\n\r\n---\r\nIn the example provided I've made 3 cases\r\n\r\n- First case is that `&#160;` get turned into `&nbsp;`\r\n- Second case is that in a long list of UTF-8 characters only `NON-BREAKING SPACE` is escaped.\r\n- And third when getting the same list of characters, but retrieving it from a regular `HTMLElement` with `document.querySelector('#test').title` the character aren't escape.\r\n\r\n\r\n**Note**: When copying the non-breaking space character it might turn into a regular space in the clipboard. Therefor use https://en.wikipedia.org/wiki/Non-breaking_space#Keyboard_entry_methods to make sure how to insert the character.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Non-breaking space acts different than other characters - outputs \"&nbsp;\" in template when passed via props",
        "labels": "bug",
        "id": 123735
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/1zr10x8rpq](https://codesandbox.io/s/1zr10x8rpq)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Create two child components with the same prop in camelCase\r\n- Bind props from first child to second\r\n- Try to override camelCase prop in hypenated syntax from first child to second\r\n\r\n### What is expected?\r\nProp override correctly\r\n\r\n### What is actually happening?\r\nProp keep parent value\r\n\r\n---\r\n\r\nMeet this issue because I have a camelCase coding stye. But eslint vue-recommended throw an error if prop is not hypenated.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Overriding a binded prop with hypenated syntax instead of camelCase not working",
        "labels": "bug",
        "id": 123736
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/du578xc0/32/](https://jsfiddle.net/du578xc0/32/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nchange first select to \"Some\", then change newly displayed select. You will see that val2 is being set to the bound vals from the val1 select instead of it's own values.\r\n\r\nYou can change the first select to use the .number modifier on the v-model and exchange the bound number values for strings to fix this issue. (at least for this very specific desired effect).\r\n\r\nYou can \"fix\" the problem by either using v-bind:value on all values, or by using non-bound values on all values - but as far as I can tell, if you mix them, then it will cause this override bug\r\n\r\n### What is expected?\r\ndifferent values for each variable\r\n\r\n### What is actually happening?\r\nsecond variable is being overwritten with the first's value\r\n\r\n---\r\nThis was posted/discussed in the discord chat\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Using multiple selects with v-model and bound and unbound values causes value overriding",
        "labels": "bug",
        "id": 123737
    },
    {
        "body": "### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/4k43rylw0](https://codesandbox.io/s/4k43rylw0)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Load the reproducer and take a memory heap snapshot. Searching the heap you will find 4 VueComponents (App, Container, Child, Async Child)\r\n![image](https://user-images.githubusercontent.com/1207606/44921752-6c6e0900-ad11-11e8-81e9-6751416a49ff.png)\r\n\r\n2. Click the Destroy button. This toggles a v-if which will remove Child component and thus AsyncChild component as well.\r\n3. At this point, the page is updated as expected\r\n4. Take another memory heap snapshot. Search the heap again for \"VueComponent\" and you will see that 4 VueComponents still exist\r\n![image](https://user-images.githubusercontent.com/1207606/44921772-7a238e80-ad11-11e8-9215-c6ca2bd14706.png)\r\n![image](https://user-images.githubusercontent.com/1207606/44921791-8a3b6e00-ad11-11e8-82d9-a52d4f9c0e52.png)\r\n\r\n\r\n### What is expected?\r\nAfter destroying Child component, the component and it's asynchronously loaded child component should be destroyed and the memory freed up.\r\n\r\n### What is actually happening?\r\nVue is holding on to a context reference which is preventing these components from being garbage collected\r\n\r\n---\r\nThis is happening due to the resolve-async-component logic located here: https://github.com/vuejs/vue/blob/52719ccab8fccffbdf497b96d3731dc86f04c1ce/src/core/vdom/helpers/resolve-async-component.js#L57-L68\r\n\r\nIn the forceRender function on line 64, after calling $forceUpdate, the contexts array should be cleared to free up those references so that the components will be able to be garbage collected at a later point in time\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Memory Leak When Using Async Components",
        "labels": "bug",
        "id": 123738
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/wkpy6x5r25](https://codesandbox.io/s/wkpy6x5r25)\r\n\r\n### Steps to reproduce\r\nSimply opening and running the sandbox should show the error. Instead of getting an alert that App.vue caught the error in HelloWorld's watcher, the error escapes all the way to the top level. To see the expected behavior, open Hello World and set the watcher to immediate: false. Then hit the button to trigger the watcher. In this case the error is caught by the parent, App.vue. In the immediate case, this does not happen.\r\n\r\n### What is expected?\r\nErrors in immediate watchers should be caught by the parent component(s)'s errorCaptured().\r\n\r\n### What is actually happening?\r\nThe error escapes to the nextTick hander. This handler has no ctx or vm to pass to the errorHandler. When errorHandler does not receive a vm, it cannot call the parent errorCaptured handlers.\r\n\r\n---\r\nThis appears to be an oversight in src/core/instance/state.js. In the case options.immediate is true, cb.call(vm, watcher.value) should be wrapped in a try catch that explicitly calls handleError with the vm.\r\n\r\nA proposed fix:\r\n```\r\n    if (options.immediate) {\r\n      try {\r\n        cb.call(vm, watcher.value)\r\n      } catch (e) {\r\n        handleError(e, vm, `immediate call for watcher ${watcher.expression}`)\r\n      }\r\n    }\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Immediate watcher skips parent(s) errorCaptured and jumps straight to the top error handler",
        "labels": "bug",
        "id": 123739
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://github.com/vuejs/vue](https://github.com/vuejs/vue)\r\n\r\n### Steps to reproduce\r\nSorry I failed to visit gist or other online code share platforms.\r\n\r\nJust run the following script with Node@8.9.0 and Vue@2.5.16 installed. But in Node@6, it is ok.\r\n\r\n\r\n```\r\nprocess.env.VUE_ENV = 'server'; // very important\r\n\r\nconst Vue = require('vue');\r\nconst renderer = require('vue-server-renderer').createRenderer({\r\n});\r\n\r\nVue.component('c-child', {\r\n    template: '<div class=\"c-child\"></div>'\r\n});\r\n\r\nconst vueInstance = new Vue({\r\n    template: `<div class=\"root\">\r\n        <c-child v-for=\"(x, i) in items\" :key=\"i\"></c-child>\r\n    </div>`,\r\n    data: {\r\n        items: Array(1000).fill(0)\r\n    }\r\n})\r\n\r\nconsole.log('start to renderToString...');\r\nrenderer.renderToString(vueInstance, (error, html) => {\r\n    if (error) {\r\n        console.error(`render error!\\n${error.stack}`);\r\n        return;\r\n    }\r\n\r\n    console.log('what?!', html)\r\n});\r\n```\r\n\r\n### What is expected?\r\nOutput the html.\r\n\r\n### What is actually happening?\r\n```\r\nrender error!\r\nRangeError: Maximum call stack size exceeded\r\n    at insert (timers.js:158:16)\r\n    at Object.exports._unrefActive (timers.js:149:3)\r\n    at WriteStream._unrefTimer (net.js:260:12)\r\n    at WriteStream.Socket._writeGeneric (net.js:723:8)\r\n    at WriteStream.Socket._write (net.js:786:8)\r\n    at doWrite (_stream_writable.js:387:12)\r\n    at writeOrBuffer (_stream_writable.js:373:5)\r\n    at WriteStream.Writable.write (_stream_writable.js:290:11)\r\n    at WriteStream.Socket.write (net.js:704:40)\r\n    at write (console.js:108:12)\r\n```\r\n\r\n---\r\nSomeone used to mention this bug but without reproduction, https://github.com/vuejs/vue/issues/5445.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Maximum call stack size exceeded in SSR with a v-for with 1000 components",
        "labels": "bug",
        "id": 123740
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/kb9x8rLf/](https://jsfiddle.net/kb9x8rLf/)\r\n\r\n### Steps to reproduce\r\nCreate a functional component that returns multiple root elements via an array, i.e.:\r\n\r\n```javascript\r\nreturn [h('span'), h('span')];\r\n```\r\nThen use the functional component alongside `v-for`:\r\n\r\n```html\r\n<my-component v-for=\"item in items\" />\r\n```\r\n\r\n### What is expected?\r\nIt should render the functional component as expected.\r\n\r\n### What is actually happening?\r\nThe rendered view contains \"undefined\" for each item in the array.\r\n\r\n---\r\nThe JSFiddle demonstrates how wrapping the functional component in a `<template>` tag with the `v-for` directive fixes the issue, but the `<template>` tag should not be required for this.  Oddly enough, there are some circumstances where it renders properly. In my use-case, I had no issues with the multiple root elements when I put the component inside a `<table>`, but when I wrapped the component with a `<tbody>` I ran into this issue I'm reporting.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Functional components with multiple roots don't render properly when used with v-for",
        "labels": "bug",
        "id": 123741
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/twyqL8k4/](https://jsfiddle.net/twyqL8k4/)\r\n\r\n### Steps to reproduce\r\n1. Type Jacob into the input.\r\n2. Hit enter.\r\n\r\n### What is expected?\r\nValue property of the input element should be changed to Joseph, as was the value of the name property in the Vue instance.\r\n\r\n### What is actually happening?\r\nValue property of the input element is not being changed.\r\n\r\n---\r\nThe value of the input is correctly being updated when using v-model without .lazy modifier.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-model.lazy is not updating the value of an input when it has a focus",
        "labels": "bug",
        "id": 123742
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/gamperl/pen/JZGMWK](https://codepen.io/gamperl/pen/JZGMWK)\r\n\r\n### Steps to reproduce\r\nRun the provided JSFiddle\r\n\r\n### What is expected?\r\nThe component in the slot should be moved from the table to the div element. Or a new one is created and the old one is destoryed.\r\n\r\n### What is actually happening?\r\nIf a slot is moved from a table to a div using a v-if directive, the slot ist recreated. But before the new component is mounted, vuejs picks the wrong component to destroy: it destoyes the new component instead of the old one.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Component is destroyed and then mounted",
        "labels": "bug",
        "id": 123743
    },
    {
        "body": "### Version\r\n2.5.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/hgp7w8kr/1/](https://jsfiddle.net/hgp7w8kr/1/)\r\n\r\n### Steps to reproduce\r\nAs you can see the `<v-input>` element is still rendered while the `<component>`-element is not rendered (as in the test, [here](https://github.com/vuejs/vue/blob/ae93d2bef8e20402ae3501aa5cdcf14b0ee19c12/test/unit/features/directives/pre.spec.js))\r\n\r\n### What is expected?\r\n```\r\n<v-input></v-input>\r\n<component></component>\r\n```\r\n\r\n### What is actually happening?\r\n```\r\n<div>Hello World</div>\r\n<component></component>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-pre is still parsing/compiling custom components",
        "labels": "bug",
        "id": 123744
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/6sny3yq9/](https://jsfiddle.net/6sny3yq9/)\r\n\r\n### Steps to reproduce\r\n1. Open fiddle and type anything into the first field marked \"broken\". \r\n2. See in the console the error message \"Error in nextTick: \"TypeError: Cannot read property '_pending' of null\"\r\n3. Notice that Vue has stopped working\r\n4. Refresh the fiddle and type anything into the second field marked \"working\"\r\n5. Notice that everything works as expected\r\n\r\n### What is expected?\r\nWhen the value of the input field is \"foo\" the computed property `bar` will evaluate to true and the \"a\" span will display. \r\n\r\nWhen the user changes the value in the input field from \"foo\" to anything else, the computed property `bar` will evaluate to false and the \"b\" span (rendered using v-html) will display.\r\n\r\n### What is actually happening?\r\nInitially, the value of the input field is \"foo\" and the computed property `bar` is evaluated to true, so the \"a\" span is displaying. \r\n\r\nBut, when the user changes the value in the input field from \"foo\" to anything else, Vue crashes and this error message is displayed: Error in nextTick: \"TypeError: Cannot read property '_pending' of null\"\r\n\r\n---\r\nIt takes this very specific scenario for the error to appear. In the fiddle, I've shown that by removing the `@click=\"show = !show\"` event listener, Vue works as expected with no errors.\r\n\r\nHere are three other changes that, when made individually, result in Vue working as expected:\r\n  - removing the `<transition>` component surrounding the \"a\" span\r\n  - using `<span v-else>{{ b }}</span>` instead of `<span v-else v-html=\"b\"></span>`\r\n  - using `v-show=\"bar\"` and `v-show=\"!bar\"` instead of the `v-if=\"bar\"` and `v-else` directives\r\n\r\nFound via this question on Stack Overflow:\r\nhttps://stackoverflow.com/questions/50400131/cannot-read-property-pending-of-null-when-using-v-html-and-transition#\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "\"Cannot read property '_pending' of null\" when using transition component.",
        "labels": "bug",
        "id": 123745
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/6jnlpno3lw](https://codesandbox.io/s/6jnlpno3lw)\r\n\r\n### Steps to reproduce\r\nThis issue happens, when the root element is not indented and the mustache is split into several lines.\r\n```html\r\n<template>\r\n<div>\r\n\t<p>{{\r\n\t\tmyVar\r\n\t}}</p>\r\n</div>\r\n</template>\r\n```\r\n\r\nOnly when the root element is indented, the mustache gets rendered correctly.\r\n```html\r\n<template>\r\n\t<div>\r\n\t\t<p>{{\r\n\t\t\tmyVar\r\n\t\t}}</p>\r\n\t</div>\r\n</template>\r\n```\r\n\r\nWhat also works, is when mustache is put into a single line and the root element is not indented.\r\n```html\r\n<template>\r\n<div>\r\n\t<p>{{ myVar }}</p>\r\n</div>\r\n</template>\r\n```\r\n\r\n### What is expected?\r\nThe mustache should bind data\r\n\r\n### What is actually happening?\r\nThe mustache gets rendered plain text\r\n\r\n---\r\nOnly wanted to prettify my code, so I split the mustache into several lines and removed the indent of the root element.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue.js mustach not correctly rendered only after indenting root element",
        "labels": "bug",
        "id": 123746
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/lykahb/9grbbt4b/](https://jsfiddle.net/lykahb/9grbbt4b/)\r\n\r\n### Steps to reproduce\r\n1. Create a functional component that returns several root nodes\r\n2. Use it with is binding, like `<div is='my-component'>` with no siblings around it\r\n3. Render the template\r\n\r\n### What is expected?\r\nRenders correctly\r\n\r\n### What is actually happening?\r\nRenders a string \"undefined\" with no console errors\r\n\r\n---\r\nIt is interesting that it may render successfully depending on the siblings around it. There are several examples in the link.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Functional component fails depending on the siblings around it",
        "labels": "bug",
        "id": 123747
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/ympx4pk72z](https://codesandbox.io/s/ympx4pk72z)\r\n\r\n### Steps to reproduce\r\n1\u3001click the home link\r\n2\u3001click the test link\r\n\r\n### What is expected?\r\nafter the Home component destroyed,its updated hook should not be called\r\n\r\n### What is actually happening?\r\nafter the Home component destroyed,its updated hook is called\r\n\r\n---\r\nhere is the log information\r\n\r\nHome beforeCreate\r\nHome created\r\nHome beforeMount\r\nHome mounted\r\nTest beforeCreate\r\nTest created\r\nTest beforeMount\r\nHome beforeDestroy\r\nHome destroyed\r\nTest mounted\r\nHome updated\r\n\r\nwhy the Home component can call updated hook after it is destroyed?\r\nIs Vue designed to do so?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "component calls update hook after it is destroyed",
        "labels": "bug",
        "id": 123748
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/katedo17/pen/rdXMbp](https://codepen.io/katedo17/pen/rdXMbp)\r\n\r\n### Steps to reproduce\r\nEnter \"3\" in the input field, and click the link \"Test Btn 2\". \r\n\r\n### What is expected?\r\nIt should only trigger the on click event that was configured for the \"Test Btn 2\".\r\n\r\n### What is actually happening?\r\nIt triggers the function binded to \"Test Btn 1\" and then trigger the \"Test Btn 2\". \r\n\r\n---\r\nThis only happens when I use v-if in the parent element of the link. But if I use v-show, it doesn't have the issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "bound event with once gets reused in v-if/else condition",
        "labels": "bug",
        "id": 123749
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/hL0rrbs9/6/](https://jsfiddle.net/hL0rrbs9/6/)\r\n\r\n### Steps to reproduce\r\nRun code, and watch.\r\n\r\n### What is expected?\r\n\"Yay Yay ;)\" values should not change to \"hell naw!\" in 3 seconds.\r\n\r\n### What is actually happening?\r\n\"Yay Yay ;)\" values are changing in to \"hell naw!\" in 3 seconds.\r\n\r\n---\r\n<h2>\r\n  Wait 3 seconds. Behavior is not consistent. \"component\" tag in v-for should not change. \r\n</h2>\r\n<div id=\"app\">\r\n  <component :is=\"comp\" v-once></component>\r\n  <p v-once>{{comp}}</p>\r\n  \r\n  <div v-for=\"n in items\" :key=\"n.id\">\r\n    <component :is=\"comp\" v-once></component>\r\n    <p v-once>{{comp}}</p>\r\n  </div>\r\n</div>\r\n<script>\r\nvar z = new Vue({\r\n\tel: \"#app\",\r\n  data: {\r\n  \tcomp:\t\"comp1\",\r\n    items: [{id:1}, {id:2}]\r\n  },\r\n  components: {\r\n  \t\"comp1\": {\r\n    \ttemplate: \"<p style='background:green;color:white'>yay yay ;)</p>\"\r\n    },\r\n  \t\"comp2\": {\r\n    \ttemplate: \"<p style='background:red;color:white'>hell naw!</p>\"\r\n    }\r\n  }\r\n});\r\n\r\nsetTimeout(function() {\r\n\tz.comp = \"comp2\"\r\n}, 3000);\r\n</script>\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-once for component tag doesn't work in v-for",
        "labels": "bug",
        "id": 123750
    },
    {
        "body": "### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/9bzw21no/28/](https://jsfiddle.net/9bzw21no/28/)\r\n\r\n### Steps to reproduce\r\n1. Use '}}' in the data binding\r\n\r\n```html\r\n{{true ? '}}' : '{{' }}\r\n```\r\n\r\n### What is expected?\r\n`}}`\r\n\r\n### What is actually happening?\r\n`)+\"`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Compilation of mustaches in mustaches expression doesn't work",
        "labels": "bug",
        "id": 123751
    },
    {
        "body": "### Version\r\n2.5.14+\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/cLdbL2t2/22/](https://jsfiddle.net/cLdbL2t2/22/)\r\n\r\n### Steps to reproduce\r\nClicking \"update message\" button adds dots after message.\r\nOnce \"alter\" button is clicked, the message is no longer updated.\r\n\r\n### What is expected?\r\nUpdating message continues working even after slot is altered.\r\n\r\n### What is actually happening?\r\nProp value stops being reactive, without error nor warning.\r\n\r\n---\r\nThis behavior takes place after v2.5.14  including v2.5.17-beta.0.\r\nAny version 2.5.13 and lower works as expected.\r\n\r\nUnit test can be found in my github https://github.com/honeroku/vue-slot-investigate\r\n\r\nI am understanding this is edge case and refactoring structure to avoid placing identical slot in conditional positions resolves my problem.\r\nHowever, this behavior was not occurring in older versions and suddenly changed without error or warning,\r\nso I am considering this is a bug and reporting to let you know.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "prop of component, in conditionally rendered slot, stops being reactive",
        "labels": "bug",
        "id": 123752
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/mzvkppmvo8](https://codesandbox.io/s/mzvkppmvo8)\r\n\r\n### Steps to reproduce\r\n1. I created component with scoped slot (AppSwitcher.vue)\r\n2. Then I use it in another component with their own slot (HelloWorld.vue with slot \"subtext\")\r\n3. Add some element to slot (div in App.vue) \r\n\r\n### What is expected?\r\nIt should work without errors\r\n\r\n### What is actually happening?\r\nChanges in AppSwitcher.vue caus \"Duplicate presence of slot \"subtext\" found in the same render tree\" error but there are no duplicates.\r\n\r\n---\r\nAlso, adding `slot-scope` to div in App.vue solves problem and no error there, but why it happens without `slot-scope`?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Unexpected \"duplicate presence of slot\"",
        "labels": "bug",
        "id": 123753
    },
    {
        "body": "### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/chrisvfritz/845Lee66/](https://jsfiddle.net/chrisvfritz/845Lee66/)\r\n\r\n### Steps to reproduce\r\n1. Open the fiddle\r\n2. Click the \"Toggle\" button\r\n3. Watch the `move` transition trigger on enter\r\n\r\n### What is expected?\r\nJust like with `v-if`, move transitions should not be triggered on enter (note that it is already _not_ triggered on leave). \r\n\r\n### What is actually happening?\r\nI haven't checked in the source yet, but I'm guessing that since elements with `display: none` still technically have coordinates:\r\n\r\n```\r\nDOMRect { x: 0, y: 0, width: 0, height: 0, top: 0, right: 0, bottom: 0, left: 0 }\r\n```\r\n\r\nThe `move` transition is triggered on enter. I'm not sure why it wouldn't also occur on leave though. \r\n\r\n---\r\nThis may be connected to [#5800](https://github.com/vuejs/vue/issues/5800). Also, special thanks to @rachelnabors for finding this bug!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "<transition-group> and v-show triggers move transition on enter",
        "labels": "bug",
        "id": 123754
    },
    {
        "body": "### Version\r\n2.5.15\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/hirokiosame/dronjdzm/63/](https://jsfiddle.net/hirokiosame/dronjdzm/63/)\r\n\r\n### Steps to reproduce\r\nThe jsfiddle link reproduces the issue but it's a pretty intricate combination that reproduces it.\r\n\r\nRemoving the `slot=\"namedSlot` from the `div` and wrapping it with `<template slot=\"namedSlot\">`, or `removing the usage of  the functional component `noOp`, or disabling reactivity via changing `undefined`  to `false` on L20 or removing the dependency on L9 will fix the issue.\r\n\r\n### What is expected?\r\nFor the named slot to render. In the case of the reproduction, the \"THIS TEXT SHOULD RENDER\" text.\r\n\r\n### What is actually happening?\r\nThe named slot is not rendering.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Named slot won't render",
        "labels": "bug",
        "id": 123755
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/freakypie/nn2vwt7b/22/](https://jsfiddle.net/freakypie/nn2vwt7b/22/)\r\n\r\n### Steps to reproduce\r\nchange a value in a vue really fast and the transition won't remove the leave-to class\r\n\r\n### What is expected?\r\nthe label should be shown\r\n\r\n### What is actually happening?\r\nthe label isn't shown\r\n\r\n---\r\nOn my own app, i redirected to a page that was supposed to have no app header, but it then redirected to another page that did, but the header was missing anyway\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition class `leave-to` not removed if hidden element changes too fast with v-show",
        "labels": "bug",
        "id": 123756
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/40opo3n4lw](https://codesandbox.io/s/40opo3n4lw)\r\n\r\n### Steps to reproduce\r\n- Add `background`, set value to `red`, click _ADD_\r\n- _see the box in red_\r\n- Click on _REMOVE_\r\n- Check the box\r\n\r\n### What is expected?\r\nThe box should be gray again\r\n\r\n### What is actually happening?\r\nthe box has no `background-color`\r\n\r\n---\r\n\r\n**This bug was found by @MatWaligora in discord**\r\n\r\nThe problem is that when we update styles, we do not reapply `background-color` and other properties because they were already applied but, in the browser, if you apply `background`, it will modify the other `style.backgroundColor`, `style.backgroundPosition`, etc, . So we think styles do not need to be reapplied but because setting `background` have some side effects we need to reapply all other `background-` properties. It's probably the same with other rules like `border`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "When adding and removing style rules like `background`, sub rules (`background-color`) are not re applied",
        "labels": "bug",
        "id": 123757
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/hhu05cd2/18/](https://jsfiddle.net/hhu05cd2/18/)\r\n\r\n### Steps to reproduce\r\nAssign any element with ref to 0.\r\nSuch as <p :ref=\"0\"></p>\r\n\r\n\r\n### What is expected?\r\np exist in $refs\r\n\r\n### What is actually happening?\r\np isn't in $refs\r\n\r\n---\r\nWorkaround is to put additional char to :ref such as\r\n<p :ref=\"a0\"></p>\r\n\r\nNow, that p will be in this.$refs.\r\n\r\nReference: https://forum.vuejs.org/t/element-with-ref-0-disappear-from-refs/27925\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Assign :ref to zero result in missing element in $refs",
        "labels": "bug",
        "id": 123758
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/x78pz6u1/7/](https://jsfiddle.net/x78pz6u1/7/)\r\n\r\n### Steps to reproduce\r\n1. click emit1, alert something, no problem.\r\n2. click switch.\r\n3. click emit2, alert again, not expected!\r\n\r\n### What is expected?\r\nnot alert when I click the button emit2\r\n\r\n### What is actually happening?\r\nalert when I click the button emit2\r\n\r\n---\r\nnot considering the edge case: listeners are removed on component reuse.\r\nperhaps a bug at line 260 in v2.5.13/src/core/instance/lifecycle.js\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Listeners are not updated correctly on component reuse",
        "labels": "bug",
        "id": 123759
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/sbmLobvr/9/](https://jsfiddle.net/sbmLobvr/9/)\r\n\r\n### Steps to reproduce\r\nclick the button\uff0cthen App component will update twice\uff01\r\n\r\n### What is expected?\r\nApp component updates only once\r\n\r\n### What is actually happening?\r\nApp component updates twice\r\n\r\n---\r\nWhen props used in child component initialization\uff0cthey will be detected as dependencies of parent component, Is there possible to stop dependency detection when entering child component initialization\u3002\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Pitfalls of Vue dependency detection may cause redundant dependencies",
        "labels": "bug",
        "id": 123760
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/94716/](https://jsfiddle.net/50wL7mdz/94716/)\r\n\r\n### Steps to reproduce\r\n1.  navigate to page-a to make keep-alive to cache page-a component\r\n2. navigate to page-b to make keep-alive to cache page-b component\r\n3. now,  if remove cache of page-a,  page-a was destroyed correctly,\r\n   if navigate back to page-a and remove cache of page-b ,page-b was not destroyed\r\n\r\n### What is expected?\r\npage-b was destroyed\r\n\r\n### What is actually happening?\r\npage-b was was not destroyed\r\n\r\n---\r\nhttps://github.com/vuejs/vue/blob/dev/src/core/components/keep-alive.js#L44\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "keep-alive doesn't call  $destroy if view is actived",
        "labels": "bug",
        "id": 123761
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/lxjwlt/ajy768fs/](https://jsfiddle.net/lxjwlt/ajy768fs/)\r\n\r\n### Steps to reproduce\r\nin chrome 57 and 56, \r\n\r\n1. filter with empty arguments:\r\n\r\n    ```html\r\n    <div>{{text | someFilter()}}</div>\r\n    ```\r\n\r\n2. when no parentheses:\r\n\r\n    ```html\r\n    <div>{{text | someFilter}}</div>\r\n    ```\r\n\r\n\r\n### What is expected?\r\n\r\n1. no error\r\n2. no error\r\n\r\n### What is actually happening?\r\n\r\n1.in chrome 57 and 56, report error:\r\n\r\n```\r\n[Vue warn]: Error compiling template:\r\n\r\n<div>{{text | someFilter()}}</div>\r\n\r\n- invalid expression: Unexpected token ) in\r\n\r\n    _s(_f(\"someFilter\")(text,))\r\n\r\n  Raw expression: {{text | someFilter()}}\r\n\r\n\r\n\r\n(found in <Root>)\r\n```\r\n\r\n2.no error\r\n\r\n---\r\nI have also examined the chrome 58 and 63 which have no errors both, so i guess this bug only occurs in chrome 57-.\r\n\r\nmac-chrome57:  https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac/444958/\r\n\r\nwin-chrome57: https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win/444958/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "filter with empty arguments cause error in chrome 57-",
        "labels": "bug",
        "id": 123762
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/asiankingofwhales/pen/zpQBQM](https://codepen.io/asiankingofwhales/pen/zpQBQM)\r\n\r\n### Steps to reproduce\r\n1. Click Toggle Slide to enable transition, which is currently not working\r\n2. If you remove the scrollTop layout calculations in beforeSlideEnter, the element will slide in smoothly. Now the transition is working.\r\n\r\n### What is expected?\r\nGradual sliding in from right\r\n\r\n### What is actually happening?\r\nWith scrollTop calculations, the entering transition is gone.\r\n\r\n---\r\nI have found that wrapping the child component in an additional div will solve this problem. However, this seems like a hack.\r\n\r\nI apologize if this is not a bug. I have raised this questions in forum, discord and stackoverflow but no one is able to answer. So I have started to think that it might be a bug.\r\n\r\n### Stackoverflow Link\r\nhttps://stackoverflow.com/questions/48420077/beforeenter-hook-on-child-component-transition-cancelled-by-scrolltop-layout-cal\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "layout calculations in beforeEnter hook will cancel entering animation for transition elements",
        "labels": "bug",
        "id": 123763
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/Akryum/aa6gqqkn/](https://jsfiddle.net/Akryum/aa6gqqkn/)\r\n\r\n### Steps to reproduce\r\nCancel a transition in the next frame. Example cancelling a fade-out transition:\r\n\r\n```js\r\nthis.show = false\r\nthis.$nextTick(() => {\r\n  this.show = true\r\n})\r\n```\r\n\r\n### What is expected?\r\nThe `v-enter-to` or `v-leave-to` classes are not added to the element.\r\n\r\n### What is actually happening?\r\nThe `v-enter-to` or `v-leave-to` classes are still added to the element despite the transition being cancelled.\r\n\r\n---\r\nThose lines should likely be put being a `!cb.cancelled` guard:\r\n\r\n- https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/modules/transition.js#L152\r\n- https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/modules/transition.js#L260\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Cancelled transitions on v-show still add the enterToClass or leaveToClass",
        "labels": "bug",
        "id": 123764
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/zsk/pen/XVpxaR](https://codepen.io/zsk/pen/XVpxaR)\r\n\r\n### Steps to reproduce\r\nv1.0.28 is ok: https://codepen.io/zsk/pen/bagmYb\r\n\r\nv2.5.13 has bug: https://codepen.io/zsk/pen/XVpxaR\r\n\r\n### What is expected?\r\nforeignObject\u518d\u5d4c\u5957svg\u5143\u7d20\uff0c\u8fd9\u4e2asvg\u5143\u7d20\u7684\u5b50\u5143\u7d20\uff08\u5982\uff1arect\uff09\u4e0d\u80fd\u663e\u793a\u3002\r\n\r\n### What is actually happening?\r\nforeignObject\u518d\u5d4c\u5957svg\u5143\u7d20\uff0c\u8fd9\u4e2asvg\u5143\u7d20\u7684\u5b50\u5143\u7d20\uff08\u5982\uff1arect\uff09\u80fd\u663e\u793a\u3002\r\n\r\n---\r\n\u5728svg\u7684foreignObject\u7684\u5143\u7d20\u5185\u518d\u5d4c\u5957svg\u5143\u7d20\uff0c\u88ab\u5d4c\u5957\u7684svg\u5143\u7d20\u7684\u5b50\u5143\u7d20\uff08\u5982\uff1arect\uff09\u4e0d\u80fd\u663e\u793a\uff0c\u4e0d\u8fc7text\u5143\u7d20\u53ef\u4ee5\u663e\u793a\u3002\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "svg\u4e2dforeignObject\u5143\u7d20\u5185\u7684svg\u5185\u90e8\u5b50\u5143\u7d20\u4e0d\u663e\u793a",
        "labels": "bug",
        "id": 123765
    },
    {
        "body": "### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/posva/pen/baeJzd?editors=1111](https://codepen.io/posva/pen/baeJzd?editors=1111)\r\n\r\n### Steps to reproduce\r\n  define a custom component witch emit custom event;\r\n  use v-if v-else create 2 component instances;\r\n  on first instance use v-on listen the custom event, the second DONOT;\r\n  toggle the v-if condition;\r\n  emit the custom event on the second instance\r\n\r\n### What is expected?\r\nthe listener on the first instance not been triggered\r\n\r\n### What is actually happening?\r\nthe listener on the first instance been triggered\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "custom event emit by the v-if component yet trigger the v-else component listener",
        "labels": "bug",
        "id": 123766
    },
    {
        "body": "### Version\r\n2.5.11\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/qL80y6oL/](https://jsfiddle.net/qL80y6oL/)\r\n\r\n### Steps to reproduce\r\nCheck console log. \r\n\r\n### What is expected?\r\nShould render input element\r\n\r\n### What is actually happening?\r\nWhen functional component returns an array and the array contains other values besides vnodes like e.g. null or undefined Vue will not render anything and throw an error.\r\n\r\n---\r\nI checked this in few previous versions and it seems that it never worked correctly. In 2.5.9 I get a different  warning \"Cannot set property 'isRootInsert' of null\". So the question is. Is this a case that should be handled by Vue internally, or do I have to be careful and not to return null/undefined values in returned array.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue does not accept undefined values when returning an array in functional component ",
        "labels": "bug",
        "id": 123767
    },
    {
        "body": "### Version\r\n2.5.9\r\n\r\n### Reproduction link\r\n[https://gist.github.com/2b3c1a683b334022c626917b0abb2adc](https://gist.github.com/2b3c1a683b334022c626917b0abb2adc)\r\n\r\n(I used a Gist, because ssrCompile is not exposed by the globals build of Vue.)\r\n\r\n### Steps to reproduce\r\n```javascript\r\ncompiler = require('vue-template-compiler')\r\ntemplate = \"<div id=\\\"foo,\\nbar\\\">\\n<textarea id=\\\"foo,\\nbar\\\">foo\\nbar</textarea>\\n</div>\"\r\nresult = compiler.ssrCompile(template)\r\nconsole.log(result.render)\r\n// output: with(this){return _c('div',{attrs:{\"id\":\"foo,\\nbar\"}},[_ssrNode(\"<textarea id=\\\"foo,\\\\nbar\\\">foo\\nbar</textarea>\")])}\r\n```\r\n\r\n### What is expected?\r\nvue-template-compiler should not double-escape newlines in attributes for _ssrNode string templates.\r\n\r\n### What is actually happening?\r\nvue-template-compiler double-escapes newlines in attributes of _ssrNodes.\r\n\r\n---\r\nIf you look at the output from the reproduction steps, you will see that the newline character '\\n' is only double escaped, if it is part of an attribute in an ssrNode, if is nor optimized to a string template and stored in the attrs property, is it fine and other newlines that are outside attributes are also fine.\r\n\r\nThe bug was observed with vue-template-compiler v2.5.9 and node.js v8.9.1.\r\n\r\nWhile the above example seems silly, newlines in attribute are very common when using responsive images, with multiple sizes in the srcset attribute, which are usually broken onto one line per size/url for readability and this is how a colleague of mine ran into this bug, where responsive images were working differently between ssr and rehydration due to the problem, because the browser aborted srcset parsing when finding the \"\\n\" literal string.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-template-compiler double-escaping newlines in _ssrNode text string templates",
        "labels": "bug",
        "id": 123768
    },
    {
        "body": "### Version\r\n2.5.9\r\n\r\n### Reproduction link\r\n[https://codepen.io/cool_zjy/pen/KyLpve](https://codepen.io/cool_zjy/pen/KyLpve)\r\n\r\n### Steps to reproduce\r\n1. run the reproduction\r\n2. `VueComponent` logged in console\r\n3. uncomment `// mixins: [mixin],`\r\n4. run the reproduction again\r\n\r\n\r\n### What is expected?\r\n`VueComponent` logged in console\r\n\r\n### What is actually happening?\r\n`undefined` logged in console\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "data method not called with `this` as argument when using mixins with data option",
        "labels": "bug",
        "id": 123769
    },
    {
        "body": "### Version\r\n2.5.8\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/78149/](https://jsfiddle.net/50wL7mdz/78149/)\r\n\r\n### Steps to reproduce\r\n1. click \u201cFirst\u201d and \u201cSecond\u201d alernatively for multi times\r\n2. change select to\u201cJapanese\u201d\uff0cclick \u201cFirst\u201d and \u201cSecond\u201d alernatively for multi times\r\n3. Change select to \u201cEnglish\u201d\r\n\r\n\r\n### What is expected?\r\nExpect\uff1a\r\nrouter-view can render to \u201cFirst 2\u201d\uff08or \u201cSecond 2\u201d\uff09\uff0cbut it remains \u201cFirst 3\u201d\uff08or \u201cSecond 3\u201d\uff09\r\n\r\n### What is actually happening?\r\nkeep-alive is remain the initail include binding data's value\r\n\r\n---\r\nwhat I want is keep-alive can be dynamic change to the include property's binding data\uff0c and prop Data can tranfer to component properly\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "keep-alive with include property resulting prop data do not pass down to component",
        "labels": "bug",
        "id": 123770
    },
    {
        "body": "### Version\r\n2.5.3\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/GOvGBJ?editors=1010](https://codepen.io/anon/pen/GOvGBJ?editors=1010)\r\n\r\n### Steps to reproduce\r\nLoad the codepen. \r\nThis is obviously not an actual SSR app, but is emulating one. The same thing happens with actual SSR that sets the padding based on window width. \r\n\r\n### What is expected?\r\nThe inline style should be updated when the page hydrates (see the codepen below)\r\n\r\n### What is actually happening?\r\nThe style only updates if the element has a `ref`\r\nSee https://codepen.io/anon/pen/aVyjoM?editors=1010\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR - mismatched styles are not updated in the DOM unless the element has a ref",
        "labels": "bug",
        "id": 123771
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://codepen.io/timbenniks/pen/oMzbzZ](https://codepen.io/timbenniks/pen/oMzbzZ)\r\n\r\n### Steps to reproduce\r\nAfter opening the codepen please click on the \"toggle\" button.\r\n\r\n### What is expected?\r\nThe slots which show the numbers should inverse when clicking on the toggle button. Their order is changed with a v-if condition.\r\n\r\n### What is actually happening?\r\nThe slots do not switch order. The first slot seems to switch, the second slot seems to stay in place. \r\n\r\nInstead of:\r\n1,2 to 2,1 \r\n\r\nThis happens:\r\n1,2 to 2,2\r\n\r\nWe have tried this with more slots and the results are unpredictable.\r\n\r\n---\r\nWe are changing the order of slots for features that change location on small or big screens. Sometimes the structure of a page changes too much so we change the order of slots to manage this. We only noticed the bug when we set the env to production. All works fine in development mode.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Conditionally changing the order of slots works incorrectly in --env=production mode of Vue.",
        "labels": "bug",
        "id": 123772
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/daxchen/k75y6tu0/](https://jsfiddle.net/daxchen/k75y6tu0/)\r\n\r\n### Steps to reproduce\r\nMy use case is that I have a default layout with Toolbar and main content wrapper. But some pages needs a `SearchBar` and some don't, and layouts may have different levels. \r\n\r\nSo I created a component called `LayoutDefault` as a base for other layouts to use. And because I want to be able to replace the default Toolbar when needed, I put the default Toolbar in `<slot name=\"toolbar\">`, with `Toolbar` as fallback content. \r\n\r\nCode snippet:\r\n\r\n```html\r\n// LayoutDefault.vue\r\n<slot name=\"toolbar\">\r\n  <Toolbar title=\"title from layout-inner\">\r\n    <slot name=\"toolbarSlot\"></slot>\r\n  </Toolbar>\r\n</slot>\r\n```\r\n\r\nI make these kind of components because I want to be able to:\r\n1. Replace the default Toolbar if need.\r\n2. Using the default Toolbar, but pass things to its slot (`\"toolbarSlot\"` in above example)\r\n\r\nAnd then in other layout components, I do this:\r\n\r\n```html\r\n// LayoutLv1.vue\r\n<div class=\"layout\">\r\n  <LayoutDefault>\r\n    <slot name=\"toolbar\" slot=\"toolbar\"></slot>\r\n    <slot name=\"toolbarSlot\" slot=\"toolbarSlot\"></slot>\r\n    <slot>default content from Layout</slot>\r\n  </LayoutDefault>\r\n</div>\r\n```\r\n\r\nAs you can see, to pass components to grandchild's slots, I used this pattern: `<slot name=\"foo\" slot=\"foo\">`.\r\n\r\nFor some reason, components passed using this pattern will be passed to the **default slot** if there's one.\r\n\r\nSee examples 2, 3, and 4 in the reproduction.\r\n\r\n\r\n\r\n### What is expected?\r\nI expect when no nothing is passed to a named slot, the fallback content will be rendered, with it's slots too.\r\n\r\n\r\n### What is actually happening?\r\nIn example 2, the replaced `Toolbar` is rendered in `LayoutDefault`'s default slot.\r\n\r\nIn example 3 and 4, `SearchBar` is passed to `slot=\"toolbarSlot\"`, but not rendered.\r\n\r\n---\r\nIs this the expected behavior?\r\nOr if there's a way for me to make these kind of reusable layouts with each default parts replaceable, and if using the default parts, be able to pass components into their (default parts) slots?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Passing component to grandchildren's nested named slot will resolve in the default slot.",
        "labels": "bug",
        "id": 123773
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/73510/](https://jsfiddle.net/50wL7mdz/73510/)\r\n\r\n### Steps to reproduce\r\nIn SSR the select fields are not rendered with the selected attribute, then the selected option appears selected after all page load.\r\nThe same happens with the textarea field, first appears empty and then when the page loads, it shows the content of v-model.\r\n\r\n### What is expected?\r\ntextarea and select must render the values in SSR\r\n\r\n### What is actually happening?\r\nboth fields not render the values in SSR\r\n\r\n---\r\ncheck this issue: https://github.com/nuxt/nuxt.js/issues/1817\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-model with select and text area issue vue-server-render",
        "labels": "bug",
        "id": 123774
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/pb32s2p3/6/](https://jsfiddle.net/pb32s2p3/6/)\r\n\r\n### Steps to reproduce\r\nOpen console (ctrl+shift+i in chrome, for example).\r\n\r\n### What is expected?\r\nOutput in console:\r\n\r\n    <div></div>\r\n    <div></div>\r\n\r\n\r\n### What is actually happening?\r\nOutput in console:\r\n\r\n    <div></div>\r\n    undefined\r\n\r\n---\r\nIf remove 'v-once' or change vue version to 2.4.4 (in 2.5.1 and 2.5.0 bug remains) problem disappears.\r\n\r\nThanks.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Conflict between v-once and ref",
        "labels": "bug",
        "id": 123775
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/CHENGKANG/4owjvLLk/5/](https://jsfiddle.net/CHENGKANG/4owjvLLk/5/)\r\n\r\n### Steps to reproduce\r\n1. Add multiple custom event listeners\r\n```js\r\nthis.$on(['event1', 'event2'], () => {\r\n    console.log('This is callback.')\r\n})\r\n```\r\n2. Try to remove them with `vm.$off`\r\n```\r\nthis.$off(['event1', 'event2'])\r\n```\r\n3. Try to emit the removed events\r\n```\r\nthis.$emit('event1')\r\n```\r\n\r\n### What is expected?\r\nNothing should happen because the event listeners should have been removed.\r\n\r\n### What is actually happening?\r\nGot `\"This is callback.\"` printed in the console, which means that the event listeners are not removed as expected.\r\n\r\n---\r\nPlease check [my post](https://forum.vuejs.org/t/vm-off-not-working-when-passing-an-array-as-first-argument/20555) in Vue forum for more details.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "`vm.$off` not working when passing an array as first argument",
        "labels": "bug",
        "id": 123776
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/L613xva0/13/](https://jsfiddle.net/L613xva0/13/)\r\n\r\n### Steps to reproduce\r\n\r\ntriggle the route \r\n\r\n### What is expected?\r\nthe second route component not be cached\r\n\r\n### What is actually happening?\r\nthe second route component  be cached\r\n\r\n---\r\nthis [demo](https://jsfiddle.net/L613xva0/12/) tow router-view component both have name, the result is right , \r\nbut in this [demo](https://jsfiddle.net/L613xva0/13/), the second route have no name ,but also be cached\r\n\r\n>The match is first checked on the component\u2019s own name option, then its local registration name (the key in the parent\u2019s components option) if the name option is not available. Anonymous components cannot be matched against.\r\n\r\n\r\n\r\n  ```\r\n<keep-alive :include=\"cachePages\">\r\n    <router-view></router-view>\r\n </keep-alive>\r\n```\r\nwhen l keep-alive router-view , every anonymous component page will be cached , i don't think is reasonable.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "keep-alive include will also cache anonymous components",
        "labels": "bug",
        "id": 123777
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/OxKqbL?editors=1111](https://codepen.io/anon/pen/OxKqbL?editors=1111)\r\n\r\n### Steps to reproduce\r\nPlease open codepen example and type something into input\r\n\r\n### What is expected?\r\nInput should not lose focus\r\n\r\n### What is actually happening?\r\ninput rerenders and loses focus\r\n\r\n---\r\nhappens only if there is such conditional elements exists before and after input. Workaround is to use v-show instead of v-if in such cases.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "<input> rerenders while changes affects only sibling elements",
        "labels": "bug",
        "id": 123778
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/71931/](https://jsfiddle.net/50wL7mdz/71931/)\r\n\r\n### Steps to reproduce\r\nrun the jsfiddle example\r\n\r\n### What is expected?\r\n`v-else` to work\r\n\r\n### What is actually happening?\r\n`v-else` seems to have no effect\r\n\r\n---\r\nmaybe related/duplicate with issue #6917 or issue #6907\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-if / v-else not working with :type + v-model",
        "labels": "bug",
        "id": 123779
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/linnea/8euf1geo/1/](https://jsfiddle.net/linnea/8euf1geo/1/)\r\n\r\n### Steps to reproduce\r\nOn the JSFiddle, wait for the setTimeout on L19 to finish. When the parent's label is set to false, the component re-renders but loses the content of the grandchild.\r\n\r\n### What is expected?\r\nFor the GrandChild content to still be in the DOM.\r\n\r\n### What is actually happening?\r\nGrandChild disappears after component in the parent re-renders.\r\n\r\n---\r\nWas expecting this bug to be fixed with this issue:\r\nhttps://github.com/vuejs/vue/issues/6372\r\n\r\nNot sure if it's the same or just a similar issue!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Grandchild component disappears after parent re-renders.",
        "labels": "bug",
        "id": 123780
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/pLvn7o95/](http://jsfiddle.net/pLvn7o95/)\r\n\r\n### Steps to reproduce\r\n1. Declare a computed property on a parent component, with a setter\r\n2. In a child component, pass the computed property as a v-model\r\n3. Attempt to update the property via the v-model binding\r\n\r\n### What is expected?\r\nThe computed property setter is called.\r\n\r\n### What is actually happening?\r\nThe computed property setter is not called and the following message appears in the JavaScript console:\r\n\r\n[Vue warn]: Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.\r\n\r\n---\r\nThis appears to be a regression in Vue 2.5.0, as changing the Vue version in the provided jsFiddle to 2.4.0 fixes the bug. The optimisation applied earlier in the 2.x-series to declare computed properties on the component's prototype appears to interfere with the call to hasOwn in function set (in observer/index).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Computed property setter on component other than \"this\" not called when updating v-model",
        "labels": "bug",
        "id": 123781
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\nUnable to quickly setup a SSR environment to show the issue.\r\n\r\n### Steps to reproduce\r\n```vue\r\n<template>\r\n\t<input :type=\"'text'\" v-model=\"foo\">\r\n</template>\r\n<script>\r\nexport default {\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tfoo: 123,\r\n\t\t}\r\n\t},\r\n}\r\n</script>\r\n```\r\n\r\n\r\n### What is expected?\r\ngenerated HTML by the server: `<input type=\"text\">`\r\n\r\n### What is actually happening?\r\nthe server generates `<!---->`\r\n\r\n---\r\nhydration error in browser console:\r\n\r\n`[Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.`\r\n\r\n\r\n```\r\nUncaught (in promise) TypeError: Cannot read property 'toLowerCase' of undefined\r\n    at emptyNodeAt (vendor.js:18438)\r\n    at VueComponent.patch [as __patch__] (vendor.js:19011)\r\n    at VueComponent.Vue._update (vendor.js:15663)\r\n    at VueComponent.updateComponent (vendor.js:15791)\r\n    at Watcher.get (vendor.js:16134)\r\n    at new Watcher (vendor.js:16123)\r\n    at mountComponent (vendor.js:15795)\r\n    at VueComponent.webpackJsonp.../node_modules/vue/dist/vue.runtime.esm.js.Vue$3.$mount (vendor.js:20834)\r\n    at init (vendor.js:17087)\r\n    at hydrate (vendor.js:18887)\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "SSR issue with dynamic <input> type",
        "labels": "bug",
        "id": 123782
    },
    {
        "body": "### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/fergusean/a001nzw5/2/](https://jsfiddle.net/fergusean/a001nzw5/2/)\r\n[https://jsfiddle.net/fergusean/a001nzw5/5/](https://jsfiddle.net/fergusean/a001nzw5/5/)\r\n\r\n### Steps to reproduce\r\nIn the links, nothing.  In your own instances, set a v-if on a select that also has a v-model (see examples).\r\n\r\n### What is expected?\r\nThe select should render, and the option whose value is == the value of the model bound to the select should be selected.\r\n\r\n### What is actually happening?\r\nThe first option in the select is active, until either a call to $forceUpdate, or another model is changed (click into the text field and type a letter).  Then, suddenly, the correct value is selected in the dropdown.\r\n\r\n---\r\nThis used to work in Vue 1.  I upgraded and then discovered this.  I'm working around it for now with a this.$nextTick(() => $this.forceUpdate());\r\n\r\nI previous submitted this issue as #6882, however I believe @gebilaoxiong closed it prematurely.  The provided \"solution\" changed the functionality and did not solve the actual issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "<select> doesn't select correct option after render",
        "labels": "bug",
        "id": 123783
    },
    {
        "body": "### Version\r\n2.5.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/nkovacs/rt9vcrj2/3/](https://jsfiddle.net/nkovacs/rt9vcrj2/3/)\r\n\r\n### Steps to reproduce\r\nIf you use a dynamic type on an input, and the property is not called `type`, you'll get this warning:\r\n\r\n```\r\nvue.js:491 [Vue warn]: Property or method \"type\" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.\r\n\r\n(found in <Root>)\r\n```\r\n\r\nAnd it won't work if you switch from a normal type like text to a checkbox or radio button (the special types that are in the else branch: https://github.com/vuejs/vue/commit/f3fe012d5499f607656b152ce5fcb506c641f9f4#diff-6eaa1698ef4f51c9112e2e5dd84fcde8R4)\r\n\r\nClick the button (Click me) to switch the input to a checkbox, then try checking and unchecking the box. The model's value will not change.\r\n\r\nCalling the property `type` works, the model's value will change: https://jsfiddle.net/nkovacs/rt9vcrj2/2/\r\n\r\n### What is expected?\r\nDynamic input type should work regardless of the property name.\r\n\r\n### What is actually happening?\r\nDynamic input type only works if the property is called `type`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Dynamic input type only works if the property is called type",
        "labels": "bug",
        "id": 123784
    },
    {
        "body": "### Version\r\n2.4.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/okjesse/k94fphsg/](https://jsfiddle.net/okjesse/k94fphsg/)\r\n\r\n### Steps to reproduce\r\nSwitch Foo and home link for several times\uff0cVueComponent's count will be always grow up \r\n\r\n### What is expected?\r\nVueComponent's count is stable \r\n\r\n### What is actually happening?\r\nVueComponent's count always grow up\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->\r\n1. switch 0 time:\r\n![1](https://user-images.githubusercontent.com/2336187/31328325-ffd2578e-ad06-11e7-91b7-413d1df29f19.png)\r\n2. switch 20 times:\r\n![2](https://user-images.githubusercontent.com/2336187/31328332-0cb2f954-ad07-11e7-88dd-da218fc5279f.png)\r\n3. switch 100 times\r\n![3](https://user-images.githubusercontent.com/2336187/31328335-17f3cf32-ad07-11e7-8699-9efdf67ab222.png)\r\n\r\nwhen the component is big, chrome's memory will be not enough!\r\n\r\nthank you for your reading!\r\n\r\n",
        "title": "memory leak with keep-alive",
        "labels": "bug",
        "id": 123785
    },
    {
        "body": "### Version\r\n2.4.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/by4bfduo/](https://jsfiddle.net/by4bfduo/)\r\n\r\n### Steps to reproduce\r\nClick radio \"B\".\r\n\r\n### What is expected?\r\nShould switch to component \"B\".\r\n\r\n### What is actually happening?\r\nDoesn't switch to \"B\".\r\n\r\n---\r\nIn real scenario, when a user navigates to a new view, I want to load the remote data (in created hook) and set the root node's v-if to true to switch the component in. But when data hasn't been load for some reason, the dynamic component is stuck and can't go anywhere.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transitioning between components fails when component's root node has v-if=\"false\"",
        "labels": "bug",
        "id": 123786
    },
    {
        "body": "### Version\r\n2.4.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/sn7o1mm3/](https://jsfiddle.net/sn7o1mm3/)\r\n\r\n### Steps to reproduce\r\nEmbed `<p  xmlns=\"http://www.w3.org/1999/xhtml\">` in the svg <foreignObject> element \r\n\r\n### What is expected?\r\nthe `<p>` should be rendered as a htmlElment and show.\r\n\r\n### What is actually happening?\r\n`<p>` did not show\r\n\r\n---\r\nseems related to this https://github.com/vuejs/vue/issues/6506\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Embed HTML into an HTML5 SVG fragment got wrong namespace in template",
        "labels": "bug",
        "id": 123787
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://glitch.com/edit/#!/v-text](https://glitch.com/edit/#!/v-text)\r\n\r\nhttps://v-text.glitch.me/html\r\nhttps://v-text.glitch.me/text\r\n\r\n### Steps to reproduce\r\nTry to render `<span v-text=\"x\"></span>` where `x` is is `null` or `undefined`\r\n\r\n### What is expected?\r\nIt may be gracefully handled just like `v-html` directive (see notes below) or client side version of `v-text`.\r\n\r\n### What is actually happening?\r\nThrowing an internal `TypeError`:\r\n\r\n```bash\r\nCannot read property 'replace' of undefined\r\n```\r\n\r\n```js\r\nfunction escape (s) {\r\n  return s.replace(/[<>\"&]/g, escapeChar)\r\n}\r\n```\r\n\r\n---\r\nSeems the simple fix would be defining a default value for `s` parameter in [util.js](https://github.com/vuejs/vue/blob/dev/src/platforms/web/server/util.js#L46) (or better do a `string` type check on value)\r\n\r\nRelated to nuxt/nuxt.js#1638\r\n\r\n**Some Notes**\r\n\r\n`v-html` behaviour also differs in SSR and client. SSR renders `v-html: <span>null</span>` while it changes into `<span></span>` on client side. Seems `<span v-html=\"foo\">` is being optimized into `'<span>' + (_vm.foo)`. So we can change it into `(_vm.foo|| '')` to handle this inconsistency during SSR render.\r\n\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Null values for `v-text` directive not handled in SSR",
        "labels": "bug",
        "id": 123788
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsbin.com/qejofexedo/edit?html,js,output](https://jsbin.com/qejofexedo/edit?html,js,output)\r\n\r\n### Steps to reproduce\r\nsee reproduction link.\r\n\r\n### What is expected?\r\nWhen I click `Expand is True`, then `expand` to become `false`. And only `countA` changed.\r\n\r\n### What is actually happening?\r\nWhen I click `Expand is Ture`, nothing happened.\r\nThe `countA` and `countB` changed.\r\nI guess when I click, `expand` changed to `false`, but immediate the click event triggered. It executes another vnode click event. Then expand changed to `true`.\r\n\r\n### And More\r\n\r\n* If I rename the second div to another tag name, such as `p`, `section`, no errors occur.\r\n* If I move click event from `i` tag to parent `div` tag in the first div, no errors occur\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "@click would trigger event other vnode @click event.",
        "labels": "bug",
        "id": 123789
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/vwtLfh2e/1/](https://jsfiddle.net/vwtLfh2e/1/)\r\n\r\n### Steps to reproduce\r\nType one character in the input\r\n\r\n### What is expected?\r\nThe character is added to the input, the `value` property is updated to reflect the change, and the `setDirty` method is called, setting `isDirty` to true\r\n\r\n### What is actually happening?\r\nThe `setDirty` method is called, but nothing is added to the input and the `value` does not update.\r\n\r\n---\r\nAfter the first character entry into the input, the model binding works as expected. It seems that using `@input.once=\"someMethod\"` is preventing the expected behavior of `v-model`.\r\n\r\nFound via this [StackOverflow question](https://stackoverflow.com/questions/46111263/why-v-model-attribute-work-differently)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "@input.once preventing the update of the input if used with v-model",
        "labels": "bug",
        "id": 123790
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://github.com/nickmessing/vue-ssr-issue](https://github.com/nickmessing/vue-ssr-issue)\r\n\r\n### Steps to reproduce\r\nUse `domPropsInnerHTML` in JSX or `v-html` in Vue Template.\r\n\r\nOr:\r\n* Clone the repo\r\n* `npm install`\r\n* `npm run dev`\r\n* Open http://localhost:3000 and http://localhost:3000/jsx\r\n\r\n### What is expected?\r\nNo warning in console.\r\n\r\n### What is actually happening?\r\nDOM Mismatching error.\r\n\r\n---\r\n`v-html` works fine when there are no children, but fails if there are.\r\n\r\nOne option is to completely ignore `innerHTML` and `v-html` in vue-ssr. Basically commenting [this line](https://github.com/vuejs/vue/blob/dev/src/platforms/web/server/modules/dom-props.js#L27) solves the problem.\r\n\r\nAnother option is evaluating `innerHTML` before comparing DOM snapshots so you get value from `innerHTML` on static SSR-rendered website without DOM Mismatch.\r\n\r\nThird option is ignoring children in `createElment` if there is `innerHTML` domProp. I think this one is the best.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Vue SSR fails with innerHTML",
        "labels": "bug",
        "id": 123791
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/zjsuzqgu/15/](http://jsfiddle.net/zjsuzqgu/15/)\r\n\r\n### Steps to reproduce\r\nThis issue only occurs in Internet Exporer 11 on textareas and input fields when using v-model binding.\r\n\r\n1. Open the http://jsfiddle.net/zjsuzqgu/15/ with IE 11\r\n2. Quickly enter text into the second textarea (maybe you should press 3 buttons at same time)\r\n\r\nWe used a barcode scanner to enter the texts, but its also possible to reproduce it with the keyboard.\r\nWe also recognized that it happens more often on slow machines\r\n\r\n### What is expected?\r\nAll keys are recognized\r\n\r\n### What is actually happening?\r\nSome letters are missing randomly\r\n\r\n---\r\nWe made a video of this behaviour: https://youtu.be/w-IYuPBGdR0\r\n\r\nYou could reproduce this even on the vuejs page https://vuejs.org/v2/guide/forms.html#Text\r\n\r\nI just added a v-on:input to the textarea to see whats logged there. \r\nThe result was \r\nA\r\nA\r\nAC\r\nAC\r\n\r\nThe B was never recognized even in input event\r\n\r\nI also changed the intercharacter delay of the scanner from 1 ms to 25 ms without success\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "IE11: Keystrokes missing if v-model is used",
        "labels": "bug",
        "id": 123792
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/5k4ptmqg/89/](https://jsfiddle.net/5k4ptmqg/89/)\r\n\r\n### Steps to reproduce\r\nIn a component render function, return an element that contains a slot directly followed by raw text.\r\n\r\n### What is expected?\r\nNew content completely replaces the old content on re-render.\r\n\r\n### What is actually happening?\r\nNew content is appended to the old content on re-render.\r\n\r\n---\r\nSeems like this was fixed for render functions compiled from templates in [2.1.5](https://github.com/vuejs/vue/releases/tag/v2.1.5).\r\n\r\nRelease notes for that version says: \r\n\r\n> Small across-the-board performance improvement for render functions compiled from templates. They now skip the normalization of nested children arrays based on information inferred from the templates at compile time.\r\n\r\nI couldn't reproduce this in `.vue` files in a project generated from `vue-cli` Webpack template. JSX is affected, as can be seen in [this issue](https://github.com/skyrpex/vue-jsx-hot-loader/issues/14) and, render functions, as seen in the linked fiddle.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vm.$forceUpdate duplicates content when childs consist of a slot followed by text",
        "labels": "bug",
        "id": 123793
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/55826/](https://jsfiddle.net/50wL7mdz/55826/)\r\n\r\n### Steps to reproduce\r\n1. Use Vue.extend() to create a subclass which contains `provide` option.\r\n2. Inject property in child component of subclass.\r\n\r\n### What is expected?\r\nProperty is injected correctly.\r\n\r\n### What is actually happening?\r\nProperty is not injected.\r\n\r\n---\r\nIn src/core/util/options.js, Line 97-99. `defaultData` is set to `undefined` if `parentVal` is not a function. It may cause this issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Inject/Provide not working in Vue.extend() class.",
        "labels": "bug",
        "id": 123794
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/yMv7y/3265/](http://jsfiddle.net/yMv7y/3265/)\r\n\r\n### Steps to reproduce\r\nOn the JSFiddle, wait for the `setTimeout` on L15 to complete after two seconds.\r\n\r\n### What is expected?\r\nFor CustomElA to still be in the DOM.\r\n\r\n### What is actually happening?\r\nCustomElA is removed from the DOM on re-render. However, it comes back on the third re-render (tested using `setInterval` instead of `setTimeout` on JSFiddle on L16).\r\n\r\n---\r\nThe JSfiddle is using Vue v2.4.0 but I have verified the bug on v2.4.2 locally.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Component disappears on first re-render",
        "labels": "bug",
        "id": 123795
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/52896/](https://jsfiddle.net/50wL7mdz/52896/)\r\n\r\n### Steps to reproduce\r\nJust make an SSR app using nuxt or something else and put `&lt;hello` into the template.\r\n\r\n### What is expected?\r\nNo error\r\n\r\n### What is actually happening?\r\nConsole output: `[Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "vue-server-renderer: &lt;hello will cause Server/Client DOM mismatch",
        "labels": "bug",
        "id": 123796
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/50757/](https://jsfiddle.net/50wL7mdz/50757/)\r\n\r\n### Steps to reproduce\r\nAccess $attrs as object within component context, when no props were provided.\r\n\r\n### What is expected?\r\n$attrs is an object containing unrecognized props. Therefore I would expect an empty object, when no props are specified on component tag.\r\n\r\n### What is actually happening?\r\n$attrs is undefined\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "$attrs is undefined when component has no props",
        "labels": "bug",
        "id": 123797
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/z11fe07p/2382/](https://jsfiddle.net/z11fe07p/2382/)\r\n\r\n### Steps to reproduce\r\n- open https://jsfiddle.net/z11fe07p/2382/\r\n- click the \"B\" button\r\n\r\n### What is expected?\r\nThe previous component (A) should disappear before component B appears\r\n\r\n### What is actually happening?\r\nComponents A and B are visible simultaneously\r\n\r\n---\r\nsee also issue #5760\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "out-in transition issue with async components in a <keep-alive> block",
        "labels": "bug",
        "id": 123798
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/mysticatea/528857L9/1/](https://jsfiddle.net/mysticatea/528857L9/1/)\r\n\r\n### Steps to reproduce\r\n1. Write `<dt>` and `<dd>` without their end tags by turns in a template (except DOM template). For example:\r\n\r\n```html\r\n<dl>\r\n    <dt>Title 1\r\n    <dd>Details 1\r\n    <dt>Title 2\r\n    <dd>Details 2\r\n</dl>\r\n```\r\n\r\n### What is expected?\r\nThe DOM tree will become:\r\n\r\n```html\r\n<dl>\r\n    <dt>Title 1</dt>\r\n    <dd>Details 1</dd>\r\n    <dt>Title 2</dt>\r\n    <dd>Details 2</dd>\r\n</dl>\r\n```\r\n\r\n### What is actually happening?\r\nThe DOM tree became:\r\n\r\n```html\r\n<dl>\r\n    <dt>\r\n        Title 1\r\n        <dd>\r\n            Details 1\r\n            <dt>\r\n                Title 2\r\n                <dd>Details 2</dd>\r\n            </dt>\r\n        </dd>\r\n    </dt>\r\n</dl>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "dt and dd without end tags went to wrong.",
        "labels": "bug",
        "id": 123799
    },
    {
        "body": "### Version\r\n2.4.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/ntdd9g2a/86/](https://jsfiddle.net/ntdd9g2a/86/)\r\n\r\n### Steps to reproduce\r\n1. open the link in IE11\r\n2. see the select element does't be rendered correctly\r\n\r\n\r\n### What is expected?\r\nThe second option('\u83dc\u5355\u4e8c') in select element should be in view \r\n\r\n### What is actually happening?\r\nThe third option('\u83dc\u5355\u4e09') in select element is still in view \r\n\r\n---\r\nI have to use setTimeout to solve this problem. So i want to know how it happened\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "select element can't be rendered correctly by vue 2.0.0 (or above) in IE 11",
        "labels": "bug",
        "id": 123800
    },
    {
        "body": "### Version\r\n2.4.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/k5h2fvqh/](https://jsfiddle.net/k5h2fvqh/)\r\n\r\n### Steps to reproduce\r\n1. `<p>` tag as Root element\r\n2. put `<div>` tag as child element\r\n\r\n### What is expected?\r\nRender template correctly\r\n\r\n### What is actually happening?\r\nError compiling template with message \"Component template should contain exactly one root element\"\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Error compiling template, even though one root element",
        "labels": "bug",
        "id": 123801
    },
    {
        "body": "### Version\r\n2.4.1\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/dREmrV](https://codepen.io/anon/pen/dREmrV)\r\n\r\n### Steps to reproduce\r\nUsing the new `comments: true` property on a vue instance does not understand block comments, and it also errors when single quotes `'` are used within inline comments.\r\n\r\nThis is particularly annoying in Drupal development when debugging templates, since the template debug output is done using block comments and contains single quotes. See codepen example for a typical Drupal comment block output.\r\n\r\n### What is expected?\r\nComments should be rendered correctly within the outputted HTML.\r\n\r\n### What is actually happening?\r\nVueJS fails to render the instance and throws an exception when trying to parse the comments.\r\n\r\n---\r\nI believe this would happen when using Drupal 7 or 8 with development debugging turned on, when using Vue 2.4 .\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "HTML block comments & single quotes not parsed correctly",
        "labels": "bug",
        "id": 123802
    },
    {
        "body": "### Version\r\n2.3.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/aL1dgdc8/11/](https://jsfiddle.net/aL1dgdc8/11/)\r\n\r\n### Steps to reproduce\r\n1. Create custom directive that uses `inserted` hook\r\n2. Apply that directive to element with `v-if` and wrapped in `<transition>`\r\n3. Toggle visibility of that element\r\n\r\n\r\n### What is expected?\r\n`inserted` hook to fire (just like `bind` hook)\r\n\r\n### What is actually happening?\r\n`inserted` hook doesn't fire at all\r\n\r\n---\r\nI've spent like couple of hours debugging this on my custom directive VueBar (https://github.com/DominikSerafin/vuebar/issues/5) because I thought this was issue with my code. Unfortunately I think that's issue with Vue itself.\r\n\r\nThere is a workaround though; just wrap element with directive in another element that will get transitioned (like in 3rd example in the reproduction).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Custom directive \"inserted\" hook doesn't fire when transition is used on binded element",
        "labels": "bug",
        "id": 123803
    },
    {
        "body": "### Version\r\n2.3.4\r\n\r\n### Reproduction link\r\n[https://codepen.io/sinceow/pen/dRQaPW](https://codepen.io/sinceow/pen/dRQaPW)\r\n\r\n### Steps to reproduce\r\nI want to build a input with 6 digital. The code above woks fine until I enter '0' more then 6 times.\r\n'val' in Vue model is '000000', but the display is '00000000'\r\n\r\n### What is expected?\r\nI think it's a bug\r\n\r\n### What is actually happening?\r\nI don't know\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Strange behavior with input type=\"number\"",
        "labels": "bug",
        "id": 123804
    },
    {
        "body": "### Version\r\n2.3.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/b6wa6drg/4/](https://jsfiddle.net/b6wa6drg/4/)\r\n[https://jsfiddle.net/k4sb93uj/1/](https://jsfiddle.net/k4sb93uj/1/)\r\n\r\n### Steps to reproduce\r\nSee minimal reproduction links. `v-model` works as expected with `<custom select>` but not with `<select is=\"custom-select\">`. The longhand works when the model prop is named something other than `value`.\r\n\r\n### What is expected?\r\n`v-model` should automatically wire up the `value` prop with its expression.\r\n\r\n### What is actually happening?\r\nNo value is being passed to the `value` prop. I'm getting the default value `undefined`, instead.\r\n\r\n---\r\nMy only guess is that `v-model` is binding before the component is mounted.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "`v-model` not working with `<select is=\"custom-select\">`",
        "labels": "bug",
        "id": 123805
    },
    {
        "body": "### Version\r\n2.3.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/oyf86mcp/](https://jsfiddle.net/oyf86mcp/)\r\n\r\n### Steps to reproduce\r\n1. Run the fiddle\r\n2. Uncheck the checkbox\r\n3. Click \"Shuffle\" button \r\n4. Check the checkbox\r\n5. Click \"Shuffle\" button\r\n\r\n### What is expected?\r\nAfter first \"Shuffle\" click (with an unchecked checkbox), list items are reordered with no transition animation.\r\n\r\nAfter second \"Shuffle\" click (with a checked checkbox), list items are reordered with a transition animation.\r\n\r\n### What is actually happening?\r\nAfter first \"Shuffle\" click (with an unchecked checkbox), list items are reordered with no transition animation.\r\n\r\nAfter second \"Shuffle\" click (with a checked checkbox), list items are still reordered with no transition animation.\r\n\r\n---\r\nFound via this question on StackOverflow:\r\nhttps://stackoverflow.com/questions/44850588/disable-transition-animation/44851948#44851948\r\n\r\nIf the list is shuffled before initially unchecking the checkbox, everything works as expected. I'm only seeing this when the list is initially shuffled when the `name` of the transition group is set to `\"disabled-list\"`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Transition group with dynamic name not correctly applying transition",
        "labels": "bug",
        "id": 123806
    },
    {
        "body": "### Version\r\n2.3.4\r\n\r\n### Reproduction\r\nHere what happens on F5 (reload) key:\r\n![ssr_pre_tag_issue](https://user-images.githubusercontent.com/25509586/27624762-6a0f0b72-5be2-11e7-9da2-6c1cb2e7a2f1.gif)\r\n(It happens only once, the video is looped)\r\n\r\n\r\n### Steps to reproduce\r\nAdd a `<pre>` tag in App.vue of the vue-hackernews-2.0 demo:\r\n\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <header class=\"header\">\r\n    <pre style=\"background-color: #aaa\">\r\nfoobar\r\n    </pre>\r\n      <nav class=\"inner\">\r\n\r\n```\r\n\r\n### What is expected?\r\nclient-side and server-side have the same version for the `<pre>` tag\r\n\r\n### What is actually happening?\r\nclient and server side versions are not the same, then bailout ?, then `<pre>` tag content is flickering\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "ssr unexpected hydration bailout with <pre> tag",
        "labels": "bug",
        "id": 123807
    },
    {
        "body": "### Version\r\nvue@2.2.3\r\n\r\n### Reproduction link\r\n[https://github.com/freeozyl80/vue-memory-leak](https://github.com/freeozyl80/vue-memory-leak)\r\n\r\n### Steps to reproduce\r\n1. use Vue Server Render (renderToString);\r\n2. the vm in server has \"computed\" which define a test function without return.(yes ,this step is incorrect, just throw error and pause is ok, but then memory leak happend)\r\n3. memory leak happend.\r\n\r\n### What is expected?\r\nthrow error and pause \r\n\r\n### What is actually happening?\r\nthe vonde is going to run and create, but not destroyed and exit.\r\nIn heap snapshots, i found the vue$2 has created almost 4538\r\n\r\n---\r\njust look in 'https://github.com/freeozyl80/vue-memory-leak'\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Memory leak in Vue.js server-side when using \"computed\"",
        "labels": "bug",
        "id": 123808
    },
    {
        "body": "### Version\r\n2.3.4\r\n\r\n### Reproduction link\r\n[https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/util/title.js#L13](https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/util/title.js#L13)\r\n\r\n### Steps to reproduce\r\n1. git clone https://github.com/vuejs/vue-hackernews-2.0.git\r\n\r\n2. Change /src/util/title.js file like this:\r\n```js\r\nconst serverTitleMixin = {\r\n  created() {\r\n    /* before change */\r\n    // const title = getTitle(this)\r\n    // if (title) {\r\n    //   this.$ssrContext.title = `Vue HN 2.0 | ${title}`\r\n    // }\r\n\r\n    /* after change */\r\n    const title = getTitle(this) || 'Vue HN 2.0'\r\n    if (this.$ssrContext) {\r\n      this.$ssrContext.title = title\r\n    }\r\n  }\r\n}\r\n```\r\n**According to functional and robustness, the changed code should be ok as normal thinking.** \r\n*\u6309\u7167\u6b63\u5e38\u7684\u7f16\u7a0b\u601d\u8def\uff0c\u4fee\u6539\u540e\u7684\u4ee3\u7801\u5e94\u8be5\u66f4\u52a0\u4e25\u8c28\u624d\u662f*\r\n\r\n3.  npm install & npm run dev\r\n\r\n4. open browser, enter http://localhost:8080\r\n\r\n### What is expected?\r\nThe `if` condition statement ensured `this.$ssrContext` to be not undefined when trying to set `title` a value on it. It shoud be ok as normal expected.\r\n\r\n### What is actually happening?\r\nError trace in console:\r\n\r\n```text\r\n[Vue warn]: Error in created hook: \"TypeError: Cannot read property 'ssrContext' of undefined\"\r\n\r\n(found in <Root>)\r\nerror during render : /\r\nTypeError: Cannot read property 'ssrContext' of undefined\r\n    at Vue$3.get (D:\\Temp\\vue-demos\\vue-hackernews-2.0\\node_modules\\vue\\dist\\vue.runtime.common.js:4423:23)\r\n    at Vue$3.created (src/util/title.js:20:21)\r\n    at callHook (D:\\Temp\\vue-demos\\vue-hackernews-2.0\\node_modules\\vue\\dist\\vue.runtime.common.js:2554:21)\r\n    at Vue$3.Vue._init (D:\\Temp\\vue-demos\\vue-hackernews-2.0\\node_modules\\vue\\dist\\vue.runtime.common.js:3998:5)\r\n    at new Vue$3 (D:\\Temp\\vue-demos\\vue-hackernews-2.0\\node_modules\\vue\\dist\\vue.runtime.common.js:4093:8)\r\n    at new Store (D:\\Temp\\vue-demos\\vue-hackernews-2.0\\node_modules\\vuex\\dist\\vuex.js:264:21)\r\n    at createStore (src/store/index.js:10:9)\r\n    at createApp (src/app.js:21:16)\r\n    at module.exports.__webpack_exports__.default (src/entry-server.js:13:35)\r\n    at module.exports.__webpack_exports__.default (src/entry-server.js:11:9)\r\n```\r\n\r\nError in browser:\r\n\r\n500 | Internal Server Error\r\n\r\n\r\n---\r\nI suppose it is a bug of **vue-server-renderer**. If not, what happened?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Cannot read property 'ssrContext' of undefined",
        "labels": "bug",
        "id": 123809
    },
    {
        "body": "### What problem does this feature solve?\r\nhttp://vuejs.org/v2/guide/forms.html#Basic-Usage\r\n\r\nFor languages that require an IME (Chinese, Japanese, Korean etc.), you\u2019ll notice that v-model doesn\u2019t get updated during IME composition. \r\n```\r\n<p>msg</p><input v-model=\"msg\"> \r\n```\r\nis OK, but type=\"search\" is Not OK\r\n```\r\n<p>msg</p><input type=\"search\" v-model=\"msg\">\r\n```\r\n### What does the proposed API look like?\r\nFor languages that require an IME (Chinese, Japanese, Korean etc.),  v-model(type=\"search\") doesn\u2019t get updated during IME composition.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Inconsistent behavior of v-model sync during IME composition for <input type=\"search\">",
        "labels": "bug",
        "id": 123810
    },
    {
        "body": "### Version\r\n2.3.4\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/f055yu68/](https://jsfiddle.net/f055yu68/)\r\n\r\n### Steps to reproduce\r\nJust open reproduction link\r\n\r\n### What is expected?\r\n\"foo-content\" is shown at foo slot.\r\n\r\n```\r\ndefault-slot :  ???\r\nfoo-slot : foo content\r\n```\r\n\r\n### What is actually happening?\r\n\"foo-content\" is shown at default slot.\r\n`slot=\"foo\"` specification is just ignored\r\n\r\n```\r\ndefault-slot : foo content \r\nfoo-slot : ???\r\n```\r\n\r\n---\r\nslot name is stored in `data`, and lost at this line.\r\n\r\nhttps://github.com/vuejs/vue/blob/9cf6646f46ef3c13236677e58e72d2c6dd5c8abf/src/core/vdom/create-component.js#L171\r\n\r\nIs this an intentional behaviour ?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "keep-alive component (or other abstract component) ignores slot name",
        "labels": "bug",
        "id": 123811
    },
    {
        "body": "### Version\r\n2.3.3\r\n\r\n### Reproduction link\r\nhttp://jsfiddle.net/p861bj9y/\r\n\r\n### Steps to reproduce\r\nI created a minimal reproduction of the behavior I am trying to test, the example just needs JSX to work. \r\n\r\n### What is expected?\r\nThe properties passed down from parent should show up in `ctx.injections`.\r\n\r\n### What is actually happening?\r\n`Ctx.injections` exists but remains empty. The properties are not being passed down to the functional component context.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provided props are not injected into functional components ",
        "labels": "bug",
        "id": 123812
    },
    {
        "body": "### Version\r\n2.3.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/z11fe07p/1959/](https://jsfiddle.net/z11fe07p/1959/)\r\n\r\n### Steps to reproduce\r\n- load https://jsfiddle.net/z11fe07p/1959/\r\n- click the \"B\" button\r\n\r\n### What is expected?\r\nThe previous component (A) should disappear before component B appears\r\n\r\n### What is actually happening?\r\nComponents A and B are visible simultaneously\r\n\r\n---\r\nThis behavior is happens only when component B is not already loaded. Next time you switch from A to B, everything is fine.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "out-in transition issue with async components ",
        "labels": "bug",
        "id": 123813
    },
    {
        "body": "### Version\r\n2.3.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/pu2dvgmn/8/](https://jsfiddle.net/pu2dvgmn/8/)\r\n\r\n### Steps to reproduce\r\nAfter reproduction link was loaded, wait\r\n\r\n### What is expected?\r\nWhen async components was resolved, a timeout **is not occured**.\r\n\r\n### What is actually happening?\r\nWhen async components was resolved, a timeout **is occured**.\r\n\r\n---\r\nthe following error in console log:\r\n\r\n```\r\nvue.js:437 [Vue warn]: Failed to resolve async component: ()=>({\r\n      component:new Promise((resolve)=>(\r\n        setTimeout(() => \r\n          resolve({template:\"<div>loaded</div>\"}), 200)\r\n      )),\r\n      loading: {template:\"<div>loading</div>\"},\r\n      error: {template:\"<div>timeout</div>\"},\r\n      delay: 200,\r\n      timeout: 3000\r\n    })\r\nReason: timeout (3000ms)\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Even after async components was resolved, a timeout occur",
        "labels": "bug",
        "id": 123814
    },
    {
        "body": "### Version\r\n2.3.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/gazugafan/a8kverza/2/](https://jsfiddle.net/gazugafan/a8kverza/2/)\r\n\r\n### Steps to reproduce\r\nChange the inputs marked \"Change Me\", then add a row. Any inputs following the v-for rows get re-created (and lose their value), while inputs above remain as they are. This only seems to happen when the inputs and v-for element are contained in a parent component's slot.\r\n\r\n### What is expected?\r\nAll inputs remain unchanged--regardless of what happens to the sibling v-for element.\r\n\r\n### What is actually happening?\r\nAny input elements following the v-for are re-created--resetting their value.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Elements unnecessarily re-created when an above v-for changes.",
        "labels": "bug",
        "id": 123815
    },
    {
        "body": "### Version\r\n2.3.2\r\n\r\n### Reproduction link\r\nhttps://jsfiddle.net/frctmhLd/3/\r\n\r\n### Steps to reproduce\r\nCreate a scoped slot using the <template> element, as is necessary\r\nUse dynamic props to set the slot property on the <template>\r\nAttempt to utilize this slot\r\n\r\n\r\n### What is expected?\r\nThe slot is loaded and display correctly\r\n\r\n### What is actually happening?\r\nDynamic properties don't seem to work on the <template> component, so the \"slot\" property is getting set to null and it is not being loaded\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Dynamic slot name bound from v-for directive not working with scoped slots",
        "labels": "bug",
        "id": 123816
    },
    {
        "body": "### Version\r\n2.2.6\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/24930/](https://jsfiddle.net/50wL7mdz/24930/)\r\n\r\n### Steps to reproduce\r\nClick the \"Switch view\" button.\r\n\r\n### What is expected?\r\nThe \"home\" view's state should have been kept alive when switching to the other signin view.\r\n\r\n### What is actually happening?\r\nInstead the \"home\" view is recreated everytime.\r\n\r\n---\r\nIf I remove the include=\"home\" option from keep-alive, it works as intended or if I remove the mode=\"out-in\" option from the transition node, it also works as intended.\r\nI've debugged this and it seems that when every time it switches the component, the \"include\" watch is somehow triggered with undefined as val parameter and then it's being triggered again with the correct \"home\" value but by then the first trigger has already removed the home node from the cache.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Keep-Alive inside of transition not working with include",
        "labels": "bug",
        "id": 123817
    },
    {
        "body": "### Version\r\n2.2.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/nosferatu79/z1jhpewo/](https://jsfiddle.net/nosferatu79/z1jhpewo/)\r\n\r\n### Steps to reproduce\r\nclick on the textarea with the right click of your mouse\r\n\r\n### What is expected?\r\nit should add in the textarea the following text:\r\n\r\ncontextmenu\r\nright\r\n\r\n### What is actually happening?\r\nthere is only the text:\r\n\r\ncontextmenu\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "mouse modifier @click.right not working",
        "labels": "bug",
        "id": 123818
    },
    {
        "body": "### Version\r\n2.2.6\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/4mpf6x1r/1/](https://jsfiddle.net/4mpf6x1r/1/)\r\n\r\n### Steps to reproduce\r\nclick the update text\r\n\r\n### What is expected?\r\nposition changed\r\n\r\n### What is actually happening?\r\nposition not changed\r\n\r\n---\r\nit worked when i do like this: https://jsfiddle.net/4mpf6x1r/2/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "view not update when use transition in this case",
        "labels": "bug",
        "id": 123819
    },
    {
        "body": "### Version\r\n2.2.4\r\n\r\n### Reproduction link\r\n[http://codepen.io/idmean/pen/MpXapy](http://codepen.io/idmean/pen/MpXapy)\r\n\r\n### Steps to reproduce\r\n```html\r\n<div id=\"app\">\r\n  <div v-if=\"enterUser\">\r\n    <input type=\"text\" v-model=\"user\">\r\n  </div>\r\n  <div v-if=\"!enterUser\">\r\n    <h1>file</h1>\r\n    <input type=\"file\">\r\n  </div>\r\n</div>\r\n```\r\n\r\nJS:\r\n\r\n```js\r\nconst app1 = new Vue({\r\n  el: '#app',\r\n  data: {\r\n    enterUser: true,\r\n    user: 'sean',\r\n  }\r\n});\r\n\r\nsetTimeout(() => app1.enterUser = false, 1000);\r\n```\r\n\r\nWait one second for the timeout to expire and the views to change.\r\n\r\n### What is expected?\r\nThe second view consisting of the heading \"file\" and a file input should appear.\r\n\r\n### What is actually happening?\r\nA text input appears instead. Inspecting the DOM also shows a input element with type `text` was created.\r\n\r\n---\r\nThis bug seems to occur only in Safari (10.0.3)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Input type file is changed to text in Safari",
        "labels": "bug",
        "id": 123820
    },
    {
        "body": "### Version\r\n2.2.4\r\n\r\n### Reproduction link\r\n[https://github.com/fenivana/ssr-v-show-issue](https://github.com/fenivana/ssr-v-show-issue)\r\n\r\n### Steps to reproduce\r\n```\r\nnpm install\r\nnode server.js\r\n```\r\n\r\n### What is expected?\r\n```html\r\n<div server-rendered=\"true\"><div style=\"display:none\">hello world</div></div>\r\n```\r\n\r\n### What is actually happening?\r\n```html\r\n<div server-rendered=\"true\"><div>hello world</div></div>\r\n```\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "v-show doesn't not work for components on server-side rendering",
        "labels": "bug",
        "id": 123821
    },
    {
        "body": "### Version\r\n2.2.4\r\n\r\n### Reproduction link\r\n[http://codepen.io/anon/pen/VpyqEz?editors=1111](http://codepen.io/anon/pen/VpyqEz?editors=1111)\r\n\r\n### Steps to reproduce\r\nCreate a parent and child component\r\n\r\nSet the provide of the parent using vuex\r\n\r\nInject the provide of the parent to child\r\n\r\n### What is expected?\r\nMust be reactive\r\n\r\n### What is actually happening?\r\nNot Reactive\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Provide isn't reactive with a single array",
        "labels": "bug",
        "id": 123822
    },
    {
        "body": "### Vue.js version\r\n2.2.4\r\n\r\n### Reproduction Link\r\n[https://jsfiddle.net/1o3hj0ca/](https://jsfiddle.net/1o3hj0ca/)\r\n\r\nOn line 20 change the `Vue.config.performance` from `true` to `false` to switch between normal behavior and the issue behavior.\r\n\r\n### Steps to reproduce\r\nAttempting to register a Vuex module in a `beforeCreate` or `created` hook, with the `performance` option set to `true`, will prevent Vue from rendering.\r\n\r\n### What is Expected?\r\n\r\nIf the fiddle executes correctly the following text should be displayed.\r\n\r\n```\r\nHello from default module\r\nHello from registered module\r\n```\r\n\r\n### What is actually happening?\r\n\r\n```\r\nUncaught DOMException: Failed to execute 'measure' on 'Performance': The mark 'vue-perf-init' does not exist.\r\n\r\nTypeError: Cannot read property '$options' of undefined\r\n```\r\n\r\n### Other\r\n\r\nSome quick messing about I've found that this bug was introduced sometime after 2.2.1.",
        "title": "Cannot register Vuex in created hooks with performance on.",
        "labels": "bug",
        "id": 123823
    },
    {
        "body": "### Vue.js version\r\n2.2.4\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/orzz/ucLrrnj4/8/\r\n\r\n### What is Expected?\r\nstate declare in root component should change and render to html\r\nsame code in vue version 2.0.0 worked as expected https://jsfiddle.net/orzz/k18o6e0f/1/\r\n\r\n### What is actually happening?\r\nstate changed in the callback emitted by child component is not worked as expected",
        "title": "no change triggered after reassigned state",
        "labels": "bug",
        "id": 123824
    },
    {
        "body": "Using an arrow function inside v-on directive together with a key modifier doesn't work.\r\n\r\n```\r\n  <!-- works -->\r\n  <input type=\"text\" v-on:keyup=\"changed\">\r\n  <!-- works -->\r\n  <input type=\"text\" v-on:keyup.enter=\"changed\">\r\n  <!-- works -->\r\n  <input type=\"text\" v-on:keyup=\"e => changed(e)\">\r\n  <!-- DOESN'T WORK -->\r\n  <input type=\"text\" v-on:keyup.enter=\"e => changed(e)\">\r\n```\r\n\r\n[fiddle to test it yourself](https://jsfiddle.net/3Ljpb6ae/)\r\n\r\nI asked in a [forum thread first](https://forum.vuejs.org/t/using-arrow-function-inside-v-on-with-key-modifiers/5985), it was mentioned that this could be a bug.",
        "title": "Using arrow function inside v-on with key modifiers doesn't wok",
        "labels": "bug",
        "id": 123825
    },
    {
        "body": "### Vue.js version\r\n2.2.1\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/x4m8w2xv/1/\r\n\r\n### Steps to reproduce\r\nHaving two slots, one named and the other is default, and template provides only other slot content, the default slot does not show default value because empty Nodes are registered with \" \" (empty space) as content.",
        "title": "Default value not shown for default slot when only named slot content provided",
        "labels": "bug",
        "id": 123826
    },
    {
        "body": "## Version\r\n2.2.1\r\n\r\n## Reproduction Link\r\n[https://jsfiddle.net/agvmLg8t/1/](https://jsfiddle.net/agvmLg8t/1/)\r\n\r\n## Steps to Reproduce\r\n- View generated output\r\n\r\n## What is expected?\r\nProvided falsy values should be injectable.\r\n\r\n## What is actually happening?\r\nCheck in [inject.js#L16](https://github.com/vuejs/vue/blob/f916bcf37105903290ad2353db9a9436536d6859/src/core/instance/inject.js#L16) prevents injection of falsy values.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->",
        "title": "Injecting falsy values",
        "labels": "bug",
        "id": 123827
    },
    {
        "body": "### Vue.js version\r\nv2.2.0-beta.1\r\n\r\n### Reproduction Link\r\n2.2.0-beta.1 - https://jsfiddle.net/sqal/4us41rdz/1/\r\n2.1.10 - https://jsfiddle.net/sqal/1zgatz1b/\r\n\r\n### Steps to reproduce\r\n- open 2.2.0-beta.1 repo link\r\n- type something in the first input field - `value` prop in the parent component should update\r\n\r\n### What is Expected?\r\nv-model should work regardless of the name of passed prop.\r\n\r\n### What is actually happening?\r\nWhen v-model prop name is \"value\"', v-model doesn't update the data when input event is fired. It ony breaks when is used on custom component. It worked fine in 2.1.10.",
        "title": "[v2.2.0-beta.1] v-model doesn't work when passed prop is named 'value'",
        "labels": "bug",
        "id": 123828
    },
    {
        "body": "### Vue.js version\r\n2.1.10\r\n### Reproduction Link\r\nhttps://jsfiddle.net/pctmfmhe/1/ - a variant with css transition\r\nhttps://jsfiddle.net/jz5rrgdk/ - a variant with js transition\r\n### Steps to reproduce\r\ncss: click run on jsfiddle\r\njs: click any button in result pane\r\n### What is Expected?\r\ncss: not working appear attribute - does not work initial animation\r\njs: not working mode=\"out-in\" attr - after click the button disappears block in `<transition>` comp. if you remove this attribute then the block does not disappear but the animation (leave & enter) is triggered simultaneously.\r\n### What is actually happening?\r\nthis is my first app on vue. I don't know =)\r\nI want to know is the problem in my code or is it a bug?\r\ntnx",
        "title": "unexpected behaviour when using <transition> appear & mode attrib",
        "labels": "bug",
        "id": 123829
    },
    {
        "body": "While investigating the cause of https://github.com/vuejs/vue-class-component/issues/65 related to `vue-hot-reload` not working with `vue-class-component`, @ktsn found a bug in vue core which he noted here: \r\nhttps://github.com/vuejs/vue-class-component/issues/65#issuecomment-280859079\r\n\r\nHe says\r\n\r\n> I find there is a bug in core library that accidentally drop late-injected options of constructors. That means, if we use vue-hot-reload-api or vue-loader, they inject some options into component options object after creating component constructors, then the component is instantiated by using constructor with $createElement and the injected options are dropped in [resolveComponentOptions function](https://github.com/vuejs/vue/blob/dev/src/core/instance/init.js#L69). \r\n\r\nAnd that it is also causing https://github.com/vuejs/vue-class-component/issues/66\r\n\r\nHere is the minimal reproduction of this bug by @ktsn \r\nhttps://jsfiddle.net/vvxLyLvq/2/\r\n\r\nI don't know much about it, I'm just creating the issue here for @ktsn \r\n\r\nIn summary this issue is causing `vue-class-component` hot-reload to not work and also makes using `vue-class-component` with `CSS Modules` impossible.\r\n\r\nThank you!",
        "title": "Late-injected options of constructors are dropped in resolveComponentOptions function",
        "labels": "bug",
        "id": 123830
    },
    {
        "body": "### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/jsv397us/\r\n\r\n### Steps to reproduce\r\n 1. Create a [scoped slot](https://vuejs.org/v2/guide/components.html#Scoped-Slots) using the `<template>` element, as is necessary\r\n 2. Use [dynamic props](https://vuejs.org/v2/guide/components.html#Dynamic-Props) to set the `slot` property on the `<template>`\r\n 3. Attempt to utilize this slot\r\n\r\n### What is Expected?\r\nThe slot is loaded and display correctly\r\n\r\n### What is actually happening?\r\nDynamic properties don't seem to work on the `<template>` component, so the \"slot\" property is getting set to null and it is not being loaded\r\n\r\nBy changing `<template>` to `<div>` the slot loads, but the scope stops working, throwing the error \"Property or method \"props\" is not defined on the instance but referenced during render.\"",
        "title": "Dynamic slot name not working with scoped slots",
        "labels": "bug",
        "id": 123831
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](https://jsfiddle.net/39epgLj0/) that already includes the latest version of Vue.\r\n\r\n- For potential SSR (Server Side Rendering) issue or bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.10 // the latest\r\n\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\n<!-- You could start with this template: https://jsfiddle.net/39epgLj0/ -->\r\n\r\nhttps://github.com/chairuosen/vue-bug-demo\r\n\r\nExpected in this demo : all the text is red.\r\nGot: only 1 and 3 is red.\r\n\r\n### Steps to reproduce\r\n\r\n1. create a father component that has a class `item` on each of his child.\r\n```vue\r\n<style scoped>\r\n  .item{\r\n    color:red;\r\n  }\r\n</style>\r\n<template>\r\n     <child ref=\"child\" class=\"item\"></child>\r\n</template>\r\n```\r\n\r\n2. create the child\r\n```vue\r\n<template>\r\n  <div v-if=\"active\">\r\n      Im the child\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    data () {\r\n      return {\r\n        active:false\r\n      }\r\n    },\r\n    methods:{\r\n      show:function () {\r\n        this.active = true;\r\n      }\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n3. the default state of the child is hidden.\r\nshow it like `this.$refs.child.show();` or others.\r\n\r\n### What is Expected?\r\n\r\nExpected : Text ` Im the child` with red color\r\n\r\n\r\n### What is actually happening?\r\n\r\nblack.\r\n\r\n\r\n### Probably Reason\r\n\r\nvue will add some private attribute to all the element of the component when it has scoped styles.\r\nbut forgot to do it with the `v-if=false` default hidden child",
        "title": "Issue about father-component's scoped styles when child-components shows by v-if",
        "labels": "bug",
        "id": 123832
    },
    {
        "body": "### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/z11fe07p/686/#\r\n\r\n### Steps to reproduce\r\nThere seems to be an issue with the transition-group component when transitions is applied on each element iterating on a v-for with an initial empty array.\r\n\r\nWhenever you add (push) an item to the array before the previous transition is completed all previous transition will stop.  But if you wait for the first transition to finish - but only on the first instance - and then try to add items all works as expected. Similar, if you fill the initial array with 1 or more values, all works as expected.\r\n\r\n### What is Expected?\r\nAll items should continue to animate.\r\n\r\n### What is actually happening?\r\nAnimation stops for all elements except for the last one added.\r\nIt seems that Vue detects a change in position and therefore replace all transition classes with the move class.",
        "title": "Transition-group transition on empty array",
        "labels": "bug",
        "id": 123833
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For potential SSR (Server Side Rendering) issue or bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\n<!-- You could start with this template: http://jsfiddle.net/df4Lnuw6/ -->\r\nhttps://jsfiddle.net/mwmaaju6/\r\n\r\n### Steps to reproduce\r\nIt seem that Vue parse the template strings improperly.\r\nif you add a space before open delimiter. The rendering is correct.\r\n\r\ntry inside `<p> tag`\r\n`<p> <% text %> </p>` \r\n\r\n### What is Expected?\r\ncorrectly rendering\r\n\r\n### What is actually happening?\r\nimproperly rendering, I seem to strip the next tags, in this case <textarea>\r\n",
        "title": "Using < in custom delimiters yields wrong compiled template",
        "labels": "bug",
        "id": 123834
    },
    {
        "body": "### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttps://github.com/shentao/vue-hackernews-2.0\r\n\r\n### Steps to reproduce\r\n1) Run the app\r\n```\r\nnpm run dev\r\n```\r\n\r\n### What is Expected?\r\n`<my-comp></my-comp>` should render to `<div>Default function result: value</div>`\r\n\r\n### What is actually happening?\r\n`<my-comp></my-comp>` throws error:\r\n```\r\nVue warn]: Invalid prop: type check failed for prop \"functionProp\". Expected Function, got String. \r\n(found in component <my-comp> at /Users/damiandulisz/code/private/vue-hackernews-2.0/src/MyComp.vue)\r\nDefault function result: undefined\r\n[Vue warn]: Error when rendering component <my-comp> at /Users/damiandulisz/code/private/vue-hackernews-2.0/src/MyComp.vue: \r\nerror during render : /top\r\nTypeError: _vm.functionProp is not a function\r\n    at Proxy.render (__vue_ssr_bundle__:1605:48)\r\n    at VueComponent.Vue._render (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue/dist/vue.runtime.common.js:2216:22)\r\n    at renderComponent (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:6078:25)\r\n    at renderNode (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:6061:7)\r\n    at next (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:6197:9)\r\n    at next (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:6189:7)\r\n    at Object.cachedWrite [as write] (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:36:9)\r\n    at next (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:6199:17)\r\n    at cachedWrite (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:36:9)\r\n    at renderNode (/Users/damiandulisz/code/private/vue-hackernews-2.0/node_modules/vue-server-renderer/build.js:6069:7)\r\n```",
        "title": "Server-side: Function type prop\u2019s default function is undefined when rendering server-side",
        "labels": "bug",
        "id": 123835
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/myuvgsj8/\r\n\r\n### What is actually happening?\r\nError:\r\nVM281 vue.js:525 [Vue warn]: <select multiple v-model=\"arr\"> expects an Array value for its binding, but got String \r\n(found in root instance)\r\n",
        "title": "<select v-model=\"arr\" v-bind:multiple=\"multiple\">",
        "labels": "bug",
        "id": 123836
    },
    {
        "body": "Consider following element:\r\n```\r\n<div @click.self.once=\"eat\">Eat <span>me</span></div>\r\n```\r\n\r\nIf we click on \"Eat\" word, everything works as expected. The event is being fired once and we are happy.\r\n\r\nBut if we click on \"me\", which is child node, and then we click on \"Eat\", the event will never be fired! It seems like `.once` is too easy on judging an event as fired.\r\n\r\nI think `.once` should mark it as done only if it has been fired in fact.",
        "title": ".once doesn't go well with .self",
        "labels": "bug",
        "id": 123837
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nA variation on #4415 \r\nhttps://jsbin.com/heguyujupu/edit?html,console,output\r\n\r\n### Steps to reproduce\r\n```js\r\n{{ (price) / 100 | currency }}\r\n```\r\n\r\n### What is Expected?\r\nThis divided number gets filtered\r\n\r\n\r\n### What is actually happening?\r\nGet this error:\r\n\r\n```\r\n[Vue warn]: Property or method \\\"currency\\\" is not defined on the instance but referenced during render. Make sure to declare reactive data properties in the data option. \r\n(found in root instance)\"\r\n```",
        "title": "Filter not recognized when filtered expression contains a '/' with ()",
        "labels": "bug",
        "id": 123838
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/nymhjosc/\r\n\r\n### Steps to reproduce\r\nSimply omit a Boolean prop and the value will be casted to `false`. \r\n\r\n### What is Expected?\r\nI'd expect to have an `undefined` property just to know that the user didn't provide it (since it is not a required prop). Basically, I would expect both `myProp` and `missingProp` in the previous example to be the same.\r\n\r\n### What is actually happening?\r\nWhen the prop is not provided its content is casted to `false`. Also, some other values like `''` are casted to `true` (somewhat related to #4538) but I guess this is intended. I'm using `default: undefined` for now.\r\n",
        "title": "Minor bug with Boolean props casting: undefined => false",
        "labels": "bug",
        "id": 123839
    },
    {
        "body": "I'll admit I might be in left field with this, as it has been a learning experience, but it seems like either a bug or an enhancement. Go gently with me. \ud83d\ude04 \r\n\r\nYou can see more discussion here as to why I've even come up to this point: https://forum.vuejs.org/t/missing-basic-understanding-between-slots-and-templates/5503/3\r\n\r\n### Steps to reproduce\r\n\r\nIf you have a double named slot situation, the scope feature works fine. i.e.:\r\n\r\n**Parent**\r\n```html\r\n<template class=\"parent\">\r\n <child>\r\n  <template slot=\"child1\" scope=\"props1\">\r\n       <p>\r\n         This is the child slot 1 with text passed up from the child's scope: {{ props1.firstmsg }}\r\n       </p>\r\n    </template>\r\n   <template slot=\"child2\" scope=\"props2\">\r\n       <p>\r\n         This is the child slot 2 with text passed up from the child's scope: {{ props2.secondmsg }}\r\n       </p>\r\n    </template>\r\n  </child>\r\n</template>\r\n```\r\n**Child**\r\n```html\r\n<template>\r\n  <div>\r\n      <slot name=\"child1\" firstmsg=\"text1\"></slot>\r\n      <slot name=\"child2\" secondmsg=\"text2\"></slot>\r\n  </div>\r\n\r\n</template>\r\n```\r\nYou will get: \r\n\r\n> This is the child slot 1 with text passed up from the child's scope: text1\r\n> This is the child slot 2 with text passed up from the child's scope: text2\r\n\r\nIf you also have a \"dynamic\" slotting going, where you'd like to control the order of certain HTML blocks and without scopes, this works fine too.  \r\n\r\n**Parent**\r\n```html\r\n<template class=\"parent\">\r\n <child>\r\n  <template :slot=\"child1\">\r\n       <p>\r\n         This is the child slot 1\r\n       </p>\r\n    </template>\r\n   <template :slot=\"child2\" scope=\"props2\">\r\n       <p>\r\n         This is the child slot 2\r\n       </p>\r\n    </template>\r\n  </child>\r\n</template>\r\n<script>\r\n  import Child from './Child.vue'\r\n  export default {\r\n    data () {\r\n      return {\r\n        switched: true\r\n      }\r\n    },\r\n    components: {\r\n      'child': Child\r\n    },\r\n    computed: {\r\n    child1 () {\r\n      return this.switched ? 'child2' : 'child1'\r\n    },\r\n    child2 () {\r\n      return this.switched ? 'child1' : 'child2'\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n**Child**\r\n```html\r\n<template>\r\n  <div>\r\n      <slot name=\"child1\"></slot>\r\n      <slot name=\"child2\"></slot>\r\n  </div>\r\n\r\n</template>\r\n```\r\nYou will get:\r\n\r\n> This is the child slot 2\r\n> This is the child slot 1\r\n\r\n\r\n### What is Expected?\r\n\r\nIf you mix the two together. Dynamic slotting with child scopes, \r\n\r\n**Parent**\r\n```html\r\n<template class=\"parent\">\r\n <child>\r\n  <template :slot=\"child1\" scope=\"props1\">\r\n       <p>\r\n         This is the child slot 1 with text passed up from the child's scope: {{ props1.firstmsg }}\r\n       </p>\r\n    </template>\r\n   <template :slot=\"child2\" scope=\"props2\">\r\n       <p>\r\n         This is the child slot 2 with text passed up from the child's scope: {{ props2.secondmsg }}\r\n       </p>\r\n    </template>\r\n  </child>\r\n<script>\r\n  import Child from './Child.vue'\r\n  export default {\r\n    data () {\r\n      return {\r\n        switched: false\r\n      }\r\n    },\r\n    components: {\r\n      'child': Child\r\n    },\r\n    computed: {\r\n    child1 () {\r\n      return this.switched ? 'child2' : 'child1'\r\n    },\r\n    child2 () {\r\n      return this.switched ? 'child1' : 'child2'\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n**Child**\r\n```html\r\n<template>\r\n  <div>\r\n      <slot name=\"child1\" firstmsg=\"text1\"></slot>\r\n      <slot name=\"child2\" secondmsg=\"text2\"></slot>\r\n  </div>\r\n\r\n</template>\r\n```\r\nVue should at least render something, possibly even an error, if this isn't feasible. \r\n\r\n### What is actually happening?\r\n\r\nVue delivers a blank page and no errors. \r\n\r\n**Jsfiddles**\r\n\r\nDouble named slots: https://jsfiddle.net/mwLbw11k/369/ <- works\r\nDynamic slots: https://jsfiddle.net/mwLbw11k/370/ <- works, when you change switchedto true, the slots change places.\r\n\r\nThe mix: https://jsfiddle.net/mwLbw11k/371/ <- doesn't work\r\n\r\nInteresting that jsfiddle at least renders the results. However, the dynamic slots don't work.\r\n\r\nLike I said, go easy with me. \ud83d\ude04 \r\n\r\nScott\r\n",
        "title": "Scoped slot does not work with dynamic slot name",
        "labels": "bug",
        "id": 123840
    },
    {
        "body": "### Vue.js version\r\n2.2.10\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/su5aLp3a/21/\r\n\r\n### Steps to reproduce\r\n1. uncheck `show child` checkbox\r\n2. check `show child` checkbox\r\n\r\n### What is Expected?\r\nexpect parent `_scopeId` and child `_scopeId` into root element on child component (in repro code, `data-v-00001` and `data-v-00002`)\r\n\r\n### What is actually happening?\r\nlost parent `_scopeId` from root element on child component (in repro code, `data-v-00002` only)\r\n\r\n### Related issue\r\nSee https://github.com/vuejs/vue-loader/issues/576",
        "title": "`_scopeId` lost for child components with falsy v-if on root elements",
        "labels": "bug",
        "id": 123841
    },
    {
        "body": "A simple case:\r\n```javascript\r\nconst Base = Vue.extend({\r\n  computed: {\r\n    a () { return 'aa' }\r\n  }\r\n})\r\nconst Sub = Base.extend()\r\nSub.options.computed.b = () => 'bb'\r\n\r\nconsole.log(Base.options.computed.b()) // 'bb'\r\nconsole.log(Base.options.computed === Sub.options.computed) // true\r\n```\r\n\r\nThe reason has been found, in **line 181**, `vue/src/core/util/options.js`\r\n```javascript\r\nstrats.props =\r\nstrats.methods =\r\nstrats.computed = function (parentVal: ?Object, childVal: ?Object): ?Object {\r\n  if (!childVal) return parentVal\r\n```\r\nIt just return the parent object. Maybe it should be replaced by code like this\r\n```\r\nstrats.props =\r\nstrats.methods =\r\nstrats.computed = function (parentVal: ?Object, childVal: ?Object): ?Object {\r\n  if (!childVal) return extend({}, parentVal)\r\n```\r\n\r\nThere is a same problem for `strats.watch` in **line 158**.\r\nThere is no need to change `strats.data` in **line 69** because the type is `function`.\r\n\r\nI'd like to submit a PR but I'm not familiar with the code, like that `props` could be a Array so more things should be done after `extend({}, parentVal)...\r\n\r\nHope someone can fix this bug, Thanks!\r\n\r\n------\r\n\r\nActually, it is not commonly used to set `Sub.options.computed` directly, but I met this bug when using vue-loader with css module. For example:\r\n\r\nbase.vue\r\n```vue\r\n<template>\r\n<div :class=\"$style.base\">base<div>\r\n</template>\r\n<script>\r\nimport Vue from 'vue';\r\n\r\nexport default Vue.extend({\r\n  name: 'my-base',\r\n});\r\n</script>\r\n<style module>\r\n.base {\r\n  color: red;\r\n}\r\n</style>\r\n```\r\n\r\nsub.vue\r\n```vue\r\n<template>\r\n<div :class=\"$style.sub\">sub<div>\r\n</template>\r\n<script>\r\nimport Base from './base.vue';\r\n\r\nexport default Vue.extend({\r\n  name: 'my-sub',\r\n});\r\n</script>\r\n<style module>\r\n.sub {\r\n  color: blue;\r\n}\r\n</style>\r\n```\r\n\r\nAnd finally, you will find that the computed property `$style` of `<my-base>` has been replaced by the one of `<my-sub>`. They share the same `$style` in fact.\r\n\r\nThe following lines using options directly are in vue-loader:\r\n- `__vue_options__ = __vue_options__.options` in **line 254**, `vue-loader/lib/loader.js`\r\n- `__vue_options__.computed[key] = function () { return module }` in **line 285**\r\n\r\nAnd with the mentioned bug above in vue cause the final problem.",
        "title": "Extend options should not be confused with the super options",
        "labels": "bug",
        "id": 123842
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/blackjid/br2h9pko/1/\r\n\r\n### Steps to reproduce\r\nHave and element with just one space inside a `<pre>` tag element.\r\n```html\r\n<div id=\"app\">\r\n  <pre>\r\n    <span> </span>\r\n  </pre>\r\n</div>\r\n```\r\n\r\nand initialize vue in a parent element \r\n\r\n```js\r\nnew Vue({\r\n  el: '#app'\r\n});\r\n```\r\n\r\n### What is Expected?\r\nVue initializes correctly.\r\n\r\n### What is actually happening?\r\nAn exception is thrown.\r\n\r\n```\r\nvue.js:7105 Uncaught TypeError: Cannot read property 'text' of undefined\r\n    at Object.chars (vue.js:7105)\r\n    at parseHTML (vue.js:6401)\r\n    at parse (vue.js:6923)\r\n    at compile$1 (vue.js:8003)\r\n    at compile$$1 (vue.js:8425)\r\n    at compileToFunctions (vue.js:8458)\r\n    at Vue$3.$mount (vue.js:8536)\r\n    at Vue$3.Vue._init (vue.js:3379)\r\n    at new Vue$3 (vue.js:3427)\r\n```\r\n\r\n### What did I try\r\n- Adding a `v-pre` attribute to the `<pre>` tag or to a wrapper element. This didn't work either\r\n- Changing the space with a `&nbsp;`. This worked, but you don't always control the code that you are bootstrapping vue on.",
        "title": "Parser fails on tags with one space inside a <pre> tag",
        "labels": "bug",
        "id": 123843
    },
    {
        "body": "Hello! First of all thank you for the great framework and your work.\r\n\r\nI faced issue when tried to use select html tag with binded multiple attribute. But it does not work.\r\nI have example on jsfiddle: https://jsfiddle.net/jqybwngo/\r\n\r\nPartially copy bellow:\r\n```html\r\n<div id=\"app\">\r\n  <select v-model=\"option\" v-bind:multiple=\"isMultiple\">\r\n    <option value=\"1\">item 1</option>\r\n    <option value=\"2\">item 2</option>\r\n  </select>\r\n</div>\r\n```\r\n\r\nAnd here is the error log from Safari (same for Firefox):\r\n![screen_2017_01_18_19_52_16](https://cloud.githubusercontent.com/assets/60165/22078489/65fddf66-ddb8-11e6-8b5c-28787bf5c3c8.jpg)\r\n\r\n```[Error] [Vue warn]: <select multiple v-model=\"option\"> expects an Array value for its binding, but got String \r\n(found in root instance)\r\n\twarn (vue.js:525)\r\n\tsetSelected (vue.js:5691)\r\n\tcomponentUpdated (vue.js:5672)\r\n\tcallHook$1 (vue.js:4746)\r\n\t(anonymous function) (vue.js:4702)\r\n\tpatchVnode (vue.js:4461)\r\n\tupdateChildren (vue.js:4364)\r\n\tpatchVnode (vue.js:4448)\r\n\tpatch (vue.js:4572)\r\n\t_update (vue.js:2646)\r\n\tupdateComponent (vue.js:2613)\r\n\tget (vue.js:2936)\r\n\trun (vue.js:3005)\r\n\tflushSchedulerQueue (vue.js:2811)\r\n\t(anonymous function) (vue.js:477)\r\n\tnextTickHandler (vue.js:426)\r\n\tpromiseReactionJob\r\n[Error] TypeError: binding.value.some is not a function. (In 'binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })', 'binding.value.some' is undefined)\r\ncomponentUpdated \u2014 vue.js:5678\r\ncallHook$1 \u2014 vue.js:4746\r\nhttps://unpkg.com/vue\r\npatchVnode \u2014 vue.js:4461\r\nupdateChildren \u2014 vue.js:4364\r\npatchVnode \u2014 vue.js:4448\r\npatch \u2014 vue.js:4572\r\n_update \u2014 vue.js:2646\r\nupdateComponent \u2014 vue.js:2613\r\nget \u2014 vue.js:2936\r\nrun \u2014 vue.js:3005\r\nflushSchedulerQueue \u2014 vue.js:2811\r\nhttps://unpkg.com/vue\r\nnextTickHandler \u2014 vue.js:426\r\npromiseReactionJob\r\n\r\n\tlogError (vue.js:439)\r\n\tpromiseReactionJob\r\n```\r\n\r\n### What is Expected?\r\n\r\nOption is filled by array of selected values\r\n\r\n### What is actually happening?\r\n\r\nError reported in log, no parameter assigned.",
        "title": "Bug with dynamic binding multiple for select tag.",
        "labels": "bug",
        "id": 123844
    },
    {
        "body": "### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttp://jsbin.com/bapoca/edit?html,js,console,output\r\n\r\n### Steps to reproduce\r\nThe above JSBin contains a slider (range) that logs the value of a computed property it is bound to (`sliderRadius`), when it changes: `v-on:change=\"log\"` (log is a declared function)\r\n\r\n### What is Expected?\r\nI would expect that each time the slider changes, the prop is logged in the console.\r\n\r\n### What is actually happening?\r\nTwo different scenarios: \r\n- you drag and release the slider handler (aka thumb): the prop is *always* logged in the console (i.e. the change handler fires properly all the times)\r\n- you directly click where you want the handler to get to: the prop isn't logged all the times (i.e. the change handler fails about in 3 out of 5 occasions).\r\n\r\nSee the animated gif below, using the provided JSBin (recorded on Google Chrome, OSX \u2013 the same happens on Safari, thought)\r\n\r\n[![vueRangeChangeError.gif](https://s29.postimg.org/lvgj9pepz/vue_Range_Change_Error.gif)](https://postimg.org/image/a6cjlqnr7/)\r\n\r\nThank you.",
        "title": "v-on:change randomly fails on range input bound on a computed property",
        "labels": "bug",
        "id": 123845
    },
    {
        "body": "\r\n### Vue.js version\r\n2.1.8\r\n\r\n### Reproduction Link\r\nhttp://codepen.io/schmidigital/pen/oBxqNM\r\n\r\n### Steps to reproduce\r\nClick on \"Section 1\"\r\nInside the console we see:\r\n```\r\nbefore enter\r\nenter\r\nafter enter\r\n```\r\n\r\nPressing Button \"Section 2\"\r\n```\r\nbefore leave\r\nleave\r\nbefore enter\r\nafter leave\r\nenter\r\nafter enter\r\n```\r\n\r\nThe \"Section 1\" Content is leaving instantly, whereas \"Section 2\" is fading in.\r\n\r\nPressing Button \"Section 1\"\r\n```\r\nbefore enter\r\nenter\r\nbefore leave\r\nafter enter\r\nafter leave\r\n```\r\n\r\nThe \"Content 2\" section now is fading out whereas \"Content 1\" is fading in.\r\n\r\nAs we can see the hooks are also triggered in a different order. \r\n\r\n### What is Expected?\r\n\r\nThe Sections should fadein/fadeout same as from \"Section 2\" to \"Section 1\" instead of disappearing immediatly as seen from \"Section 1\" to \"Section 2\"\r\n\r\n### What is actually happening?\r\n\r\nDepending on the order of the elements, they are animated differently.\r\nIf you put \r\n```\r\nslide-transition\r\n  div(v-if=\"activeSection == 1\") Section 1!    \r\nslide-transition\r\n  div(v-if=\"activeSection == 2\") Section 2!   \r\n```\r\n\r\nin this order\r\n```\r\nslide-transition\r\n  div(v-if=\"activeSection == 1\") Section 1!    \r\nslide-transition\r\n  div(v-if=\"activeSection == 2\") Section 2!   \r\n```\r\n\r\nThen the problem is vice versa!\r\n",
        "title": "Custom Transition Component triggering ignoring done() inside leave hook",
        "labels": "bug",
        "id": 123846
    },
    {
        "body": "Hi.\r\n\u6211\u9047\u5230\u4e00\u4e2a\u5f88\u5947\u602a\u7684\u95ee\u9898\uff0c\u5173\u4e8echeckbox \u7684\u3002\r\n\r\n    <template lang=\"html\">\r\n    <div>\r\n        <div v-for=\"(item,key) in test\">\r\n            <input type=\"checkbox\" v-model=\"item.active\">\r\n        </div>\r\n    </div>\r\n\t</template>\r\n\r\n\t<script>\r\n    \twindow.T = [{\r\n        \t    active: false\r\n    \t}, {\r\n        \t    active: false\r\n    \t}];\r\n\r\n    \texport default {\r\n            data() {\r\n              return {\r\n                  test: T\r\n              }\r\n            },\r\n        methods: {}\r\n    }\r\n\t</script> \r\n\r\n\r\n\u9996\u5148\uff0c\u6211\u5728\u63a7\u5236\u53f0\u8f93\u5165  `T[0].active=true`, \u7b2c\u4e00\u4e2acheckbox\u6b63\u5e38\u9009\u4e2d\uff0c\u4f46\u662f\uff0c\u5f53\u6211\u5237\u65b0\u6d4f\u89c8\u5668\u4e4b\u540e\uff0c\u624b\u52a8\u628a\u7b2c\u4e00\u4e2acheckbox\u9009\u4e2d\uff0c\u7136\u540e\u8f93\u5165 `T[0].active=false` \uff0c\u8fd9\u65f6\uff0c\u7b2c\u4e00\u4e2acheckbox\u5c06\u4e0d\u4f1a\u53d6\u6d88\u9009\u4e2d\uff0c\u800c\u7b2c\u4e8c\u4e2a\u8fd8\u662f\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u53f0\u6b63\u5e38\u8bbe\u7f6e(true/false)\u3002\r\n\r\n\u5c1d\u8bd5\u4e862.1.0\u548c2.1.8 \u90fd\u662f\u4e00\u6837\u7684\u7ed3\u679c\uff0cchrome\u7248\u672c\u662f 54.0.2824.2\r\n\r\n",
        "title": "\u5173\u4e8echeckbox \u539f\u751f\u503c\u7684bug\uff1f",
        "labels": "bug",
        "id": 123847
    },
    {
        "body": "### Vue.js version\r\n2.1.8\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/bacft9s7/\r\n\r\n### Steps to reproduce\r\nClicks on the <A> element more than once.\r\n\r\n### What is Expected?\r\nThe event handler should be removed after the first click.\r\n\r\n### What is actually happening?\r\nThe event handler except for the last one with .once modifier is not removed.\r\n",
        "title": ".once modifier for v-on except for the last one doesn't work if more than one .once modifier used for v-on in multiple elements",
        "labels": "bug",
        "id": 123848
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For potential SSR (Server Side Rendering) issue or bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/posva/hdqz1bc3/\r\n\r\n### Steps to reproduce\r\n\r\n1. Click the toggle\r\n2. select a value in the select\r\n\r\n### What is Expected?\r\nNo error in console\r\n\r\n### What is actually happening?\r\nThe select is trying to fire the change from the previous `select`. Adding a `key` attribute to one of the selects is a workaround @rorc",
        "title": "Events listeners are not unbound when reusing nodes",
        "labels": "bug",
        "id": 123849
    },
    {
        "body": "Example: https://jsfiddle.net/vfmxxzeb/3/\r\n\r\nWhat the example does:\r\n1. Resets `values` to an array of values every one second\r\n2. Each line has two checkboxes, both of which are bound to the same value\r\n\r\nSteps to reproduce:\r\n1. *Click* on the enabled checkbox on any line\r\n\r\nExpected behaviour:\r\n1. After one second, the value should be reset. Both checkboxes should reflect the same value\r\n\r\nActual behaviour (tested on Chrome):\r\n1. The disabled checkbox correctly reflects the value, but the enabled checkbox does not reflect the value. The enabled checkbox will reflect the correct value only after blurring from the checkbox",
        "title": "Checkbox :checked is not fully reactive when checkbox is in focus",
        "labels": "bug",
        "id": 123850
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For potential SSR (Server Side Rendering) issue or bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\nVue: 2.1.7, VueRouter: 2.1.1\r\n\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\n<!-- You could start with this template: http://jsfiddle.net/df4Lnuw6/ -->\r\nhttps://jsfiddle.net/JounQin/s9vgy7gu/\r\n\r\n### Steps to reproduce\r\nClick router-link B, then Home, then A\r\n\r\n### What is Expected?\r\nShould not render CompB when going to A.\r\n\r\n### What is actually happening?\r\nCompB is rendered.\r\n",
        "title": "Render error with keep-alive children.",
        "labels": "bug",
        "id": 123851
    },
    {
        "body": "### Vue.js version\r\n2.1.7\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/1anum7y4/1/\r\n\r\nThis template fails to compile if no default slot given\r\n\r\n```html\r\n<p>\r\n  <router-link :to=\"{ name: 'foo' }\">foo</router-link>\r\n  <slot></slot>\r\n</p>\r\n```\r\nIt does not reproduce if slot given or ```<slot></slot>``` wrapped by any tag\r\n\r\n### What is Expected?\r\nComponent renders without slot\r\n\r\n### What is actually happening?\r\nUncaught TypeError: Cannot set property 'isRootInsert' of undefined",
        "title": "TypeError when route-link with sibling slot used",
        "labels": "bug",
        "id": 123852
    },
    {
        "body": "### Vue.js version\r\n2.1.6\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/od3m0ta9/\r\n\r\n### Steps to reproduce\r\nGiven the following code\r\n\r\n```html\r\n<html>\r\n  <body>\r\n    <div id=\"vue\">\r\n      <div style=\"background: blue;\" v-if=\"!message\">Something</div>\r\n      <div style=\"background: red;\" v-if=\"message\" v-text=\"message\"></div>\r\n      <button v-on:click=\"buttonClicked\">Click me</button>\r\n    </div>\r\n\r\n    <script src=\"https://unpkg.com/vue@2.1.6/dist/vue.js\"></script>\r\n\r\n    <script>\r\n    var vue = new Vue({\r\n      el: '#vue',\r\n      data: {\r\n        message: null\r\n      },\r\n      methods: {\r\n        buttonClicked: function() {\r\n          this.message = \"Hello @ \" + new Date();\r\n        }\r\n      }\r\n    });\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nclicking the button causes the following exception to be thrown in the Chrome Version 55.0.2883.95 (64-bit) console\r\n\r\n```\r\nDOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.\r\n    at Object.removeChild (https://unpkg.com/vue@2.1.6/dist/vue.js:3825:8)\r\n    at removeVnodes (https://unpkg.com/vue@2.1.6/dist/vue.js:4188:19)\r\n    at patchVnode (https://unpkg.com/vue@2.1.6/dist/vue.js:4333:9)\r\n    at updateChildren (https://unpkg.com/vue@2.1.6/dist/vue.js:4252:9)\r\n    at patchVnode (https://unpkg.com/vue@2.1.6/dist/vue.js:4328:29)\r\n    at Vue$3.patch [as __patch__] (https://unpkg.com/vue@2.1.6/dist/vue.js:4451:9)\r\n    at Vue$3.Vue._update (https://unpkg.com/vue@2.1.6/dist/vue.js:2224:19)\r\n    at Vue$3.<anonymous> (https://unpkg.com/vue@2.1.6/dist/vue.js:2191:10)\r\n    at Watcher.get (https://unpkg.com/vue@2.1.6/dist/vue.js:1656:27)\r\n    at Watcher.run (https://unpkg.com/vue@2.1.6/dist/vue.js:1725:22)\r\n```\r\n\r\nand all JS execution stops (this is proven by the fact the time does not update with repeated clicks).\r\n\r\n### Notes\r\n\r\nStrangely, the error doesn't happen if you drop the style attributes from the two divs.\r\n\r\n### Salutation\r\n\r\nThanks! Best regards,\r\n\r\nEric\r\n\r\n",
        "title": "Exception thrown by Vue code during update with template involving v-if and css styles",
        "labels": "bug",
        "id": 123853
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.6\r\n\r\n### Reproduction Link\r\nhttps://github.com/mediafreakch/vue-hydration-bug\r\n\r\n### Steps to reproduce\r\nFollow the Readme in my sample repository.\r\nOnce you've built the app and have started the webserver, go to `localhost:8080` and observe the output in the console.\r\n\r\n### What is Expected?\r\nClient side hydration should work.\r\n\r\n### What is actually happening?\r\nClient side hydration bails because there is a mismatch between the client-side rendered vnodes and the server-side rendered nodeList. \r\n\r\nI found out that something must have gone wrong with indentation in the template compilation process or with the `v-if` / `v-else` directives. \r\n\r\nCompare this `App.vue` template (hydration bails):\r\n\r\n```\r\n    <a v-if=\"false\">Foo</a>\r\n    <a v-else class=\"disabled\">&lt; prev</a>\r\n    <span>bar</span>\r\n```\r\n\r\nto this (hydration works):\r\n\r\n```\r\n    <a v-if=\"false\">Foo</a>\r\n    <a v-else class=\"disabled\">&lt; prev</a><span>bar</span>\r\n```\r\n",
        "title": "v-if / v-else causes client side hydration to bail",
        "labels": "bug",
        "id": 123854
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\nv-if and  v-else Causing the button value to be cleared (When the v-if or v-else role of the button, one of which is dynamic value, the value of another button will be emptied)\r\n\r\n\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\nVue:2.1.6\r\n\r\n**NOTE: This problem does not exist in Vue1.x**\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\n<!-- You could start with this template: http://jsfiddle.net/df4Lnuw6/ -->\r\nhttps://jsfiddle.net/ldneedu/c0xa3Len/5/\r\n### Steps to reproduce\r\nThree sets of scenes\r\nClick the Toggle button\r\n\r\n```html\r\n<div id=\"app\">\r\n  <p>{{ message }}</p>\r\n  <input type=\"button\" @click=\"show=!show\" value=\"Toggle\">\uff08Switch multiple times to see the results\uff09\r\n  <p>===========scene one=============</p>\r\n <input v-if=\"show\" type=\"button\" value=\"button 1\">\r\n  <input v-else type=\"button\" :value=\"btnValue2\">\r\n  <p>===========scene two=============</p>\r\n <input v-if=\"show\" type=\"button\" value=\"button 1\">\r\n <input v-else type=\"button\" value=\"button 2\">\r\n <p>===========scene tree=============</p>\r\n <input v-if=\"show\" type=\"button\" :value=\"btnValue1\">\r\n <input v-else type=\"button\" :value=\"btnValue2\">\r\n</div>\r\n```\r\n```javascript\r\nnew Vue({\r\n  el: '#app',\r\n  data: {\r\n    message: 'Hello Vue.js!',\r\n    show: true ,\r\n    btnValue1: 'button 1',\r\n    btnValue2: 'button 2'\r\n  }\r\n})\r\n```\r\n",
        "title": "v-if and  v-else Causing the button value to be cleared ",
        "labels": "bug",
        "id": 123855
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.6 \r\n\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\n<!-- You could start with this template: http://jsfiddle.net/df4Lnuw6/ -->\r\nhttp://codepen.io/qbaty/pen/NboZoz?editors=1111\r\n\r\n### Steps to reproduce\r\nmy html is div > input[type=checkbox]\r\nwhen div with v-on:click, I found that the input element can not be selected.\r\n\r\n### What is Expected?\r\nwhen click this input checkbox, checkbox should be selected or canceled.\r\ndiv click event will trigger.\r\n\r\n### What is actually happening?\r\nI have not read the source code\uff0cBut I think div capture this click event and should not stop this event immediate, it kinda like use \u201cevent.stopImmediatePropagation\u201d  stop the event progagation?\r\n",
        "title": "checkbox can not be selected if it's in a element with @click listener?",
        "labels": "bug",
        "id": 123856
    },
    {
        "body": "### Vue.js version\r\n2.1.6\r\n\r\n### Reproduction Link\r\nhttp://sandbox.runjs.cn/show/xu7gfzz2\r\n\r\n### Steps to reproduce\r\n\r\nswitch tag `option` between value='' and value='0', then to see ` {{ selected }}`'s change.\r\n\r\n### What is Expected?\r\n\r\nthe value of 'selected' always changes with your choose.\r\n\r\n### What is actually happening?\r\n\r\nsometime works, sometime does't work.\r\n",
        "title": "sometime select's event does't work when option's vlaue in ('',0)",
        "labels": "bug",
        "id": 123857
    },
    {
        "body": "### Vue.js version\r\n2.1.6\r\n\r\n### Reproduction Link\r\n\r\nhttp://codepen.io/dolymood/pen/gLQmwy\r\n\r\n### Steps to reproduce\r\n\r\nCode\r\n\r\n```html\r\n<div class=\"el el-if\" v-if=\"bln\"><span v-show=\"false\">hidden content</span></div>\r\n<div class=\"el el-else\" v-else><span @click=\"toggle\">visible  content</span></div>\r\n```\r\n\r\n1. `bln=true`, the `span` element in `el-if` is hidden\r\n\r\n2. `bln=false`, the `span` element in `el-else` is __hidden__\r\n\r\n### What is Expected?\r\n\r\nWhen `bln=false`, the `span` element should be __visible__\r\n\r\n### What is actually happening?\r\n\r\n`patchVnode` will check the nodes is same:\r\n\r\n```js\r\nfunction sameVnode (vnode1, vnode2) {\r\n  return (\r\n    vnode1.key === vnode2.key &&\r\n    vnode1.tag === vnode2.tag &&\r\n    vnode1.isComment === vnode2.isComment &&\r\n    !vnode1.data === !vnode2.data\r\n  )\r\n}\r\n```\r\n\r\nBecause the old vnode `vnode1.data` is \r\n\r\n```js\r\n{\r\n  directives: [{\r\n     def: {bind: fn, update: fn}\r\n     expression: \"false\"\r\n     modifiers: {},\r\n     name: \"show\",\r\n     rawName: \"v-show\",\r\n     value: false\r\n  }]\r\n}\r\n```\r\n\r\nand the new vnode `vnode2.data` is\r\n\r\n```js\r\n{\r\n  on: {click: fn}\r\n}\r\n```\r\n\r\nSo `sameVnode(span1, span2)` result  is `true`, but `updateDirectives` will be call `v-show` directive's `unbind` hook function.\r\n\r\nIf the `span` elements have different `key` attributes, the result will be correct. But i think it will be better if:\r\n\r\n> When `bln=false`, the `span` element should be __visible__\r\n\r\n",
        "title": "node with v-show inside v-if is reused in the adjacent v-else",
        "labels": "bug",
        "id": 123858
    },
    {
        "body": "Howdy!\r\n\r\nIt seems like `v-bind` is not removing attributes with falsy values when another attribute with the `.prop` modifier appears first in the element's list of attributes. More details in the comments of the fiddle.\r\n\r\n### Vue.js version\r\n2.x (Tested with 2.1.3 and 2.1.4)\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/JosephusPaye/df4Lnuw6/78/\r\n\r\n### Steps to reproduce\r\n1. Run the fiddle\r\n2. Inspect the rendered elements using devtools to see the problem described\r\n\r\n### What is Expected?\r\n`v-bind` should remove attributes whose values are falsy (`false`, `null`, `undefined`) regardless of the presence of other attributes and the `.prop` modifier.\r\n\r\n### What is actually happening?\r\nAttributes with falsy values are not removed when another attribute with the `.prop` modifier appears first. Instead, these attributes are rendered with the string `\"false\"`, `\"null\"` or `\"undefined\"` as their value.\r\n",
        "title": "[2.x] v-bind not removing attributes with falsy values when another attribute with `.prop` modifier appears first",
        "labels": "bug",
        "id": 123859
    },
    {
        "body": "Here is an example https://jsfiddle.net/h6azrhhz/\r\n\r\nTemplate:\r\n```\r\n  <section>\r\n    <template v-if=\"false\">\r\n    </template>\r\n    <template v-else>\r\n      <div v-if=\"condition\" class=\"my-class\">I'm loading</div>\r\n      <div v-else>I'm loaded</div>\r\n    </template>\r\n  </section>\r\n```\r\n\r\nIf v-if v-else block nested into another v-if, it produces error \r\n\r\n> VM205 vue.js:427TypeError: Cannot read property 'attrs' of undefined\r\n\r\nwhen switching value of `condition`.\r\n\r\nAs i researched, need 3 conditions to reproduce the issue\r\n1.  Class attr (or another attribute) must be presented presented in nested element\r\n2. Nested v-else must be presented\r\n3. v-if v-else must be nested into another v-if v-else\r\n\r\nWorkaround is to use v-if=\"condition\" and v-if=\"!condition\" instead of v-else\r\n\r\nThanks\r\n",
        "title": "Case when v-if v-else throws error and breaks app",
        "labels": "bug",
        "id": 123860
    },
    {
        "body": "### Vue.js version\r\nv2.1.3\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/1y2nk1L9/5/\r\n\r\n### Steps to reproduce\r\nEnter a number with some zeros after the comma into a type=\"number\" input field, while Vue performs some page rendering in the background with (unrelated) variables of the same component.\r\n\r\n### What is Expected?\r\nEntering a number like 1.00001 works without issues.\r\n\r\n### What is actually happening?\r\nEvery time Vue triggers a DOM change all v-model input fields are \"re-rendered\" (\"0.000\" -> \"0\") which makes it impossible to enter decimal numbers that contain zeros in busy components. While this sounds like a minor issue it is a **huge problem**, since the entered number could be completely wrong. Imagine entering 1.00345, but the input is silently changed to 1345. This has already led to some serious trouble in our (financial) Vue application.",
        "title": "Input [v-model & type=number] is truncated when (unrelated) DOM update happens.",
        "labels": "bug",
        "id": 123861
    },
    {
        "body": "I ran into this issue yesterday. I'm working on a page that includes images with CSS shape-outside for flowing the text around them based on a shape image. To do this, I include the URL to the shape image in an inline style attribute.\r\n\r\nDuring my work this stopped working after I upgraded Vue to the latest. The earliest reproducible version is 2.0.6. It's working on 2.0.5. When the HTML is compiled, the url from the style attribute string gets broken, and instead of the full URL you just end up with \"http\".\r\n\r\n### Vue.js version\r\n2.0.6+\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/mottokrosh/5Lppm3ce/7/\r\n\r\n### Steps to reproduce\r\nGo to the above JSBin. Ignore the CORS error about failing to load the shape image. \r\n\r\n### What is Expected?\r\nInspect the HTML of the `<figure>` in the dev console. The full `style=\"shape-outside: url(https://grove.sidhewoods.com/assets/verdant-reaches-players-guide/art/NPC_Sheriff_Lucas_Quint-shape.png); shape-margin: 1rem;\"` should be seen, as in the specified HTML. \r\n\r\n### What is actually happening?\r\nInstead, it's become `style=\"shape-outside: url(\"https\"); shape-margin: 1rem;\"`.",
        "title": "Template compilation error in style attribute with url",
        "labels": "bug",
        "id": 123862
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\nHi everyone, i am upgrading a website to Vue 2.x. But i got into an issue and one question/feature request.\r\n\r\nThe website im trying to upgrade is: http://foostudio.mx/\r\n\r\nThe transitions works as follow: each component has its own transition that reacts to the next route. The router is using the keep alive directive, so unnecessary rendering is ommitted. \r\n\r\nBut i been having trouble doing this on Vue 2.x. \r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.3\r\n\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\nhttp://jsfiddle.net/Mendieta/j8fLau99/\r\n<!-- You could start with this template: http://jsfiddle.net/df4Lnuw6/ -->\r\n\r\n### Steps to reproduce\r\nNavigate between the router links.\r\n\r\n### What is Expected?\r\nI was expecting to get the same results as on Vue 1.x, where the components animated using Js hooks with keep alive where render properly. Or maybe I am doing something wrong?\r\n\r\nVue 1.x version: http://jsfiddle.net/Mendieta/fb215702/\r\n\r\n### What is actually happening?\r\nThe components animated using js hooks are only animated once \r\n\r\n\r\nOn a side note, is it possible to use transition-mode in the above example on Vue 2.X? On 1.X it was as easy as adding the directive to the router-view. \r\n\r\nthanks",
        "title": "JS Transition hooks bug with keep alive component ",
        "labels": "bug",
        "id": 123863
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.1.3\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/5sH6A/\r\n\r\n### Steps to reproduce\r\n\r\nPress run and wait a second\r\n\r\n### What is Expected?\r\n\r\nYou should see \r\n\r\n```\r\n2\r\n[\"slot1\"]\r\n```\r\nin the output\r\n \r\n### What is actually happening?\r\n\r\n```\r\n2\r\n[\"default\"]\r\n```\r\nshows up after a second, indicating that the component is not seeing any slots.",
        "title": "Rerendering a functional component which renders a component with a slot",
        "labels": "bug",
        "id": 123864
    },
    {
        "body": "### Reproduction Link\r\nhttp://codepen.io/localvoid/pen/WojeKN\r\n",
        "title": "Component root node changing is broken",
        "labels": "bug",
        "id": 123865
    },
    {
        "body": "### Vue.js version\r\n2.0.8\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/3hmp0e16/1/\r\n\r\n### Steps to reproduce\r\nRun the JSFiddle above and you will see that content is not visible.\r\n\r\n### What is Expected?\r\nI would expect the app to run regardless of the Unicode characters, without errors.\r\n\r\n### What is actually happening?\r\n`Uncaught TypeError: Cannot set property 'isStatic' of undefined`\r\nfor Vue 2.0.8 when \\u2028 character is in DOM element attribute on creating new Vue instance.\r\n`<img src=\"http://placehold.it/350x150\" alt=\"hello\\u2028 word\" />`\r\n\r\n```\r\n[Vue warn]: failed to compile template:\r\n\r\n<div id=\"app\">\r\n  <img src=\"http://placehold.it/350x150\" alt=\"hello\u2028 word\">\r\n</div>\r\n \r\n(found in root instance)warn @ vue.js:2658compileToFunctions @ vue.js:7826Vue$3.$mount @ vue.js:7895initRender @ vue.js:2234Vue._init @ vue.js:2597Vue$3 @ vue.js:2641window.onload @ (index):49\r\nvue.js:2658 [Vue warn]: Error when rendering root instance: warn @ vue.js:2658Vue._render @ vue.js:2269(anonymous function) @ vue.js:1709get @ vue.js:740Watcher @ vue.js:732Vue._mount @ vue.js:1708Vue$3.$mount @ vue.js:5746Vue$3.$mount @ vue.js:7906initRender @ vue.js:2234Vue._init @ vue.js:2597Vue$3 @ vue.js:2641window.onload @ (index):49\r\nvue.js:2278 TypeError: Cannot set property 'isStatic' of undefined(\u2026)\r\n```\r\n\r\nRelated to #3895",
        "title": "Unicode \\u2028 character crashing vue",
        "labels": "bug",
        "id": 123866
    },
    {
        "body": "When using vue-class-component library with vue-router in 2.0.8, dom elements are not being id'd and therefore the 'scoped' css is broken.\r\n\r\nTo replicate, simply install VueRouter in a test project that exports using the js like:\r\n\r\n\r\n```\r\n// hello.vue\r\n...\r\n<script>\r\nimport Component from 'vue-class-component'\r\n\r\n@Component export default class Login {\r\n  name = 'hello'\r\n  msg = 'Welcome to Your Vue.js App'\r\n}\r\n</script>\r\n...\r\n```\r\n\r\n```\r\n// app.js\r\nimport Vue from 'vue'\r\nimport App from './App'\r\nimport VueRouter from 'vue-router'\r\n\r\nVue.use(VueRouter)\r\n\r\n/* eslint-disable no-new */\r\nnew Vue({\r\n  el: '#app',\r\n  template: '<App/>',\r\n  components: { App }\r\n})\r\n```\r\n\"vue\": \"^2.0.8\",\r\n\"vue-class-component\": \"^4.3.1\",\r\n \"vue-router\": \"^2.0.3\"\r\n\r\nI also find it impossible to roll back vue (i want to roll back to 2.0.7) because the vue-loader library which is a dependancy of vue has a subdependancy of vue-template-compiler@^2.0.5 which will then just install the latest, and throw a version mismatch error. It would be nice to be able to lock to an older version ",
        "title": "2.0.8 vue-template-compiler breaks scoped css ",
        "labels": "bug",
        "id": 123867
    },
    {
        "body": "<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https://vuejs.org/guide/\r\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\r\n- Ask on the forums: http://forum.vuejs.org/\r\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\r\n\r\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\nI'm not sure if this is a bug or intended behavior, but if so, maybe this could be clarified in the documentation (and how to go about getting fresh values passed down after coming back from an inactive state).\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.0.7\r\n\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\n<!-- You could start with this template: http://jsfiddle.net/df4Lnuw6/ -->\r\nhttps://jsfiddle.net/ueLxbc0f/3/\r\n\r\n### Steps to reproduce\r\n1. Click on Switch component\r\n2. Click Increase value\r\n3. Click on Switch component\r\n\r\n### What is Expected?\r\nThat the component has its prop updated when coming back from inactive state.\r\n\r\n### What is actually happening?\r\nThe prop of the component is out of sync with its parent's data.",
        "title": "Props can get out of sync on dynamic components with keep-alive",
        "labels": "bug",
        "id": 123868
    },
    {
        "body": "### Vue.js version\r\n2.0.6+\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/gw8g8cos/\r\n\r\n![vue-glitch](https://cloud.githubusercontent.com/assets/19538283/20378887/e073b9a6-ac4d-11e6-8254-c1fb079ff122.gif)\r\n\r\n\r\n### Steps to reproduce\r\n```\r\n$ vue init webpack-simple .\r\n$ npm install vue@2.0.7 vue-template-compiler@2.0.7\r\n```\r\n\r\n```vue\r\n<template>\r\n<div>\r\n    <section style=\"text-align: center\" v-if=\"loading\">\r\n        Should be centered.\r\n    </section>\r\n    <section style=\"margin-top: 6rem;\" v-if=\"!loading\">\r\n        Should not be centered.\r\n    </section>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'app',\r\n    data () {\r\n        return {\r\n            loading: true\r\n        }\r\n    },\r\n    mounted: function() {\r\n        setTimeout(() => {\r\n            this.loading = false;\r\n        }, 2000);\r\n    }\r\n}\r\n</script>\r\n```\r\n\r\n### What is Expected?\r\nPatched elements should not keep inline styles from old vnodes.\r\n\r\n### What is actually happening?\r\nDuring the update operation, patched elements will retain styles from vnodes that will no longer exist in the DOM.\r\n\r\nTemporarily solution for end-users: changing inline styles to classes, choosing different tag names or adding a `key` directive will fix the issue. Thanks to @LinusBorg for the latter.\r\n\r\nIt looks like this PR has introduced this regression https://github.com/vuejs/vue/pull/4138. I've opened a pull request with a failing test that confirms this issue.",
        "title": "Patched elements keep inline styles from old vnodes",
        "labels": "bug",
        "id": 123869
    },
    {
        "body": "### Vue.js version\r\n2.0.6\r\n\r\n### Reproduction Link\r\nhttps://jsfiddle.net/yu2h7utk/\r\n\r\n### Steps to reproduce / What is actually happening?\r\n- The different in A, B, C, D buttons is `\\n` between two DOM node.\r\n- Click A, B, C, D button\uff0conly D button will be normal, others will duplice the text",
        "title": "Use render function will be strange when `\\n` in slot template.",
        "labels": "bug",
        "id": 123870
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n2.0.2\r\n\r\n### Steps to reproduce\r\n\r\n1. Create component\r\n```\r\nVue.component('testcomponent', {\r\n  render: h => h('div', 'contain')\r\n})\r\n```\r\n2. Use the components within the parent component template with className\r\n```\r\n  <div id=\"appcomponent\">\r\n    <testcomponent class=\"testclass\" />\r\n  </div>\r\n```\r\n\r\n### What is Expected?\r\nExpected to render on the server side\r\n```\r\n  <div id=\"appcomponent\">\r\n    <div class=\"testclass\">contain</div>\r\n  </div>\r\n```\r\nSimilarly, as the client-side\r\n\r\n### What is actually happening?\r\nThe server side is not renders classes in dynamically generated components\r\n```\r\n  <div id=\"appcomponent\">\r\n    <div>contain</div>\r\n  </div>\r\n```\r\nAt the same time, the client side, renders everything with classes\r\n\r\n```\r\n  <div id=\"appcomponent\">\r\n    <div class=\"testclass\">contain</div>\r\n  </div>\r\n```\r\n\r\nThis behavior causes a twitch of the interface, due to the belated addition of classes with styles.\r\nAlso incorrect display if the js file not to load on slow internet.",
        "title": "Using SSR with defined dynamic components, not rendered classes at tag (component)",
        "labels": "bug",
        "id": 123871
    },
    {
        "body": "Vue renders the text node \"undefined\" as the first child of an element that appears through a changed v-if condition (same applies for v-show) if it replaces an element that uses v-html.\r\n\r\n### Vue.js version\r\n2.0.2, 2.0.3 (no other versions tested)\r\n\r\n### Reproduction Link\r\nhttp://jsfiddle.net/5sH6A/860/\r\n\r\n### Steps to reproduce\r\n\r\nIn the JSFiddle, click the text \"click me!\" and you'll see the unexpected text \"undefined\" before `<p>[deleted]</p>`.\r\n\r\nUsing a template like this one:\r\n\r\n~~~ html\r\n<div>\r\n  <div v-if=\"comment.status !== 'DELETED'\" class=\"platon-text\" v-html=\"comment.text\" v-on:click=\"remove\"></div>\r\n  <div v-else class=\"platon-text\"><p>[deleted]</p></div>\r\n</div>\r\n~~~\r\n\r\nWhen `comment.status` changes from `'PUBLIC'` to `'DELETED'`, instead of only showing the v-else part of the template, an unexpected undefined is rendered.\r\n\r\n### What is Expected?\r\n\r\nThe nodes from the template\r\n\r\n~~~ html\r\n<div class=\"platon-text\"><p>[deleted]</p></div>\r\n~~~\r\n\r\nshould be rendered.\r\n\r\n### What is actually happening?\r\n\r\nThe nodes equivalent to\r\n\r\n~~~ html\r\n<div v-else class=\"platon-text\">undefined<p>[deleted]</p></div>\r\n~~~\r\n\r\nare rendered.\r\n",
        "title": "Vue renders unexpected \"undefined\" when v-if condition changes",
        "labels": "bug",
        "id": 123872
    },
    {
        "body": "If there are some components inside <template v-for> loop, when I remove a component data, the UI works expected, but in  beforeDestroy(), it always get last component property value. \r\n\r\nYou can test it in fiddle https://jsfiddle.net/robedgenius/817komr8/. When clicking \"remove\" button, it removes data index \"1\". However, the beforeDestroy method alert message is \"4\", i.e, the last index.\r\n\r\n\r\nHTML\r\n```\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.0.1/vue.min.js\"></script>\r\n\r\n  <div id=\"main\">\r\n  <div>\r\n    <button @click.prevent=\"destoryEle(1)\">Remove</button>\r\n  </div>\r\n\r\n    <template v-for=\"g in gridData\">\r\n\r\n      <demo-grid :aid=\"g.aid\" :name=\"g.name\" :power=\"g.power\"></demo-grid>  \r\n\r\n    </template>\r\n    <br/>end\r\n  </div>\r\n\r\n  <script type=\"text/x-template\" id=\"grid-template\">\r\n    <div>\r\n      <span v-text=\"aid\"></span>: <span v-text=\"name\"></span> - <span v-text=\"power\"></span> \r\n    </div>\r\n  </script>\r\n```\r\n\r\n\r\nJavascript code here:\r\n```\r\nVue.component('demo-grid', {\r\n    template: '#grid-template',\r\n    replace: true,\r\n    props: {\r\n      aid: 0,\r\n      name: Object,\r\n      power: Object,\r\n    },\r\n    beforeDestroy (){\r\n      alert('destroy: ' + this.aid);\r\n    }\r\n  });\r\n\r\n// Creating a new Vue instance and pass in an options object.\r\nvar demo = new Vue({\r\n\r\n\t// A DOM element to mount our view model.\r\n\tel: '#main',\r\n\r\n\t// Define properties and give them initial values.\r\n\tdata: {\r\n     gridData: [\r\n       {aid: 1, name: 'Chuck Norris', power: Infinity },\r\n       {aid: 2,  name: 'Bruce Lee', power: 9000 },\r\n       {aid: 3,  name: 'Jackie Chan', power: 7000 },\r\n       {aid: 4,  name: 'Jet Li', power: 8000 }\r\n     ]\r\n  },\r\n  methods:{\r\n      destoryEle: function(aid){\r\n        this.gridData.splice(aid, 1);\r\n      }\r\n  }\r\n});\r\n```",
        "title": "Destroy or BeforeDestroy send to wrong component",
        "labels": "bug",
        "id": 123873
    },
    {
        "body": "### Vue.js version\n\n2.0.3\n### Reproduction Link\n\nhttp://jsfiddle.net/jason_sanjose/0aat08kh/1/\n### Steps to reproduce\n1. Assume two custom components `parent` and `child`. In `parent`'s template, use `child` with inline styles `<child :style=\"styleComputed\"></child>`\n2. Render in browser\n3. Render on server\n4. Compare\n### What is Expected?\n\nInline styles should work consistently for browser and server environments.\n### What is actually happening?\n\nServer does not render `:style` attribute on `child`\n\n```\n// Browser\n<div style=\"...computed style...\"/>\n\n// Server\n<div/>\n```\n\nAs a workaround, in the `child` template, I've added `:style` to the root element and passed down a style as a prop, e.g.\n\n```\n<div :style=\"passthroughFromParent\"/>\n```\n\nIt's not obvious from the docs if `<child :style=\"styleComputed\"/>` is valid code. I suppose an argument could be made that only custom properties defined in `child` should be accepted?\n",
        "title": ":style on a custom component does not generate code using vue-server-renderer",
        "labels": "bug",
        "id": 123874
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.3\n### Reproduction Link\n\nhttps://jsfiddle.net/e4mxqbfv/1/\n### Steps to reproduce\n\nChange the selected option an look at the output in `<pre>` element below.\n### What is Expected?\n\nSelected number type should be a `Number` because `<select>` element is bound to a variable (model) and has `.number` modifier: `<select v-model.number=\"perpage\">`.\n### What is actually happening?\n\nVue fails to cast the selected value to `Number`, it remains a `String`.\n### Workarounds\n\nSome people have suggested binding the value `<option :value=\"10\">10</option>`, but that's a workaround, not a fix. It's be great if the modifier worked on `<select>` too or at least there would be a notice in the documentation.\n",
        "title": "Model .number modifier fails to cast selected value of select element.",
        "labels": "bug",
        "id": 123875
    },
    {
        "body": "Hello,\r\n\r\nwhile working on a private project I came across an strange error, so I simplified the code which will reproduce it, anyways it makes no sense to me.\r\n\r\nThe problem only exists when using `<script type=\"text/x-template\">`. \r\nReplacing the `<script>` tag with a `<template>` tag makes both versions work again, same applies if I dont use a template at all e.g. use a custom element component.\r\n### Vue.js version\r\n\r\n2.0.3\r\n### Reproduction Link\r\n\r\nworking:  https://jsbin.com/gulopup\r\nnot working: https://jsbin.com/siyesev\r\n### Steps to reproduce\r\n\r\nchange ((concert.bands.length - 2) > index) to (index < (concert.bands.length - 2))\r\n### What is Expected?\r\n\r\nboth version should work\r\n### What is actually happening?\r\n\r\nthe latter version throws error while parsing the template\r\n",
        "title": "strange behavior when using conditional operator in text/x-templates",
        "labels": "bug",
        "id": 123876
    },
    {
        "body": "### Vue.js version\n\n2.0.2\n### Reproduction Link\n\nhttp://jsfiddle.net/2vqkLkjL/1/\n### Steps to reproduce\n- Create a component with a nested data property: Object, of an object containing an array.\n- Set up watcher for this property, specifying the deep flag.\n### What is Expected?\n\nWhen the value of an array changes, the watcher runs\n### What is actually happening?\n\nWatcher isn't getting triggered.\n\nThe code seemed to work fine in Vue 1.x.\n\nNot 100% nested objects/arrays is the correct way for managing a view with lots of inputs.\n",
        "title": "Unable to watch nested data",
        "labels": "bug",
        "id": 123877
    },
    {
        "body": "### env\n\nmacOS 10.12.1 Beta\nnodejs 6.8.1\nvuejs 2.0.3\n### Steps to reproduce\n\ninit a test vue project with default options\n\n``` bash\nvue init webpack test\ncd test\n```\n\nedit src/components/Hello.vue\n\n```\n<template lang=\"pug\">\ndiv\n  div(v-if!=\"0 < 0\")\n</template>\n\n<script>\nexport default {\n}\n</script>\n```\n\nthen run dev server\n\n``` bash\nnpm run dev\n```\n### What is actually happening?\n\ngot error:\n\n```\n\n> test@1.0.0 dev /Users/xiaoxiao/test\n> node build/dev-server.js\n\nListening at http://localhost:8080\n\nwebpack: wait until bundle finished: /index.html\nwebpack built 65f1e5f2bb987f85bda4 in 2618ms\nHash: 65f1e5f2bb987f85bda4\nVersion: webpack 1.13.2\nTime: 2618ms\n Asset    Size  Chunks       Chunk Names\napp.js  867 kB       0       app\n\nERROR in ./src/components/Hello.vue\nModule build failed: Error: Error parsing template:\n\n< 0\")\n</template>\n\n<script>\nexport default {\n}\n</script>\n\n    at parseHTML (/Users/xiaoxiao/test/node_modules/vue-template-compiler/build.js:3434:13)\n    at Object.parseComponent (/Users/xiaoxiao/test/node_modules/vue-template-compiler/build.js:5171:3)\n    at module.exports (/Users/xiaoxiao/test/node_modules/vue-loader/lib/parser.js:15:21)\n    at Object.module.exports (/Users/xiaoxiao/test/node_modules/vue-loader/lib/loader.js:145:15)\n @ ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/App.vue 7:13-42\nChild html-webpack-plugin for \"index.html\":\n         Asset     Size  Chunks       Chunk Names\n    index.html  1.46 MB       0\nwebpack: bundle is now VALID.\n```\n### description\n\nSimilar issue: https://github.com/vuejs/vue/issues/3731 . However, situations are not the same. Replace \"<\" with \">\" won't trigger this error. It's not a bug of pug as the error occurs before pug was called. In fact, this error happens even if pug is not installed.\n\nThanks for your time to review this issue.\n",
        "title": "\"<\" in pug doesn't work",
        "labels": "bug",
        "id": 123878
    },
    {
        "body": "like this:\n\n```\n<template v-for=\"item in titems\">\n  <li>\n    <div>{{item.message}}</div>\n    <div><img :src='item.url' v-once></div>\n  </li>\n</template>\n```\n\nor this:\n\n```\n<template v-for=\"item in titems\">\n  <li>\n    <div>{{item.message}}</div>\n    <div v-once><img :src='item.url'></div>\n  </li>\n</template>\n```\n",
        "title": "vue2.0.3 v-once doesn't work in list rendering?",
        "labels": "bug",
        "id": 123879
    },
    {
        "body": "I'm in process migrating an application from Vue 1.x to 2.0.3. In this application I'm having several selects where each v-model binds to an individual index of an array . This is without problems in Vue 1.x but in version 2 it does not update.  I believe this is a potential bug.\n\nI have reproduced the problem here:\nhttps://jsfiddle.net/peterkorgaard/a7vvz753/18/\n\n<!--\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\n\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: https://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.3\n### Reproduction Link\n\nhttps://jsfiddle.net/peterkorgaard/a7vvz753/18/\n### Steps to reproduce\n### What is Expected?\n### What is actually happening?\n",
        "title": "vue 2.0.3 v-model not updating using an array",
        "labels": "bug",
        "id": 123880
    },
    {
        "body": "<!--\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\n\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: https://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.2\n### Reproduction Link\n\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\n\n<!-- You could start with this template: http://jsfiddle.net/df4Lnuw6/ -->\n\nhttps://github.com/thenickname/vue-global-mixin-bug\n### Steps to reproduce\n\nRegister a mixin with props globally:\n\n```\nVue.mixin( {\n  props : [ \"myProp\" ]\n} );\n```\n\nPass a prop value into any component:\n`<hello my-prop=\"foo\"></hello>`\n### What is Expected?\n\nmyProp becomes a prop of Hello.vue and the value of my-prop is \"foo\".\n### What is actually happening?\n\nThe value of my-prop is undefined\n### Notes\n- props are correctly mixed in if registered directly in the component using\n  `mixins : [ { props : [ 'myProp' ] } ]`\n- default values are passed correctly but will never change\n- clone the provided git repository and run `npm run dev` to see the bug\n  - repo contains two components \"Hello.vue\" and \"HelloWithLocalMixin.vue\" that demonstrate the apparently buggy behavior\n  - also see App.vue and main.js\n",
        "title": "Mixins: props are not correctly mixed in when registered globally",
        "labels": "bug",
        "id": 123881
    },
    {
        "body": "ver: 2.0.3\nmac/chrome 53\n\nhttps://github.com/vuejs/vue/pull/3887\n\u770b\u4e0a\u9762\u7684\u5730\u5740\u8bf4, \u4fee\u590d\u4e86 `v-if\u548cv-else, \u53ef\u4ee5\u5141\u8bb8\u4e24\u4e2a\u6839\u5143\u7d20`, \u4f46\u662f:\n\u5f53v-if\u6761\u4ef6\u6210\u7acb\u65f6, v-if\u80fd\u6b63\u5e38\u6e32\u67d3\u51fa\u6765\n\u5f53v-if\u6761\u4ef6\u4e0d\u6210\u7acb\u65f6, v-else\u5e76\u4e0d\u4f1a\u6e32\u67d3\u51fa\u6765\n\nTest: \nhttps://jsfiddle.net/lincenying/h64y6bj1/4/\n\n\u4ee3\u7801\u4e2d\u7684button, \u5e76\u6ca1\u6709\u6e32\u67d3\u51fa\u6765. ( In the code `v-else`, does not render it. )\n",
        "title": "allow 2 root nodes with v-if and v-else",
        "labels": "bug",
        "id": 123882
    },
    {
        "body": "Preface: I've read the docs and _think_ I've done the right thing (i.e. proper one-way flow, passing data in as props and emitting events properly when the content changes), but I might be doing something really dumb. Please accept my apologies if so\u2026 it's really super not clear to me what's going wrong here.\n### Vue.js version\n\n2.0.2\n### Reproduction Link\n- Visit http://jsfiddle.net/5sH6A/783/\n### Steps to reproduce\n- Swap blocks around using the up/down arrows, note how everything is fine.\n- Add a new block, and set its content (e.g. \"4\").\n- Add a second new block. Notice that its content is a copy of the previous block, but its data is correctly blank.\n- Move the top block down one, notice it renders correctly empty.\n- Move it back up. Once again the data looks fine, but the DOM displays the content from the previous block (e.g. \"4\")\n- Set some content on the top block (e.g. \"5\"), then move it down. The top two blocks display \"5\" (but the data is ok). Move the 2nd block back up and everything looks fine.\n### What is Expected?\n\nSee description above. \n### What is actually happening?\n\nTop block displays a copy of the second block, despite having correct data.\n",
        "title": "Strange DOM behaviour",
        "labels": "bug",
        "id": 123883
    },
    {
        "body": "Multiple select box does not work in same Vue instance.\n### Vue.js version\n- Vue.js v2.0.2\n### Reproduction Link\n\nhttps://jsfiddle.net/hd0drbo0/3/\n### Steps to reproduce\n\nChange second select box value, method \"testMethod\" will be called infinite times, even it is not bonded to second select box.\nChange first select box value, and later change second select box value, everything works as expected.\n### What is Expected?\n\nUpdate of different models of select.\n### What is actually happening?\n\nInfinite call of not assigned @change method.\n",
        "title": "Multiple select elements @change event problem",
        "labels": "bug",
        "id": 123884
    },
    {
        "body": "### Vue.js version\n\n2.0.1 / 2.0.2\n### Reproduction Link\n\nhttps://codepen.io/toxic-johann/pen/yajwRO\n### Steps to reproduce\n\nuse a v-for to render component\nin component, you have to write a v-for with template in it but not wrapped  with a root element\nopen console, and run test() function\n### What is Expected?\n\nopen console, and run success() function\n### What is actually happening?\n\nthrow the warning \n\n>  [Vue warn]: It seems there are duplicate keys that is causing an update error. Make sure each v-for item has a unique key. \n> and error\n> Uncaught (in promise) TypeError: Cannot read property 'tag' of undefined\n\nit's the same situation as [https://github.com/vuejs/vue/issues/3810](https://github.com/vuejs/vue/issues/3810)\nHowever, that one contains only two templates with v-if in  nested v-for\nAnd this one contains three templates with v-if\n\nAnd in my project, i contain with more.\nSo, i also want to know, if there are more template in nested v-for, will it run good?\n",
        "title": "nested v-for bug",
        "labels": "bug",
        "id": 123885
    },
    {
        "body": "<!--\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\n\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: https://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.1\n### Reproduction Link\n\nhttps://vue-hn.now.sh/top\n### Steps to reproduce\n\nopen [](https://vue-hn.now.sh/top) in IE9 browser\n### What is Expected?\n\n```\nit('basic-rendering-entities-encoding', function(done){\n    var renderer = require('vue-server-renderer').createRenderer()\n\n    var Vue = require('vue')\n    var app = new Vue({\n      template: '<div id=\"app\">\u6c49\u5b57 {{chineseDataMsg}} {{testEntity}}</div>',\n      data: function(){\n        return {\n          chineseDataMsg: '\u6d4b\u8bd5',\n          testEntity: '<script>alert(1);</script>'\n        }\n      }\n    })\n\n    renderer.renderToString(app, function(err, html){\n      try{\n        html.should.equal('<div id=\"app\" server-rendered=\"true\">\u6c49\u5b57 \u6d4b\u8bd5 &lt;script&gt;alert(1);&lt;/script&gt;</div>')\n      } catch(e){\n        done(e)\n        return\n      }\n      done()\n    })\n  })\n```\n### What is actually happening?\n\nsome entities codes can not be rendered by IE9, the page contains some entities codes like :\n\n```\n&NewLine; Built with Vue&period;js&NewLine; \n```\n",
        "title": "entities encoding problem of SSR (IE9)",
        "labels": "bug",
        "id": 123886
    },
    {
        "body": "### Vue.js version\n\n2.0.1\n### Reproduction Link\n\nhttp://jsfiddle.net/amcsi/o9v0ayrw/7/\n### Steps to reproduce\n1. Press Create Text\n2. Press the + button\n### What is Expected?\n\nThe text should have appeared right when pressing Create Text; instead you had to press +\n### What is actually happening?\n\nOn first instantiation of the VueJS app, if you observer the initial data, you'll see that the inner array doesn't have any watchers assigned to it; there is the inner loop in the template that iterates that array, so I'd expect a watcher be created for that.\n\nInterestingly if any other vue method is triggered that is being watched by vue, the view appears to refresh and the texts that have been added to the inner array now appear apparently.\n\nHere is a longer example of a commit where I fixed the issue in my real world case:\nhttps://github.com/amcsi/skill-builder/commit/9fd3e7efbf3dd2fac425b25a89a6f2cf6c8db200\n\nI was using an empty array directly within an array, and that empty array didn't have any watchers automatically set even though I was iterating it in the template. By changing the inner array to instead be an object with a property with that empty array, I was able to get watchers to watch the empty array.\n\nI think this is bug; you shouldn't have to wrap your arrays in objects if you don't want to I think.\n\nEDIT: updated description according to JSFiddle reproduction\n",
        "title": "Array directly inside array does not get watched",
        "labels": "bug",
        "id": 123887
    },
    {
        "body": "### Vue.js version\n\n2.0.1\n### Reproduction Link\n\nhttps://jsfiddle.net/uyt4tzak/1/\n### Steps to reproduce\n1. Open reproduction link\n2. Go to /auth/register\n3. Play with step buttons, in console you'll see components are correctly activated/deactivated \n4. Click on the login button, you'll be redirected to home view (`/`) and in console you'll see that Auth/Login/Register components are properly destroyed, except components inside Register component. Their destroyed hook isn't called.\n### What is Expected?\n\nDynamic component inside nested `<keep-alive>` component should be always properly destroyed.\n\nIn my case, after redirecting from `/auth/register` to `/` you should see following logs in the console:\n\nAuth component destroyed\nLogin component destroyed\nRegister component destroyed\ndestroyed step X\n### What is actually happening?\n\nDestroyed hook in Step component is never called, which means that component itself is never destroyed. \n",
        "title": "Lifecycle broken with nested keep-alive components",
        "labels": "bug",
        "id": 123888
    },
    {
        "body": "### Vue.js version\n\n2.0.1\n### Reproduction Link\n\nhttps://jsfiddle.net/x3k60w7c/\n### Steps to reproduce\n\nJust run the demo\n### What is Expected?\n\nDefault slot fallback\n[inner]\n### What is actually happening?\n\n[inner]\nNamed slot fallback\n\n`inner` should replace the `<slot name=\"abc\">` part of `outer`, but instead it replaces the `<slot>` part. Seems its `slot` attribute is not working. \nIt works fine if `functional: true,` is deleted (line 15). So is functional component not supposed to be a named slot of another component or am I using it wrong?\n",
        "title": "How can a functional component be used as a named slot of another component?",
        "labels": "bug",
        "id": 123889
    },
    {
        "body": "Wasted very much time to investigate this problem, made new fresh installs etc. and result is that:\n1) Safari + Vue 2 = no problem\n2) Chrome + Vue 1 = no problem\n3) Chrome + Vue 2 = Multiple Select 1st item selected when displayed, but element do not show \"selected\" tag but Chrome debugger shows that \"selected: true\".\n\nAny ideas please?\n\nFor screenshot I added simple multiple select:  \n<img width=\"1247\" alt=\"vuechromeproblem\" src=\"https://cloud.githubusercontent.com/assets/12371449/19095549/e64b5206-8a9e-11e6-8ffe-466a6d0cd2b2.png\">\n\nThanks!\n",
        "title": "Chrome + Vue 2 = Multiple Select 1st item unwantedly selected when displayed",
        "labels": "bug",
        "id": 123890
    },
    {
        "body": "## Vue.js version\n\n2.0.1\n## Reproduction Link\n\nhttp://jsfiddle.net/5sH6A/723/\n## Steps to Reproduce\n\nClick \"remove\" next to \"2\".\n## Expected Result\n\nThe page should've rendered without Vue.js throwing an error.\n## More Info\n\nI'm working on a small app, which has a two-level hierarchy of items. If an item contains subitems, it is rendered as a group and the contained items are rendered recursively. Thus, a group and an item result into different HTML being rendered (and different directives in the elements).\n\nNow, if I replace a group with an item using splice, the virtual dom doesn't notice that the HTML element changed (with its directives), but tries to update the items directives with group's.\n",
        "title": "Directives break when replacing an item in array using splice",
        "labels": "bug",
        "id": 123891
    },
    {
        "body": "### Vue.js version\n\n2.0.1\n### Reproduction Link\n\nhttps://jsfiddle.net/3qpzv7v0/\n\ntemplate tag should be able to use for group multiple elements and inject into component slot. this used to work in rc8\n",
        "title": "<template> unable to work, Cannot create property 'isStatic' on string ' '",
        "labels": "bug",
        "id": 123892
    },
    {
        "body": "Consider the following code:\n\n```\n<div id=\"demo\">\n  <select v-model=\"selected\" number>\n    <option v-for=\"opt in options\" :value=\"$index\" number>{{opt}}</option>\n  </select>\n</div>\n```\n\nIn `<select>`, each option value is bound with `$index`. If we perform `splice()` on `options`, like, `options.splice(0,1)`, `$index` does not correctly sync with options.\n\nFor example, let `options=['a','b']` and the rendered HTML looks like (but not really):\n\n```\n<div id=\"demo\">\n  <select selectedIndex=\"0\">\n    <option value=\"0\">a</option>\n    <option value=\"1\">b</option>\n  </select>\n</div>\n```\n\nAfter `options.splice(0,1)`, then `options=['b']`, but the rendered HTML becomes:\n\n```\n<div id=\"demo\">\n  <select selectedIndex=\"0\">\n    <option value=\"1\">b</option>\n  </select>\n</div>\n```\n\nThe value of 'b' option does not become 1, which should be 0 because of `$index`. This may not be a bug, but this is kind of odd.\n\nBelow is the live demo of this issue:\nhttps://jsfiddle.net/peteranny/trwp98g9/4/\n",
        "title": "<select> bound with array performs incorrectly after splice()",
        "labels": "bug",
        "id": 123893
    },
    {
        "body": "https://jsfiddle.net/myronliu347/mj7xmfjn/3/embedded/\n\nwhen `open` change more ,   name is test `slot` to 'default'\n",
        "title": "[bug] Vue2.0.0-rc.8 `v-if` AND 'slot'",
        "labels": "bug",
        "id": 123894
    },
    {
        "body": "Vue\u7248\u672c\uff1a1.0.26\uff0c\n\n\u5f53\u5728IOS 10\u4e2d\u5fae\u4fe1\u9875\u9762\u91cc\u4e0a\u4e0b\u6ed1\u52a8\uff0c\u6ed1\u5230\u51fa\u73b0\u90a3\u4e2a\uff08xxx\u7f51\u9875\u7531xxx\u63d0\u4f9b\uff09\uff0c\u7136\u540e\u4ea7\u751f\u70b9\u51fb\u4e8b\u4ef6\uff08\u5c1d\u8bd5\u4e86\u4e0d\u5c11\u7684vue\u76f8\u5173\u7684tap\u63d2\u4ef6\uff0c\u90fd\u65e0\u529f\u800c\u8fd4\uff09\uff0c\u7136\u540e\u518d\u6b21\u70b9\u51fb\u8be5\u533a\u57df\uff0c\u4ee3\u7801\u53ef\u4ee5\u6210\u529f\u6267\u884c\uff0c\u552f\u72ec\u9875\u9762\u6ca1\u6709\u6539\u53d8\u3002\n\n\u8fd9\u4e2a\u70b9\u51fb\u4e8b\u4ef6\u662f\u4e00\u65e6\u53d1\u751f\uff0c\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a+1\u7684\u6548\u679c\uff08css\u505a\u7684\uff09\uff0c\u6309\u7406\u8bf4\u4e0d\u5f71\u54cd\u6e32\u67d3\u3002\n",
        "title": "IOS10 \u5fae\u4fe1\u9875\u9762\u6ed1\u52a8\u8fc7\u7a0b\u4e2d\u4ea7\u751ftap\u4e8b\u4ef6\uff0c\u4f1a\u5bfc\u81f4Vue\u6e32\u67d3\u4e0d\u51fa\u6765",
        "labels": "bug",
        "id": 123895
    },
    {
        "body": "Similar to issue https://github.com/vuejs/vue/issues/2983 which was logged for 1.x \n### Vue.js version\n\n2.0 rc\n### Reproduction Link\n\nhttp://codepen.io/anon/pen/GjqwaA?editors=1010#0\n### Steps to reproduce\n\nOpen the above codepen in IE\n### What is Expected?\n\nThe visible select elements should be empty / have no option selected\n### What is actually happening?\n\nThe visible select elements all have \"AAA\" selected. The underlying model is not in sync. Interestingly when you click the \"show\" button, the select elements display as expected.\n",
        "title": "[2.0] Internet Explorer select elements display first option by default",
        "labels": "bug",
        "id": 123896
    },
    {
        "body": "I'm learning Vue by working through the 2.0 guide, and when I created https://github.com/vuejs/vuejs.org/issues/404 in the vuejs.org repo, @LinusBorg said the issue might actually be with Vue.js itself.\n### Vue.js version\n\n2.0.0-rc.5\n### Reproduction Link\n\nMy code is here: https://github.com/jvanbrug/vue-guide-examples/tree/master/08_Form_Input_Bindings/02_Value_Bindings\n\nThe live demo of that code is here: https://jvanbrug.github.io/vue-guide-examples/08_Form_Input_Bindings/02_Value_Bindings/index.html\n### Steps to reproduce\n\nWhen I try to implement the 2.0 guide's example for _Form Input Bindings - Value Bindings - Select Options_ (would provide a link, but vuejs.org seems to be down at the moment) as below, I get vm.selected === undefined whenever I select any option (also, the first option, 123, always appears \"checked\" in the dropdown).\n### What is Expected?\n\nThe options for 456 or 789 should be selectable, and `vm.selected` should change to something like `{ number: 456 }`.\n### What is actually happening?\n\nI'm setting `vm.selected === undefined` as the initial value, but that doesn't seem to change the behavior - even if `vm.selected === null` is the initial value, selecting a select option changes it to `vm.selected === undefined`.\n\nThanks for Vue! \ud83d\ude03  So far it seems super useful and easy to use.\n\n<hr>\n\n**index.html**\n\n``` html\n<body>\n  <div class=\"content\">\n\n    ...\n\n    <div id=\"example-select\" class=\"demo\">\n      <select v-model=\"selected\">\n        <option v-bind:value=\"{ number: 123 }\">123</option>\n        <option v-bind:value=\"{ number: 456 }\">456</option>\n        <option v-bind:value=\"{ number: 789 }\">789</option>\n      </select>\n      <div>\n        Selected type: {{ typeof selected }}\n      </div>\n      <div>\n        Selected number: {{ typeof selected === 'object' ? selected.number : 'N/A' }}\n      </div>\n    </div>\n\n    ...\n\n  </div>\n  <script src=\"../../vue.js\"></script>\n  <script src=\"./main.js\"></script>\n</body>\n```\n\n**main.js**\n\n``` javascript\n...\n\nvar vm = new Vue({\n  el: '#example-select',\n  data: {\n    selected: undefined\n  }\n})\n```\n",
        "title": "Value binding with select options seems broken",
        "labels": "bug",
        "id": 123897
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nvue@1.0.26 https://jsfiddle.net/84hvc9zh/\nvue@2.0.0.rc-6 https://jsfiddle.net/84hvc9zh/1/\n### Steps to reproduce\n\nOpen reproduction links, check console\n### What is Expected?\n\nVue shouldn't warn about missing prop since it's provided via propsData. \n### What is actually happening?\n\nThrows an error:\n\n```\n[Vue warn]: Missing required prop: <prop>\n[Vue warn]: Invalid prop: type check failed for prop \"<prop>\". Expected String, got Undefined.\n```\n\nHappens only in Vue 1.x\n",
        "title": "Vue throws error Missing required prop even if provided",
        "labels": "bug",
        "id": 123898
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0-rc6 & vue-router 2.0.0-rc4\n### Reproduction Link\n\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\n\nhttps://jsfiddle.net/oldpig/zw5ncxso/1/\n### Steps to reproduce\n\nrun \n### What is Expected?\n\nShould log `typeof vm` as `object` in console\n### What is actually happening?\n\n`vm` is undefined\n\nThis issue is introduced in rc.6, fine in rc.5.\n",
        "title": "2.0.0-rc.6 breaks \"beforeRouteEnter\" hook",
        "labels": "bug",
        "id": 123899
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\nFirst of all, thank you for you work. Vue.js is awesome :sunglasses: \n\nBut I have an issue with reactivity and style binding as array in Vue 2.0-rc.5 . I have used this syntax:\n\n```\n:style=\"[object1,object2]\"\n```\n\nIn this case `object2` used only one on init render. When I change `object2` prop, actual `style` is not changed. Even through I can see changes in devtools. So it's not reactive. It [was working](https://jsfiddle.net/probil/6f7r6b8b/) on Vue 1.X without such issue at all.\n\nIf it's not a bug but feature (I don't think so), please, describe it in docs.\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0-rc.5\n### Reproduction Link\n\nFirst one (with computed properties)\nhttps://jsfiddle.net/probil/ztcrvLeo/\n\nSecond one (simplier)\nhttps://jsfiddle.net/probil/017Lqvvh/\n### Steps to reproduce\n1. Create two objects in `data()` -> `object1` and `object2`. \n2. Describe some styles in `object1`. In `object2` describe `backgroundImage`\n3. Create element with `:style=[object1,object2]`\n4. Change `backgroundImage` to another image of `object2` (on button click for example)\n5. See no changes on the screen\n### What is Expected?\n\nImages should be changed. It works great in Vue 1.X . Proof link https://jsfiddle.net/6f7r6b8b/2/\n### What is actually happening?\n\nImages is is not changed. Even through I see actual changes in `vue-devtools`.\n",
        "title": "[Vue 2.0] Issue with styles as array and reactivity",
        "labels": "bug",
        "id": 123900
    },
    {
        "body": "Vue Version : 2.0.0-rc.4\nRepro : https://jsfiddle.net/p9mcn2tp/3/\n\nWhen there are two sibling components that toggle each other, the second one that appears seems to have some properties of the previous one.\n",
        "title": "DOM node replacement (with v-if) overlaps with the previous node",
        "labels": "bug",
        "id": 123901
    },
    {
        "body": "The defineReactive function uses getOwnPropertyDescriptor, which works only for properties declared on the object itself, but not on its ancestors:\n\n/**\n- Define a reactive property on an Object.\n  */\n  function defineReactive (obj, key, val, customSetter) {\n  var dep = new Dep()\n  \n  var property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false) {\n    return\n  }\n\nIMHO, this should be:\n\n  /**\n- Define a reactive property on an Object.\n  */\n  function defineReactive(obj, key, val, customSetter) {\n  \n    // get property descriptor (own or inherited!)\n    var property = null;\n    for (var proto = obj; !property && proto != Object.prototype; proto = Object.getPrototypeOf(proto)){\n      property = Object.getOwnPropertyDescriptor(proto, key);\n    }\n    if (property && property.configurable === false) {\n      return;\n    }\n",
        "title": "defineReactive doesn't handle inherited properties",
        "labels": "bug",
        "id": 123902
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0.rc-1\n### \u6d4b\u8bd5\u94fe\u63a5\n\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\n\nhttps://jsfiddle.net/ouu5vj0f/1/\n",
        "title": "v-model loses binding when used with dynamically bound type=\"radio\" on <input> (v-model \u5728input \u52a8\u6001\u6307\u5b9atype\u65f6\u5931\u6548\u3002)",
        "labels": "bug",
        "id": 123903
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttp://codepen.io/matkovsky/pen/EgYRyV?editors=1010\n### Steps to reproduce\n1. Create a custom transition.\n2. Add it to an element that has `v-show` set to true by default.\n3. Toggle the value of `v-show` (by toggling the corresponding data in the model, of course).\n### What is Expected?\n\nIt should animate.\n### What is actually happening?\n\nThe first `leave` is not animated. It looks like the `v-leave` (`[transitionName]-leave`) class is missing the first time.\n",
        "title": "`leave` transition doesn't work if the element is shown by default",
        "labels": "bug",
        "id": 123904
    },
    {
        "body": "### Vue.js version\n\n2.0.0-rc.3\n### Steps to reproduce\n\n``` html\n<template lang=\"html\">\n\n  <h1>{{\n    message\n  }}</h1>\n\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      message: 'Message here.'\n    }\n  }\n}\n</script>\n```\n### What is Expected?\n\nMessage here.\n### What is actually happening?\n\n{{ message }}\n",
        "title": "No support for carriage return",
        "labels": "bug",
        "id": 123905
    },
    {
        "body": "### Vue.js version\n\n2.0.0-rc.3\n### Reproduction Link\n\nhttp://codepen.io/analog-nico/pen/dXBRBG\n### Steps to reproduce\n1. Click the link \"Open popup using v-if\"\n2. A badly designed popup opens\n3. Click the \"Close\" link\n4. For this first time the popup closes successfully\n5. Click the link \"Open popup using v-if\" again\n6. The popup opens again\n7. Click the \"Close\" link\n### What is Expected?\n- Again, the popup closes successfully\n### What is actually happening?\n- Vue fails to call an internal function that got missing.\n- The `closePopupUsingVIf` function attached to the \"Close\" link's click event never gets called.\n- The popup does not close.\n\nFor reference the codepen contains the exact same implementation of the popup with the only difference that it uses `v-show` instead of `v-if` to show/hide the popup. `v-show` works perfectly.\n",
        "title": "Function wiring breaks for components that show/hide slot content using v-if",
        "labels": "bug",
        "id": 123906
    },
    {
        "body": "Hello,\n\nI'm writing a data-driven custom component that renders different input types from its data.\nThis component supports types like **radio** / checkbox / textarea etc.\n\nAll these types works fine with v-model directive on the component except of the **radio** type.\n\nI found why: Vue2 hooks up the onChange event by adding : \n`'onChange': function(event){\nmyProp = undefined\n}`\n\nThe component looks like this:\n\n``` html\n<dyn-component type=\"radio\" ... ></dyn-component>\n```\n\nand renders something like this: \n\n``` html\n<div class=\"form-group\">\n  <label><input type=\"radio\" /></label> \n  <label><input type=\"radio\" /></label>\n</div>\n```\n\nIn fact, Vue2 considers that my component is an input type=\"radio\" but this component renders internaly a radio-button list... \n\nThe workaround I used is to change the type from radio to radio-list, but maybe Vue should also check the tag name to be **input** in addition to the type=\"radio\" attribute check.\n",
        "title": "v-model with custom radio component replace onChange event",
        "labels": "bug",
        "id": 123907
    },
    {
        "body": "Vue version: 1.0.26\nDemo: https://jsfiddle.net/banricho/1xrmf1bk/2/\n1. Use `<component>` tag with `keep-alive`\n2. Use `:transition` with different class names\n3. Fast switch components\n\nVue can't remove the class name which was used last time, and throw an error in the console:\n\n```\nvue.js:1230 Uncaught TypeError: Cannot read property 'removeChild' of nullremove @ vue.js:1230(anonymous function) @ vue.js:1074p$1.leaveDone @ vue.js:6674(anonymous function) @ vue.js:220onEnd.pendingCssCb @ vue.js:6800\n```\n\nThanks :)\n",
        "title": "Transition bug with keep-alive",
        "labels": "bug",
        "id": 123908
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0-rc3\n### Reproduction Link\n\nhttps://jsfiddle.net/hv59sebz/\n### Steps to reproduce\n\nClick on the \"Transition broken\" button (real click as usually touchpad taps are not long enough to trigger the button active animation).\n### What is Expected?\n\nThe DIV element inside the transition tag should be removed from the DOM when the move transition ends, that is when it reaches the right border of the page after the 3 second transition is done. \n### What is actually happening?\n\nThe div element inside the transition tag is being removed from the DOM when the nested transition on button active ends, before it reaches the right border of the page. \n",
        "title": "Nested transitions premature end",
        "labels": "bug",
        "id": 123909
    },
    {
        "body": "### Vue.js version\n\n2.0.0-rc.2\n### Vue-router version\n\n2.0.0-rc.3\n### Reproduction Link\n\n[repro](https://jsfiddle.net/wfzzcrx6/4/)\n### Steps to reproduce\n\nopen the console, click on nav, check the log\n### What is Expected?\n\nOn Enter transition hook, the log to the reference \"page\" (this.$refs.page)\nOn Leave transition hook, the log to the reference \"page\" (this.$refs.page)\n### What is actually happening?\n\nOn Enter => the log is correct.\nOn Leave => this.$refs.page is undefined\n",
        "title": "Reference lost on leave transition hook",
        "labels": "bug",
        "id": 123910
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0-rc.2\n### Reproduction Link\n\nhttp://jsfiddle.net/af3cq646/1/\n\n``` JS\nvar CUSTOM = Vue.component('custom',{name:'custom'});\nconsole.log(new CUSTOM());\n```\n### Steps to reproduce\n\nrun fiddle and open console\n### What is Expected?\n\nno warning and component showing up with the name 'custom'\n### What is actually happening?\n\nwarning \"**_`[Vue warn]: options \"name\" can only be used as a component definition option, not during instance creation`**_\" and component is named \"**`VueComponent`**\"\n",
        "title": "option 'name' on component creation gives warning and doesn\u00b4t work",
        "labels": "bug",
        "id": 123911
    },
    {
        "body": " \u4e0b\u9762\u8fd9\u4e2a\u7f51\u9875\u7528v2.0.0-beta.3/dist/vue.min.js\u6b63\u5e38,\u7528beta.4-7\u90fd\u6ca1\u6709\u751f\u6210\u5185\u5bb9\n\n```\n<!DOCTYPE HTML>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:mso=\"urn:schemas-microsoft-com:office:office\" xmlns:msdt=\"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\" >\n    <head>\n        <title>vue2 test</title>\n        <script src=\"https://raw.githubusercontent.com/vuejs/vue/v2.0.0-beta.7/dist/vue.min.js\"></script>\n        <style>\n            .a {color: green}\n            .b {color: red}\n        </style>\n    </head>\n\n    <body>\n        <div id='test1'>\n            <h1 id='content1' :class='active ==\"x1\" ? \"a\" :\"b\"'>ttt2345</h1>\n        </div>\n    </body>\n\n<script>\n    vue1 = new Vue({\n        el: '#test1',\n        data: {\n            active: \"x1\",\n        },\n    })\n</script>\n\n</html>\n\n\n\n```\n",
        "title": "v2.0.0-beta.3\u6b63\u5e38,\u7528beta.4-7\u90fd\u6ca1\u6709\u751f\u6210\u5185\u5bb9",
        "labels": "bug",
        "id": 123912
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0-beta.7\n### Reproduction Link\n\nhttp://jsbin.com/walejonumi/1/edit?html,js,output\n### Steps to reproduce\n\nfocus the input\n### What is Expected?\n\nThe before slot should not disappear\n### What is actually happening?\n\nThe before slot disappears\n\nIf you switch to Vue 1.x, it works fine. \nI use render function later and find that in the first render,  `this.$slots.before`  and `this.$slots.default` all exist, but when re-rendered,  `this.$slots.before` is `undefined`, and all the slot come into `this.$slots.default` \n",
        "title": "[Vue 2.0]named slot disappear",
        "labels": "bug",
        "id": 123913
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0.0-beta.6\n### Reproduction Link\n\nhttp://jsbin.com/miyoru/edit?css,js,output\n### Steps to reproduce\n\nIn the jsbin above, click in the `Toggle` button.\n### What is Expected?\n\nAn animation expanding the input field.\n### What is actually happening?\n\nThe animation starts and then the application crashes.\n\nPS: if you remove the `<form>` tag, the animation works accordingly.\n",
        "title": "Transition inside forms crashing in Safari 9.1.1",
        "labels": "bug",
        "id": 123914
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttp://jsfiddle.net/d3xwtrqn/\n### Steps to reproduce\n\nAs shown in the jsfiddle: The combination of a `class` attribute and the dynamic `:class` leads to a merged class attribute. However using v-bind does not.\n### What is Expected?\n\nBoth ways should merge correctly.\n",
        "title": "Merging of HTML classes via class attribute and v-bind broken",
        "labels": "bug",
        "id": 123915
    },
    {
        "body": "### Vue.js version\n\n2.0.0.beta-6\n### Reproduction Link\n\nhttps://jsfiddle.net/miljan/mx3tfskL/\n### Steps to reproduce\n\nClick on the links and watch the console log.\n### What is Expected?\n\nTo output `Clicked` for each one.\n### What is actually happening?\n\nOnly does so for the first Menu, for the second throws an `Uncaught TypeError: o.fn is not a function` error.\n",
        "title": "Reusing childs in Render Functions error",
        "labels": "bug",
        "id": 123916
    },
    {
        "body": "Here's [the repro](https://jsfiddle.net/chrisvfritz/k3ec7hhh/).\n",
        "title": "Transition on component root doesn't work with v-show",
        "labels": "bug",
        "id": 123917
    },
    {
        "body": "### Vue.js version\n\n2.0.0.-beta.4\n### Reproduction Link\n\nBug: https://jsfiddle.net/snmdsh2o/ (2.0.0-beta.4)\n\nWorking: https://jsfiddle.net/snmdsh2o/1/ (2.0.0-beta.3)\n### Steps to reproduce\n\nRun App, click on the first link\n### What is Expected?\n\nit take me to the google search results for \"vuejs\"\n### What is actually happening?\n\nAmpersands in `href` attributes get escaped, therefore the link is broken.\n\nExpected: `http://google.com/?tbm=nws&q=vuejs`\nWrong: `http://google.com/?tbm=nws&amp;q=vuejs`\n\nOriginally reported on the forum: http://forum.vuejs.org/topic/4731/2-0-0-beta-all-links-on-the-page-broken-by-vue/\n",
        "title": "2.0.0-beta4: static href attribute content is being escaped (& becomes &amp;)",
        "labels": "bug",
        "id": 123918
    },
    {
        "body": "Please refer to [this fiddle example](https://jsfiddle.net/wz2n2wpn/4/).\n\nLet's say I have 3 div elements, first and third div have a v-if directive to toggle their visibility based on the same boolean variable, e.g. \"show\" in the fiddle example, visible if true, invisible if false. It works correctly when I toggle the \"show\" to false, first and third divs become invisible. But then when I toggle the \"show\" to true again, the third div becomes visible, but the first div changed into a copy of the second div.\n\nI have tested it with v2.0.0-beta.3 and v1.0.26. The bug only appears in v2.0.0-beta.3.\n\nThe bug appears only if 2 divs have v-if directive bound to the same variable, and there is one div between them which has no v-if directive bound to the same variable.\n\nSorry if my explanation is confusing. It is kind of difficult to explain this bug. That's why I created the fiddle example.\n",
        "title": "DOM messed up after toggling v-if variable",
        "labels": "bug",
        "id": 123919
    },
    {
        "body": "Here's a [repro fiddle](https://jsfiddle.net/chrisvfritz/r5wy8a5r/). Any HTML within inline string literals seems to be stripped, so that:\n\n``` html\n<p v-html=\"'<strong>hello</strong> world'\"></p>\n```\n\nwill compile to:\n\n``` html\n<p>hello world</p>\n```\n\ninstead of what I would expect:\n\n``` html\n<p><strong>hello</strong> world</p>\n```\n",
        "title": "v-html: HTML stripped from inline string literals",
        "labels": "bug",
        "id": 123920
    },
    {
        "body": "As demonstrated in [this fiddle](https://jsfiddle.net/chrisvfritz/dtvcthkh/), the following is interpreted literally:\n\n``` html\n<p>{{{ '<strong>hello</strong> world' }}}</p>\n```\n\nInstead, I would expect it to produce:\n\n``` html\n<p><strong>hello</strong> world</p>\n```\n\nThis also occurs with normal interpolation (`{{ }}`).\n",
        "title": "Interpolation fails on inline string containing HTML",
        "labels": "bug",
        "id": 123921
    },
    {
        "body": "Hello, I have this example: https://jsfiddle.net/rjurado/tq136Lwr/\n\n``` javascript\n<textarea id=\"textarea\" v-pre>\n  {{works}}\n</textarea>\n\n<div id=\"example\">\n  <p v-pre>{{ work }}</p>\n  <textarea v-pre>{{ no wokrs }}</textarea>\n</div>\n```\n\n```\nnew Vue({ el: '#textarea' });\nnew Vue({ el: '#example' });\n```\n\nWhy second textarea show empty?\nIf you inspect it you can see this:\n\n``` html\n<textarea :value=\"no wokrs\">{{ no wokrs }}</textarea>\n```\n",
        "title": "v-pre doesn't work inside textarea?",
        "labels": "bug",
        "id": 123922
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n2.0 beta.2\n\nWhen I use html5 tag <time>\n",
        "title": "[Vue warn]: Unknown custom element: <time> - did",
        "labels": "bug",
        "id": 123923
    },
    {
        "body": "Vue 1.0.26\nFirefox 47.0\n### Reproduction Link\n\nhttp://jsfiddle.net/5sH6A/523/\n### Info\n- Click the button to toggle the visibility of the `<test>` component.\n- The entrance transition works, but the leave transition doesn't, causing the element to remain in the DOM indefinitely.\n- Clicking the button multiple times results in multiple `<test>` components in the DOM.\n\nThe following things must be present for the bug to occur:\n- It must be a component instance with visibility toggled via `v-if`.\n- It must be a flexbox child.\n- It must be positioned absolutely.\n- It must have a transition.\n- `Vue.config.debug` must be false.\n",
        "title": "Absolutely-positioned flexbox child component with transition is duplicated in DOM when visibility is toggled via v-if in Firefox",
        "labels": "bug",
        "id": 123924
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttp://codepen.io/sirlancelot/pen/zBPVBo?editors=1010#0\n### Steps to reproduce\n- Bind an inline object with a value containing the backtick character\n### What is Expected?\n- Object is reproduced properly in the data model\n### What is actually happening?\n- `scope.` is being added to everything between the backtick and an escaped quote.\n\nWe're using props to curry an initial data model from the server to the browser. We're doing it in a manner similar to the example shown in the CodePen. Basically, our root Vue instance contains a list of props that will show up on the element and are populated by the server.\n",
        "title": "Bad parsing when bound data contains a backtick",
        "labels": "bug",
        "id": 123925
    },
    {
        "body": "vue.js version: v2.0.0-beta.1\n\nNo `keep-alive`: https://jsfiddle.net/banricho/4zhq0pd6/\n\nUse `keep-alive`: https://jsfiddle.net/banricho/4zhq0pd6/1/\n\nVue can not switch components of the same constructor with `keep-alive`. In vue 1.x, `<component>` always uses initial value and ignores others. But in vue 2, it's blank.\n\nI hope it will works, even with the same component constructor. It's really useful.\n\nThanks!\n",
        "title": "keep-alive with the same component constructor",
        "labels": "bug",
        "id": 123926
    },
    {
        "body": "In [this simple repro](https://jsfiddle.net/a7btjutk/), I would expect only `parent-component` to know about the named slot, which is what happens in 1.x. Instead, the slot name is passed all the way down the component tree.\n",
        "title": "Slot names flow all the way down the component tree",
        "labels": "bug",
        "id": 123927
    },
    {
        "body": "### Vue.js version\n\n2.0.0-beta.1\n### Reproduction Link\n\nhttps://jsfiddle.net/cemelo/h8Lyqa3e/3/\n### Steps to reproduce\n\nWrite some e-mail in the provided input provided at the fiddle.\n### What is Expected?\n\nAn image should appear _(and stay)_ bellow the input.\n### What is actually happening?\n\nThe image shows for some apparently random time and then disappears.\n",
        "title": "Rendering problem with v-show, transition and v-model update.",
        "labels": "bug",
        "id": 123928
    },
    {
        "body": "### Vue.js version\n\n2.0.0-beta.1\n### Reproduction Link\n\nhttps://jsfiddle.net/ybh4w2sx/\n### Steps to reproduce\n- Given some DOM element and a variable `x`, create an element with a `v-if` directive bound to the variable `x` and, optionally, a transition set.\n- Toggle the variable a few times.\n### What is Expected?\n\nThe DOM element should be removed and attached several times to the parent. If the transition is set, it should be applied also.\n### What is actually happening?\n\nThe behaviour is erratic. Sometimes the element is rendered correctly, but eventually the next sibling is attached instead. Also, if a transition is set, it isn't applied at all.\n",
        "title": "Rendering problems with v-if in vue-2.0-beta.1",
        "labels": "bug",
        "id": 123929
    },
    {
        "body": "> **EDIT**: Turns out this syntax is not deprecated, it just needs to be fixed. \ud83d\ude03 \n\nWhen using this deprecated directive syntax:\n\n``` js\nVue.directive('my-directive', function (value) {\n  // this function will be used as update()\n})\n```\n\nThe errors thrown are:\n\n```\nvue.js:2168 [Vue warn]: Error during component render (found in root instance)\nvue.js:3479 Uncaught TypeError: Bind must be called on a function\n```\n\nThese are pretty vague, so wasn\u2019t sure if we wanted to throw a better warning, similar to when users don\u2019t have a root element in their template for example. Maybe something like:\n\n```\n[Vue warn]: Directive definition must be an object (Function definition is deprecated)\n```\n",
        "title": "Directive function syntax throws an error",
        "labels": "bug",
        "id": 123930
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\nv2.0.0-alpha.8\n### Reproduction Link\n\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub reprository that can reproduce the bug. -->\n\nhttps://jsbin.com/dajovivoye/1/edit?html,js,output\n### Steps to reproduce\n1. new Vue\n2. assign data\n### What is Expected?\n### What is actually happening?\n\nA tag with `v-if` will also has style attribute \n",
        "title": "v2.0.0-alpha.8 `v-if` bug",
        "labels": "bug",
        "id": 123931
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttps://jsfiddle.net/0o853fzd/\n\nTake a look at example. You can see that when i try to pass object to the filter as an argument it doesn't work when there is some space in the string.\n\n![Err](http://image.prntscr.com/image/8d9b80adc23744cf966a4f983b6d6c52.png)\n\nIsn't supposed to PR #834 fix this issue? or is it forbidden to use spaces when passing obejct to the filter like this?\n",
        "title": "Parsing object as a filter argument fails with spaces inside",
        "labels": "bug",
        "id": 123932
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttp://jsfiddle.net/e2zfe3se/\n### Steps to reproduce\n\nCheck the above example\n### What is Expected?\n\nThe $ref object should be updated using the new sub components instances\n### What is actually happening?\n\nThe $ref object caches the old components instances and all the references to the new DOM elements created get lost\n",
        "title": "$refs in loops are not in sync - the sub components instances do not get updated",
        "labels": "bug",
        "id": 123933
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttp://codepen.io/whitelynx/pen/PzmbEo\n### Steps to reproduce\n\nUse multiple components to define an SVG drawing, and include an `<image></image>` element in one of the components which does _not_ include an `<svg>` tag.\n### What is Expected?\n\nThe image should correctly draw.\n### What is actually happening?\n\nThe image does not appear. It seems that Vue is replacing the `<image>` element with an unclosed `<img>` element that has the same attributes. This happens even if the `<image>` element is inside a recognized SVG tag (e.g., `<g>`) in the template; the only situation where it does not happen is if it's inside an `<svg>` element.\n\nIn environments which use `vue.common.js` (in my case, [Electron](http://electron.atom.io/)), this causes further issues: Since `<img>` is not a valid SVG element, the DOM will auto-close the containing SVG tags before opening the `<img>`, which can also cause `stringToFragment()` to fail with `Uncaught TypeError: Cannot read property 'tagName' of null`. (since `node.lastChild` will no longer be the `<svg>` element defined by `prefix` and `suffix`, but instead a text node containing the trailing whitespace from the template)\n\n---\n\nThere is a workaround: wrapping the `<image>` element directly with an `<svg>` element wherever it appears. However, it's unexpected that this would be required, and it forces some odd contortions compared to just using an unwrapped `<image>` tag. (e.g., the `x` and `y` attributes need to appear on the `<svg>` tag instead of the `<image>` tag, and the `width` and `height` attributes need to appear on _both_)\n",
        "title": "SVG `image` tag is incorrectly converted to `img` unless inside `<svg>`",
        "labels": "bug",
        "id": 123934
    },
    {
        "body": "### Vue.js version\n\n1.0.26\n### Reproduction Link\n\nhttps://jsfiddle.net/simplesmiler/Lrk9sxjf/102/\n### What is Expected?\n\nBoth textareas having text inside them.\n### What is actually happening?\n\nFirst textarea has text. Second textarea is empty, and has literal attribute `:value`.\n",
        "title": "v-pre on textarea breaks sometimes",
        "labels": "bug",
        "id": 123935
    },
    {
        "body": "I made a universal component (modal) that can be used as inline component\n`<modal :entity=\"some\">`\nor via service\n`this.$modal.open({propsData: {...}, component: ModalForm})`\nit works fine, but warns about invalid props, because it runs in `compileProps` step, and propsData will be used later in `makePropsLinkFn` step (compile-props.js).\nI think propsData should also be a source of validation along with element attributes\n\nversion 1.0.26 [jsFilddle](https://jsfiddle.net/oe7axeab/1296/) (see console)\nversion 2.0.0-alpha.8 does not have this problem\n",
        "title": "Props validation fails (Vue warn) when component initialized with proper propsData",
        "labels": "bug",
        "id": 123936
    },
    {
        "body": "### Vue.js version\n\nv2.0.0-alpha.8\n### Reproduction Link\n\nhttps://jsfiddle.net/nf02Ltct/2/\n### Steps to reproduce\n- open console\n- read warning\n### What is Expected?\n\nthe special \"value\" prop which is passed from `v-model` on the component element in the template, shuold contain a Boolean value, since the parent passes a Boolean to `v-model`\n### What is actually happening?\n\n> [Vue warn]: Invalid prop: type check failed for prop \"value\". Expected Boolean, got String. (found in component: <toggler>)\n### Suspicion:\n\nI think it has something to do with whith this comment:\n\nhttps://github.com/vuejs/vue/blob/v2.0.0-alpha.8/src/platforms/web/runtime/modules/props.js#L20-L21\n",
        "title": "When using v-model on a component element, the `value` prop is always a String",
        "labels": "bug",
        "id": 123937
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\nVue.js v2.0.0-alpha.8\n### Reproduction Link\n\nhttps://jsbin.com/mayoqebeha/edit?html,js,console\n### Steps to reproduce\n1. define empty arr\n2. define an element after `v-for` element, can not leave a blank space\n3. then assign arr data \n### What is Expected?\n### What is actually happening?\n",
        "title": "Vue.js v2.0.0-alpha.8 bug",
        "labels": "bug",
        "id": 123938
    },
    {
        "body": "The `appear: true` option has no effect for transitions that are globally registered. They work fine with inline transition objects though. Here's [the repro](https://jsfiddle.net/aav0hunb/).\n",
        "title": "`appear: true` broken for global transitions",
        "labels": "bug",
        "id": 123939
    },
    {
        "body": "### Vue.js version\n\n2.x\n### Reproduction Link\n\nhttps://jsfiddle.net/0jjufkpb/\n### Steps to reproduce\n\nJust run the fiddle. \n### What is Expected?\n\n`arr` is iterated, each item and its type (`string`) are displayed.\n### What is actually happening?\n\nItems are lost (`typeof` returns `undefined`).\n\nWill look deeper into this. If @yyx990803 could give a hint \u2013 or clarify that this is the expected behavior somehow \u2013 that would be great.\n",
        "title": "[2.0] v-once and v-for don't seem to play nice together",
        "labels": "bug",
        "id": 123940
    },
    {
        "body": "### Vue.js version\n\n2.0.0-alpha.5, 2.0.0-alpha.6 (haven't checked previous releases)\n### Reproduction Link\n\nhttps://jsfiddle.net/9mt1fjrg/\n### Steps to reproduce\n\nType any letter into input field.\n### What is Expected?\n\nShouldn't display NaN value.\n",
        "title": "[Vue 2.0] text input with number modifier displays NaN value",
        "labels": "bug",
        "id": 123941
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\n\u4e2d\u6587\u7528\u6237\uff1a\u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n Vue.js v2.0.0-alpha.5\n### Reproduction Link\n\nhttps://jsbin.com/xedizivigi/edit?html,js,console,output\n### Steps to reproduce\n\nFirst read  'bar.car.log', then assign  bar.car.log = 'baoma'\n### What is Expected?\n\nfoo object will not update\n### What is actually happening?\n\nfoo object  will also be updated\n",
        "title": "Multiple vue instance bug",
        "labels": "bug",
        "id": 123942
    },
    {
        "body": "As [reported here](https://github.com/vuejs-templates/webpack/issues/162), [this simple app](http://jsbin.com/bulahadezi/1/edit?html,console,output):\n\n``` html\n<app></app>\n\n<script>  \n  Vue.component('app', {\n    template: '\\\n      <form method=\"POST\">\\\n        <input name=\"attributes\">\\\n      </form>\\\n    '\n  })\n\n  new Vue({ el: 'body' })\n</script>\n```\n\nthrows:\n\n```\nvue.js:235 Uncaught RangeError: Invalid array length\n```\n\nIf changing the form method to something other than `POST` or the input name to something other than `attributes`, it seems to work fine.\n",
        "title": "RangeError with form of method \"POST",
        "labels": "bug",
        "id": 123943
    },
    {
        "body": "Hi, I try to use renderToString to the elements with v-text or v-html. It doesn't work well.\n\nThis is the code to reproduce. \n\n``` javascript\nimport Vue from './vue/dist/vue.common.js';\nimport { compileToFunctions } from './vue/packages/vue-template-compiler';\nimport createRenderer from './vue/packages/vue-server-renderer';\nconst { renderToString } = createRenderer();\n\nlet compileTemplate = (options) => {\n  const res = compileToFunctions(options.template, {\n    preserveWhitespace: false\n  });\n  Object.assign(options, res);\n  console.assert(typeof options.render === 'function');\n  delete options.template;\n  return options;\n};\n\nlet Foo = Vue.extend(compileTemplate({\n  template: `\n<div>\n  <p v-text=\"text\"></p>\n  <p v-html=\"text\"></p>\n</div>\n  `,\n  data: function() {\n    return {\n      text: '<span>foobar</span>',\n    };\n  }\n}));\n\nrenderToString(new Vue(compileTemplate({\n  template: `<foo></foo>`,\n  components: {\n    foo: Foo\n  }\n})), (err, res) => {\n  console.log(res);\n});\n\n// output: <div server-rendered=\"true\"><p></p> <p></p></div>\n```\n\nIs this a bug or a feature? It seems to be resolved in this fix ( https://github.com/kitak/vue/commit/8d4610652787979b2dd69414bc62c5aca10f0b85 ). If it is good, I will send PullRequest.\n",
        "title": "[2.0] Server-side rendering with v-text or v-html doesn't work well",
        "labels": "bug",
        "id": 123944
    },
    {
        "body": "[Here's a minimal viable example.](http://jsbin.com/xababikije/edit?html,console,output)\n\nNot a huge deal, but:\n\n``` html\n<pre><code>{{{\n  code\n}}}</pre></code>\n```\n\nis often preferable to:\n\n``` html\n<pre><code>\n  {{{ code }}}\n</pre></code>\n```\n\nsince preformatted text would preserve the line breaks at the beginning and end of the code block.\n",
        "title": "Multiline HTML interpolation fails on 1.0.24",
        "labels": "bug",
        "id": 123945
    },
    {
        "body": "### Vue.js version\n\n1.0.24\n### Reproduction Link\n\nhttps://github.com/kucherenkovova/piano/tree/BUG-report-vue\ngo to demo folder and open index.html\n### Steps to reproduce\n\nInput something into the `Email layout` input field.\nPut the cursor in the middle of your text.\nHit backspace on the virtual keyboard.\n### What is Expected?\n\nThe text will be removed in the cursor position.\n### What is actually happening?\n\nThe text removes from the end of the string. `selectionStart` attribute is changed somehow by Vue.js \n\nP.S. You can test it on other input elements which do not have `v-model` on it.Everything will work well.\n",
        "title": "v-model breaks selectionStart",
        "labels": "bug",
        "id": 123946
    },
    {
        "body": "### Vue.js version\n\n1.0.24\n### Reproduction Link\n\nhttp://codepen.io/schleumer/pen/NrqGxg\n### Steps to reproduce\n\nUse `array.$set` in a multidimensional array with primitive values.\n### What is Expected?\n\nThe value to change and the DOM to update.\n### What is actually happening?\n\nThe value changes, but it's removed from the DOM whilst exists in the array.\n",
        "title": "array.$set removing item from the DOM",
        "labels": "bug",
        "id": 123947
    },
    {
        "body": "### Vue.js version\n\n1.0.24\n### Reproduction Link\n\nhttp://jsbin.com/yesozewezu/1/edit?html,js,output\n### Steps to reproduce\n\nFor one time binding, undefined value would display as \"undefined\", it's different from two-way binding.\n### What is Expected?\n\nShould display as empty.\n### What is actually happening?\n\nDisplay undefined.\n",
        "title": "[BUG] one time binding doesn't deal with null like value properly",
        "labels": "bug",
        "id": 123948
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n> = 1.0.18 (any version i think)\n### Reproduction Link\n\nhttp://www.webpackbin.com/VyoNXXrXb\n### What is Expected?\n\nIf dynamically binded transition is updated, and previous transition was vue default, v-transition class should be removed.\n### What is actually happening?\n\nCheck the example. If we change transition from default, v-transition class is not being removed. But when we have some custom transition on start e.g. slide and we change it to fade then slide-transition class is properly removed.\n",
        "title": "Default v-transition class is not being removed after transition is updated",
        "labels": "bug",
        "id": 123949
    },
    {
        "body": "### Vue.js version\n\n1.0.24\n### Reproduction Link\n\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub reprository that can reproduce the bug. -->\n### Steps to reproduce\n\n``` js\nnew Vue({\n  data: {\n    person: {\n      name: 'Felix',\n    },\n  },\n});\n```\n\n``` html\n<pre>{{ person | json 0 }}</pre>\n```\n### What is Expected?\n\n``` js\n{\"name\":\"Felix\"}\n```\n### What is actually happening?\n\n``` js\n{\n  \"name\": \"Felix\"\n}\n```\n",
        "title": "The \"json\" filter not support to use \"0\" as parameter",
        "labels": "bug",
        "id": 123950
    },
    {
        "body": "### Vue.js version\n\n1.0.23\n### Reproduction Link\n\nNone, since it is related to chrome extension\n### Steps to reproduce\n\nI am using cVim chrome-extension, it will insert `<iframe src=\"chrome-extension://ihlenndgcmojhcghmfjfneahoeklbjjh/cmdline_frame.html\" id=\"cVim-command-frame\"></iframe>` into body\n\nI am using vue-router, and it is throwing error to block the app to run:\n\n```\nvue.common.js:1140\nUncaught SecurityError: Blocked a frame with origin \"https://xxxxx\" from accessing a frame with origin \"chrome-extension://ihlenndgcmojhcghmfjfneahoeklbjjh\".  The frame requesting access has a protocol of \"https\", the frame being accessed has a protocol of \"chrome-extension\". Protocols must match.\n```\n\nIt is failing at:\n\n``` js\nfunction inDoc(node, win) {\n  win = win || window;\n  var doc = win.document.documentElement;  // !!! here --> Protocols must match\n  var parent = node && node.parentNode;\n  var isInDoc = doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n  if (!isInDoc) {\n    var frames = win.frames;\n    if (frames) {\n      for (var i = 0; i < frames.length; i++) {\n        if (inDoc(node, frames[i])) {\n          return true;\n        }\n      }\n    }\n  }\n  return isInDoc;\n}\n```\n### What is Expected?\n\nEven with a chrome-extension, app should run.\n### What is actually happening?\n\nDue to the error, vue app is not running, giving a blank screen to users.\n",
        "title": "inDoc(node, win) failed due to mismatch protocol (https and chrome-extension)",
        "labels": "bug",
        "id": 123951
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.22 (works fine in 1.0.21)\n### Reproduction Link\n\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub reprository that can reproduce the bug. -->\n\nhttp://www.webpackbin.com/EyyK3F9b-\n### Steps to reproduce\n\nclick button 'view2' then click button 'view1'\n### What is Expected?\n\nboth 'template slot content' and 'nontemplate slot content' should show.\n### What is actually happening?\n\n'template slot content' disappeared\n",
        "title": "template slot content disappears on subsequent visit",
        "labels": "bug",
        "id": 123952
    },
    {
        "body": "### Vue.js version\n\n1.0.22\n### Reproduction Link\n\nhttp://codepen.io/kelt/pen/KzJYqE\n### Steps to reproduce\n\nCreate a new Vue instance with el that points to loaded iframe body. Inside this iframe body create a component. The ready method is not called on this component even though the component is rendered with it's template.\n### What is Expected?\n\nI expected the ready function to be called on the 'editable' component.\n### What is actually happening?\n\nThe ready function is never being invoked.\n",
        "title": "Component ready() not firing for iframed vue instance",
        "labels": "bug",
        "id": 123953
    },
    {
        "body": "### Vue.js version\n\n1.0.22\n### Reproduction Link\n\nhttp://www.webpackbin.com/4yVzt9qWZ\n### What is Expected?\n\nWhen some data passed to custom component as a prop is updated inside watcher callback, then this change should be detected by prop watcher in custom component.\n### What is actually happening?\n\nWatcher in custom component is not aware about this change. But when i update data passed to component directly, not inside watcher, then watcher callback inside custom component is fired properly.\n\nI noticed this issue have appeared in 1.0.22 and does not occur in pevious versions of Vue.\n",
        "title": "Watcher in custom component is not fired when prop value is updated from another watcher",
        "labels": "bug",
        "id": 123954
    },
    {
        "body": "### Vue.js version\n\n1.0.21\n### Reproduction Link\n\nhttp://jsfiddle.net/5sH6A/317/\n",
        "title": "\"literal\" modifier on custom directive causes v-if to be ignored",
        "labels": "bug",
        "id": 123955
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.21\n### Reproduction Link\n\nhttp://jsbin.com/doxonuviwe/edit?html\n### Steps to reproduce\n- Register a Vue component with data function.\n\n``` javascript\n\nVue.component('my-hello', {\n    data: function() {\n        console.log('hello')\n        return {};\n    }\n});\n\nnew Vue({\n    el: 'body'\n});\n```\n- Instantiate the component.\n\n``` html\n<my-hello></my-hello>\n<my-hello></my-hello>\n```\n- You will see in the console (DevTool):\n\n```\nhello\nhello\nhello\nhello\n```\n### What is Expected?\n\nData function should be called twice since there is only two instances of Vue component.\n### What is actually happening?\n\nData function called four times.\n### Quick Fix\n\nSet the data in the `created` hook.\n\n```\nVue.component('my-component', {\n    created: function() {\n        this.$data  = {}; // Set your data here.\n    },\n});\n```\n\nHope this helpful.\n",
        "title": "Data function is called twice not once.",
        "labels": "bug",
        "id": 123956
    },
    {
        "body": "### Vue.js version\n\n1.0.21\n### Reproduction Link\n\nhttp://codepen.io/pkawiak/pen/grezPW?editors=1111\n### Steps to reproduce\n\nClick `model.log` and `model.log()` buttons and observe console. Replace model by clicking `Replace Model` button and repeat clicking `model.log` and `model.log()` buttons.\n### What is Expected?\n1. Click `model.log()`: `Model 1` message appears in console.\n2. Click `model.log`: `Model 1` message appears in console.\n3. Click `Replace Model`: model is replaced.\n4. Click `model.log()`: `Model 2` message appears in the console.\n5. Click `model.log`: `Model 2` message appears in the console.\n### What is actually happening?\n1. Click `model.log()`: `Model 1` message appears in console.\n2. Click `model.log`: `Model 1` message appears in console.\n3. Click `Replace Model`: model is replaced.\n4. Click `model.log()`: `Model 2` message appears in the console.\n5. Click `model.log`: **`Model 1`** message appears in the console.\n",
        "title": "@event expression is not handled correctly",
        "labels": "bug",
        "id": 123957
    },
    {
        "body": "### Vue.js version\n\n1.0.21\n### Reproduction Link\n\nI was not able to reproduce it in a jsfiddle. I can upload the whole thing to webpackbin if needed\nhttps://github.com/GuillaumeLeclerc/vue-seo/blob/master/src/components/headDisplayer.vue\n\n(When the component is used multiples times)\n### Steps to reproduce\n\nCreate multiple elements with a :is attribute.\n### What is Expected?\n\nThe :is attribute is removed from the markup after being compiled\n### What is actually happening?\n\nAll the :is attribute are visible in the dom (except for the first one)\n\n``` html\n<!-- This is working for the first one -->\n<link rel=\"alternate\" hreflang=\"fr\" href=\"google.fr\"> \n<!-- all the following have the is attribute displayed -->\n<link rel=\"alternate\" is=\"function VueComponent(options) { this._init(options) }\" hreflang=\"de\" href=\"google.fr\"> \n```\n\n**Node** the behavior is perfectly correct just the `is` attribute is displayed as a string.\n\nThank you\n",
        "title": "is attribute still present in the DOM after compilation",
        "labels": "bug",
        "id": 123958
    },
    {
        "body": "### Vue.js version\n\n1.0.21\n### Reproduction Link\n\nhttps://jsfiddle.net/hisland/f9gdg0d1/\n### Steps to reproduce\n\ni want a condition v-for\n\n```\ntemplate(v-for=\"a in 6\" v-if=\"a%2\")\n  p {{a}}\n```\n\ni got 0-5, i don't want this\np 0\np 1\np 2\np 3\np 4\np 5\n\n```\n  template(v-for=\"a in 6\")\n    template(v-if=\"a%2\")\n      p {{a}}\n```\n\nthis is ok\np 1\np 3\np 5\n### What is Expected?\n\ncan i use template(v-for=\"a in 6\" v-if=\"a%2\")?\n",
        "title": "template-tag, v-for, v-if together, not as expect",
        "labels": "bug",
        "id": 123959
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.21\n### Reproduction Link\n\nhttp://www.webpackbin.com/412B9bgJb\n### Steps to reproduce\n\nclick Toggle button\n### What is Expected?\n\nwhen MyComponent is showing, the msg should be hidden\n### What is actually happening?\n\nthe msg always shows\n",
        "title": "v-else not work when together with v-show on custom component",
        "labels": "bug",
        "id": 123960
    },
    {
        "body": "<!--\nThank you for contributing! Please carefully read the following before opening your issue.\n\nGot a question?\n===============\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\n\n- Read the docs: http://vuejs.org/guide/\n- Watch video tutorials: https://laracasts.com/series/learning-vue-step-by-step\n- Ask in the Gitter chat room: https://gitter.im/vuejs/vue\n- Ask on the forums: http://forum.vuejs.org/\n- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=vue.js\n\nReporting a bug?\n================\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\n\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\n\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\n\n- It is recommended that you make a JSFiddle/JSBin/Codepen to demonstrate your issue. You could start with [this template](http://jsfiddle.net/5sH6A/) that already includes the latest version of Vue.\n\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\n\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\n\nHave a feature request?\n=======================\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\n-->\n\n<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.20\n### Reproduction Link\n\nHere should not be able to load devtools - http://shop.jakubkotek.cz/#!/ . I use devtools false config.\n### Steps to reproduce\n\nVue.config.devtools = false\n### What is Expected?\n\nVue-devtools will not be loaded.\n### What is actually happening?\n\nVue-devtools is actually loaded.\n",
        "title": "Vue.config.devtools with no effect",
        "labels": "bug",
        "id": 123961
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.20\n### Reproduction Link\n\nhttps://jsfiddle.net/2so6kua0/2/\n### Steps to reproduce\n\nStart example\n### What is Expected?\n\nWe should get \n\n```\nval == 1\nval == 2\nval == 3\nval == 4\nval == 5\nval == 6\n```\n### What is actually happening?\n\nIn firefox we get nothing, but if we will change \n`<div v-for=\"val in arr\" v-if=\"val\">val == {{val}}</div>`\nto \n\n```\n<template v-for=\"val in arr\">\n  <div v-if=\"val\">val == {{val}}</div>\n</template>\n```\n\nall work correctly.\n",
        "title": "Problem with v-for + v-if in firefox",
        "labels": "bug",
        "id": 123962
    },
    {
        "body": "### Vue.js version\n\n1.0.20\n### Reproduction Link\n\nhttps://jsfiddle.net/oe7axeab/668/\n\nThen, how can I set reactivity on a coerced prop so I could extend a prop with multiple new reactive property  (with Object.assign(prop, { a: 0, b: 2}) , for example)\n",
        "title": "Coerced props returning objects are not reactive",
        "labels": "bug",
        "id": 123963
    },
    {
        "body": "There is a wired bug in latest vue. Everything is OK when clicking on tabs slowly. Keep switching between tags, if clicking too fast without the previous transition finished there will be a redirect loop. \n\nHere is the sample code:\n[https://github.com/xueenda/vue-redirect-loop](https://github.com/xueenda/vue-redirect-loop)\n\nIt's better to test on phone with both fingers tabbing fast on the footer tab.\n\nHere is the screenshot of the error:\n[https://raw.githubusercontent.com/xueenda/vue-redirect-loop/master/page1.pic.jpg](https://raw.githubusercontent.com/xueenda/vue-redirect-loop/master/page1.pic.jpg)\n[https://raw.githubusercontent.com/xueenda/vue-redirect-loop/master/error.pic_hd.jpg](https://raw.githubusercontent.com/xueenda/vue-redirect-loop/master/error.pic_hd.jpg)\n",
        "title": "Error: nextSibling of null",
        "labels": "bug",
        "id": 123964
    },
    {
        "body": "<!-- BUG REPORT TEMPLATE -->\n### Vue.js version\n\n1.0.17\n### Reproduction Link\n\nhttps://jsfiddle.net/4300L6uz/\n### Steps to reproduce\n\n1)in a custom-element, add extra space at end of class attribute, eg `class=\"p1 p2\"` => `class=\"p1 p2 \"` \n\nI have not checked other attributes. the problem may exist in them as well.\n### What is Expected?\n\nVue should trim the extra spaces and proceed silently\n### What is actually happening?\n\nVue throws syntax error, which halts the app.\n\nThe workaround: trim those extra spaces. This problem is very trivial, but its effects are not.\n",
        "title": "Untrimmed spaces in class attribute causing syntax error",
        "labels": "bug",
        "id": 123965
    },
    {
        "body": "### Vue.js version\n\n1.0.17\n### Reproduction Link\n\nhttps://jsfiddle.net/fenivana/7jcoogfc/\n### Steps to reproduce\n\nClick the button in jsfiddle demo\n### What is Expected?\n\nThe component rendered without error.\n### What is actually happening?\n\nUncaught TypeError: Cannot read property 'reused' of undefined (vue.js:4116)\n",
        "title": "<component v-for>  problem",
        "labels": "bug",
        "id": 123966
    },
    {
        "body": "### Vue.js version\n\n1.0.16\n### Reproduction Link\n\nhttps://jsfiddle.net/4eh989ee/2/\n### Steps to reproduce\n1. Focus on the only input available within the `output` window, type a single `k` letter and immediately hit enter.\n2. Clear the text in the output.\n3. Type a single `k` letter, wait a two (2) seconds or more, and hit enter \n### What is Expected?\n1. Alert is show with the contents reading `name: \"\"`\n2. N/A\n3. Alert is show with the contents reading `name: \"k\"`\n### What is actually happening?\n\nThe model does not get set when the form is submitted.\n### Note\n\nThis is a duplicate of issue #2028. I commented after it was closed but didn't get any feedback. I don't know if anyone is being notified of the comments following the close of the issue.\n",
        "title": "Debounced model is not updated",
        "labels": "bug",
        "id": 123967
    },
    {
        "body": "It seems that no `transition leave` happens when using `v-show` with CSS transition on SVG elements in Chrome. Only `transition enter` happens. But with Firefox everything is working fine.\n\n`v-if` may be affected too.\n### Chrome version\n\n48.0.2564.103 (64-bit) OS X.\n### Vue.js version\n\n1.0.16\n### Reproduction Link\n\nhttp://jsfiddle.net/fobdy/bd70chpp/1/\n### Steps to reproduce\n\nJust use some fade css transition with `v-show` on any SVG element.\n### What is Expected?\n\nElement fades in and out.\n### What is actually happening?\n\nElement fades in, but no fade out happens. Element is just hiding.\n\nUpdate: in Firefox it's working periodically. Sometimes strange behavior is also detected.\n",
        "title": "SVG element v-show transition Chrome problem",
        "labels": "bug",
        "id": 123968
    },
    {
        "body": "### Vue.js version\n\n1.0.16\n### Reproduction Link\n\nhttps://jsfiddle.net/5sH6A/275/\nCheck JavaScript console for error.\n### Steps to reproduce\n\nAdd a non-configurable, but enumerable property to component data/props.\n### What is expected?\n\nVue.js should _not_ be redefining properties that are not configurable in `defineReactive` as by virtue of being non-configurable, they cannot change anyway so observing them is pointless (and also throws an error).\n\nThis bug currently makes it impossible to add Three.js objects to Vue components without causing this error. However a current workaround is to set `convertAllProperties = true`, as this triggers checks to ensure that non-configurable properties are not redefined.\n### What is actually happening?\n\n`Uncaught TypeError: Cannot redefine property: <property name>`\n",
        "title": "Vue tries to observe enumerable but non-configurable properties",
        "labels": "bug",
        "id": 123969
    },
    {
        "body": "``` jade\n# main\ncomp1\n  div(slot=\"someName\")\n\n# comp1\n.comp1\n  comp2\n    slot(name=\"someName\")\n  .wrongPlace\n    slot\n\n#comp2\n.comp2\n  .rightPlace\n    slot(name=\"someName\")\n  .wrongPlace\n    slot\n```\n\noutput:\n\n``` jade\n.comp1\n  .comp2\n    .rightPlace\n    .wrongPlace\n      div(slot=\"someName\")\n  .wrongPlace\n    div(slot=\"someName\")\n```\n\nhttps://jsfiddle.net/paulpflug/p2oe550c/\n",
        "title": "Named nested slot not working",
        "labels": "bug",
        "id": 123970
    },
    {
        "body": "Apologies for the long title, here's a [JSFiddle](http://jsfiddle.net/5sH6A/261/).\n\nHere are the steps to reproduce it, JSFiddle references in brackets:\n- Create a component with a slot that has a `v-else` directive on it (`MyWrapper`).\n- Create another component that imports/uses the first one (`MyComponent`).\n- In the second component, create a custom directive with bind/unbind functions (`myDirective`).\n- In the template of the second component, use the first component (wrapper) and insert an element with the custom directive inside it so it gets rendered in place of the slot.\n- Call `vm.$destroy()` on your instance. This should call `unbind` on the custom directive, but it doesn't.\n\nIf you remove `v-else` from the slot in `MyWrapper`, everything works as expected. My current workaround is simply replacing\n\n``` html\n<div v-if=\"someExpression\"></div>\n<slot v-else></slot>\n```\n\nwith\n\n``` html\n<div v-if=\"someExpression\"></div>\n<slot v-if=\"!someExpression\"></slot>\n```\n\nTested with latest (1.0.15) version.\n",
        "title": "Custom directive passed through a slot with v-else isn't unbound on vm.$destroy",
        "labels": "bug",
        "id": 123971
    },
    {
        "body": "In the following example, slot1 is getting inserted twice. Is this normal? \nAny idea why it's behaving like this?\n\nhttps://jsfiddle.net/6tc2wzne/\n",
        "title": "Named slot is getting inserted twice",
        "labels": "bug",
        "id": 123972
    },
    {
        "body": "\u5bf9\u4e8e\u901a\u8fc7 vm  \u65b0\u589e\u6570\u636e\uff0c  `v-for` \u5faa\u73af\u751f\u6210\u7684\u5143\u7d20\u4e2d\u4f7f\u7528 `v-show` \u548c `transition` \u4e14 `v-show` \u503c\u4e3a `false`\u7684\u5143\u7d20\uff0c\u4e0d\u80fd\u771f\u6b63\u7684\u9690\u85cf\u3002debug \u53d1\u73b0\uff0c \u5143\u7d20\u7684\u6700\u7ec8\u72b6\u6001\u662f `class=\"expand-transition expand-leave\"`  \u800c\u4e0d\u662f `display:none`. \u6ca1\u6709 `transition` \u7684\u663e\u793a\u6b63\u5e38\u3002\n\n\u91cd\u73b0\u8bf7\u770b\uff1a http://jsbin.com/pecage/edit?html,js,output\n\n\u53e6\uff1a v1.0.7 \u7248\u672c\u6ca1\u8fd9\u4e2a\u95ee\u9898\uff0c \u4e4b\u540e\u7684\u7248\u672c\u90fd\u6709\u8fd9\u4e2a\u95ee\u9898\u3002\n",
        "title": "transition \u52a8\u753b\u6548\u679c\u5bf9\u4e8e\u901a\u8fc7 vm \u65b0\u589e\u7684\u6570\u636e\u4e0d\u80fd\u6b63\u5e38\u6267\u884c",
        "labels": "bug",
        "id": 123973
    },
    {
        "body": "I'm trying out components with slots and something weird is happening.\nMy component is a bootstrap modal, I made it work by passing the boolean prop showEditStateModal which shows or hides the modal. It has a header, body (default) and a footer slot.\n\nThe problem is, the first time I open the modal after the page load, it correctly copies the slot div to the right place, but also copies it to the default slot (body).\nThe dom looks like this:\n\n``` html\n<div class=\"modal-content\">\n    <div class=\"modal-header undefined\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>\n        <h4 class=\"modal-title\">edit state</h4>\n    </div>\n    <div class=\"modal-body\">\n        <p slot=\"footer\">x</p>\n    </div>\n    <div class=\"modal-footer\">\n        <p slot=\"footer\">x</p>\n    </div>\n</div>\n```\n\nAfter I close the modal, it correctly copies the element to the footer only. It's only the first time that I open the model that the problem happens.\n\nAlso, theres another problem, since I'm not giving any content besides the footer slot, the default slot (body), that is in the component's template, should be printed. So I should see \"xyz\" in the body, but it's empty.\n\nHere are my templates:\n\nParent:\n\n``` html\n<modal v-bind:show.sync=\"showEditStateModal\" title=\"edit state\">\n    <p slot=\"footer\">x</p>\n</modal>\n```\n\nComponent:\n\n``` html\n<script type=\"x-template\" id=\"modal-template\">\n    <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\"\n        v-modal=\"show\"\n        v-if=\"show\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header {{headerClass}}\">\n                    <slot name=\"header\">\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>\n                        <h4 class=\"modal-title\" v-if=\"title\" v-text=\"title\"></h4>\n                    </slot>\n                </div>\n                <div class=\"modal-body\">\n                    <slot>xyz</slot>\n                </div>\n                <div class=\"modal-footer\">\n                    <slot name=\"footer\"></slot>\n                </div>\n            </div>\n        </div>\n    </div>\n</script>\n```\n",
        "title": "Calling slot not being removed the first time",
        "labels": "bug",
        "id": 123974
    },
    {
        "body": "As explained in [this forum post](http://forum.vuejs.org/topic/507/v-model-on-missing-properties) and demonstrated by [this fiddle](http://jsfiddle.net/eLexpfqu/2/), if you have something like `v-model=\"obj['prefix-' + key]\"`, you occasionally get this:\n\n```\nCannot read property \"get\" of undefined\n```\n\nor that:\n\n```\n[Vue warn]: Invalid setter function body:  'prefix-'+scope.key\n```\n",
        "title": "v-model inside v-for doesn't set value when property name is dynamic",
        "labels": "bug",
        "id": 123975
    },
    {
        "body": "`afterEnter`\u94a9\u5b50\u5e76\u6ca1\u6709\u7b49\u5230transition\u7ed3\u675f\u624d\u8c03\u7528\uff0c\u800c\u662f\u5728transition\u521a\u89e6\u53d1\u540e\u5c31\u8c03\u7528\u4e86\uff1f\n\n\u6211\u4ee5\u4e3a\u6211\u5199\u9519\u4e86\uff0c\u7136\u800c\u6211\u770b\u4e86[\u5b98\u7f51\u7684\u4f8b\u5b50](http://vuejs.org/guide/transitions.html#Example)\uff0cafterEnter\u4e5f\u662f\u5728transition\u7ed3\u675f\u4e4b\u524d\u5c31\u8c03\u7528\u4e86\u3002\u4f46\u662fafterLeave\u786e\u5b9e\u5728transition\u7ed3\u675f\u4e4b\u540e\u624d\u8c03\u7528\u3002\n\n\u4e3a\u4ec0\u4e48afterEnter\u6ca1\u6709\u50cfafterLeave\u90a3\u6837\uff0c\u5728transition\u7ed3\u675f\u4e4b\u540e\u624d\u8c03\u7528\u5462\uff1f\u8fd9\u5bf9\u6211\u5199\u8fc7\u6e21\u6548\u679c\u7684\u7ec4\u4ef6\u5f71\u54cd\u5f88\u5927\uff0c\u56e0\u4e3a\u5f88\u591a\u65f6\u5019\u9700\u8981\u5728\u8fc7\u6e21\u7ed3\u675f\u7684\u65f6\u5019\u5199\u56de\u8c03\uff0c\u800c\u8fc7\u6e21\u7684\u65f6\u95f4\u53c8\u662f\u5728CSS\u91cc\u9762\u63a7\u5236\u3002\n\n`vue`\u7684\u7248\u672c\u521a\u5347\u7ea7\u52301.0.7\uff0cchrome\u548cfirefox\u90fd\u8bd5\u8fc7\u4e86\u3002\n",
        "title": "The 'afterEnter' hook dose not 'wait for the transition to finish'",
        "labels": "bug",
        "id": 123976
    },
    {
        "body": "I see the following warning when I have multiple instances of a component on a page:\n\n`v-ref:my-inner must be used on a child component. Found on <div>.`\n\nSee repro: http://jsfiddle.net/5sH6A/198/\n\nThe warning started appearing with v1.0.5.  I'm not having any issues beyond seeing the warning.\n",
        "title": "v-ref inside component that appears multiple times",
        "labels": "bug",
        "id": 123977
    },
    {
        "body": "Demo: http://jsfiddle.net/simplesmiler/nmsc5cry/4/\nExplanation: Inside a component with a two-way synced array prop `items`,  if `items` is assigned after `items.push` or any other method, then the assignment gets ignored.\n\nForeseeing the question \"why mutate before assign\", there are use cases. For example:\n\n``` js\nthis.items = this.items.splice(start, length); // keep only elements from `start` to `start+length`\n```\n\n---\n\nEDIT: Actually use case above can be solved without mutation, using `slice` instead of `splice`.\n\n---\n\nCredits to @Kerruba for raising the issue in chat.\n",
        "title": "Array mutation methods misbehave under certain circumstances",
        "labels": "bug",
        "id": 123978
    },
    {
        "body": "Hi. I am using Vue 1.0.3 and trying to bind params into custom directive, but all params parsed as strings. This problem can be seen in this example http://vuejs.org/examples/select2.html on vuejs site. `Options` param no longer parsed as array, its just a string. I tried to use `v-bind`, but its also convert params to string `[Object, Object]`.\n",
        "title": "Custom directive params binding problem",
        "labels": "bug",
        "id": 123979
    },
    {
        "body": "\u4ee5\u5b98\u65b9\u7684grid\u793a\u4f8b\u4e3a\u5217\uff01\n1\u3001html\u4ee3\u7801\n\n``` html\n<div @click=\"sortBy(column) | expression column.sortable\">\n```\n\n2\u3001\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668expression\u4ee3\u7801\uff1a\n\n``` js\n  Vue.filter('expression', function (handler, expression) {\n    if (!handler) return;\n    if (expression) {\n        return function (e) {\n            return handler.call(this, e)\n        }\n    }\n});\n```\n\n-------------------------------------\u62a5\u9519--------------------------------------------\n[Vue warn]: v-on:click=\"sortBy(column)\" expects a function value, got undefined\n\n\u8bf4\u660e\uff1a0.12\u7248\u672c\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\uff01\n",
        "title": "1.0.3 \u7ed1\u5b9aclick\u4e8b\u4ef6\u52a0\u8fc7\u6ee4\u5668\u540e\uff0c\u4e0d\u80fd\u627e\u5230\u7ed1\u5b9a\u7684\u65b9\u6cd5\uff01",
        "labels": "bug",
        "id": 123980
    },
    {
        "body": "``` html\n<comp v-custom-directive></comp>\n```\n\nAs above, if we apply a custom directive on a component, then vue will complain the custom directive not found because the directive is resolved on the component's options, not its context.\n\n Here is an online [example](https://jsfiddle.net/TerenceZ/ee5b5p99/1/). An error message is logged in the console.\n\nTest version: 1.0.0-beta.4\n",
        "title": "fail to resolve custom directive on component",
        "labels": "bug",
        "id": 123981
    },
    {
        "body": "I am using 1.0.0-rc.1 and I think I found an issue with using v-for that repeats vue components and those vue components have hooks to detached. \n\nYou can see the following fiddle http://jsfiddle.net/maverix7/hw8onjow/ Observe the console for every addItem and removeItem I expect to see \"attached\" and \"detached\" in the console, however we can see only \"attached\".\n\nI think the problem lies on when the v-for notifies the children, on the lines of https://github.com/yyx990803/vue/blob/3ff16df8087a53fbabb3dfd2bb694a75f9f34d08/src/directives/public/for.js#L149, the problem is that on the previous line the execution lead to removing the so following up when we iterate over the children to notify them, they are missing.\n\nI am still very new to vue.js so I may be wrong. By the way, so far I really like it!\n",
        "title": "v-for not triggering detach on children",
        "labels": "bug",
        "id": 123982
    },
    {
        "body": "Sometimes we would abstract some behaviours into mixins, for example: `A`, `B` and `C`. If `A` is mixed in `B` and `C`, and if the `A` has a required prop named `a`, then when component `D` requires `B` and `C` in mixins, vue will warn the `a` is required even if a value passed to `a`. Because one of the prop check from `B` or `C` digests the value of `a`, leaving another one nothing.\n\nBy the way, are there any suggestions to use / compose mixins? Because of the features of mixins,   sometimes some implicit conflicts will raise up and not easy to find out. And in addition, the mixins require the component to obey some implicit interfaces, which lead to hard to maintain the codes.\n",
        "title": "warns when duplicated props from mixins",
        "labels": "bug",
        "id": 123983
    },
    {
        "body": "Hard coding the component name makes it resolvable again\n\nThis works: `<component :is=\"'item'\">`\nhttp://jsfiddle.net/3dgb30mr/1/\n\nThis doesnt: `<component :is=\"itemComponent\">` (itemComponent is a variable with a value of 'item')\nhttp://jsfiddle.net/3dgb30mr/\n",
        "title": "`<component :is>` fails to resolve components if using a variable passed in via a prop using the expression syntax (`:prop=\"variable\"`) (1.0.0-alpha-8)",
        "labels": "bug",
        "id": 123984
    },
    {
        "body": "ref: #1363\n",
        "title": "`v-for` on Object not updating correctly when the Object is mutated via `$set`",
        "labels": "bug",
        "id": 123985
    },
    {
        "body": "I have trouble migrating following code to `Vue 1.0`. I use `1.0.0-alpha.6` as a migration path.\n\n``` html\n<label v-repeat=\"param in params\">\n    {{$key}} : <partial :name=\"'editor-'+param.type\"></partial>\n</label>\n```\n\nVue setup\n\n``` javascript\nnew Vue({\n    el: 'body',\n    data: {\n        params: {\n            paramA : {\n                type: 'number',\n                value: 42\n            }\n        },\n    },\n    partials: {\n        'editor-number': '<input v-model=\"param.value\" type=\"number\">'\n    }\n})\n```\n\nas the [`v-for` version](http://jsfiddle.net/jj3rgvh3/) throws warnings and an error i believe this to be a bug\n",
        "title": "migrate from `v-repeat` to `v-for` while using partial inside the loop",
        "labels": "bug",
        "id": 123986
    },
    {
        "body": "This is the same issue as #684 but with vue.js 0.12.\n\nHere is a fiddle that illustrate it: http://jsfiddle.net/noirbizarre/wnwfa7s7/\n",
        "title": "Components don't get attached if transcluded with v-if",
        "labels": "bug",
        "id": 123987
    },
    {
        "body": "When compiling the example followed, the console will print the error `Error when evaluating the \"item.value\"`, which is raised by the `slot` directive called in the content linker in `_compile` function (`src/instance/lifecycle`).\n\n``` html\n<comp v-for=\"item in items\">\n  {{item.value}}\n</comp>\n\n<template id=\"comp\">\n  <div>\n    <slot></slot>\n  </div>\n</template>\n```\n",
        "title": "error scope for component's slot when in `v-for`",
        "labels": "bug",
        "id": 123988
    },
    {
        "body": "Filters which process arrays and return a hash, eg a grafting operation like `groupBy`, lead to `v-repeat` not being evaluated as expected. An workaround is to use a method but is semantically not correct. cf [this fiddle](http://jsfiddle.net/vvqLatqw/1/)\n",
        "title": "filters changing arrays to objects break v-repeat",
        "labels": "bug",
        "id": 123989
    },
    {
        "body": "Ran into this after trying your suggestion from #1241:\n\nhttp://jsfiddle.net/nkovacs/a29fk09w/\n",
        "title": "Leave transition hook is called twice if css:false in in-out mode",
        "labels": "bug",
        "id": 123990
    },
    {
        "body": "It seems like there could be a problem with a shared props between two v-repeats, where one affects the other one. Please see JS fiddle for comments:\n\nhttps://jsfiddle.net/kzima/Lw01eg1p/4/\n",
        "title": "Scope inside v-repeat in <content> tag is affected by the component's v-repeat",
        "labels": "bug",
        "id": 123991
    },
    {
        "body": "\u5728\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7701\u7ea7\u7ea7\u8054component\u65f6\u53d1\u73b0\uff0c\u63d0\u4f9b\u4e2ademo\uff1ahttp://jsfiddle.net/4oa8anz4/\n\ndemo\u63d0\u4f9b\u7684\u662f\u5e02\u5728\u7701\u4e4b\u524d\u65f6\u7684\u6b63\u786e\u8868\u73b0\uff0c\u4f46\u53ea\u8981\u628alevel2\u7684\u5e02\u7ea7\u5143\u7d20\u79fb\u5230level1\u7684\u7701\u7ea7\u5143\u7d20\u4e4b\u540e\uff0c\u5c31\u4f1a\u62a5Cannot read property 'childNodes' of undefined\n",
        "title": "\u591a\u4e2aselect component\u65f6\u63d0\u793aCannot read property 'childNodes' of undefined",
        "labels": "bug",
        "id": 123992
    },
    {
        "body": "http://jsfiddle.net/nkovacs/7aeywqd8/\n\nComponent 2 waits for component 1 to leave. But before component 2 can begin animating in, the component is replaced, and component 3 doesn't wait for component 1 to leave, it animates in immediately.\n\nThe issue doesn't happen if you increase the second delay in the test method from 2000 to 2600. By then component 2 has started animating in, and component 3 waits for it to animate out.\n",
        "title": "Out-in transition doesn't work properly with three transitioning elements",
        "labels": "bug",
        "id": 123993
    },
    {
        "body": "Hi!\n\nI just noticed that it's possible to call a component et use v-class from outside and it will be properly merged with existing class but when you introduce a variable into the component class attribute, the outside v-class is ignored\n\nHere's a fiddle illustrating the bug: http://jsfiddle.net/noirbizarre/xcres8hr/3/\n",
        "title": "Variable in component outer element class deactivate the outside v-class",
        "labels": "bug",
        "id": 123994
    },
    {
        "body": "Because the `inIdent` state has two confused meanings: normal path indentifier and in-bracket indentifier. So `assertInvalidPath('a]')` will be failed\n\nMaybe I would try to pull a better one later.\n",
        "title": "parsePath('a]') will path through in parsers/path.js",
        "labels": "bug",
        "id": 123995
    },
    {
        "body": "[Try this fiddle](http://jsfiddle.net/5sH6A/122/)\nClick button, the blue rect should leave in 5s. During this time, click button again to cancel leave transition. Strangely, `leaveCancelled` hook doesn't be called but `enterCancelled` be called instead. You can see track info in the console.\n",
        "title": "'leaveCancelled ' not be called properly in v-transition",
        "labels": "bug",
        "id": 123996
    },
    {
        "body": "The following code snippet\n\n```\n<ul v-if=\"posts.length > 0\" v-cloak></ul>\n<ul v-show=\"posts.length > 0\" v-cloak></ul>\n<ul v-cloak></ul>\n```\n\nproduces such result\n\n```\n<ul v-cloak=\"\"></ul>\n<ul></ul>\n<ul></ul>\n```\n\nAnd element remain hidden even when `if=\"posts.length > 0\"` became `true`.\nI expected `v-cloak` to go away in all cases.\nIs it by design (special use case with `v-if`) ? I suppose it should be or fixed, or a warning added (about potential issue of v-if + v-cloak mixtures).\n",
        "title": "Using v-if/v-show with v-cloak",
        "labels": "bug",
        "id": 123997
    },
    {
        "body": "If I don't explicitly add them to the component element attribute\n",
        "title": "props with default values are not added to component data",
        "labels": "bug",
        "id": 123998
    },
    {
        "body": "vuejs/Discussion#231\n",
        "title": "`destroyed` hook not called when unbinding component",
        "labels": "bug",
        "id": 123999
    },
    {
        "body": "While trying this framework using `vue-loader` and `webpack` I noticed that the `ready` method on a child component isn't called. At first I though that it must be some problem with `vue-loader` after but building a reduced test cased I think this is a problem with `vue@0.12.5`.\n\nYou can find the test case [here](http://jsbin.com/cucowa/2/edit?js,output).\n",
        "title": "`ready` method is not called on child component",
        "labels": "bug",
        "id": 124000
    },
    {
        "body": "Tested with latest v.0.12.5, seems v-component does not work with v-repeat as it does with \"component is\" or \"my-component\". It would not be much problem if it was not for tables where the TR must be used.\n\nExample:\n\n```\n<tbody>\n   <tr v-component=\"my-component\" v-repeat=\"resources\" ></tr>\n</tbody>\n```\n\nI have created a [fiddle](http://jsfiddle.net/miljan/kbvzzgap/4/), where you can see is failing and the error in the console would be `Do not create a component that only contains a single other component - they will be mounted to the same element and cause conflict. Wrap it with an outer element`\n",
        "title": "Issue with v-component/v-repeat combined",
        "labels": "bug",
        "id": 124001
    },
    {
        "body": "I'm building a Chrome app with `0.12.1-csp` and when I use the minified version (using uglifyJS) I get the following error:\n\n```\nInvalid regular expression: /[\u00c2\u00aa\u00c2\u00b5\u00c2\u00ba\u00c3\u20ac-\u00c3\u2013\u00c3\u02dc-\u00c3\u00b6\u00c3\u00b8-\u00cb\u0081\u00cb\u2020-\u00cb\u2018\u00cb\u00a0-\u00cb\u00a4\u00cb\u00ac\u00cb\u00ae\u00cd\u00b0-\u00cd\u00b4\u00cd\u00b6\u00cd\u00b7\u00cd\u00ba-\u00cd\u00bd\u00ce\u2020\u00ce\u02c6-\u00ce\u0160\u00ce\u0152\u00ce\u017d-\u00ce\u00a1\u00ce\u00a3-\u00cf\u00b5\u00cf\u00b7-\u00d2\u0081\u00d2\u0160-\u00d4\u00a7\u00d4\u00b1-\u00d5\u2013\u00d5\u2122\u00d5\u00a1-\u00d6\u2021\u00d7\u0090-\u00d7\u00aa\u00d7\u00b0-\u00d7\u00b2\u00d8\u00a0-\u00d9\u0160\u00d9\u00ae\u00d9\u00af\u00d9\u00b1-\u00db\u201c\u00db\u2022\u00db\u00a5\u00db\u00a6\u00db\u00ae\u00db\u00af\u00db\u00ba-\u00db\u00bc\u00db\u00bf\u00dc\u0090\u00dc\u2019-\u00dc\u00af\u00dd\u008d-\u00de\u00a5\u00de\u00b1\u00df\u0160-\u00df\u00aa\u00df\u00b4\u00df\u00b5\u00df\u00ba\u00e0\u00a0\u20ac-\u00e0\u00a0\u2022\u00e0\u00a0\u0161\u00e0\u00a0\u00a4\u00e0\u00a0\u00a8\u00e0\u00a1\u20ac-\u00e0\u00a1\u02dc\u00e0\u00a2\u00a0\u00e0\u00a2\u00a2-\u00e0\u00a2\u00ac\u00e0\u00a4\u201e-\u00e0\u00a4\u00b9\u00e0\u00a4\u00bd\u00e0\u00a5\u0090\u00e0\u00a5\u02dc-\u00e0\u00a5\u00a1\u00e0\u00a5\u00b1-\u00e0\u00a5\u00b7\u00e0\u00a5\u00b9-\u00e0\u00a5\u00bf\u00e0\u00a6\u2026-\u00e0\u00a6\u0152\u00e0\u00a6\u008f\u00e0\u00a6\u0090\u00e0\u00a6\u201c-\u00e0\u00a6\u00a8\u00e0\u00a6\u00aa-\u00e0\u00a6\u00b0\u00e0\u00a6\u00b2\u00e0\u00a6\u00b6-\u00e0\u00a6\u00b9\u00e0\u00a6\u00bd\u00e0\u00a7\u017d\u00e0\u00a7\u0153\u00e0\u00a7\u009d\u00e0\u00a7\u0178-\u00e0\u00a7\u00a1\u00e0\u00a7\u00b0\u00e0\u00a7\u00b1\u00e0\u00a8\u2026-\u00e0\u00a8\u0160\u00e0\u00a8\u008f\u00e0\u00a8\u0090\u00e0\u00a8\u201c-\u00e0\u00a8\u00a8\u00e0\u00a8\u00aa-\u00e0\u00a8\u00b0\u00e0\u00a8\u00b2\u00e0\u00a8\u00b3\u00e0\u00a8\u00b5\u00e0\u00a8\u00b6\u00e0\u00a8\u00b8\u00e0\u00a8\u00b9\u00e0\u00a9\u2122-\u00e0\u00a9\u0153\u00e0\u00a9\u017e\u00e0\u00a9\u00b2-\u00e0\u00a9\u00b4\u00e0\u00aa\u2026-\u00e0\u00aa\u008d\u00e0\u00aa\u008f-\u00e0\u00aa\u2018\u00e0\u00aa\u201c-\u00e0\u00aa\u00a8\u00e0\u00aa\u00aa-\u00e0\u00aa\u00b0\u00e0\u00aa\u00b2\u00e0\u00aa\u00b3\u00e0\u00aa\u00b5-\u00e0\u00aa\u00b9\u00e0\u00aa\u00bd\u00e0\u00ab\u0090\u00e0\u00ab\u00a0\u00e0\u00ab\u00a1\u00e0\u00ac\u2026-\u00e0\u00ac\u0152\u00e0\u00ac\u008f\u00e0\u00ac\u0090\u00e0\u00ac\u201c-\u00e0\u00ac\u00a8\u00e0\u00ac\u00aa-\u00e0\u00ac\u00b0\u00e0\u00ac\u00b2\u00e0\u00ac\u00b3\u00e0\u00ac\u00b5-\u00e0\u00ac\u00b9\u00e0\u00ac\u00bd\u00e0\u00ad\u0153\u00e0\u00ad\u009d\u00e0\u00ad\u0178-\u00e0\u00ad\u00a1\u00e0\u00ad\u00b1\u00e0\u00ae\u0192\u00e0\u00ae\u2026-\u00e0\u00ae\u0160\u00e0\u00ae\u017d-\u00e0\u00ae\u0090\u00e0\u00ae\u2019-\u00e0\u00ae\u2022\u00e0\u00ae\u2122\u00e0\u00ae\u0161\u00e0\u00ae\u0153\u00e0\u00ae\u017e\u00e0\u00ae\u0178\u00e0\u00ae\u00a3\u00e0\u00ae\u00a4\u00e0\u00ae\u00a8-\u00e0\u00ae\u00aa\u00e0\u00ae\u00ae-\u00e0\u00ae\u00b9\u00e0\u00af\u0090\u00e0\u00b0\u2026-\u00e0\u00b0\u0152\u00e0\u00b0\u017d-\u00e0\u00b0\u0090\u00e0\u00b0\u2019-\u00e0\u00b0\u00a8\u00e0\u00b0\u00aa-\u00e0\u00b0\u00b3\u00e0\u00b0\u00b5-\u00e0\u00b0\u00b9\u00e0\u00b0\u00bd\u00e0\u00b1\u02dc\u00e0\u00b1\u2122\u00e0\u00b1\u00a0\u00e0\u00b1\u00a1\u00e0\u00b2\u2026-\u00e0\u00b2\u0152\u00e0\u00b2\u017d-\u00e0\u00b2\u0090\u00e0\u00b2\u2019-\u00e0\u00b2\u00a8\u00e0\u00b2\u00aa-\u00e0\u00b2\u00b3\u00e0\u00b2\u00b5-\u00e0\u00b2\u00b9\u00e0\u00b2\u00bd\u00e0\u00b3\u017e\u00e0\u00b3\u00a0\u00e0\u00b3\u00a1\u00e0\u00b3\u00b1\u00e0\u00b3\u00b2\u00e0\u00b4\u2026-\u00e0\u00b4\u0152\u00e0\u00b4\u017d-\u00e0\u00b4\u0090\u00e0\u00b4\u2019-\u00e0\u00b4\u00ba\u00e0\u00b4\u00bd\u00e0\u00b5\u017d\u00e0\u00b5\u00a0\u00e0\u00b5\u00a1\u00e0\u00b5\u00ba-\u00e0\u00b5\u00bf\u00e0\u00b6\u2026-\u00e0\u00b6\u2013\u00e0\u00b6\u0161-\u00e0\u00b6\u00b1\u00e0\u00b6\u00b3-\u00e0\u00b6\u00bb\u00e0\u00b6\u00bd\u00e0\u00b7\u20ac-\u00e0\u00b7\u2020\u00e0\u00b8\u0081-\u00e0\u00b8\u00b0\u00e0\u00b8\u00b2\u00e0\u00b8\u00b3\u00e0\u00b9\u20ac-\u00e0\u00b9\u2020\u00e0\u00ba\u0081\u00e0\u00ba\u201a\u00e0\u00ba\u201e\u00e0\u00ba\u2021\u00e0\u00ba\u02c6\u00e0\u00ba\u0160\u00e0\u00ba\u008d\u00e0\u00ba\u201d-\u00e0\u00ba\u2014\u00e0\u00ba\u2122-\u00e0\u00ba\u0178\u00e0\u00ba\u00a1-\u00e0\u00ba\u00a3\u00e0\u00ba\u00a5\u00e0\u00ba\u00a7\u00e0\u00ba\u00aa\u00e0\u00ba\u00ab\u00e0\u00ba\u00ad-\u00e0\u00ba\u00b0\u00e0\u00ba\u00b2\u00e0\u00ba\u00b3\u00e0\u00ba\u00bd\u00e0\u00bb\u20ac-\u00e0\u00bb\u201e\u00e0\u00bb\u2020\u00e0\u00bb\u0153-\u00e0\u00bb\u0178\u00e0\u00bc\u20ac\u00e0\u00bd\u20ac-\u00e0\u00bd\u2021\u00e0\u00bd\u2030-\u00e0\u00bd\u00ac\u00e0\u00be\u02c6-\u00e0\u00be\u0152\u00e1\u20ac\u20ac-\u00e1\u20ac\u00aa\u00e1\u20ac\u00bf\u00e1\u0081\u0090-\u00e1\u0081\u2022\u00e1\u0081\u0161-\u00e1\u0081\u009d\u00e1\u0081\u00a1\u00e1\u0081\u00a5\u00e1\u0081\u00a6\u00e1\u0081\u00ae-\u00e1\u0081\u00b0\u00e1\u0081\u00b5-\u00e1\u201a\u0081\u00e1\u201a\u017d\u00e1\u201a\u00a0-\u00e1\u0192\u2026\u00e1\u0192\u2021\u00e1\u0192\u008d\u00e1\u0192\u0090-\u00e1\u0192\u00ba\u00e1\u0192\u00bc-\u00e1\u2030\u02c6\u00e1\u2030\u0160-\u00e1\u2030\u008d\u00e1\u2030\u0090-\u00e1\u2030\u2013\u00e1\u2030\u02dc\u00e1\u2030\u0161-\u00e1\u2030\u009d\u00e1\u2030\u00a0-\u00e1\u0160\u02c6\u00e1\u0160\u0160-\u00e1\u0160\u008d\u00e1\u0160\u0090-\u00e1\u0160\u00b0\u00e1\u0160\u00b2-\u00e1\u0160\u00b5\u00e1\u0160\u00b8-\u00e1\u0160\u00be\u00e1\u2039\u20ac\u00e1\u2039\u201a-\u00e1\u2039\u2026\u00e1\u2039\u02c6-\u00e1\u2039\u2013\u00e1\u2039\u02dc-\u00e1\u0152\u0090\u00e1\u0152\u2019-\u00e1\u0152\u2022\u00e1\u0152\u02dc-\u00e1\u008d\u0161\u00e1\u017d\u20ac-\u00e1\u017d\u008f\u00e1\u017d\u00a0-\u00e1\u008f\u00b4\u00e1\u0090\u0081-\u00e1\u2122\u00ac\u00e1\u2122\u00af-\u00e1\u2122\u00bf\u00e1\u0161\u0081-\u00e1\u0161\u0161\u00e1\u0161\u00a0-\u00e1\u203a\u00aa\u00e1\u203a\u00ae-\u00e1\u203a\u00b0\u00e1\u0153\u20ac-\u00e1\u0153\u0152\u00e1\u0153\u017d-\u00e1\u0153\u2018\u00e1\u0153\u00a0-\u00e1\u0153\u00b1\u00e1\u009d\u20ac-\u00e1\u009d\u2018\u00e1\u009d\u00a0-\u00e1\u009d\u00ac\u00e1\u009d\u00ae-\u00e1\u009d\u00b0\u00e1\u017e\u20ac-\u00e1\u017e\u00b3\u00e1\u0178\u2014\u00e1\u0178\u0153\u00e1\u00a0\u00a0-\u00e1\u00a1\u00b7\u00e1\u00a2\u20ac-\u00e1\u00a2\u00a8\u00e1\u00a2\u00aa\u00e1\u00a2\u00b0-\u00e1\u00a3\u00b5\u00e1\u00a4\u20ac-\u00e1\u00a4\u0153\u00e1\u00a5\u0090-\u00e1\u00a5\u00ad\u00e1\u00a5\u00b0-\u00e1\u00a5\u00b4\u00e1\u00a6\u20ac-\u00e1\u00a6\u00ab\u00e1\u00a7\u0081-\u00e1\u00a7\u2021\u00e1\u00a8\u20ac-\u00e1\u00a8\u2013\u00e1\u00a8\u00a0-\u00e1\u00a9\u201d\u00e1\u00aa\u00a7\u00e1\u00ac\u2026-\u00e1\u00ac\u00b3\u00e1\u00ad\u2026-\u00e1\u00ad\u2039\u00e1\u00ae\u0192-\u00e1\u00ae\u00a0\u00e1\u00ae\u00ae\u00e1\u00ae\u00af\u00e1\u00ae\u00ba-\u00e1\u00af\u00a5\u00e1\u00b0\u20ac-\u00e1\u00b0\u00a3\u00e1\u00b1\u008d-\u00e1\u00b1\u008f\u00e1\u00b1\u0161-\u00e1\u00b1\u00bd\u00e1\u00b3\u00a9-\u00e1\u00b3\u00ac\u00e1\u00b3\u00ae-\u00e1\u00b3\u00b1\u00e1\u00b3\u00b5\u00e1\u00b3\u00b6\u00e1\u00b4\u20ac-\u00e1\u00b6\u00bf\u00e1\u00b8\u20ac-\u00e1\u00bc\u2022\u00e1\u00bc\u02dc-\u00e1\u00bc\u009d\u00e1\u00bc\u00a0-\u00e1\u00bd\u2026\u00e1\u00bd\u02c6-\u00e1\u00bd\u008d\u00e1\u00bd\u0090-\u00e1\u00bd\u2014\u00e1\u00bd\u2122\u00e1\u00bd\u203a\u00e1\u00bd\u009d\u00e1\u00bd\u0178-\u00e1\u00bd\u00bd\u00e1\u00be\u20ac-\u00e1\u00be\u00b4\u00e1\u00be\u00b6-\u00e1\u00be\u00bc\u00e1\u00be\u00be\u00e1\u00bf\u201a-\u00e1\u00bf\u201e\u00e1\u00bf\u2020-\u00e1\u00bf\u0152\u00e1\u00bf\u0090-\u00e1\u00bf\u201c\u00e1\u00bf\u2013-\u00e1\u00bf\u203a\u00e1\u00bf\u00a0-\u00e1\u00bf\u00ac\u00e1\u00bf\u00b2-\u00e1\u00bf\u00b4\u00e1\u00bf\u00b6-\u00e1\u00bf\u00bc\u00e2\u0081\u00b1\u00e2\u0081\u00bf\u00e2\u201a\u0090-\u00e2\u201a\u0153\u00e2\u201e\u201a\u00e2\u201e\u2021\u00e2\u201e\u0160-\u00e2\u201e\u201c\u00e2\u201e\u2022\u00e2\u201e\u2122-\u00e2\u201e\u009d\u00e2\u201e\u00a4\u00e2\u201e\u00a6\u00e2\u201e\u00a8\u00e2\u201e\u00aa-\u00e2\u201e\u00ad\u00e2\u201e\u00af-\u00e2\u201e\u00b9\u00e2\u201e\u00bc-\u00e2\u201e\u00bf\u00e2\u2026\u2026-\u00e2\u2026\u2030\u00e2\u2026\u017d\u00e2\u2026\u00a0-\u00e2\u2020\u02c6\u00e2\u00b0\u20ac-\u00e2\u00b0\u00ae\u00e2\u00b0\u00b0-\u00e2\u00b1\u017e\u00e2\u00b1\u00a0-\u00e2\u00b3\u00a4\u00e2\u00b3\u00ab-\u00e2\u00b3\u00ae\u00e2\u00b3\u00b2\u00e2\u00b3\u00b3\u00e2\u00b4\u20ac-\u00e2\u00b4\u00a5\u00e2\u00b4\u00a7\u00e2\u00b4\u00ad\u00e2\u00b4\u00b0-\u00e2\u00b5\u00a7\u00e2\u00b5\u00af\u00e2\u00b6\u20ac-\u00e2\u00b6\u2013\u00e2\u00b6\u00a0-\u00e2\u00b6\u00a6\u00e2\u00b6\u00a8-\u00e2\u00b6\u00ae\u00e2\u00b6\u00b0-\u00e2\u00b6\u00b6\u00e2\u00b6\u00b8-\u00e2\u00b6\u00be\u00e2\u00b7\u20ac-\u00e2\u00b7\u2020\u00e2\u00b7\u02c6-\u00e2\u00b7\u017d\u00e2\u00b7\u0090-\u00e2\u00b7\u2013\u00e2\u00b7\u02dc-\u00e2\u00b7\u017e\u00e2\u00b8\u00af\u00e3\u20ac\u2026-\u00e3\u20ac\u2021\u00e3\u20ac\u00a1-\u00e3\u20ac\u00a9\u00e3\u20ac\u00b1-\u00e3\u20ac\u00b5\u00e3\u20ac\u00b8-\u00e3\u20ac\u00bc\u00e3\u0081\u0081-\u00e3\u201a\u2013\u00e3\u201a\u009d-\u00e3\u201a\u0178\u00e3\u201a\u00a1-\u00e3\u0192\u00ba\u00e3\u0192\u00bc-\u00e3\u0192\u00bf\u00e3\u201e\u2026-\u00e3\u201e\u00ad\u00e3\u201e\u00b1-\u00e3\u2020\u017d\u00e3\u2020\u00a0-\u00e3\u2020\u00ba\u00e3\u2021\u00b0-\u00e3\u2021\u00bf\u00e3\u0090\u20ac-\u00e4\u00b6\u00b5\u00e4\u00b8\u20ac-\u00e9\u00bf\u0152\u00ea\u20ac\u20ac-\u00ea\u2019\u0152\u00ea\u201c\u0090-\u00ea\u201c\u00bd\u00ea\u201d\u20ac-\u00ea\u02dc\u0152\u00ea\u02dc\u0090-\u00ea\u02dc\u0178\u00ea\u02dc\u00aa\u00ea\u02dc\u00ab\u00ea\u2122\u20ac-\u00ea\u2122\u00ae\u00ea\u2122\u00bf-\u00ea\u0161\u2014\u00ea\u0161\u00a0-\u00ea\u203a\u00af\u00ea\u0153\u2014-\u00ea\u0153\u0178\u00ea\u0153\u00a2-\u00ea\u017e\u02c6\u00ea\u017e\u2039-\u00ea\u017e\u017d\u00ea\u017e\u0090-\u00ea\u017e\u201c\u00ea\u017e\u00a0-\u00ea\u017e\u00aa\u00ea\u0178\u00b8-\u00ea\u00a0\u0081\u00ea\u00a0\u0192-\u00ea\u00a0\u2026\u00ea\u00a0\u2021-\u00ea\u00a0\u0160\u00ea\u00a0\u0152-\u00ea\u00a0\u00a2\u00ea\u00a1\u20ac-\u00ea\u00a1\u00b3\u00ea\u00a2\u201a-\u00ea\u00a2\u00b3\u00ea\u00a3\u00b2-\u00ea\u00a3\u00b7\u00ea\u00a3\u00bb\u00ea\u00a4\u0160-\u00ea\u00a4\u00a5\u00ea\u00a4\u00b0-\u00ea\u00a5\u2020\u00ea\u00a5\u00a0-\u00ea\u00a5\u00bc\u00ea\u00a6\u201e-\u00ea\u00a6\u00b2\u00ea\u00a7\u008f\u00ea\u00a8\u20ac-\u00ea\u00a8\u00a8\u00ea\u00a9\u20ac-\u00ea\u00a9\u201a\u00ea\u00a9\u201e-\u00ea\u00a9\u2039\u00ea\u00a9\u00a0-\u00ea\u00a9\u00b6\u00ea\u00a9\u00ba\u00ea\u00aa\u20ac-\u00ea\u00aa\u00af\u00ea\u00aa\u00b1\u00ea\u00aa\u00b5\u00ea\u00aa\u00b6\u00ea\u00aa\u00b9-\u00ea\u00aa\u00bd\u00ea\u00ab\u20ac\u00ea\u00ab\u201a\u00ea\u00ab\u203a-\u00ea\u00ab\u009d\u00ea\u00ab\u00a0-\u00ea\u00ab\u00aa\u00ea\u00ab\u00b2-\u00ea\u00ab\u00b4\u00ea\u00ac\u0081-\u00ea\u00ac\u2020\u00ea\u00ac\u2030-\u00ea\u00ac\u017d\u00ea\u00ac\u2018-\u00ea\u00ac\u2013\u00ea\u00ac\u00a0-\u00ea\u00ac\u00a6\u00ea\u00ac\u00a8-\u00ea\u00ac\u00ae\u00ea\u00af\u20ac-\u00ea\u00af\u00a2\u00ea\u00b0\u20ac-\u00ed\u017e\u00a3\u00ed\u017e\u00b0-\u00ed\u0178\u2020\u00ed\u0178\u2039-\u00ed\u0178\u00bb\u00ef\u00a4\u20ac-\u00ef\u00a9\u00ad\u00ef\u00a9\u00b0-\u00ef\u00ab\u2122\u00ef\u00ac\u20ac-\u00ef\u00ac\u2020\u00ef\u00ac\u201c-\u00ef\u00ac\u2014\u00ef\u00ac\u009d\u00ef\u00ac\u0178-\u00ef\u00ac\u00a8\u00ef\u00ac\u00aa-\u00ef\u00ac\u00b6\u00ef\u00ac\u00b8-\u00ef\u00ac\u00bc\u00ef\u00ac\u00be\u00ef\u00ad\u20ac\u00ef\u00ad\u0081\u00ef\u00ad\u0192\u00ef\u00ad\u201e\u00ef\u00ad\u2020-\u00ef\u00ae\u00b1\u00ef\u00af\u201c-\u00ef\u00b4\u00bd\u00ef\u00b5\u0090-\u00ef\u00b6\u008f\u00ef\u00b6\u2019-\u00ef\u00b7\u2021\u00ef\u00b7\u00b0-\u00ef\u00b7\u00bb\u00ef\u00b9\u00b0-\u00ef\u00b9\u00b4\u00ef\u00b9\u00b6-\u00ef\u00bb\u00bc\u00ef\u00bc\u00a1-\u00ef\u00bc\u00ba\u00ef\u00bd\u0081-\u00ef\u00bd\u0161\u00ef\u00bd\u00a6-\u00ef\u00be\u00be\u00ef\u00bf\u201a-\u00ef\u00bf\u2021\u00ef\u00bf\u0160-\u00ef\u00bf\u008f\u00ef\u00bf\u2019-\u00ef\u00bf\u2014\u00ef\u00bf\u0161-\u00ef\u00bf\u0153]/: Range out of order in character class\n```\n\nIf it can help I'm using browserify, babel and templates are inlined in the script\n",
        "title": "CSP version error when minified",
        "labels": "bug",
        "id": 124002
    },
    {
        "body": "\u4e0a\u6b21\u63d0\u8fc7\uff0c\u591a\u4e2a component \u5d4c\u5957\u7684\u8bdd\uff0c\u91cc\u9762\u7684 conponent \u4e0d\u4f1a\u7f16\u8bd1\uff0c\u5c31\u5ffd\u7565\u4e86\uff0c\u4e0a\u6b21\u4f60\u6539\u4e86\uff0c\u5728dev\u7684\u5206\u652f\u8ba9\u6211\u81ea\u5df1\u7f16\u8bd1\u6682\u65f6\u7528\u7740\uff0c\u4f600.12\u6b63\u5f0f\u7248\u4f1a\u4fee\u590d\uff0c\u7136\u540e\u521a\u624d\u5347\u7ea7\u52300.12\uff0c\u8fd9\u4e2a\u53c8\u91cd\u73b0\u4e86\u3002\u3002\u3002\n",
        "title": "\u8fd8\u662fcomponent\u5d4c\u5957\u7684bug\uff0c\u53c8\u91cd\u73b0\u4e86",
        "labels": "bug",
        "id": 124003
    },
    {
        "body": "Before 0.11.9:\n\n``` HTML\n<my-component v-repeat=\"myPrimatives\"></mycomponent>\n```\n\nworked like a champ.\n\nNow, the components do not render and raise the warning: `v-component=\"my-component\" cannot be used on an already mounted instance.`\n",
        "title": "Custom element tag with v-repeat breaking regression in 0.11.9.",
        "labels": "bug",
        "id": 124004
    },
    {
        "body": "`v-component` is not updated dynamically in some cases. It seems to have to do with some uses of the v-with directive and with assigning a new value to vm.$data. See this [jsfiddle](http://jsfiddle.net/6ecL4qg9/4/).\n",
        "title": "Issue with dynamic component, v-with and assigning to $data",
        "labels": "bug",
        "id": 124005
    },
    {
        "body": "\u6211\u7528  Vue.component \u65b9\u6cd5\u751f\u6210\u4e86\u4e00\u4e2a mg-header \u7684\u7ec4\u4ef6\uff0c\u7136\u540e\u6211\u52a8\u6001\u7684\u751f\u6210\u4e86\u4e00\u4e2a vue \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u6709\u7528\u5230\u8fd9\u4e2a\u6307\u4ee4\uff0c\u76f4\u63a5\u4f7f\u7528\u7684 <\"mg-header\"></\"mg-header\"> \u7684\u65b9\u5f0f\uff0c\u7136\u540e\u6211\u7528 $mount \u52a8\u6001\u7f16\u8bd1\u4ee5\u540e\uff0c\u53d1\u73b0\u52a8\u6001\u751f\u6210\u7684\u5bf9\u8c61\u4e2d\u7684\u7b2c\u4e00\u4e2a component \u6c38\u8fdc\u4e0d\u4f1a\u88ab\u7f16\u8bd1\n",
        "title": "vue 0.11.8 \u5b50\u7ec4\u4ef6\u4e2d\u7b2c\u4e00\u4e2acomponent\u4e0d\u4f1a\u7f16\u8bd1bug",
        "labels": "bug",
        "id": 124006
    },
    {
        "body": "Hello,\n\nI've created an example to show the issue http://jsfiddle.net/wo31uk80/1/\nIt seems the v-on directive binding doesn't work properly if it under v-if.\n",
        "title": "v-if, v-on directives in a component",
        "labels": "bug",
        "id": 124007
    },
    {
        "body": "Demo: http://jsfiddle.net/e9e2bw6v/2/\n\nWe have list, which is under watching. In watch we just replace text:null to text: 'some text'.\n\nWhen we add an item, and later we clear list, we see error.\n\nWe have html:\n`<div v-if=\"list.length\">`\n`<div v-if=\"list[0].text\">`\n`{{list[0].text}}`\n`</div>`\n`</div>`\n\nIf we remove second condition, we will not have error.\n\nIf you replace 2 conditions to 1 `<div v-if=\"list.length && list[0].text\">`, we will not have error.\n\nI cannot explain this, but its wrong.\n\nP.S. Sory for bad english.\n",
        "title": "Strange error, when we watch and work with the list.",
        "labels": "bug",
        "id": 124008
    },
    {
        "body": "See this: http://jsfiddle.net/qm2wqg8u/5/\n\nIf replace set to true, and a multi root template could cause the param can't pass into component. In this case, the comment block cause the problem.\n",
        "title": "`v-with` fails silently if component has `replace: true` and more than 1 root element",
        "labels": "bug",
        "id": 124009
    },
    {
        "body": "if v-model is a <select> and with number, it always gets string when select changes:\n\n```\n<div id=\"demo\">\n    <select v-model=\"sel\" number>\n        <option value=\"1\">1</option>\n        <option value=\"2\">2</option>\n        <option value=\"3\">3</option>\n    </select>\n</div>\n```\n\nPlease see the example:\nhttp://jsfiddle.net/djyunb61/\n",
        "title": "number does not work with select",
        "labels": "bug",
        "id": 124010
    },
    {
        "body": "Hello! In this example no movies titles when add button is pushed. See fiddle:\nhttp://jsfiddle.net/5sH6A/60/\n",
        "title": "v-repeat in v-if seem to work incorrectly",
        "labels": "bug",
        "id": 124011
    },
    {
        "body": "When I create a component using `v-component` directive together with `v-if` the `ready` hook is not called.\n\n``` js\nvar ready = spy();\nvar parent = new Vue({\n  template: '<user-profile v-if=\"showProfile\"></user-profile>',\n  data: {\n    showProfile: false\n  },\n  components: {\n    'user-profile': {\n      template: 'User Profile...',\n      ready: ready\n    }\n  }\n})\nparent.$mount()\nparent.$appendTo(document.body)\nparent.showProfile = true;\n\nVue.nextTick(function() {\n  assert(ready.called);\n});\n```\n",
        "title": "Ready hook is not called when used together with v-if",
        "labels": "bug",
        "id": 124012
    },
    {
        "body": "There is a weird behavior of textarea in Vue 0.11 and IE10/IE11.\nTextarea's value is taken out of placeholder attribute.\n\n``` js\nvar vm = new Vue({\n  data: function() {\n    return {value: ''}\n  },\n  template: '<textarea v-model=\"value\" placeholder=\"aaa\"></textarea>'\n});\nvm.$mount();\nvm.$appendTo(document.body);\nassert.equal(vm.value, '');\n```\n\nThis results in:\n\n```\nAssertionError: expected 'aaa' to equal ''\n```\n\nAll other browsers work fine.\n",
        "title": "textarea placeholder is set into textarea value (IE11)",
        "labels": "bug",
        "id": 124013
    },
    {
        "body": "I try watch `v-repeat` item with `this.$watch(\"$data\")`.\nI expect this callback fired when that child modified.\nBut when change each child, fire all children's callback.\nIs this bug? \n\nShort example\n\nwatch `$data` sample (bug?)\nhttp://jsfiddle.net/c5gw9amq/1/\n\nwatch item sample (maybe right)\nhttp://jsfiddle.net/c5gw9amq/2/\n",
        "title": "v-repeat and $watch(\"$data\")",
        "labels": "bug",
        "id": 124014
    },
    {
        "body": "Please look at below sample code\n\nhttp://jsfiddle.net/sideroad/wjpHP/\n\nfourth option as \"a\" was appended\n\nif all key include dot character and all key before dot have same character, this problem seems to be happened.\n",
        "title": "Weird option is appended",
        "labels": "bug",
        "id": 124015
    },
    {
        "body": "[This jsfiddle](http://jsfiddle.net/Qy2A2/6/) demonstrates the `v-if` directive behaving differently in seemingly equivalent scenarios. It works as expected when `v-if` is given a simple property key, but expressions and computed properties appear to cause the contents of the `v-if` to be evaluated even when the result is falsy.\n",
        "title": "v-if behavior differs when given a property key versus an expression",
        "labels": "bug",
        "id": 124016
    },
    {
        "body": "Check out this example: http://jsbin.com/nolom/7/edit\n\nThe alert is only supposed to fire on changes to the `title` keypath. However, it fires on any changes to the vm.\n",
        "title": "`$watch` misbehaving when used with `v-with`",
        "labels": "bug",
        "id": 124017
    },
    {
        "body": "EDIT:\nThe v-enter, according to what I've found online, is only applied for a split second. Just long enough to trigger the animation.\n\nOriginal content:\nRunning v10.4..\nWhen v-transition is enabled the v-leave is appended to the classList of the leaving element but v-enter is not applied to the newly created element.\n\nI have tested some of the examples provided as well and notice the same 'bug'.\nI've increased the transition delay to 10s so that I could watch the effect and see 'view v-leave' on the old element but only 'view' on the new element. This is obviously breaking my transitions.\n\nI've also tried appending my own 'enterClass' and 'leaveClass' in Vue.config and notice the same behaviour. \n\nHas anyone else experienced this or know what's going on?\n\nUnfortunately I can not let you know if this was working with other versions of Vue as I'm new to this framework (and loving it!).\n\nThanks for the excellent framework!\n",
        "title": "v-enter never appended",
        "labels": "bug",
        "id": 124018
    },
    {
        "body": "This is a really weird bug that I ran into, but I've boiled it down to a simple test case and it really does seem to be a legit bug. When a VM has the `components` property set, any `key` filters used in directives in the component template or root template cease to function properly.\n\nSimple test case: http://jsfiddle.net/smcbride/5fN4c/\n\nYou'll notice that when you run the example, you should see console logging when you hit enter in both text fields. However, no console lines are logged. If you delete the `div v-component` from the template and the `components` property from the VM definition and re-run the example, then a single text input is rendered and console lines _are_ logged when you hit enter.\n\nThat seems totally crazy! How could the presence of components in the root VM stop all key filters from working? This drove me nuts for over an hour. Wacky.\n",
        "title": "Key filter breaks when VM has components",
        "labels": "bug",
        "id": 124019
    },
    {
        "body": "I have a directive that calls a sort method and passes an object of options:\n\n`<a v-on='click: sortRows({ column: \"name\" })'>Name</a>`\n\n...but, I get two errors:\n\n`Error parsing expression: sortRows({ column: \"name\" })`\n`Directive \"v-on:click: sortRows({ column: \"name\" })\" expects a method.`\n\nI would expect this to work instead of accepting only primitive params.\n",
        "title": "Directive method calls don't support object params",
        "labels": "bug",
        "id": 124020
    },
    {
        "body": "only happens when there are duplicates.\n",
        "title": "$index for primitive values are not tracked properly",
        "labels": "bug",
        "id": 124021
    },
    {
        "body": "Hi,\n\nWhen I nest 2 v-repeat directives, inner directive contents is recreated on every model update. Apart form performance penalty, this results in loosing HTML input focus.\n\nTake a look:\n\nhttp://jsfiddle.net/twarogowski/E8KH6/\n",
        "title": "problem with nested v-repeat directives.",
        "labels": "bug",
        "id": 124022
    },
    {
        "body": "http://jsfiddle.net/Fk74F/12/\n\nSo while looking at the fiddle, it seems that Vue is over rendering in cases with nested objects in a repeating element.\n\nThe best way to test the fiddle is to simple type something in one of the inputs, basically the entire view re renders for no reason make it seem that after every time you type in an input, a blur event occurs, and needing to reselect the input.\n",
        "title": "Over Rendering with a lot of nested views and compontents",
        "labels": "bug",
        "id": 124023
    },
    {
        "body": "Hi,\n\nI have found a problem with v-repeat when you remove all items of a list and set a value of a removed item during the same frame. Item will reappear in the list and linked view too.\n\nYou can see this fiddle for a real example : http://jsfiddle.net/4JGRy/\n\nThe \"newValue\" should not be visible because all items of the list have been removed.\n\nNB: I really appreciate this library, good job ;)\n\nEdit: replace gist by a fidlle \n",
        "title": "problem with v-repeat and remove all",
        "labels": "bug",
        "id": 124024
    },
    {
        "body": "Kinda annoying when using {{ }} inside style\n",
        "title": "IE doesn't allow `setAttribute('style')`",
        "labels": "bug",
        "id": 124025
    },
    {
        "body": " vue.js(for dev) ,  Line 817, removeClass funciton,`else` branch\n\n```\n             //assume el.className='red yellow green'\n             el.className = (' ' + 'red yellow green' + ' ')\n            .replace(' ' + 'yellow' + ' ', '')\n            .trim()\n            // will be 'redgreen',not 'red green' \n```\n",
        "title": "bug of function removeClass",
        "labels": "bug",
        "id": 124026
    },
    {
        "body": "```\nUncaught NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node. build.js:3073\n    (anonymous function) build.js:3073\n    changeState build.js:2621\n    module.exports build.js:2647\n    module.exports.buildItem build.js:3072\n    module.exports.update build.js:3046\n    DirProto.apply build.js:2182\n    DirProto.update build.js:2156\n    BindingProto._update build.js:1659\n    flush\n```\n",
        "title": "Async problem when swapping a `v-repeat` Array",
        "labels": "bug",
        "id": 124027
    },
    {
        "body": "When an object is observed by many anonymous expression bindings (>100) the new ViewModel instantiation gets increasingly slow. Currently has no idea why - but it has something to do with the exp parser / anon directive thing. Need to do more profiling.\n",
        "title": "improve Observer performance",
        "labels": "bug",
        "id": 124028
    },
    {
        "body": "",
        "title": "should not split directive expression when comma is inside quotes",
        "labels": "bug",
        "id": 124029
    },
    {
        "body": "e.g. `{{ a.b + a.c }}` doesn't catch any dependencies\n",
        "title": "dependency tracking for nested values",
        "labels": "bug",
        "id": 124030
    }
]