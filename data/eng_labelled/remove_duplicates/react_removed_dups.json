[
    {
        "body": "I'd like to be able to detect `SuspenseList` using `react-is`. Is there any reason why I shouldn't?",
        "title": "react-is lacks SuspenseList",
        "labels": "Type: Enhancement",
        "id": 44453
    },
    {
        "body": "## As-is\r\n\r\nWhen only referring to object's member properties, `exhaustive-deps` lint rule does not show a warning.\r\n\r\nHowever, **when calling object's member property, this rule shows a warning.**\r\n\r\n```tsx\r\nfunction Password() {\r\n  const verifyPassword = useMutation(apis.verifyPassword);\r\n\r\n  useEffect(() => {\r\n    verifyPassword.mutate;\r\n  }, [verifyPassword.mutate]); // PASS\r\n\r\n  useEffect(() => {\r\n    verifyPassword.mutate();\r\n  } ,[verifyPassword.mutate]); // React Hook useEffect has a missing dependency: 'verifyPassword'. Either include it or remove the dependency array.\r\n} \r\n```\r\n\r\nI saw [Dan's comment](https://github.com/facebook/react/issues/14920#issuecomment-467494468) on this behavior.\r\n\r\n> This is because technically props.foo() passes props itself as this to foo call. So foo might implicitly depend on props. We'll need a better message for this case though. The best practice is always destructuring.\r\n\r\nIt is fully understood.\r\n\r\nHowever, **when the entire object is included as a dependency, the following problem can occur.**\r\nTake a look at the following code.\r\n\r\n```tsx\r\nconst verifyPassword = useMutation(apis.verifyPassword); // `verifyPassword` equals to `{ isLoading: boolean; mutate: Function }`\r\n\r\n// `verifyPassword(password)` sets `isLoading` to `true` and causes `useEffect` hook that depends on `verifyPassword` objects to be re-excuted. This eventually leads to an infinite loop.\r\nuseEffect(() => {\r\n  if (password === PASSWORD_LENGTH) {\r\n    verifyPassword.mutate(password);\r\n  } \r\n  \r\n}, [password, verifyPassword]);\r\n```\r\n\r\n**There are two ways to avoid this problem.**\r\n\r\n```tsx\r\n// 1. Use destructuring\r\nconst { mutate } = useMutation(apis.verifyPassword);\r\n\r\nuseEffect(() => {\r\n  if (password === PASSWORD_LENGTH) {\r\n    verifyPassword.mutate(password);\r\n  }\r\n}, [password, mutate]);\r\n\r\n// 2. Assign member property to other variable\r\nuseEffect(() => {\r\n  const mutate = verifyPassword.mutate;\r\n\r\n  mutate();\r\n}, [verifyPassword.mutate]);\r\n```\r\n\r\n## To-be\r\n\r\nIn many cases, it is not common to refer to other members through `this`.\r\n\r\nAnd as in the example above, it is a good idea to use namespace to avoid name conflicts. (https://github.com/facebook/react/issues/16265#issuecomment-587977285)\r\n\r\nSo, I would like to suggest an **option to set not to warn about _member call expresion_ when using the `exhaustive-deps` rule.**\r\n\r\n```tsx\r\n// 'react-hooks/exhaustive-deps': ['warn', { ignoreMemberCallExpression: true }]\r\nuseEffect(() => {\r\n  verifyPassword.mutate();\r\n}, [verifyPassword.mutate]); // PASS\r\n```",
        "title": "Feature Suggestion: Add `ignoreMemberCallExpression` option for `exhaustive-deps` lint rule",
        "labels": "Type: Enhancement",
        "id": 44454
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. ```js\r\n   function useMyHook1(arr = []) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n    function useMyHook2({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n   function MyComponent({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n\r\n     return null;\r\n   }\r\n   ```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: --\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nNo warning appears for `arr` being potentially constructed on every render.\r\n\r\n## The expected behavior\r\nShould warn that `arr` can be constructed on each render.\r\nThe lint rules already warn for the following, so this is just an extension of the existing behavior:\r\n```js\r\nconst arr = props.arr ?? []; // The 'arr' logical expression could make the dependencies of useEffect Hook (at line 54) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'arr' in its own useMemo() Hook.\r\n```\r\nReference: https://github.com/facebook/react/pull/19590",
        "title": "Bug: [eslint-plugin-react-hooks] Constructions should be caught in default props/args",
        "labels": "Type: Enhancement",
        "id": 44455
    },
    {
        "body": "We currently plan to suppress double-logging in development by overriding console in 17: https://github.com/facebook/react/pull/18547\r\n\r\nHowever this can be confusing for some scenarios and double logging may be preferable in them.\r\n\r\nIdeally we'd add a toggle to DevTools that would allow to re-enable it on this screen:\r\n\r\n![Ef3bFlWWoAARjz9](https://user-images.githubusercontent.com/810438/90825360-b7372000-e330-11ea-9128-803d35d27e07.png)\r\n\r\n",
        "title": "Add an option to DevTools to enable double-logging",
        "labels": "Type: Enhancement",
        "id": 44456
    },
    {
        "body": "We previously had a feature where Boolean props would show a checkbox to the left of them in the DevTools pane. It was removed when the JSON editor was added, but I think we should add it back. It should work like this:\r\n\r\n1. If the value is a boolean, the checkbox should show up to the left of `true` / `false` value\r\n2. If it's no longer a boolean (e.g. gets edited manually), the checkbox disappears",
        "title": "Add a toggle for Boolean props in DevTools",
        "labels": "Type: Enhancement",
        "id": 44457
    },
    {
        "body": "Just about every time I set up a new `Context.Provider`, I end up accidentally specifying a `values` prop rather than `value`.  While it's a minor error, generally I build the container in which the provider resides and commit it to the code base before I ever use it.  It's only later when I go to use it that I realize I did it again.  Since the `Context.Provider` seems pretty much useless without a `value` prop specified, I'd love it if there was a prop error if it is missing... especially if another prop is defined on the `Context.Provider` instead.",
        "title": "Feature request: have Context.Provider throw error if missing `value` prop",
        "labels": "Type: Enhancement",
        "id": 44458
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n**Version:** eslint-plugin-react-hooks@1.7.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component with local state\r\n2. Create a useEffect with a variable inside, that points to the `typeof` of the state variable\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/nervous-williamson-2i99l?file=/src/App.tsx:210-261\r\n\r\n## The current behavior\r\n`react-exhaustive-deps` complains that the state variable should be included in the dependency list\r\n\r\n## The expected behavior\r\n`react-exhaustive-deps` shouldn't complain that the state variable should be included in the dependency list because it's value is never used.",
        "title": "Bug [ESLint Hooks Plugin]: When using a `typeof` type guard it requires the value as a dependency",
        "labels": "Type: Enhancement",
        "id": 44459
    },
    {
        "body": "Just noticed this.\r\n\r\n<img width=\"645\" alt=\"Screenshot 2020-04-15 at 10 56 39\" src=\"https://user-images.githubusercontent.com/810438/79324642-cda71800-7f07-11ea-816f-af7a69496c52.png\">\r\n\r\nI think we should read setTimeout early in DevTools because we don't want the overridden one that goes through indirections.",
        "title": "Bug: DevTools should grab native setTimeout",
        "labels": "Type: Enhancement",
        "id": 44460
    },
    {
        "body": "**Do you want to request a feature or report a bug?**\r\nMaybe a feature?\r\n\r\nWhen using Suspense and useTransition, the isPending of useTransition is immediately set to true.\r\nI want to show a spinner when a transition is still pending, but showing it immediately results in a flashing spinner when the underlying promise resolves very fast. This is not a nice experience. \r\n\r\nIs there a useTransition suspense option to delay the isPending indicator? I want to prevent the spinner from showing if the transition completes in for example 100ms.",
        "title": "Delay setting useTransition isPending to true until JND",
        "labels": "Type: Enhancement",
        "id": 44461
    },
    {
        "body": "If you have `memo(forwardRef(X))`, then the inner component won't have a \"rendered by\" list. This is because it technically doesn't have an owner. It is artificial.\r\n\r\nI think we should ideally set up `_debugOwner` for these Fibers in DEV just so existing tooling can find them. Or special case them in DevTools.",
        "title": "DevTools: Memo(ForwardRef()) and \"Rendered By\" List",
        "labels": "Type: Enhancement",
        "id": 44462
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.3-16.13\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render function component with side-effects and without hooks in StrictMode\r\n2. Component only renders once\r\n\r\n\r\nLink to code example: https://codesandbox.io/s/strictmode-w-and-wo-hooks-vgxvh\r\n\r\n\r\n## The current behavior\r\n\r\nStrictMode only renders function components with hooks twice following https://github.com/facebook/react/issues/15074#issuecomment-471197572\r\n\r\n\r\n## The expected behavior\r\n\r\nI think making [the distinction between components with and without hooks causes more confusion than it helps](https://github.com/mui-org/material-ui/issues/20313). Especially since the docs do not mention this. I amended [past efforts to improve the StrictMode docs](https://github.com/reactjs/reactjs.org/pull/2515) but since this has been ignored I'm not sure this helps. I would also work on making the behavior consistent across all function component types if this is possible.\r\n",
        "title": "Call all functions twice in StrictMode",
        "labels": "Type: Enhancement",
        "id": 44463
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:  241c4467e\r\n\r\n## Steps To Reproduce\r\n\r\n1.  https://codesandbox.io/s/cranky-wing-lc7wr\r\n2. Swap between the two screens by clicking the two buttons\r\n3. Inline loading shows the first time you load screen A. But it also usually shows on subsequent loads, even though there's nothing Suspending\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nInline loading indicator usually shows on subsequent loads.\r\n\r\n## The expected behavior\r\n\r\nIt should only show on the first load of A",
        "title": "Bug: useTransition's pending boolean is triggered immediately, even if there's no suspension",
        "labels": "Type: Enhancement",
        "id": 44464
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug?\r\n\r\n**What is the current behavior?**\r\n\r\n_note: I am encountering this issue when using https://github.com/pmmmwh/react-refresh-webpack-plugin, but I believe it's an issue with react-refresh itself._\r\n\r\nThe react-refresh runtime [overrides](https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/react-refresh/src/ReactFreshRuntime.js#L459) `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` to get a reference to the React renderer. In my app, the `inject` method is never called however, because I load react/react-dom from a third-party CDN before my application code. This means that changed components are never actually refreshed in the DOM.\r\n\r\nI believe the issue is that scripts are loaded in this order:\r\n\r\n1. react-devtools sets up the global hook\r\n2. react/react-dom are loaded on the page, and `inject()` is called\r\n3. user code (which is instrumented with the react-refresh babel plugin) is loaded on the page, and `inject()` is monkey-patched\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nFollow the usage steps in the https://github.com/pmmmwh/react-refresh-webpack-plugin repo, but also add `react` and `react-dom` as externals in your Webpack build:\r\n```\r\nmodule.exports = {\r\n  //...\r\n  externals: {\r\n    react: 'React',\r\n    'react-dom': 'ReactDOM'\r\n  }\r\n};\r\n```\r\nthen load those scripts onto the page from a CDN (e.g. unpkg or cdnjs) before the Webpack bundle.\r\n\r\n**What is the expected behavior?**\r\n\r\n`react-refresh` works the same whether React/ReactDOM are bundled with application code, or loaded via an external script.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6 / Chrome / osx\r\n",
        "title": "react-refresh + ReactDOM: hot reloading only works when bundling React",
        "labels": "Type: Enhancement",
        "id": 44465
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nIf you throw a promise that neither resolves nor rejects, you hit the suspense fallback UI indefinitely and receive no console messaging that helps you debug this.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions that allow for suspense\r\n\r\n**Proposed feature**\r\nLog a warning to the console if a suspense promise takes longer than a certain amount of time to settle. Here is some code demonstrating what that could look like inside of the react codebase:\r\n\r\n```js\r\ntry {\r\n  renderComponent(...);\r\n} catch (err) {\r\n  if (err && err.then) {\r\n    const timeoutId = setTimeout(() => {\r\n      console.warn(`A suspense promise triggered in component <Foo /> did not resolve nor reject after 3 seconds. If the promise never settles, the suspense fallback UI will be shown forever.`)\r\n    }, 3000)\r\n\r\n    err.finally(() => {\r\n      clearTimeout(timeoutId);\r\n    })\r\n\r\n    // Now actually do all the suspense magicks...\r\n  }\r\n}\r\n```",
        "title": "Suspense: add messaging when suspense promise neither resolves nor rejects",
        "labels": "Type: Enhancement",
        "id": 44466
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen `react-dom` is loaded from CDN like `<script src=\"https://cdn.jsdelivr.net/npm/react-dom@16.12.0/umd/react-dom.development.js\"></script>`, `react-refresh` failed to inject hook into devtools.\r\n\r\nI've created a related issue here: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13\r\n\r\nWe should find a way to invoke `injectIntoGlobalHook` function from `react-refresh/runtime`, however this file is in cjs format so we cannot currently do this in a simple way.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like `react-refresh` to publish runtime as a umd bundle so we can reference it from CDN and put it before `react-dom`'s `<script>` element, then invoke `injectIntoGlobalHook` in the right place.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- `react-dom`: 16.12.0\r\n- `react-refresh`: 0.7.0",
        "title": "react-refresh load from CDN?",
        "labels": "Type: Enhancement",
        "id": 44467
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to request a feature\r\n\r\n**What is the current behavior?**\r\nResizing the state/props pane in Component Tab\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nAllow resizing pane\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDevtools 4.2.0 and Chrome Version 78.0.3904.97 \r\n\r\n![image](https://user-images.githubusercontent.com/20182536/69003149-de088780-08c2-11ea-9f32-391faee6a557.png)\r\n",
        "title": "Devtools resize Component State/Props pane",
        "labels": "Type: Enhancement",
        "id": 44468
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n**What is the current behavior?**\r\nAfter firing startTransition, \"current\" component stops reacting to passed props changes while reacting to local state changes.\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIn the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click \"CLICK ME\", it suddenly stops updating.\r\nhttps://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b\r\n\r\n**What is the expected behavior?**\r\nWhen passed props change, it should show the latest value of it where possible\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nExperimental build (0.0.0-experimental-5faf377df)",
        "title": "useTransition: After startTransition, it does not react to passed props changes",
        "labels": "Type: Enhancement",
        "id": 44469
    },
    {
        "body": "**What is the current behavior?**\r\n\r\nHey \ud83d\udc4b I maintain [react-pdf](https://github.com/diegomura/react-pdf). Thanks for your awesome work and making `react-reconciler` for us to use! \r\n\r\n I've got many issues  lately regarding context not working on my library and when doing tests I found out that context values aren't shared between renderers. This makes it impossible to share state such as themes, i18n, redux and more. As a bit of context, React-pdf is not a primary renderer, and as such, when used in the browser it runs on top of react-dom.\r\n\r\nI found the `isPrimaryRenderer` reconciler option that's supposed to be used for \"multiple renderers concurrently render using the same context objects\" but still any access of the context inside react-pdf components get's just the initial value (even if the context was updated with other value). The same happens for `react-art` that also set `isPrimaryRenderer=false`.\r\n\r\n**Minimal demo**\r\n\r\nI prepared a quick demo using react-art so you can see how it currently works:\r\n\r\nhttps://codesandbox.io/s/pedantic-hill-54kid?fontsize=14\r\n\r\n**What is the expected behavior?**\r\n\r\nShare contexts between renderers when using `isPrimaryRenderer` config. Is there a way of achieving this? Am I missing something?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.11.0\r\nReact-dom: 16.11.0\r\n",
        "title": "Is it possible to share contexts between renderers?",
        "labels": "Type: Enhancement",
        "id": 44470
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature (to catch potential bugs)\r\n\r\n**What is the current behavior?**\r\nThe react-hooks/rules-of-hooks ESLint rule catches uses of hooks in conditionals in components, but does not recognise an anonymous function wrapped in forwardRef as a component. \r\n\r\nThe following example breaks the rules of hooks, but isn't caught by the rule:\r\n```jsx\r\n// This should fail\r\nconst FancyButton = React.forwardRef((props, ref) => {\r\n  if (props.fancy) {\r\n    useCustomHook();\r\n  }\r\n  return <button ref={ref}>{props.children}</button>;\r\n});\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe above example should be caught by react-hooks/rules-of-hooks, and raise the \"React Hook \"useCustomHook\" is called conditionally\" error.\r\n",
        "title": "[eslint-plugin-react-hooks] Apply the rules of hooks to a forwardRef-wrapped component",
        "labels": "Type: Enhancement",
        "id": 44471
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the argument of `useCallback` is not a function expression eslint-plugin-react-hooks will not autofix  dependencies.\r\n\r\nExample:\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), []);\r\n```\r\n\r\nWorkaround:\r\n```js\r\nuseMemo(() => debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks@^1.6.0, react@16.9.0-alpha.0\r\n",
        "title": "[eslint-plugin-react-hooks] useCallback does not add dependencies when callback is not function expression",
        "labels": "Type: Enhancement",
        "id": 44472
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBUG\r\n**What is the current behavior?**\r\nWrong warning message is shown\r\n![image](https://user-images.githubusercontent.com/19818679/65120957-13e8d700-da0c-11e9-8289-e5ed7e5fe422.png)\r\n![image](https://user-images.githubusercontent.com/19818679/65120992-206d2f80-da0c-11e9-948d-c7ab494879cf.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\ngithub file: [github file](https://github.com/kambleaa007/AshITech-ReactJS-Redux-ReactRouter-Heroku-OAuth-CircleCI/blob/ba131c0608e3b3f0027fd771db789ae0685133bf/src/components/DishDetailComponent.js)\r\n\r\nsandbox: [sandbox](https://codesandbox.io/s/xenodochial-fast-34ftl?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\nwrite simple functional componenet, put return method NOT render,\r\nwarning tells its render,\r\nactually its not render, its return method \r\n\r\n**What is the expected behavior?**\r\nShould tell, its return method of something.....\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n  \"name\": \"confusion\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"bootstrap\": \"4.0.0\",\r\n    \"bootstrap-social\": \"5.1.1\",\r\n    \"cross-fetch\": \"2.1.0\",\r\n    \"font-awesome\": \"4.7.0\",\r\n    \"gh-pages\": \"^2.0.1\",\r\n    \"mdbreact\": \"^4.18.0\",\r\n    \"prop-types\": \"15.6.0\",\r\n    \"react\": \"^16.4.0\",\r\n    \"react-animation-components\": \"3.0.0\",\r\n    \"react-dom\": \"^16.4.0\",\r\n    \"react-popper\": \"0.9.2\",\r\n    \"react-redux\": \"5.0.7\",\r\n    \"react-redux-form\": \"1.16.8\",\r\n    \"react-router-dom\": \"4.2.2\",\r\n    \"react-scripts\": \"1.1.4\",\r\n    \"react-transition-group\": \"2.3.0\",\r\n    \"reactstrap\": \"5.0.0\",\r\n    \"redux\": \"3.7.2\",\r\n    \"redux-logger\": \"3.0.6\",\r\n    \"redux-thunk\": \"2.2.0\"",
        "title": "Wrong warning message is shown",
        "labels": "Type: Enhancement",
        "id": 44473
    },
    {
        "body": "When inspecting a component that is missing `context` it is displayed as an empty object, meanwhile if the `state` is not initialized it is not displayed at all, for no `props` it is displayed the string `None`. In my humble opinion it is misleading that no context is displayed as an empty object.",
        "title": "DevTools: Uninitialized context is displayed as an empty object",
        "labels": "Type: Enhancement",
        "id": 44474
    },
    {
        "body": "I've a question about a behaviour that appears strange to me.\r\n\r\nI am writing a custom hook.\r\n\r\n```js\r\nconst useToggle =\r\n  (initialState) => {\r\n    const [isTrue, setState] = useState(initialState || false);\r\n\r\n    const False =\r\n      () => {\r\n        setState(false);\r\n      };\r\n\r\n    const True =\r\n      () => {\r\n        setState(true);\r\n      };\r\n\r\n    return [isTrue, True, False];\r\n  };\r\n```\r\n\r\nIt works fine.\r\n\r\nBut if I try to rewrite `False`, and `True` using `setState.bind` I get the following warning in console.\r\n\r\n```js\r\nconst False = setState.bind(null, false);\r\n\r\nconst True = setState.bind(null, true);\r\n```\r\n\r\nThe warning:\r\n\r\n```\r\nWarning: State updates from the useState() and useReducer() Hooks don't support the second callback argument.\r\nTo execute a side effect after rendering, declare it in the component body with useEffect().\r\n```\r\n\r\nIs this the expected behaviour?\r\n\r\nWhy is that? The two snippet appear equivalent to me.\r\n",
        "title": "Custom hook and strange warnings ",
        "labels": "Type: Enhancement",
        "id": 44475
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nThe new DevTools doesn't show the component file path as did the v3 version.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great to show the component file path, it's a really important feature when working in a large codebase.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact DevTools v4 is affected, v3 had it.\r\n",
        "title": "DevTools: Show component file path",
        "labels": "Type: Enhancement",
        "id": 44476
    },
    {
        "body": "Sometimes I see \"cannot find fiber with ID\" when hovering over the tree. They are sporadic. I'll need to dig into why they happen. But we also need to look at our usage of warnings to make sure they're either actionable or gated by DEV/DEBUG.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/166",
        "title": "DevTools: Fix or silence \"cannot find fiber with ID\" warnings when hovering ",
        "labels": "Type: Enhancement",
        "id": 44477
    },
    {
        "body": "Seems non-ideal. Typically range controls handle this case.\r\n\r\n![Screen Recording 2019-04-12 at 07 54 PM](https://user-images.githubusercontent.com/810438/56059844-0e041100-5d5d-11e9-892c-f3872414ffaa.gif)\r\n\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/141",
        "title": "DevTools:  Commit picker should register leaving the picker at a side as setting a terminal value",
        "labels": "Type: Enhancement",
        "id": 44478
    },
    {
        "body": "With 10,000 item nesting in `DeeplyNestedComponents` case:\r\n\r\n<img width=\"432\" alt=\"Screen Shot 2019-04-06 at 15 16 02\" src=\"https://user-images.githubusercontent.com/810438/55670638-f3bec480-587e-11e9-850d-8a247aa42f7c.png\">\r\n\r\nNot super realistic but we could fix this by avoiding recursion in the traversal.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/76",
        "title": "DevTools: Too deep trees can cause a stack overflow",
        "labels": "Type: Enhancement",
        "id": 44479
    },
    {
        "body": "### MVP\r\n- [x] Initial prototype with a tree and toggling.\r\n- [x] Tree should reflect real suspense state.\r\n- [ ] Make it less fragile.\r\n  - [x] Does findDOMNode issue affect this?\r\n- [ ] Ensure expensive tree construction doesn't run unless you're on the tab.\r\n- [ ] Improve navigation so the user doesn't get lost.\r\n  - [ ] Maybe flash nodes.\r\n  - [ ] Maybe offer a \"finder\" tool.\r\n- [ ] Sync selection with the Components tab.\r\n- [ ] Make it look nice. @bvaughn \r\n\r\n### Future\r\n- [ ] Consider a fuzzer.\r\n- [ ] Considering filtering by viewport.\r\n- [ ] Optimize the tree updates.\r\n  - [ ] Consider listening to operations. Don't forget to handle ancestor reorder.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/43",
        "title": "DevTools: Suspense Debugger",
        "labels": "Type: Enhancement",
        "id": 44480
    },
    {
        "body": "Right now I can inspect a component and edit its props but I could not find a way to add a _new_ prop that wasn't already set.\r\n\r\n---\r\nOriginally reported by @steveluscher via https://github.com/bvaughn/react-devtools-experimental/issues/300",
        "title": "DevTools: Should be able to add a prop that is not yet set",
        "labels": "Type: Enhancement",
        "id": 44481
    },
    {
        "body": "Notes from a chat with Benoit:\r\n\r\nIt would be nice if starting profiling (or reload and profiling) in the browser auto-started profiling in DevTools.\r\n\r\nIt would also be nice if viewing a range of time in the Performance tab narrowed down the commits within the Profiler. At least starting the profilers at the same time would enable a manual match-up.\r\n\r\nTo my knowledge, none of the currently available APIs (including experimental) would enable us to support this level of integration.\r\n\r\n---\r\nIf we were to make use of the DevTools protocol, we could [`Profiler.start`](https://vanilla.aslushnikov.com/?Profiler.start) and [`Profiler.stop`](https://vanilla.aslushnikov.com/?Profiler.stop) the built-in profiler in sync with React's own profiler. Chrome's profiler also dispatches [`Profiler.consoleProfileStarted`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileStarted) and [`Profiler.consoleProfileFinished`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileFinished) events which we _could_ use to follow the browser's profiler if we wanted to.\r\n\r\nThere do not appear to be any APIs/events for syncing the zoomed-in range.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/37",
        "title": "DevTools: Better linking between browser Performance tab and DevTools Profiler",
        "labels": "Type: Enhancement",
        "id": 44482
    },
    {
        "body": "Benoit shared feedback that it would be helpful to show the base duration for the tree (and/or selected element) to get a sense of the total cost over time. (Not sure yet what we'd call this.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/55",
        "title": "DevTools: Should Profiler surface the base duration?",
        "labels": "Type: Enhancement",
        "id": 44483
    },
    {
        "body": "Some feedback I've heard from a DevTools user (roughly transcribed by me):\r\n\r\n> I'm trying to pinpoint those renders...with hooks, it's sometimes more unclear to me why something is rendering...I generally don't use devtools much anywhere. I use console.log. But Redux devtools worked really well for me because I could see when things were changing and what exactly changed.\r\n\r\nMaybe we could add an opt-in mode (in Settings > Profiler) to collect more data when profiling about _why_ a component rendered. For example, if `props` or `state` changed, we could show which keys changed (just their name, not their values). Maybe we could do something similar for context and for hooks?\r\n\r\nThen we could add this information to the right side panel for the selected fiber in the Profiler UI.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/98",
        "title": "DevTools: Collect more info when profiling",
        "labels": "Type: Enhancement",
        "id": 44484
    },
    {
        "body": "Product developers sometimes find it useful to jump back and forth between a few components in a tree. Currently this requires scrolling or using the selection tool. Maybe we could allow you to temporarily bookmark one or more components somehow? Then the existing Search interface could maybe be repurposed to let you step between bookmarked components (when there's no search text).\r\n\r\nThese bookmarks would probably not need to be persisted between reloads, so they could be associated with the specific in-memory element<sup>1</sup>.\r\n\r\n<sup>1</sup> Although this association would be lost with a filter change.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/305",
        "title": "DevTools: Component bookmarks",
        "labels": "Type: Enhancement",
        "id": 44485
    },
    {
        "body": "# \"Can you show which hooks changed?\"\r\n\r\n...is a question I've heard a couple of times with regard to the new Profiler change-tracking feature. This request is certainly understandable, but it presents a couple of challenges:\r\n\r\n1. Identifying which hooks values change would requires shallowly re-rendering each function component.\r\n2. Identifying a hook in a non-ambiguous way requires displaying the full hooks tree structure, since hooks aren't named. (Alternately we could support named hooks, #16474)\r\n\r\nLet's take each of a look at each of these below.\r\n\r\n## 1 - Identifying which hooks values change\r\n\r\nOne of the challenge for DevTools when it comes to hooks is identifying custom hooks. Sebastian's [proposed solution](https://github.com/bvaughn/react-devtools-experimental/blob/master/src/backend/ReactDebugHooks.js) is that DevTools temporarily overrides React's hooks dispatcher while it shallowly re-renders the component. During the re-render, each time one of the built-in hooks is used, our override implementation parses the stack to identify \"custom hooks\" (functions higher up in the callstack that begin with \"use\"). After render is completed, we reassemble this information into a tree structure which DevTools can display.\r\n\r\nCurrently we only do this  shallow render when a component is [inspected](https://github.com/bvaughn/react-devtools-experimental/blob/master/OVERVIEW.md#inspecting-an-element), but in order for us to track which hooks have changed while profiling, we would need to shallowly render _every_ component using hooks during the profiling session. Mostly likely we would have to do this during the performance sensitive \"commit\" phase since that's when DevTools is notified of an update.\r\n\r\nI think we could do better than re-running the above hooks override for every component on every commit if we:\r\n* Created a map of Fiber to cached hooks tree structure.\r\n* Lazily populate the above map (by shallow re-rendering) only when a component was updated for the first time.\r\n* Compared Fiber `memoizedState`s to identify changes on future commits and map them back to the tree structure based on their position in the list structure. <sup>1</sup>\r\n\r\nHowever, even with the above optimizations this would still add significant overhead to a performance sensitive phase.\r\n\r\n<sup>1</sup> I think this should work but might also end up being complicated to implement.\r\n\r\n## 2 - Identifying a hook\r\n\r\nAlthough the variables that hooks values are assigned to are meaningfully named, the hooks themselves are unnamed. Because of this, DevTools has no feasible way of identifying a hook short of displaying the entire hooks tree structure. Consider the following example code:\r\n\r\n```js\r\nfunction useCustomHook(...) {\r\n  const [foo, setFoo] = useState(...);\r\n  // ...\r\n}\r\n\r\nfunction ExampleComponent(props) {\r\n  const [bar, setBar] = useState(...);\r\n  const [baz, setBaz] = useState(...);\r\n  const custom = useCustomHook(...);\r\n  // ...\r\n}\r\n```\r\n\r\nThe example above shows 4 hooks: three `useState` and one custom. Let's say that \"foo\" and \"baz\" changed in a particular render. How would DevTools identify this? It could just show \"two state hooks\" but that's not very helpful. I think the only way we could identify it would be to show the entire tree, and visually highlight which hooks in it have changed:\r\n\r\n```\r\nState\r\nState *\r\nCustomHook\r\n  State *\r\n```\r\n\r\nThis is _okay_ but it's not great unless the developer is cross-referencing the component (and probably the custom hooks definition as well). To help with this, we could also _show the values_ but now we're adding more overhead in terms of trackin and bridge traffic.\r\n\r\n## In summary\r\n\r\nClearly both of these challenges can be overcome but they are non-trivial to implement and they will certainly add more runtime overhead to the profiler. Because of this, it may be a while before we add this feature to the DevTools.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/312",
        "title": "DevTools: Profiler: Show which hooks changed",
        "labels": "Type: Enhancement",
        "id": 44486
    },
    {
        "body": "Follow up to a discussion thread on #294 and a Messenger chat with @gaearon.\r\n\r\nThe current UI for editing props/state/hooks values has a couple of shortcomings:\r\n* strings/numeric values are sometimes of an unclear type. (DevTools uses the correct `<input type>` but this is subtle. Showing e.g. quotation marks around strings could be more helpful.\r\n* `null` initial values can only become strings at the moment. (DevTools does not attempt to parse numeric or boolean values\u00a0and change the input type. If it did, we would probably also need to enable a way for you to opt back out of that input type somehow in case it was incorrect.)\r\n* fields that maybe support multiple types (e.g. string | number) are locked into a single type (whichever type they happen to be initially).\r\n\r\nAdditional quirks that might be worth ironing out:\r\n* Non-editable strings are currently wrapped in quotation marks but editable ones aren't.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/321",
        "title": "DevTools: Improve props/state value editing interface",
        "labels": "Type: Enhancement",
        "id": 44487
    },
    {
        "body": "**Note** this issue is outdated. The current thinking is that the alternative, \"*load source code (with source maps) and parse for name*\", is probably the best course of action.\r\n\r\n---\r\n\r\n## The problem\r\n\r\nOne common piece of feedback about DevTools hooks integration is that hooks have no name and can be confusing. Consider the following example:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  const [bar, setBar] = useState(false);\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSomeCustomHook:\r\n  State: true\r\n  State: false\r\n```\r\n\r\nThis information isn't as rich as we would prefer. \u2639\ufe0f\r\n\r\nThe next question is often: \"can you use the name of the variable the hook return value is assigned to?\" but this is tricky because DevTools doesn't actually have any way to access that variable. (Even if DevTools has a handle on the `Example` function above, how would it access the `useSomeCustomHook` function?)\r\n\r\n## The proposal\r\n\r\nThe solution to this would be some form of user-defined metadata (preferably generated by a code transform). Building on the precedent of the `useDebugValue` hook (https://github.com/facebook/react/pull/14559), we might introduce a new no-op hook e.g. `useDebugName`.\r\n\r\nThe above example could make use of this hook like so:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\"); // injected by Babel transform\r\n  const [bar, setBar] = useState(false);\r\n  useDebugName(\"bar\"); // injected by Babel transform\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nDevTools could then display something like:\r\n```\r\nSomeCustomHook:\r\n  State (foo): true\r\n  State (bar): true\r\n```\r\n\r\n## Implementation details\r\n\r\nThe new `useDebugName` hook might be a noop hook provided by React (similar to `useDebugValue`) _or_ it could even be an export from the (soon to be released [`react-debug-hooks` package](https://github.com/facebook/react/blob/master/packages/react-debug-tools/)). The key concerns would be that:\r\n1. It has no effect (and adds no overhead) when DevTools is not present.\r\n2. Not calling it at all (or only calling it for _some_ hooks) should not break or corrupt anything.\r\n\r\nDevTools could override the no-op `useDebugName` implementation before inspecting a component and automatically associate the provided name with the most recently called native hook.\r\n\r\nFor example, the following code should only result in one named hook (the second `useState` call).\r\n```js\r\nconst [foo, setFoo] = useState(true);\r\nconst [bar, setBar] = useState(false);\r\nuseDebugName(\"bar\"); // injected by Babel transform\r\nconst [baz, setBaz] = useState(true);\r\n```\r\n\r\nBeing able to support sparse name metadata would be important for third party code (that might not be transformed to supply the metadata).\r\n\r\nA code transform would be ideal for this scenario because manual annotation would probably be cumbersome. This could also be marketed as a **DEV-only transform** so as not to bloat production bundles with display names. We might even try to detect the env and throw if it isn't DEV (like https://github.com/facebook/react/pull/15939).\r\n\r\n## Further considerations\r\n\r\n### Custom hooks?\r\n\r\nIn some cases, custom hooks might also be ambiguous. Consider the `useSubscription` hook (https://github.com/facebook/react/pull/15022):\r\n```js\r\nfunction Example() {\r\n  const foo = useSubscription(...);\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSubscription: \"some value\"\r\n  State: Object\r\nSubscription: \"some other  value\"\r\n  State: Object\r\n```\r\n\r\nMaybe the value alone (provided by `useDebugValue`) could be enough to uniquely identify the hook, but I suspect in many cases it might not be sufficient. Should we then use `useDebugName` for custom hooks as well?\r\n\r\nI think it would be more fragile given the way our custom hooks detection logic is implemented. Custom hooks are not identified until after a component has finished rendering. In order for us to associate names with custom hooks, we would need to maintain a stack of names. This could lead to potential mismatches though in the event that `useDebugName` was called more (or fewer) times than there are custom hooks.\r\n\r\nFor example, consider the following code:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\");\r\n  useDebugName(\"effectively ignored\");\r\n  const [bar, setBar] = useState(false);\r\n  const [baz, setBaz] = useState(false);\r\n  useDebugName(\"baz\");\r\n\r\n  // ...\r\n}\r\n````\r\n\r\nThe proposed implementation of `useDebugName` would be robust enough to handle naming \"foo\" and \"baz\" states and leaving \"bar\" as anonymous state hook. If we were maintaining a stack of names however, this discrepency would be more difficult to manage.\r\n\r\nPerhaps there is a clever solution to this problem. I would probably suggest leaving it out of the initial implementation though and only revisiting if we determine it's a necessary feature.\r\n\r\n## Alternatives considered\r\n\r\n### Pass debug name as an additional (unused) parameter\r\n\r\nAn alternative approach to calling a separate hook for naming purposes would be to pass the display name as an additional parameter to the native hook, e.g.:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true, \"foo\");\r\n  const [bar, setBar] = useState(false, \"bar\");\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Less code.\r\n* Does not introduce a new hook.\r\n\r\n**Cons**:\r\n* It requires knowledge about the arity of native hooks. Ror example `useReducer` has optional parameters that the transform (or manual code) would need to be aware of to avoid a runtime error.\r\n* It would not be possible to support naming custom hooks (if that's something we decided to do).\r\n\r\n### Load source code (with source maps) and parse for name\r\nWe could use an extension API like [`Resource.getContent`](https://developer.chrome.com/extensions/devtools_inspectedWindow#method-Resource-getContent) to load the source code (including custom hooks) and parse it determine the hook/variable names. Essentially this would work like the proposed transform above, but at runtime.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n\r\n**Cons**:\r\n* Adds additional async loading (complexity) to suspense cache used for hooks inspection.\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a full parser.\r\n\r\n### Call `toString` on the function component and parse for name\r\nA possible 80/20 variant of the above proposal would be to simply call` toString` on the function component and parse any top-level hooks.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Does not require any additional asynchronous code.\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a fullp parser.\r\n\r\n### Use a Babel transform to leave an inline comment (and call `toString` to search for it)\r\nRather than inserting a call to a new custom hook, our code transform could just insert an inline comment with the name. We could then parse the code to find the inline comment, e.g.:\r\n```js\r\nfunction Example() {\r\n  /* hook:foo:Example.react.js:3 */\r\n  const foo = useSubscription(...);\r\n  /* hook:bar:Example.react.js:5 */\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Potentially sidesteps difficulty of parsing certain code patterns (e.g. Babel's destructuring transform).\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* Still requires an explicit transform step.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/323",
        "title": "DevTools: Named hooks",
        "labels": "Type: Enhancement",
        "id": 44488
    },
    {
        "body": "My favorite devtools feature, \"Why did this render?\", has a remaining problem: it's too hard to flip through a long list of renders in the Rendered At list to find an interesting render. I know I can use the mouse (or Tab and then Space) to move to the next render, but that's painful if there are 50+ renders to work through.\r\n\r\nSuggestion: when an item in the Rendered At list has focus, then up/down arrows should change the selected render (and scroll the pane up/down if the selected render isn't visible). \r\n\r\nThis would be helpful for accessibility too.\r\n\r\nI'll file a separate issue for keyboard support for the flamegraph view. Keyboard access to that view will be much harder to implement so it makes sense to do it separately.\r\n\r\n---\r\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/332",
        "title": "DevTools: Switch between \"Rendered At\" renders using keyboard arrow keys",
        "labels": "Type: Enhancement",
        "id": 44489
    },
    {
        "body": "It would be good to have keyboard navigation on the flamegraph view to make it easier and faster to scoot around to different components in the same render. \r\n\r\nGiven that flamegraph is implemented in SVG and given the complexity of navigating through an uneven grid, I suspect keyboard access is probably beyond the scope of near-future DevTools releases, but wanted to file this issue while it's top-of-mind. \r\n\r\nExpected behavior: \r\n* There should be a selected/focused UI of some sort around the active component. This could be a black or colored outline around the currently selected component, or perhaps a background pattern like diagonal hatching.  IMHO, this would be valuable even without keyboard support! \r\n* Up arrow should change selection to the parent component\r\n* Left/Right arrows should move selection to the prev/next sibling components. Should wrap when at the beginning or end of the line.\r\n* Tab should move focus to the right pane (this matches behavior of other DevTools tabs like Elements)\r\n* Shift+Tab should move focus to the rightmost control in the toolbar (currently this is the \"next commit\" button)\r\n\r\nThis is a companion issue to #332 which asks for keyboard access for the \"Rendered At\" list. Compared to this suggestion, #332 should be much easier to implement so I split them.\r\n\r\n---\r\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/333",
        "title": "DevTools: Keyboard arrow-key navigation for the flamegraph view",
        "labels": "Type: Enhancement",
        "id": 44490
    },
    {
        "body": "React DevTools v4 adds a new reload and profile feature to measure perf for application \"mount\" ([although it required a bit of hacking](https://github.com/bvaughn/react-devtools-experimental/pull/35)). I don't feel knowledgeable enough about React Native to tackle it, so my current plan is to just **not** support this feature for RN.\r\n\r\nIf we did decide to support it,I think we would need to solve the following:\r\n\r\n1. A reload hook on the backend that worked for all bundle types (not just DEV).\r\n2. Some assurance that the backend will be injected/initialized _before_ the first mount/commit (or a mechanism to delay the first commit, like we do in the browser).\r\n3. Some way for third party code to request a production+profiling build ([similar to how DOM does it](https://fb.me/react-profiling)).\r\n4. A sync storage mechanism (or some other way for DevTools could leave a flag for itself so it knows to begin profiling immediately after reload+connection).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/336",
        "title": "DevTools: React Native: Support reload-and-profile be an important feature",
        "labels": "Type: Enhancement",
        "id": 44491
    },
    {
        "body": "DevTools v4 added a pretty powerful new component filtering feature that enables devs to filter out components by type, name, or file system location. Because these filters can be a bit elaborate to create, they are saved between sessions to improve dev experience.\r\n\r\n**Unfortunately, I don't think I am going to be able to support the persistence functionality for React Native.** (In other words, filters will be forgotten each time you reload the app.)\r\n\r\nThe reason for this is a mix of timing and context. The biggest limiting factor is the lack of a synchronous storage option. React Native has a couple of faux sync storage options, but they just in-memory wrappers around an async storage layer and they require async initialization. That _could_ work if the React Native backend waited to initialize DevTools until it also initialized the async storage layer, _but_ this has implications on reload-and-profile support (#336).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/337",
        "title": "DevTools: React Native: Remember saved component filters between reloads",
        "labels": "Type: Enhancement",
        "id": 44492
    },
    {
        "body": "It would be useful to force components into an error state, in order to test error boundaries (similar to how the suspense toggle works).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/340",
        "title": "DevTools: Triggering Error Boundaries from DevTools",
        "labels": "Type: Enhancement",
        "id": 44493
    },
    {
        "body": "Building on top of #360\r\n\r\nWe could probably improve the search UX in a couple of ways:\r\n\r\n* Visually indicate when the \"match\" is because of a HOC name, e.g.\r\n<img width=\"161\" alt=\"Screen Shot 2019-08-03 at 1 54 21 PM\" src=\"https://user-images.githubusercontent.com/29597/62416804-36f32f00-b5f6-11e9-9150-e32f652c7f98.png\">\r\n\r\n* Match built-in HOC types (e.g. searching \"me\" should match `React.memo` HOCs, searching \"f\" should match `React.forwardRef`, etc.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/365",
        "title": "DevTools: Improve HOC search UX",
        "labels": "Type: Enhancement",
        "id": 44494
    },
    {
        "body": "* Don't show \"context\" for classes without either contextType or contextTypes\r\n* For classes with contextTypes, change the label to \"legacy context\" instead\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/368",
        "title": "DevTools: Don't show \"context\" for classes without either contextType or contextTypes",
        "labels": "Type: Enhancement",
        "id": 44495
    },
    {
        "body": "I have a particular pattern that I struggle with when navigating deep trees in devtools: I want to see all siblings of a node together.\r\n\r\nSay I'm in the middle of something and I wonder what are all nodes on the same level. It's super hard to actually get to that state. I wonder if we could tweak \"left\" button to do that as an intermediate state.\r\n\r\n* first press: collapse the current node\r\n* second press: collapse all siblings (new)\r\n* third press: move to the parent\r\n\r\nMaybe this is too crazy :-) Or maybe there's another mechanic that can achieve the same effect. The goal here is to be able to make sense of the tree structure by going _upwards_. Currently implementation details of children prevent me from seeing it. (At least, with the \"expand\" mode on \u2014 which is now on by default.)\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384",
        "title": "DevTools: An easier way to see all siblings",
        "labels": "Type: Enhancement",
        "id": 44496
    },
    {
        "body": "It\u2019s confusing that 0.14 or earlier is in half-working state where it displays a tree (but incorrectly). We should detect it and fully disable if it doesn\u2019t work. Or fix it.\r\n\r\nIf we go the route of disabling support:\r\n1. DevTools should show a warning message that clearly indicates the version of React isn't supported. (This is probably a good idea for v13 and older anyway.)\r\n2. DevTools should not throw any errors.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384",
        "title": "DevTools: Fully disable 0.14 support",
        "labels": "Type: Enhancement",
        "id": 44497
    },
    {
        "body": "The `ProfilerContext` is currently comprised of several pieces of related state, each managed with `useState`. This necessitates awkward checks like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L126-L131) or even worse like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/SnapshotSelector.js#L62-L73) or [this](https://github.com/bvaughn/react-devtools-experimental/blob/source/src/devtools/views/Profiler/Profiler.js#L71-L83).\r\n\r\nThis context should be refactored to use a single reducer (`useReducer`) like `TreeContext`. This is a bit more involved at the moment because of suspense and the `ProfilerContext` being higher level than the suspense cache. Although maybe we could work around this by using some sort of [subscription](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L118-L124)?\r\n\r\nSee related issues like #16441 and commit [4697f5b](https://github.com/bvaughn/react-devtools-experimental/commit/4697f5b37967b85b2c844044aeebb5b1a740875d).",
        "title": "Refactor ProfilerContext to use reducer instead of multi-state",
        "labels": "Type: Enhancement",
        "id": 44498
    },
    {
        "body": "```js\r\n  let foo = {}\r\n  useEffect(() => {\r\n    foo.bar.baz = 43;\r\n  }, []);\r\n```\r\n\r\nThis asks you to include `foo.bar.baz` into deps. But this doesn't make sense, as you write to it. Instead it should ask to include `foo.bar` into array.\r\n\r\nIf `foo` is a newly created object in render scope then we might additionally nudge you to `useRef` for it instead. Because otherwise it won't be shared between renders.",
        "title": "[ESLint] Assignment like foo.bar.baz = X should warn about foo.bar instead",
        "labels": "Type: Enhancement",
        "id": 44499
    },
    {
        "body": "If you write:\r\n\r\n```js\r\nimport React, {useEffect} from 'react';\r\nconst Foo = ({ orgId }) => {\r\n  const fetchOrg = () => {\r\n    alert(orgId);\r\n  };\r\n  useEffect(() => {\r\n    fetchOrg();\r\n  }, [orgId]);\r\n  return <div />;\r\n};\r\n```\r\n\r\nthen you get the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'fetchOrg'. Either include it or remove the dependency array\r\n\r\nBut if you follow that advice and add `fetchOrg` to the dep array, you get:\r\n\r\n> The 'fetchOrg' function makes the dependencies of useEffect Hook (at line 6) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'fetchOrg' definition into its own useCallback() Hook\r\n\r\nIdeally it could suggest the second solution immediately, instead of suggesting a remediation that it will immediately warn about.",
        "title": "eslint-plugin-react-hooks suggests adding a dependency on a function that always changes",
        "labels": "Type: Enhancement",
        "id": 44500
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n> Write your code so that it still works without useMemo\r\n\r\n-- https://reactjs.org/docs/hooks-reference.html#usememo\r\n\r\nI can try writing my code with this in mind but it would be very helpful if React could try to help spot issues.\r\n\r\n**What is the expected behavior?**\r\n\r\nStrictMode can already help us detect side-effects in render by calling it twice. It also helps detecting side-effects in `useMemo` by calling it twice if the dependencies change. However, there's no way to simulate a purge of the cache.\r\n\r\nIt might help calling the factory in StrictMode regardless of the dependencies (or only on the second render). Other approaches like `<StrictMode areMemoDependenciesEqual={...} />` would give more control to the user.\r\n\r\nThere's already a working solution by using some feature flag at build time e.g. `React.useMemo(factory, __STRICT__ ? undefined : [dependency])` but the linter can't work with that. Using `React.useMemo(factory, [dependency, PURGE_MEMO_CACHE.current])` would make it more controllable if we write e.g. test instructions but the linter complains about those too. I don't think we have a way to detect if React is between two render calls so that we can purge the cache by flipping `PURGE_MEMO_CACHE.current`\r\n\r\nThis is also somewhat opposite to #15278 because we want an API to opt-in to cache purging.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nFuture versions of React that might forget the dependencies.\r\n",
        "title": "useMemo in StrictMode",
        "labels": "Type: Enhancement",
        "id": 44501
    },
    {
        "body": "`ReactTestRenderer.act()` only works for `react-test-renderer`.\r\n`ReactTestUtils.act()` only works for `react-dom`.\r\n\r\nUnfortunately due to poor naming, people confuse those two things.\r\n\r\nWe need to:\r\n\r\n* Make sure `ReactTestRenderer.act()` around `react-dom` updates doesn't silence the warning, and vice versa. (Currently, it does \u2014 but you can fix it by using an empty object that's unique per renderer instead of a `true` value.)\r\n\r\n* Add a special warning message when a different renderer is \"acting\" updates. That warning message should suggest that you're supposed to use `act()` corresponding to the renderer you're using, e.g. `react-dom/test-utils` for `react-dom`.\r\n\r\nThis should fix most cases where people wrap updates in the wrong `act`.",
        "title": "Using TestRenderer.act() should not silence the ReactDOM warning",
        "labels": "Type: Enhancement",
        "id": 44502
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n- *Feature*\r\n\r\n**What is the current behavior?**\r\n\r\nFor toolchains/languages that munge the names of functions, the display of custom hooks in React DevTools is unreadable.\r\n\r\nFor instance, in ClojureScript we might have a custom hook named `<-window` that would be compiled into the name `my_app$hooks$_LT__window`.\r\n\r\n**What is the ~expected~ desired behavior?**\r\n\r\nTo have the ability to set a `displayName`-like value on a custom hook to customize it's name in React DevTools.\r\n\r\nA potential solution:\r\n\r\n```javascript\r\nfunction useSomeReallyLongNameThatIDontWantToShow() {\r\n  // Implement my custom hook\r\n}\r\n\r\nuseSomeReallyLongNameThatIDontWantToShow.debugName = \"useShortName\";\r\n```\r\n\r\n`useShortName` would show up in React DevTools instead of `useSomeReallyLongNameThatIDontWantToShow`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8 / Chrome / macOS 10.13.6",
        "title": "Customize display name of custom hooks",
        "labels": "Type: Enhancement",
        "id": 44503
    },
    {
        "body": "Can we expose a lighter weight set of Performance \"marks\" for people consuming browser Performance tracing? e.g. when a particular `Profiler` commits. This should be a lot less heavyweight than the full mark-and-measure stuff.",
        "title": "Profiler marks",
        "labels": "Type: Enhancement",
        "id": 44504
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'd like to report a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nFirst of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.\r\n\r\n`React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.memo` should forward displayName for the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React 16.8.5\r\n* Jest 24.5.0\r\n* enzyme 3.9.0\r\n* enzyme-adapter-react-16 1.11.2\r\n\r\n---\r\n\r\nN.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!\r\n\r\nI'd be happy to submit a PR if the issue is not too complex to look into :smile: ",
        "title": "Memoized components should forward displayName",
        "labels": "Type: Enhancement",
        "id": 44505
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nSuppose you give an `undefined` object or forget to provide parameters to `useEffect`:\r\n\r\n```js\r\nconst App = () => {\r\n    React.useEffect();\r\n    return \"\";\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('container'));\r\n```\r\n\r\nOn JSFiddle (https://jsfiddle.net/g39javzq), this error stack is logged:\r\n\r\n```\r\nUncaught TypeError: create is not a function\r\n    at commitHookEffectList (react-dom.development.js:17372)\r\n    at commitPassiveHookEffects (react-dom.development.js:17396)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:143)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:193)\r\n    at invokeGuardedCallback (react-dom.development.js:250)\r\n    at commitPassiveEffects (react-dom.development.js:18863)\r\n    at wrapped (react.development.js:1353)\r\n    at flushFirstCallback (react.development.js:587)\r\n    at flushWork (react.development.js:699)\r\n    at MessagePort.channel.port1.onmessage (react.development.js:1093)\r\n```\r\n\r\n...though on a local project in React 16.8.4, this stack is logged:\r\n\r\n```\r\nUncaught TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\r\n    at _iterableToArrayLimit (my-project.chunk.js:123)\r\n    at _slicedToArray (my-project.chunk.js:456)\r\n    at MyComponent (myFile.js:7)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNeither of these were useful during the 5 minutes it took to find the culprit `useEffect` that should have been a `useState`.\r\n\r\nIn development, we check for an `undefined` `deps` argument in `useEffect` and give a better warning?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.4, Chrome on Mac.\r\n",
        "title": "Better error message when useEffect is called with no parameters",
        "labels": "Type: Enhancement",
        "id": 44506
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere are no warnings when assigning to `ref.current` in render phase.\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven that this mostly works now, but may cause issues on release of concurrent mode, it would be helpful to have a warning when assigning to a prop outside of `useEffect()`.\r\n\r\nE.g. I recently wrote this code, which works fine at the moment, and didn't realize the possible issue until @gaearon pointed out the missing `useEffect()`:\r\n\r\n```js\r\nexport function useDidChange(value) {\r\n  let ref = useRef()\r\n  let didChange = ref.current !== value\r\n  ref.current = value\r\n  return didChange\r\n}\r\n```\r\n\r\nIf a warning is not possible due to the lazy initialization pattern, perhaps an eslint rule may be a solution?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions",
        "title": "Warnings when assigning to ref in render phase?",
        "labels": "Type: Enhancement",
        "id": 44507
    },
    {
        "body": "I've noticed a strange bug with the react redux `forwardRef` opt-in.\r\nIf i use it with a connected class component, everything is ok:\r\n```javascript\r\nconst MyComponent = class Test extends React.Component {\r\n  foo = () => console.log(\"Print foo from Test component\");\r\n  render() {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst ConnectedComponent = connect(\r\n  null,\r\n  null,\r\n  null,\r\n  { forwardRef: true }\r\n)(MyComponent);\r\n\r\nconst store = createStore(() => {});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedComponent\r\n        ref={ref => {\r\n          if (ref) ref.foo();\r\n        }}\r\n      />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\nIf i use it with a connected functional component that use `forwardRef` with `useImperativeHandle`, i obtain a strange error: `create is not a function` in `commitHookEffectList` `react-dom` method.\r\n\r\n```javascript\r\nconst MyComponent = React.forwardRef((props, ref) => {\r\n  useImperativeHandle(ref, {\r\n    foo: () => console.log(\"Print foo from Test component\")\r\n  });\r\n\r\n  return null;\r\n});\r\n\r\nconst ConnectedComponent = connect(\r\n  null,\r\n  null,\r\n  null,\r\n  { forwardRef: true }\r\n)(MyComponent);\r\n\r\nconst store = createStore(() => {});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedComponent\r\n        ref={ref => {\r\n          if (ref) ref.foo();\r\n        }}\r\n      />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nI create a codepen to reproduce the issue: https://codesandbox.io/s/r7rpml460o\r\n\r\nPS: Sorry for the cors error, but i don't find the way to add `react@next`as cdn",
        "title": "useImperativeHandle should warn when second arg isn't a function",
        "labels": "Type: Enhancement",
        "id": 44508
    },
    {
        "body": "``` js\r\nexport const Counter = () => {\r\n    let count, setCount;\r\n    if (0 === 1) {\r\n        [count, setCount] = useState(0);\r\n    }\r\n    return count;\r\n};\r\nconst wrapper = Component => Component;\r\nexport const WrappedCounter = wrapper(() => {\r\n    let count, setCount;\r\n    if (0 === 1) {\r\n        [count, setCount] = useState(0);\r\n    }\r\n    return count;\r\n});\r\n```\r\nLinter shows an error in the first component, but ignore the second one.",
        "title": "eslint-plugin-react-hooks does not work with wrapped components",
        "labels": "Type: Enhancement",
        "id": 44509
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a feature (enhancement).\r\n\r\n**What is the current behavior?**\r\n\r\n`props` parameter isn't validated in `Component` and `PureComponent`. Omitted `props` is a common mistake that results in undefined `this.props` in constructor. This may result in a problem:\r\n\r\n```js\r\nclass MyComponent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { a: 1, b: this.props.b }; // cannot read b property of undefined\r\n  }\r\n}\r\n```\r\n\r\nA problem may be harder to determine if previously working code stops working when refactored:\r\n\r\n```js\r\nclass MyComponent extends Component {\r\n  constructor() {\r\n    super(); // no error\r\n  }\r\n\r\n  componentWillMount() {\r\n    // rewriting this to constructor code will result in situation above\r\n    this.setState({ a: 1, b: this.props.b });\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`Component` and `PureComponent` validate `props` parameter to be an object, or `arguments > 0` at least and display a warning in development mode in case `props` isn't passed from child constructor.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.7.0-alpha.0",
        "title": "Display a warning if Component is called without props",
        "labels": "Type: Enhancement",
        "id": 44510
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nGetting `TypeError: dispatcher.useState is not a function` when trying to call `useState`; this is happening in a create-react-app, as well as in the CodeSandbox example below.\r\n\r\n**Example:**\r\nhttps://codesandbox.io/s/7kp55lwwpj\r\n\r\n**What is the expected behavior?**\r\n`useState` hook function should execute without error as defined in the [API documentation](https://reactjs.org/docs/hooks-reference.html#usestate)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n**React**: v16.7.0-alpha.0\r\n**React-DOM**: 16.5.2 (CSB), 16.7.0-alpha.0 (local)\r\n**React-Scripts**: 2.0.3 (CSB), 2.1.0 (local)\r\n",
        "title": "Improve message \"dispatcher.useState is not a function\" when mixing react@next with react-dom@16.5.2",
        "labels": "Type: Enhancement",
        "id": 44511
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen calling `ReactDOM.createPortal` from within a `<noscript />`, nothing happens, no error is logged.\r\n\r\n```javascript\r\nReactDOM.render(\r\n  <noscript>\r\n    {ReactDOM.createPortal(\"yo\", modalNode)}\r\n  </noscript>,\r\n  appNode\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nWhether:\r\n- warn that it doesn't work (it worked in the previous version)\r\n- render the portal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.5.0 & more recent\r\n- Reproducible in every browser\r\n\r\n**Repro**\r\nhttps://jsfiddle.net/bloodyowl/n5u2wwjg/223296/",
        "title": "Warn if ReactDOM.createPortal is inside a noscript or other text content tag",
        "labels": "Type: Enhancement",
        "id": 44512
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nQuite possibly a bug (or maybe confusion about the current API)\r\n\r\nI am using the new Context API as well as the new `static contextType` in React 16.6. I am passing context down a couple components deep but when I attempt to access the context within the component, the object is empty (~only the default value passed into `createContext` is being displayed~). This is happening in a current feature I am working on at my job, so I cannot display that code, but I did create a Codesandbox with the gist of the problem.\r\n\r\nHere is a demonstration of the behavior: https://codesandbox.io/s/r4myz959ro\r\n\r\nI would expect to be able to access the current values of the context. This way, if those values change, I would always have the most recent values. Now, maybe this is expected behavior, however, it would be confusing if it is.\r\n\r\nReact 16.6\r\nReactDOM 16.6\r\n",
        "title": "16.6 Context API not working in class component",
        "labels": "Type: Enhancement",
        "id": 44513
    },
    {
        "body": "*[Edit by @acdlite: Decided in comments below that we will change the semantics so that a missing `fallback` prop means the exception should propagate to the next parent (like a rethrow). That way a Suspense component can specify other props like `maxDuration` without needing to provide a fallback, too.]*\r\n\r\n---\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\n`<React.Suspense>` does not warn you if you omit a `fallback`). While redundant for TS/Flow usage,  I misspelled the `fallback` prop by accident in a playground and was tearing my hair out trying to figure out why things were not working as expected. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nOmit a `fallback`. \r\n\r\n**What is the expected behavior?**\r\nReact should warn during development if `fallback` is `undefined`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nMaster \r\n",
        "title": "Suspense component should only capture if fallback prop is defined",
        "labels": "Type: Enhancement",
        "id": 44514
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature (an improvement)\r\n\r\n**What is the current behavior?**\r\n\r\nWhen defining more than two parameters for a React.forwardRef render function a warning message stating \"forwardRef render functions accept two parameters: props and ref. Did you forget to use the ref parameter?\" gets logged.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/5v704qxvnx\r\n\r\n**What is the expected behavior?**\r\n\r\n**Option 1**\r\n\r\nOverall the message could be more explicit on accepting **exactly** two parameters. Also, when the arity is greater than 2 the second part of the message may be omitted. For instance:\r\n\r\n\"\"forwardRef render functions accept **exactly** two parameters: props and ref\"\r\n\r\n**Option 2**\r\n\r\nIf defining more than 2 arguments to the function is ok, which may be the case since the real goal for this warning is just to make sure people use the ref parameter, I think the message could not be shown for arity > 2, therefore chaging the condition of `=== 2` to `> 1`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.5.0 which is the one that includes this new warning",
        "title": "Warning if React.forwardRef render function doesn't take exactly two arguments is confusing when more than 2 arguments",
        "labels": "Type: Enhancement",
        "id": 44515
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf you're really tired and forget to use a `Context.Provider`, and instead use the `Context` as if it were a provider, React (understandably) freaks out, but the error message is confusing. i.e.:\r\n\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Context = React.createContext();\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <Context value={\"oops\"}>\r\n        <div>duh</div>\r\n      </Context>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nThis results in the console looking something like (pasted from codesandbox):\r\n\r\n```\r\nWarning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\nWarning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\nThe above error occurred in one of your React components:\r\nError in sandbox: \r\nTypeError: render is not a function\r\nCould not consume error: \r\nError {}\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[![Edit 1wv0ly494l](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1wv0ly494l)\r\n\r\n**What is the expected behavior?**\r\n\r\nAn error that (roughly paraphrased) says something along the lines of:\r\n\r\n```\r\nhey idiot, you're trying to use a context directly. You want to use context.Provider. Go take a shower and try again.\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3+\r\n",
        "title": "passing React.createContext() mistakenly as if it were an element causes confusing error",
        "labels": "Type: Enhancement",
        "id": 44516
    },
    {
        "body": "We recently chatted about https://github.com/facebook/react/pull/13367 and related work (e.g. https://github.com/facebook/react/pull/13394) with @sebmarkbage, and he raised a good point.\r\n\r\nIt seems like overall treating them consistently is adding significant overhead in the implementation readability. And there\u2019s undoubtedly runtime overhead to it too. There are two separate issues here:\r\n\r\n* **warning** for invalid values\r\n* ensuring that the output for invalid values is **consistent** (e.g. functions are always skipped)\r\n\r\nThe conclusion we came to is that we should keep **warning** for bad values, but **as long as we warn, consistency is not necessary**. It's fine if we sometimes stringify a function, and sometimes skip it, as long as we always warn for those cases\r\n\r\n**Our guiding principle for invalid inputs should be that we handle them with the least amount of overhead** (both at runtime, and in terms of code size), not that they\u2019re always handled the same way.\r\n\r\nOne exception to this is probably Symbols because they throw when stringified. So it seems like skipping them is actually desirable \u2014 unless we're okay with errors.",
        "title": "Relax ToString consistency guarantees",
        "labels": "Type: Enhancement",
        "id": 44517
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug, I believe\u2014requested to file a new issue per https://github.com/facebook/react/issues/12453#issuecomment-414868619\r\n\r\n**What is the current behavior?**\r\nWhen using ReactTestUtils that navigate the trees for composite components, I am unable to find instances of components wrapped in `React.forwardRef`:\r\n\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n// error, finds 0 instances\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nJSFiddle link [here](https://jsfiddle.net/Luktwrdm/974/)\r\n\r\nI have a HOC that returns a forwardRef pretty much exactly like the one written up in the [docs](https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components), except while using React Context:\r\n\r\n```jsx\r\nconst MyContext = React.createContext(someDefault);\r\n\r\nconst withMyContext = (Component) => {\r\n  class MyContextConsumer extends React.Component {\r\n    render() {\r\n      const {forwardedRef, ...rest} = this.props;\r\n\r\n      return (\r\n        <MyContext.Consumer>\r\n          {(value) => (\r\n            <Component\r\n              {...rest}\r\n              ref={forwardedRef}\r\n              myValue={value}\r\n            />\r\n          )}\r\n        </MyContext.Consumer>\r\n      );\r\n    }\r\n  }\r\n\r\n  return React.forwardRef((props, ref) => (\r\n    <MyContextConsumer {...props} forwardedRef={ref} />\r\n  ));\r\n};\r\n\r\n@withMyContext\r\nclass MyHOCForwardedComponent extends React.Component {\r\n  render() {\r\n     return <div>HELLO</div>;\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would hope that we could still navigate the tree, such that\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n```\r\n\r\nis able to find the rendered instance.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.4\u2014affected everywhere, I believe.\r\n\r\nThank you for the time!!\r\n",
        "title": "forwardRef precludes use of composite component test utils methods",
        "labels": "Type: Enhancement",
        "id": 44518
    },
    {
        "body": "This:\r\n\r\n```js\r\ncreateElement(<div />)\r\n```\r\n\r\ndoesn't currently give a distinguishable message.\r\n\r\nhttps://stackoverflow.com/questions/51110436/wrapping-provider-in-same-component-throws-element-type-is-invalid-expected-a-s\r\n\r\nBut we can easily detect it by checking for `$$typeof` and in that case suggest something more concrete (e.g. \"Did you accidentally export JSX instead of a component?\").",
        "title": "Add a more helpful message when passing an element to createElement() as a type",
        "labels": "Type: Enhancement",
        "id": 44519
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI am proposing adding a warning in development.\r\n\r\n**What is the current behavior?**\r\n\r\nwhen I do `this.setState(({ bool }) => { bool: !bool });` this is valid javascript but is meaningless in React. ESLint:no-label helps to catch this but we can probably do one better by building a warning into dev-mode React itself.\r\n\r\nsandbox demo: https://codesandbox.io/s/xopj5nx07o\r\n\r\n**What is the expected behavior?**\r\n\r\nwarn when a function is applied to setState that returns undefined. if the user wants to indicate nothing changed they should return null.",
        "title": "Warn when setState is a function that doesn't return",
        "labels": "Type: Enhancement",
        "id": 44520
    },
    {
        "body": "See https://github.com/facebook/react/pull/12985 for details. Not sure if it matters in practice. Do people often have many (dozens and more?) providers deep inside the tree?\r\n\r\nIf we can remove the loop there it would be nice.",
        "title": "Popping SSR providers is O(N) where N = number of providers on the stack",
        "labels": "Type: Enhancement",
        "id": 44521
    },
    {
        "body": "Currently when hydrating server-rendered markup we ignore changes the user makes before hydration. We also don't reset their changes once hydration finishes. The motivation there was likely to avoid losing user input. See this test:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/__tests__/ReactDOMServerIntegrationForms-test.js#L543-L552\r\n\r\nThe problem with that is that it assumes the value will continue to be changed after hydration completes (e.g., a user keeps typing). If they _don't_, then the DOM and React will be out of sync.\r\n\r\nWe should try to detect if there have been any changes made to an input when hydrating, and if so dispatch a change event so that the component is notified of the new value.\r\n\r\nSee https://github.com/facebook/react/pull/12939 for some more discussion.\r\n",
        "title": "Fire change events for changes made to inputs before hydration",
        "labels": "Type: Enhancement",
        "id": 44522
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nThe warning for a failure to initialize state when using `getDerivedStateFromProps` is not as clear as it could be.\r\n\r\nThis component produces the warning:\r\n> MyComponent: Did not properly initialize state during construction. Expected state to be an object, but it was undefined.`\r\n\r\n```js\r\nclass MyComponent extends React.Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return null;\r\n  }\r\n  render() {\r\n    return <span>Foo</span>\r\n  }\r\n}\r\n```\r\n\r\nThe warning can be resolved by adding `state = {}` either in the class definition or the constructor, or by not using `getDerivedStateFromProps`.\r\n\r\nSee https://github.com/reactjs/reactjs.org/issues/796 for more detail on why this warning message can be counter-intuitive.\r\n\r\nSince the [warning is specific](https://github.com/facebook/react/blob/b548b3cd640dbd515f5d67dafc0216bb7ee0d796/packages/react-reconciler/src/ReactFiberClassComponent.js#L509-L510) to the use of `getDerivedStateFromProps` and not triggered by any other state or lifecycle methods, and state initialization isn't required for other state methods like `this.setState`, it would make sense to me to mention `getDerivedStateFromProps` explicitly in the warning.\r\n\r\nHere's a proposal for a new warning message:\r\n> MyComponent: Component state must be initialized when using getDerivedStateFromProps. Expected state to be an object, but it was undefined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact >= 16.3.0\r\n",
        "title": "Improve warning message for failure to initialize `state` when using `getDerivedStateFromProps`",
        "labels": "Type: Enhancement",
        "id": 44523
    },
    {
        "body": "https://github.com/facebook/react/blob/ba245f6f9b0bf31c2ebff5c087c21bcae111e6c3/packages/react-reconciler/src/ReactFiberNewContext.js#L51\r\n\r\nWe currently don't allow multiple renderers share the same context.\r\n\r\nHowever, we should relax that constraint. They should be allowed, as long as rendering isn't interleaved. So when we pop the provider, we should also pop the sigil.\r\n\r\nWe need this to run Fabric and RN at the same time.",
        "title": "Multiple Renderers Should Allow Context",
        "labels": "Type: Enhancement",
        "id": 44524
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nImprovement request/discussion\r\n\r\n**What is the current behavior?**\r\nRendering `<fooBar/>` in ReactDOM:\r\n> fooBar is using uppercase HTML. Always use lowercase HTML tags in React.\r\n\r\n**What is the expected behavior?**\r\nThe warning message can be improved to make it more obvious how to fix the issue for different use cases. For example, it's not obvious from this message that custom components should add dashes or that the first letter should be capitalized if it's actually a React component. Here's my idea, but I'm open to suggestions:\r\n\r\n> Warning: \\<foorBar /\\> looks like an HTML or web component element because it starts with a lowercase letter, but it has uppercase letters instead of dashes. Use PascalCase for React components, or lowercase letters and dashes for HTML.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster: eb6e752cabafed0b72e1d0a38819ff156557d537",
        "title": "Improve ReactDOM's uppercase HTML warning",
        "labels": "Type: Enhancement",
        "id": 44525
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nI get a confusing error when not using a new line in the children of a Consumer un the new Context API:\r\nhttps://codesandbox.io/s/13n733xp5j\r\n\r\nError:\r\n![selection_108](https://user-images.githubusercontent.com/10557463/36343595-1e28ece8-13dc-11e8-99ae-2c4a2e707000.png)\r\n\r\nFix:\r\n![selection_109](https://user-images.githubusercontent.com/10557463/36343599-245ae51c-13dc-11e8-95b2-be8491ccd39f.png)\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nComponent just getting redered\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1 and 16.3.0-alpha.0, Chromium 63, Archilinux. React 16.2 didn't support the new Context Api.\r\n",
        "title": "Children of Consumer without new line gives \"TypeError: render is not a function\"",
        "labels": "Type: Enhancement",
        "id": 44526
    },
    {
        "body": "The use case is when an abstraction wants to listen to some event bubbling up and intercept the event somehow.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <div onClick={() => props.onAction()}>{props.children}</div>;\r\n}\r\n```\r\n\r\nPerhaps there is some state and context involved too.\r\n\r\nThis works fine today as long as you can wrap it in a `<div />`. However, you can't necessarily always do that. I hear that some of this will be relaxed but conceptually I think the constraints will remain in many environment that you don't want a wrapper element around these.\r\n\r\n```js\r\n<ul>\r\n  <Abstraction onAction={...}>\r\n    <li>A</li>\r\n    <li>B</li>\r\n  </Abstraction>\r\n</ul>\r\n```\r\n\r\n```js\r\n<table>\r\n  <tbody>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\nIt would be nice to be able to use fragments for this.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <Fragment onClick={() => props.onAction()}>{props.children}</Fragment>;\r\n}\r\n```\r\n\r\nIt is easy to implement with the synthetic event system but I suspect it is doable with other approaches too (including just inserting an element called `<fragment />` in the DOM).\r\n\r\nTo implement this we'd need somewhere to store the \"current\" props. We can use the `stateNode` on fragment fibers to hold that. We also need to schedule commit phase effects whenever the set of event handlers on a fragment changes. In the commit phase we update the stateNode on both Fibers to hold the \"current props\".\r\n\r\nThat way when we bubble up the fiber return pointers, we know that stateNode holds the current set of props and those will be the ones we extract event handlers from.",
        "title": "Event Handlers on Fragments",
        "labels": "Type: Enhancement",
        "id": 44527
    },
    {
        "body": "Same as https://github.com/facebook/react/issues/10103, but for the server renderer. You can look at implementation in https://github.com/facebook/react/pull/11168 and do something very similar in `ReactPartialRenderer.js`.",
        "title": "Warn in server renderer if class doesn't extend React.Component but has a render() method",
        "labels": "Type: Enhancement",
        "id": 44528
    },
    {
        "body": "Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):\r\n\r\n>I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.\r\n\r\n>Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?\r\n\r\nI think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used.",
        "title": "Consider a more specific warning for key={undefined}",
        "labels": "Type: Enhancement",
        "id": 44529
    },
    {
        "body": "See https://github.com/facebook/react/pull/11644. Filing this as a follow up.",
        "title": "Figure out a better fix for memory leak",
        "labels": "Type: Enhancement",
        "id": 44530
    },
    {
        "body": "React manually stringifies all attributes before assigning them:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/DOMPropertyOperations.js#L169-L179\r\n\r\nThis appears to be for IE8/9. However it's possible that this is an IE8 only behavior. See IE9:\r\n\r\n<img width=\"1104\" alt=\"screen shot 2017-11-30 at 8 02 51 pm\" src=\"https://user-images.githubusercontent.com/590904/33463221-2eeb4770-d60a-11e7-9915-2a2918ca22b9.png\">\r\n\r\n<img width=\"752\" alt=\"screen shot 2017-11-30 at 8 03 38 pm\" src=\"https://user-images.githubusercontent.com/590904/33463224-3595328e-d60a-11e7-9786-e2ac050ffb53.png\">\r\n\r\nCan we get rid of `'' + value` in DOMPropertyOperations?\r\n",
        "title": "Do we still need to stringify attributes before assigning them?",
        "labels": "Type: Enhancement",
        "id": 44531
    },
    {
        "body": "We currently validate DOM attributes on the client and ignore the ones with invalid names:\r\n\r\nhttps://github.com/facebook/react/blob/0c164bb4851e78e5f789dd8619f17ffcfee0221f/packages/react-dom/src/client/DOMPropertyOperations.js#L202-L204\r\n\r\nThis check used to be important for safety when we did `innerHTML` rendering on the client side, but it's not anymore. If we just let it call `setAttribute`, the browser would throw on a bad attribute name.\r\n\r\nThis check used to run very infrequently (only for data attributes and custom elements), but now more attributes follow this code path (since any \"simple\" attributes with the same names are effectively treated as unknown attributes). So even though we cache the result, it seems unfortunate to do the work that the browser is already doing for us.\r\n\r\nWhile this would be a breaking change (so it has to go in 17), I think we should just remove this check, and let the browser throw. This does make spreading props blindly a bit more dangerous, but we have a warning so it should be visible.",
        "title": "RFC: Drop isAttributeNameSafe() check in React 17",
        "labels": "Type: Enhancement",
        "id": 44532
    },
    {
        "body": "IIRC we didn't include it because it was DEV-only. But it's not anymore.\r\nMaybe let's start including it?\r\n\r\nErrors are often more prominent than warnings, and it would be great to have this info in both.",
        "title": "Include component stack in invariants",
        "labels": "Type: Enhancement",
        "id": 44533
    },
    {
        "body": "The [ReactBrowserEventEmitter checks for browser support of the `cancel` and `close` events.](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L136-L138) before attaching those listeners.\r\n\r\nI'm curious why this is necessary. Did we need it for IE8? \r\n\r\nI'd like to:\r\n\r\n- [ ] Determine if there are ramifications to removing these checks\r\n- [ ] Add comments above those lines if these checks are necessary.\r\n- [x] ~Maybe eliminate [`isEventSupported.js`](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/isEventSupported.js)~ this is needed to check for `input` in ChangeEventPlugin",
        "title": "Investigate need to feature check cancel and close events.",
        "labels": "Type: Enhancement",
        "id": 44534
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI accidently generated my SSR output using `renderToStaticMarkup` instead of `renderToString`, which I then hydrated using `hydrate`. This  led to a warning, caused by collapsed text nodes. `renderToString` would have added HTML comments between them.\r\n\r\nThe warning I got was: \r\nWarning: Text content did not match. Server: \"a (b)\" Client: \"a\"\r\n\r\nWhen rendering:\r\n```jsx\r\n    const a = 'a';\r\n    const b = 'b';\r\n    const component = <select><option>{a} ({b})</option></select>;\r\n```\r\n\r\nIt would be nice if `hydrate`  could detect that it is executed on output from `renderToStaticMarkup` instead of `renderToString`. It seems to me a simple check on the `data-reactroot` attribute on the root element would suffice.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like some kind of warning along the following lines:\r\n\r\n`Warning: You are hydrating output that was not created by ReactDOMServer.renderToString(). Perhaps you are using ReactDOMServer.renderToStaticMarkup() or modifying the output after rendering. Please see ... for more information.`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.1.1.\r\n\r\nDue to the changes in 16, this worked before.",
        "title": "Add warning when hydrating output from renderToStaticMarkup",
        "labels": "Type: Enhancement",
        "id": 44535
    },
    {
        "body": "See this example: https://github.com/facebook/react/issues/11508#issuecomment-345464797.\r\n\r\nI think it probably reflects a misunderstanding of how props and state work, and we should detect and warn if we see this.",
        "title": "Warn if this.state is set to this.props referentially",
        "labels": "Type: Enhancement",
        "id": 44536
    },
    {
        "body": "I think we can move the [`wheel` event support check in BrowserEventEmitter](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L126-L135) into [BrowserEventConstants](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/BrowserEventConstants.js)\r\n\r\nThat runs the check once, which is nice for wheel and scroll events, which eventually need to be attached locally.\r\n\r\nFiling this for myself as a part of https://github.com/facebook/react/pull/11550. But this could happen on master right now.\r\n\r\nMore or less, I'm interested in cutting the overhead of event listening as much as possible, and this is really low hanging \ud83e\udd5d. ",
        "title": "Move MouseWheel event type detection to BrowserEventConstants",
        "labels": "Type: Enhancement",
        "id": 44537
    },
    {
        "body": "I thought before it might cause knee jerk reactions, and it does in practice: https://twitter.com/freeformflo/status/928454078903894016\r\n\r\nI think we should change the phrasing to a more neutral one. Potentially explaining *why* we prefer camel case. ",
        "title": "Reword \"unknown property\" warning to be less obnoxious",
        "labels": "Type: Enhancement",
        "id": 44538
    },
    {
        "body": "Currently helpers like `React.Children.toArray` will not validate the passed elements, so things like missing keys go unnoticed.\r\n\r\nSee the discussion in https://twitter.com/sebmarkbage/status/930239051092803585 (I deleted the original tweet) for more context",
        "title": "Add validation to the React.Children helpers",
        "labels": "Type: Enhancement",
        "id": 44539
    },
    {
        "body": "See https://github.com/reactjs/reactjs.org/issues/268#issuecomment-343402728.\r\n\r\nFeels like an easy mistake to make, and easy for us to detect. ",
        "title": "Warn when component has PropTypes rather than propTypes",
        "labels": "Type: Enhancement",
        "id": 44540
    },
    {
        "body": "Based on a conversation with @vjeux:\r\n\r\n>I wrote\r\n>\r\n>```js\r\n>constructor(props) {\r\n>  return {\r\n>    something: false\r\n>  }\r\n>}\r\n>```\r\n>instead of\r\n>\r\n>```js\r\n>constructor(props) {\r\n>  super(props);\r\n>  this.state = {\r\n>    something: false\r\n>  }\r\n>}\r\n>```\r\n>\r\n>and the error was super confusing, it told me that render is not defined on the component, which didn't make sense since I returned it!\r\n\r\nWe can fix this to show a different message if `type` has `.prototype.isReactComponent` but `constructor()` gave us something without a `render` method.\r\n\r\n",
        "title": "Show a better warning when accidentally returning from constructor",
        "labels": "Type: Enhancement",
        "id": 44541
    },
    {
        "body": "Follow up for https://github.com/facebook/react/pull/10783/files/ab1a58ec0675b34d6eb15854c4b573f2abebe489#r145577198\r\n\r\n>  This is neat but it also means that we're sometimes comparing strings to numbers/symbols. That could potentially deopt the type hints in this function. It might actually be better to check the child.tag to ensure that it is a HostComponent or Fragment and compare the type in separate branches.\r\n>\r\n> In fact, that might already be a bug incase we ever add strings to fiber.type on other fibers than HostComponent.\r\n\r\nBy checking for tags before we do type comparison branches, we can ensure we don't have possible bugs from this, as well as optimize type hints by having monomorphic functions.",
        "title": "Branch on tag before doing type checking",
        "labels": "Type: Enhancement",
        "id": 44542
    },
    {
        "body": "It doesn\u2019t have a `@flow` annotation. We should start Flow-ifying it to avoid bugs like https://github.com/facebook/react/pull/11173.\r\n\r\n@iamdustan Wanna take it?",
        "title": "Flow-ify ReactPartialRenderer.js",
        "labels": "Type: Enhancement",
        "id": 44543
    },
    {
        "body": "## Note: @anushreesubramani is working on this, please don\u2019t send PRs if you aren\u2019t her :-)\r\n\r\n----\r\n\r\nSimilar to https://github.com/facebook/react/issues/11081.\r\n\r\n@anushreesubramani Wanna take this one as well? It would need to deduplicate based on owner/stack info, similar to how https://github.com/facebook/react/pull/11120 works.",
        "title": "Deduplicate the \"Can only update a mounted or mounting component\" warning",
        "labels": "Type: Enhancement",
        "id": 44544
    },
    {
        "body": "It can be confusing to recall that the range input type is not supported in IE9, invalidating a few of our test cases. For example:\r\n\r\n<img width=\"924\" alt=\"screen shot 2017-10-06 at 7 03 18 am\" src=\"https://user-images.githubusercontent.com/590904/31275269-97e687ac-aa64-11e7-97fb-e430e7dfc369.png\">\r\n\r\nThis test case verifies that changing a range slider with arrow keys works as expected, however it looks like a standard input in IE9. If we plan to make these test fixtures more public, I wonder if it would be worth adding some caveat language or marking a test as invalid for a certain browser.\r\n\r\nMaybe this would be annoying, but I thought it might be nice to collect the opinion of others.",
        "title": "DOM Test Fixtures: Add caveats for IE9 range inputs (and other unsupported things)",
        "labels": "Type: Enhancement",
        "id": 44545
    },
    {
        "body": "Cases like https://github.com/facebookincubator/create-react-app/issues/3199#issuecomment-334475000 can be pretty confusing. We should probably move the warning to happen during first `ReactDOM.render` rather than immediately.",
        "title": "Check for rAF polyfill lazily",
        "labels": "Type: Enhancement",
        "id": 44546
    },
    {
        "body": "As reported in https://blog.discordapp.com/lessons-from-migrating-a-large-codebase-to-react-16-e60e49102aa6, it could've been clearer. ",
        "title": "Make undefined ref message better",
        "labels": "Type: Enhancement",
        "id": 44547
    },
    {
        "body": "@sebmarkbage tried this in https://github.com/facebook/react/pull/8545 but Flow couldn't handle it well.\r\nMight be worth trying again someday.",
        "title": "Type Fiber by tag as disjoint union",
        "labels": "Type: Enhancement",
        "id": 44548
    },
    {
        "body": "-----\r\n\r\n**(This is a repost of https://github.com/facebook/jest/issues/4597 by @erikras.)**\r\n\r\n----\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSomewhere in between?\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I'm running tests on [my library](https://github.com/erikras/redux-form), there are some behaviors that I want to test _do_ throw an error. These currently result in:\r\n\r\n```\r\nConsider adding an error boundary to your tree to customize error handling behavior.\r\nYou can learn more about error boundaries at https://fb.me/react-error-boundaries.\r\n```\r\n\r\n...being output to the console. This error is great in an application, but not so great for a library test.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great if I could do something like:\r\n```jsx\r\nexpect(() => {\r\n  TestUtils.renderIntoDocument(<DoSomething naughty/>)\r\n})\r\n.toThrow(/Bad developer!/)\r\n.andCatch() // <---- prevents React 16 error boundary warning\r\n```\r\n\r\n**Please provide your exact Jest configuration and mention your Jest, node, yarn/npm version and operating system.**\r\n\r\n```\r\njest@21.2.1\r\nreact@16.0.0\r\nreact-dom@16.0.0\r\n```\r\n\r\n**See also**\r\n\r\n- https://github.com/facebook/react/issues/11083\r\n- https://github.com/facebook/react/issues/10474#issuecomment-334164834\r\n",
        "title": "Allow suppressing error boundary logs from intentionally thrown/caught errors",
        "labels": "Type: Enhancement",
        "id": 44549
    },
    {
        "body": "Same as https://github.com/facebook/react/issues/11081, but for this one:\r\n\r\n<img width=\"476\" alt=\"screen shot 2017-10-04 at 16 35 07\" src=\"https://user-images.githubusercontent.com/810438/31184704-0d705000-a922-11e7-852e-5890962ff1e5.png\">\r\n",
        "title": "Deduplicate the warning about functions not being valid children",
        "labels": "Type: Enhancement",
        "id": 44550
    },
    {
        "body": "## Note: the task is already claimed.\r\n\r\nJust saw this in a fiddle that has a nested update bug:\r\n\r\n<img width=\"414\" alt=\"screen shot 2017-10-04 at 11 52 52\" src=\"https://user-images.githubusercontent.com/810438/31172209-923c2278-a8fa-11e7-8ffe-4dbfaa472663.png\">\r\n\r\nIt would be nice to just dedupe them in the first place instead of calling `console.error` a thousand times.\r\n\r\n---\r\n\r\n## Note: the task is already claimed.\r\n",
        "title": "Deduplicate \"Render methods should be pure\" warning",
        "labels": "Type: Enhancement",
        "id": 44551
    },
    {
        "body": "It is a Jest-ism that shouldn't be in our open source package.\r\nPeople using Jest can implement a similar pattern directly.",
        "title": "Deprecate and remove TestUtils.mockComponent",
        "labels": "Type: Enhancement",
        "id": 44552
    },
    {
        "body": "I'd like to be able to detect `SuspenseList` using `react-is`. Is there any reason why I shouldn't?",
        "title": "react-is lacks SuspenseList",
        "labels": "Type: Enhancement",
        "id": 44553
    },
    {
        "body": "## As-is\r\n\r\nWhen only referring to object's member properties, `exhaustive-deps` lint rule does not show a warning.\r\n\r\nHowever, **when calling object's member property, this rule shows a warning.**\r\n\r\n```tsx\r\nfunction Password() {\r\n  const verifyPassword = useMutation(apis.verifyPassword);\r\n\r\n  useEffect(() => {\r\n    verifyPassword.mutate;\r\n  }, [verifyPassword.mutate]); // PASS\r\n\r\n  useEffect(() => {\r\n    verifyPassword.mutate();\r\n  } ,[verifyPassword.mutate]); // React Hook useEffect has a missing dependency: 'verifyPassword'. Either include it or remove the dependency array.\r\n} \r\n```\r\n\r\nI saw [Dan's comment](https://github.com/facebook/react/issues/14920#issuecomment-467494468) on this behavior.\r\n\r\n> This is because technically props.foo() passes props itself as this to foo call. So foo might implicitly depend on props. We'll need a better message for this case though. The best practice is always destructuring.\r\n\r\nIt is fully understood.\r\n\r\nHowever, **when the entire object is included as a dependency, the following problem can occur.**\r\nTake a look at the following code.\r\n\r\n```tsx\r\nconst verifyPassword = useMutation(apis.verifyPassword); // `verifyPassword` equals to `{ isLoading: boolean; mutate: Function }`\r\n\r\n// `verifyPassword(password)` sets `isLoading` to `true` and causes `useEffect` hook that depends on `verifyPassword` objects to be re-excuted. This eventually leads to an infinite loop.\r\nuseEffect(() => {\r\n  if (password === PASSWORD_LENGTH) {\r\n    verifyPassword.mutate(password);\r\n  } \r\n  \r\n}, [password, verifyPassword]);\r\n```\r\n\r\n**There are two ways to avoid this problem.**\r\n\r\n```tsx\r\n// 1. Use destructuring\r\nconst { mutate } = useMutation(apis.verifyPassword);\r\n\r\nuseEffect(() => {\r\n  if (password === PASSWORD_LENGTH) {\r\n    verifyPassword.mutate(password);\r\n  }\r\n}, [password, mutate]);\r\n\r\n// 2. Assign member property to other variable\r\nuseEffect(() => {\r\n  const mutate = verifyPassword.mutate;\r\n\r\n  mutate();\r\n}, [verifyPassword.mutate]);\r\n```\r\n\r\n## To-be\r\n\r\nIn many cases, it is not common to refer to other members through `this`.\r\n\r\nAnd as in the example above, it is a good idea to use namespace to avoid name conflicts. (https://github.com/facebook/react/issues/16265#issuecomment-587977285)\r\n\r\nSo, I would like to suggest an **option to set not to warn about _member call expresion_ when using the `exhaustive-deps` rule.**\r\n\r\n```tsx\r\n// 'react-hooks/exhaustive-deps': ['warn', { ignoreMemberCallExpression: true }]\r\nuseEffect(() => {\r\n  verifyPassword.mutate();\r\n}, [verifyPassword.mutate]); // PASS\r\n```",
        "title": "Feature Suggestion: Add `ignoreMemberCallExpression` option for `exhaustive-deps` lint rule",
        "labels": "Type: Enhancement",
        "id": 44554
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. ```js\r\n   function useMyHook1(arr = []) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n    function useMyHook2({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n   function MyComponent({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n\r\n     return null;\r\n   }\r\n   ```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: --\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nNo warning appears for `arr` being potentially constructed on every render.\r\n\r\n## The expected behavior\r\nShould warn that `arr` can be constructed on each render.\r\nThe lint rules already warn for the following, so this is just an extension of the existing behavior:\r\n```js\r\nconst arr = props.arr ?? []; // The 'arr' logical expression could make the dependencies of useEffect Hook (at line 54) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'arr' in its own useMemo() Hook.\r\n```\r\nReference: https://github.com/facebook/react/pull/19590",
        "title": "Bug: [eslint-plugin-react-hooks] Constructions should be caught in default props/args",
        "labels": "Type: Enhancement",
        "id": 44555
    },
    {
        "body": "We currently plan to suppress double-logging in development by overriding console in 17: https://github.com/facebook/react/pull/18547\r\n\r\nHowever this can be confusing for some scenarios and double logging may be preferable in them.\r\n\r\nIdeally we'd add a toggle to DevTools that would allow to re-enable it on this screen:\r\n\r\n![Ef3bFlWWoAARjz9](https://user-images.githubusercontent.com/810438/90825360-b7372000-e330-11ea-9128-803d35d27e07.png)\r\n\r\n",
        "title": "Add an option to DevTools to enable double-logging",
        "labels": "Type: Enhancement",
        "id": 44556
    },
    {
        "body": "We previously had a feature where Boolean props would show a checkbox to the left of them in the DevTools pane. It was removed when the JSON editor was added, but I think we should add it back. It should work like this:\r\n\r\n1. If the value is a boolean, the checkbox should show up to the left of `true` / `false` value\r\n2. If it's no longer a boolean (e.g. gets edited manually), the checkbox disappears",
        "title": "Add a toggle for Boolean props in DevTools",
        "labels": "Type: Enhancement",
        "id": 44557
    },
    {
        "body": "Just about every time I set up a new `Context.Provider`, I end up accidentally specifying a `values` prop rather than `value`.  While it's a minor error, generally I build the container in which the provider resides and commit it to the code base before I ever use it.  It's only later when I go to use it that I realize I did it again.  Since the `Context.Provider` seems pretty much useless without a `value` prop specified, I'd love it if there was a prop error if it is missing... especially if another prop is defined on the `Context.Provider` instead.",
        "title": "Feature request: have Context.Provider throw error if missing `value` prop",
        "labels": "Type: Enhancement",
        "id": 44558
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n**Version:** eslint-plugin-react-hooks@1.7.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component with local state\r\n2. Create a useEffect with a variable inside, that points to the `typeof` of the state variable\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/nervous-williamson-2i99l?file=/src/App.tsx:210-261\r\n\r\n## The current behavior\r\n`react-exhaustive-deps` complains that the state variable should be included in the dependency list\r\n\r\n## The expected behavior\r\n`react-exhaustive-deps` shouldn't complain that the state variable should be included in the dependency list because it's value is never used.",
        "title": "Bug [ESLint Hooks Plugin]: When using a `typeof` type guard it requires the value as a dependency",
        "labels": "Type: Enhancement",
        "id": 44559
    },
    {
        "body": "Just noticed this.\r\n\r\n<img width=\"645\" alt=\"Screenshot 2020-04-15 at 10 56 39\" src=\"https://user-images.githubusercontent.com/810438/79324642-cda71800-7f07-11ea-816f-af7a69496c52.png\">\r\n\r\nI think we should read setTimeout early in DevTools because we don't want the overridden one that goes through indirections.",
        "title": "Bug: DevTools should grab native setTimeout",
        "labels": "Type: Enhancement",
        "id": 44560
    },
    {
        "body": "**Do you want to request a feature or report a bug?**\r\nMaybe a feature?\r\n\r\nWhen using Suspense and useTransition, the isPending of useTransition is immediately set to true.\r\nI want to show a spinner when a transition is still pending, but showing it immediately results in a flashing spinner when the underlying promise resolves very fast. This is not a nice experience. \r\n\r\nIs there a useTransition suspense option to delay the isPending indicator? I want to prevent the spinner from showing if the transition completes in for example 100ms.",
        "title": "Delay setting useTransition isPending to true until JND",
        "labels": "Type: Enhancement",
        "id": 44561
    },
    {
        "body": "If you have `memo(forwardRef(X))`, then the inner component won't have a \"rendered by\" list. This is because it technically doesn't have an owner. It is artificial.\r\n\r\nI think we should ideally set up `_debugOwner` for these Fibers in DEV just so existing tooling can find them. Or special case them in DevTools.",
        "title": "DevTools: Memo(ForwardRef()) and \"Rendered By\" List",
        "labels": "Type: Enhancement",
        "id": 44562
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.3-16.13\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render function component with side-effects and without hooks in StrictMode\r\n2. Component only renders once\r\n\r\n\r\nLink to code example: https://codesandbox.io/s/strictmode-w-and-wo-hooks-vgxvh\r\n\r\n\r\n## The current behavior\r\n\r\nStrictMode only renders function components with hooks twice following https://github.com/facebook/react/issues/15074#issuecomment-471197572\r\n\r\n\r\n## The expected behavior\r\n\r\nI think making [the distinction between components with and without hooks causes more confusion than it helps](https://github.com/mui-org/material-ui/issues/20313). Especially since the docs do not mention this. I amended [past efforts to improve the StrictMode docs](https://github.com/reactjs/reactjs.org/pull/2515) but since this has been ignored I'm not sure this helps. I would also work on making the behavior consistent across all function component types if this is possible.\r\n",
        "title": "Call all functions twice in StrictMode",
        "labels": "Type: Enhancement",
        "id": 44563
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:  241c4467e\r\n\r\n## Steps To Reproduce\r\n\r\n1.  https://codesandbox.io/s/cranky-wing-lc7wr\r\n2. Swap between the two screens by clicking the two buttons\r\n3. Inline loading shows the first time you load screen A. But it also usually shows on subsequent loads, even though there's nothing Suspending\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nInline loading indicator usually shows on subsequent loads.\r\n\r\n## The expected behavior\r\n\r\nIt should only show on the first load of A",
        "title": "Bug: useTransition's pending boolean is triggered immediately, even if there's no suspension",
        "labels": "Type: Enhancement",
        "id": 44564
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug?\r\n\r\n**What is the current behavior?**\r\n\r\n_note: I am encountering this issue when using https://github.com/pmmmwh/react-refresh-webpack-plugin, but I believe it's an issue with react-refresh itself._\r\n\r\nThe react-refresh runtime [overrides](https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/react-refresh/src/ReactFreshRuntime.js#L459) `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` to get a reference to the React renderer. In my app, the `inject` method is never called however, because I load react/react-dom from a third-party CDN before my application code. This means that changed components are never actually refreshed in the DOM.\r\n\r\nI believe the issue is that scripts are loaded in this order:\r\n\r\n1. react-devtools sets up the global hook\r\n2. react/react-dom are loaded on the page, and `inject()` is called\r\n3. user code (which is instrumented with the react-refresh babel plugin) is loaded on the page, and `inject()` is monkey-patched\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nFollow the usage steps in the https://github.com/pmmmwh/react-refresh-webpack-plugin repo, but also add `react` and `react-dom` as externals in your Webpack build:\r\n```\r\nmodule.exports = {\r\n  //...\r\n  externals: {\r\n    react: 'React',\r\n    'react-dom': 'ReactDOM'\r\n  }\r\n};\r\n```\r\nthen load those scripts onto the page from a CDN (e.g. unpkg or cdnjs) before the Webpack bundle.\r\n\r\n**What is the expected behavior?**\r\n\r\n`react-refresh` works the same whether React/ReactDOM are bundled with application code, or loaded via an external script.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6 / Chrome / osx\r\n",
        "title": "react-refresh + ReactDOM: hot reloading only works when bundling React",
        "labels": "Type: Enhancement",
        "id": 44565
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nIf you throw a promise that neither resolves nor rejects, you hit the suspense fallback UI indefinitely and receive no console messaging that helps you debug this.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions that allow for suspense\r\n\r\n**Proposed feature**\r\nLog a warning to the console if a suspense promise takes longer than a certain amount of time to settle. Here is some code demonstrating what that could look like inside of the react codebase:\r\n\r\n```js\r\ntry {\r\n  renderComponent(...);\r\n} catch (err) {\r\n  if (err && err.then) {\r\n    const timeoutId = setTimeout(() => {\r\n      console.warn(`A suspense promise triggered in component <Foo /> did not resolve nor reject after 3 seconds. If the promise never settles, the suspense fallback UI will be shown forever.`)\r\n    }, 3000)\r\n\r\n    err.finally(() => {\r\n      clearTimeout(timeoutId);\r\n    })\r\n\r\n    // Now actually do all the suspense magicks...\r\n  }\r\n}\r\n```",
        "title": "Suspense: add messaging when suspense promise neither resolves nor rejects",
        "labels": "Type: Enhancement",
        "id": 44566
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen `react-dom` is loaded from CDN like `<script src=\"https://cdn.jsdelivr.net/npm/react-dom@16.12.0/umd/react-dom.development.js\"></script>`, `react-refresh` failed to inject hook into devtools.\r\n\r\nI've created a related issue here: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13\r\n\r\nWe should find a way to invoke `injectIntoGlobalHook` function from `react-refresh/runtime`, however this file is in cjs format so we cannot currently do this in a simple way.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like `react-refresh` to publish runtime as a umd bundle so we can reference it from CDN and put it before `react-dom`'s `<script>` element, then invoke `injectIntoGlobalHook` in the right place.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- `react-dom`: 16.12.0\r\n- `react-refresh`: 0.7.0",
        "title": "react-refresh load from CDN?",
        "labels": "Type: Enhancement",
        "id": 44567
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to request a feature\r\n\r\n**What is the current behavior?**\r\nResizing the state/props pane in Component Tab\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nAllow resizing pane\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDevtools 4.2.0 and Chrome Version 78.0.3904.97 \r\n\r\n![image](https://user-images.githubusercontent.com/20182536/69003149-de088780-08c2-11ea-9f32-391faee6a557.png)\r\n",
        "title": "Devtools resize Component State/Props pane",
        "labels": "Type: Enhancement",
        "id": 44568
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n**What is the current behavior?**\r\nAfter firing startTransition, \"current\" component stops reacting to passed props changes while reacting to local state changes.\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIn the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click \"CLICK ME\", it suddenly stops updating.\r\nhttps://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b\r\n\r\n**What is the expected behavior?**\r\nWhen passed props change, it should show the latest value of it where possible\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nExperimental build (0.0.0-experimental-5faf377df)",
        "title": "useTransition: After startTransition, it does not react to passed props changes",
        "labels": "Type: Enhancement",
        "id": 44569
    },
    {
        "body": "**What is the current behavior?**\r\n\r\nHey \ud83d\udc4b I maintain [react-pdf](https://github.com/diegomura/react-pdf). Thanks for your awesome work and making `react-reconciler` for us to use! \r\n\r\n I've got many issues  lately regarding context not working on my library and when doing tests I found out that context values aren't shared between renderers. This makes it impossible to share state such as themes, i18n, redux and more. As a bit of context, React-pdf is not a primary renderer, and as such, when used in the browser it runs on top of react-dom.\r\n\r\nI found the `isPrimaryRenderer` reconciler option that's supposed to be used for \"multiple renderers concurrently render using the same context objects\" but still any access of the context inside react-pdf components get's just the initial value (even if the context was updated with other value). The same happens for `react-art` that also set `isPrimaryRenderer=false`.\r\n\r\n**Minimal demo**\r\n\r\nI prepared a quick demo using react-art so you can see how it currently works:\r\n\r\nhttps://codesandbox.io/s/pedantic-hill-54kid?fontsize=14\r\n\r\n**What is the expected behavior?**\r\n\r\nShare contexts between renderers when using `isPrimaryRenderer` config. Is there a way of achieving this? Am I missing something?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.11.0\r\nReact-dom: 16.11.0\r\n",
        "title": "Is it possible to share contexts between renderers?",
        "labels": "Type: Enhancement",
        "id": 44570
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature (to catch potential bugs)\r\n\r\n**What is the current behavior?**\r\nThe react-hooks/rules-of-hooks ESLint rule catches uses of hooks in conditionals in components, but does not recognise an anonymous function wrapped in forwardRef as a component. \r\n\r\nThe following example breaks the rules of hooks, but isn't caught by the rule:\r\n```jsx\r\n// This should fail\r\nconst FancyButton = React.forwardRef((props, ref) => {\r\n  if (props.fancy) {\r\n    useCustomHook();\r\n  }\r\n  return <button ref={ref}>{props.children}</button>;\r\n});\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe above example should be caught by react-hooks/rules-of-hooks, and raise the \"React Hook \"useCustomHook\" is called conditionally\" error.\r\n",
        "title": "[eslint-plugin-react-hooks] Apply the rules of hooks to a forwardRef-wrapped component",
        "labels": "Type: Enhancement",
        "id": 44571
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the argument of `useCallback` is not a function expression eslint-plugin-react-hooks will not autofix  dependencies.\r\n\r\nExample:\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), []);\r\n```\r\n\r\nWorkaround:\r\n```js\r\nuseMemo(() => debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks@^1.6.0, react@16.9.0-alpha.0\r\n",
        "title": "[eslint-plugin-react-hooks] useCallback does not add dependencies when callback is not function expression",
        "labels": "Type: Enhancement",
        "id": 44572
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBUG\r\n**What is the current behavior?**\r\nWrong warning message is shown\r\n![image](https://user-images.githubusercontent.com/19818679/65120957-13e8d700-da0c-11e9-8289-e5ed7e5fe422.png)\r\n![image](https://user-images.githubusercontent.com/19818679/65120992-206d2f80-da0c-11e9-948d-c7ab494879cf.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\ngithub file: [github file](https://github.com/kambleaa007/AshITech-ReactJS-Redux-ReactRouter-Heroku-OAuth-CircleCI/blob/ba131c0608e3b3f0027fd771db789ae0685133bf/src/components/DishDetailComponent.js)\r\n\r\nsandbox: [sandbox](https://codesandbox.io/s/xenodochial-fast-34ftl?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\nwrite simple functional componenet, put return method NOT render,\r\nwarning tells its render,\r\nactually its not render, its return method \r\n\r\n**What is the expected behavior?**\r\nShould tell, its return method of something.....\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n  \"name\": \"confusion\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"bootstrap\": \"4.0.0\",\r\n    \"bootstrap-social\": \"5.1.1\",\r\n    \"cross-fetch\": \"2.1.0\",\r\n    \"font-awesome\": \"4.7.0\",\r\n    \"gh-pages\": \"^2.0.1\",\r\n    \"mdbreact\": \"^4.18.0\",\r\n    \"prop-types\": \"15.6.0\",\r\n    \"react\": \"^16.4.0\",\r\n    \"react-animation-components\": \"3.0.0\",\r\n    \"react-dom\": \"^16.4.0\",\r\n    \"react-popper\": \"0.9.2\",\r\n    \"react-redux\": \"5.0.7\",\r\n    \"react-redux-form\": \"1.16.8\",\r\n    \"react-router-dom\": \"4.2.2\",\r\n    \"react-scripts\": \"1.1.4\",\r\n    \"react-transition-group\": \"2.3.0\",\r\n    \"reactstrap\": \"5.0.0\",\r\n    \"redux\": \"3.7.2\",\r\n    \"redux-logger\": \"3.0.6\",\r\n    \"redux-thunk\": \"2.2.0\"",
        "title": "Wrong warning message is shown",
        "labels": "Type: Enhancement",
        "id": 44573
    },
    {
        "body": "When inspecting a component that is missing `context` it is displayed as an empty object, meanwhile if the `state` is not initialized it is not displayed at all, for no `props` it is displayed the string `None`. In my humble opinion it is misleading that no context is displayed as an empty object.",
        "title": "DevTools: Uninitialized context is displayed as an empty object",
        "labels": "Type: Enhancement",
        "id": 44574
    },
    {
        "body": "I've a question about a behaviour that appears strange to me.\r\n\r\nI am writing a custom hook.\r\n\r\n```js\r\nconst useToggle =\r\n  (initialState) => {\r\n    const [isTrue, setState] = useState(initialState || false);\r\n\r\n    const False =\r\n      () => {\r\n        setState(false);\r\n      };\r\n\r\n    const True =\r\n      () => {\r\n        setState(true);\r\n      };\r\n\r\n    return [isTrue, True, False];\r\n  };\r\n```\r\n\r\nIt works fine.\r\n\r\nBut if I try to rewrite `False`, and `True` using `setState.bind` I get the following warning in console.\r\n\r\n```js\r\nconst False = setState.bind(null, false);\r\n\r\nconst True = setState.bind(null, true);\r\n```\r\n\r\nThe warning:\r\n\r\n```\r\nWarning: State updates from the useState() and useReducer() Hooks don't support the second callback argument.\r\nTo execute a side effect after rendering, declare it in the component body with useEffect().\r\n```\r\n\r\nIs this the expected behaviour?\r\n\r\nWhy is that? The two snippet appear equivalent to me.\r\n",
        "title": "Custom hook and strange warnings ",
        "labels": "Type: Enhancement",
        "id": 44575
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nThe new DevTools doesn't show the component file path as did the v3 version.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great to show the component file path, it's a really important feature when working in a large codebase.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact DevTools v4 is affected, v3 had it.\r\n",
        "title": "DevTools: Show component file path",
        "labels": "Type: Enhancement",
        "id": 44576
    },
    {
        "body": "Sometimes I see \"cannot find fiber with ID\" when hovering over the tree. They are sporadic. I'll need to dig into why they happen. But we also need to look at our usage of warnings to make sure they're either actionable or gated by DEV/DEBUG.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/166",
        "title": "DevTools: Fix or silence \"cannot find fiber with ID\" warnings when hovering ",
        "labels": "Type: Enhancement",
        "id": 44577
    },
    {
        "body": "Seems non-ideal. Typically range controls handle this case.\r\n\r\n![Screen Recording 2019-04-12 at 07 54 PM](https://user-images.githubusercontent.com/810438/56059844-0e041100-5d5d-11e9-892c-f3872414ffaa.gif)\r\n\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/141",
        "title": "DevTools:  Commit picker should register leaving the picker at a side as setting a terminal value",
        "labels": "Type: Enhancement",
        "id": 44578
    },
    {
        "body": "With 10,000 item nesting in `DeeplyNestedComponents` case:\r\n\r\n<img width=\"432\" alt=\"Screen Shot 2019-04-06 at 15 16 02\" src=\"https://user-images.githubusercontent.com/810438/55670638-f3bec480-587e-11e9-850d-8a247aa42f7c.png\">\r\n\r\nNot super realistic but we could fix this by avoiding recursion in the traversal.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/76",
        "title": "DevTools: Too deep trees can cause a stack overflow",
        "labels": "Type: Enhancement",
        "id": 44579
    },
    {
        "body": "### MVP\r\n- [x] Initial prototype with a tree and toggling.\r\n- [x] Tree should reflect real suspense state.\r\n- [ ] Make it less fragile.\r\n  - [x] Does findDOMNode issue affect this?\r\n- [ ] Ensure expensive tree construction doesn't run unless you're on the tab.\r\n- [ ] Improve navigation so the user doesn't get lost.\r\n  - [ ] Maybe flash nodes.\r\n  - [ ] Maybe offer a \"finder\" tool.\r\n- [ ] Sync selection with the Components tab.\r\n- [ ] Make it look nice. @bvaughn \r\n\r\n### Future\r\n- [ ] Consider a fuzzer.\r\n- [ ] Considering filtering by viewport.\r\n- [ ] Optimize the tree updates.\r\n  - [ ] Consider listening to operations. Don't forget to handle ancestor reorder.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/43",
        "title": "DevTools: Suspense Debugger",
        "labels": "Type: Enhancement",
        "id": 44580
    },
    {
        "body": "Right now I can inspect a component and edit its props but I could not find a way to add a _new_ prop that wasn't already set.\r\n\r\n---\r\nOriginally reported by @steveluscher via https://github.com/bvaughn/react-devtools-experimental/issues/300",
        "title": "DevTools: Should be able to add a prop that is not yet set",
        "labels": "Type: Enhancement",
        "id": 44581
    },
    {
        "body": "Notes from a chat with Benoit:\r\n\r\nIt would be nice if starting profiling (or reload and profiling) in the browser auto-started profiling in DevTools.\r\n\r\nIt would also be nice if viewing a range of time in the Performance tab narrowed down the commits within the Profiler. At least starting the profilers at the same time would enable a manual match-up.\r\n\r\nTo my knowledge, none of the currently available APIs (including experimental) would enable us to support this level of integration.\r\n\r\n---\r\nIf we were to make use of the DevTools protocol, we could [`Profiler.start`](https://vanilla.aslushnikov.com/?Profiler.start) and [`Profiler.stop`](https://vanilla.aslushnikov.com/?Profiler.stop) the built-in profiler in sync with React's own profiler. Chrome's profiler also dispatches [`Profiler.consoleProfileStarted`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileStarted) and [`Profiler.consoleProfileFinished`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileFinished) events which we _could_ use to follow the browser's profiler if we wanted to.\r\n\r\nThere do not appear to be any APIs/events for syncing the zoomed-in range.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/37",
        "title": "DevTools: Better linking between browser Performance tab and DevTools Profiler",
        "labels": "Type: Enhancement",
        "id": 44582
    },
    {
        "body": "Benoit shared feedback that it would be helpful to show the base duration for the tree (and/or selected element) to get a sense of the total cost over time. (Not sure yet what we'd call this.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/55",
        "title": "DevTools: Should Profiler surface the base duration?",
        "labels": "Type: Enhancement",
        "id": 44583
    },
    {
        "body": "Some feedback I've heard from a DevTools user (roughly transcribed by me):\r\n\r\n> I'm trying to pinpoint those renders...with hooks, it's sometimes more unclear to me why something is rendering...I generally don't use devtools much anywhere. I use console.log. But Redux devtools worked really well for me because I could see when things were changing and what exactly changed.\r\n\r\nMaybe we could add an opt-in mode (in Settings > Profiler) to collect more data when profiling about _why_ a component rendered. For example, if `props` or `state` changed, we could show which keys changed (just their name, not their values). Maybe we could do something similar for context and for hooks?\r\n\r\nThen we could add this information to the right side panel for the selected fiber in the Profiler UI.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/98",
        "title": "DevTools: Collect more info when profiling",
        "labels": "Type: Enhancement",
        "id": 44584
    },
    {
        "body": "Product developers sometimes find it useful to jump back and forth between a few components in a tree. Currently this requires scrolling or using the selection tool. Maybe we could allow you to temporarily bookmark one or more components somehow? Then the existing Search interface could maybe be repurposed to let you step between bookmarked components (when there's no search text).\r\n\r\nThese bookmarks would probably not need to be persisted between reloads, so they could be associated with the specific in-memory element<sup>1</sup>.\r\n\r\n<sup>1</sup> Although this association would be lost with a filter change.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/305",
        "title": "DevTools: Component bookmarks",
        "labels": "Type: Enhancement",
        "id": 44585
    },
    {
        "body": "# \"Can you show which hooks changed?\"\r\n\r\n...is a question I've heard a couple of times with regard to the new Profiler change-tracking feature. This request is certainly understandable, but it presents a couple of challenges:\r\n\r\n1. Identifying which hooks values change would requires shallowly re-rendering each function component.\r\n2. Identifying a hook in a non-ambiguous way requires displaying the full hooks tree structure, since hooks aren't named. (Alternately we could support named hooks, #16474)\r\n\r\nLet's take each of a look at each of these below.\r\n\r\n## 1 - Identifying which hooks values change\r\n\r\nOne of the challenge for DevTools when it comes to hooks is identifying custom hooks. Sebastian's [proposed solution](https://github.com/bvaughn/react-devtools-experimental/blob/master/src/backend/ReactDebugHooks.js) is that DevTools temporarily overrides React's hooks dispatcher while it shallowly re-renders the component. During the re-render, each time one of the built-in hooks is used, our override implementation parses the stack to identify \"custom hooks\" (functions higher up in the callstack that begin with \"use\"). After render is completed, we reassemble this information into a tree structure which DevTools can display.\r\n\r\nCurrently we only do this  shallow render when a component is [inspected](https://github.com/bvaughn/react-devtools-experimental/blob/master/OVERVIEW.md#inspecting-an-element), but in order for us to track which hooks have changed while profiling, we would need to shallowly render _every_ component using hooks during the profiling session. Mostly likely we would have to do this during the performance sensitive \"commit\" phase since that's when DevTools is notified of an update.\r\n\r\nI think we could do better than re-running the above hooks override for every component on every commit if we:\r\n* Created a map of Fiber to cached hooks tree structure.\r\n* Lazily populate the above map (by shallow re-rendering) only when a component was updated for the first time.\r\n* Compared Fiber `memoizedState`s to identify changes on future commits and map them back to the tree structure based on their position in the list structure. <sup>1</sup>\r\n\r\nHowever, even with the above optimizations this would still add significant overhead to a performance sensitive phase.\r\n\r\n<sup>1</sup> I think this should work but might also end up being complicated to implement.\r\n\r\n## 2 - Identifying a hook\r\n\r\nAlthough the variables that hooks values are assigned to are meaningfully named, the hooks themselves are unnamed. Because of this, DevTools has no feasible way of identifying a hook short of displaying the entire hooks tree structure. Consider the following example code:\r\n\r\n```js\r\nfunction useCustomHook(...) {\r\n  const [foo, setFoo] = useState(...);\r\n  // ...\r\n}\r\n\r\nfunction ExampleComponent(props) {\r\n  const [bar, setBar] = useState(...);\r\n  const [baz, setBaz] = useState(...);\r\n  const custom = useCustomHook(...);\r\n  // ...\r\n}\r\n```\r\n\r\nThe example above shows 4 hooks: three `useState` and one custom. Let's say that \"foo\" and \"baz\" changed in a particular render. How would DevTools identify this? It could just show \"two state hooks\" but that's not very helpful. I think the only way we could identify it would be to show the entire tree, and visually highlight which hooks in it have changed:\r\n\r\n```\r\nState\r\nState *\r\nCustomHook\r\n  State *\r\n```\r\n\r\nThis is _okay_ but it's not great unless the developer is cross-referencing the component (and probably the custom hooks definition as well). To help with this, we could also _show the values_ but now we're adding more overhead in terms of trackin and bridge traffic.\r\n\r\n## In summary\r\n\r\nClearly both of these challenges can be overcome but they are non-trivial to implement and they will certainly add more runtime overhead to the profiler. Because of this, it may be a while before we add this feature to the DevTools.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/312",
        "title": "DevTools: Profiler: Show which hooks changed",
        "labels": "Type: Enhancement",
        "id": 44586
    },
    {
        "body": "Follow up to a discussion thread on #294 and a Messenger chat with @gaearon.\r\n\r\nThe current UI for editing props/state/hooks values has a couple of shortcomings:\r\n* strings/numeric values are sometimes of an unclear type. (DevTools uses the correct `<input type>` but this is subtle. Showing e.g. quotation marks around strings could be more helpful.\r\n* `null` initial values can only become strings at the moment. (DevTools does not attempt to parse numeric or boolean values\u00a0and change the input type. If it did, we would probably also need to enable a way for you to opt back out of that input type somehow in case it was incorrect.)\r\n* fields that maybe support multiple types (e.g. string | number) are locked into a single type (whichever type they happen to be initially).\r\n\r\nAdditional quirks that might be worth ironing out:\r\n* Non-editable strings are currently wrapped in quotation marks but editable ones aren't.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/321",
        "title": "DevTools: Improve props/state value editing interface",
        "labels": "Type: Enhancement",
        "id": 44587
    },
    {
        "body": "**Note** this issue is outdated. The current thinking is that the alternative, \"*load source code (with source maps) and parse for name*\", is probably the best course of action.\r\n\r\n---\r\n\r\n## The problem\r\n\r\nOne common piece of feedback about DevTools hooks integration is that hooks have no name and can be confusing. Consider the following example:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  const [bar, setBar] = useState(false);\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSomeCustomHook:\r\n  State: true\r\n  State: false\r\n```\r\n\r\nThis information isn't as rich as we would prefer. \u2639\ufe0f\r\n\r\nThe next question is often: \"can you use the name of the variable the hook return value is assigned to?\" but this is tricky because DevTools doesn't actually have any way to access that variable. (Even if DevTools has a handle on the `Example` function above, how would it access the `useSomeCustomHook` function?)\r\n\r\n## The proposal\r\n\r\nThe solution to this would be some form of user-defined metadata (preferably generated by a code transform). Building on the precedent of the `useDebugValue` hook (https://github.com/facebook/react/pull/14559), we might introduce a new no-op hook e.g. `useDebugName`.\r\n\r\nThe above example could make use of this hook like so:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\"); // injected by Babel transform\r\n  const [bar, setBar] = useState(false);\r\n  useDebugName(\"bar\"); // injected by Babel transform\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nDevTools could then display something like:\r\n```\r\nSomeCustomHook:\r\n  State (foo): true\r\n  State (bar): true\r\n```\r\n\r\n## Implementation details\r\n\r\nThe new `useDebugName` hook might be a noop hook provided by React (similar to `useDebugValue`) _or_ it could even be an export from the (soon to be released [`react-debug-hooks` package](https://github.com/facebook/react/blob/master/packages/react-debug-tools/)). The key concerns would be that:\r\n1. It has no effect (and adds no overhead) when DevTools is not present.\r\n2. Not calling it at all (or only calling it for _some_ hooks) should not break or corrupt anything.\r\n\r\nDevTools could override the no-op `useDebugName` implementation before inspecting a component and automatically associate the provided name with the most recently called native hook.\r\n\r\nFor example, the following code should only result in one named hook (the second `useState` call).\r\n```js\r\nconst [foo, setFoo] = useState(true);\r\nconst [bar, setBar] = useState(false);\r\nuseDebugName(\"bar\"); // injected by Babel transform\r\nconst [baz, setBaz] = useState(true);\r\n```\r\n\r\nBeing able to support sparse name metadata would be important for third party code (that might not be transformed to supply the metadata).\r\n\r\nA code transform would be ideal for this scenario because manual annotation would probably be cumbersome. This could also be marketed as a **DEV-only transform** so as not to bloat production bundles with display names. We might even try to detect the env and throw if it isn't DEV (like https://github.com/facebook/react/pull/15939).\r\n\r\n## Further considerations\r\n\r\n### Custom hooks?\r\n\r\nIn some cases, custom hooks might also be ambiguous. Consider the `useSubscription` hook (https://github.com/facebook/react/pull/15022):\r\n```js\r\nfunction Example() {\r\n  const foo = useSubscription(...);\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSubscription: \"some value\"\r\n  State: Object\r\nSubscription: \"some other  value\"\r\n  State: Object\r\n```\r\n\r\nMaybe the value alone (provided by `useDebugValue`) could be enough to uniquely identify the hook, but I suspect in many cases it might not be sufficient. Should we then use `useDebugName` for custom hooks as well?\r\n\r\nI think it would be more fragile given the way our custom hooks detection logic is implemented. Custom hooks are not identified until after a component has finished rendering. In order for us to associate names with custom hooks, we would need to maintain a stack of names. This could lead to potential mismatches though in the event that `useDebugName` was called more (or fewer) times than there are custom hooks.\r\n\r\nFor example, consider the following code:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\");\r\n  useDebugName(\"effectively ignored\");\r\n  const [bar, setBar] = useState(false);\r\n  const [baz, setBaz] = useState(false);\r\n  useDebugName(\"baz\");\r\n\r\n  // ...\r\n}\r\n````\r\n\r\nThe proposed implementation of `useDebugName` would be robust enough to handle naming \"foo\" and \"baz\" states and leaving \"bar\" as anonymous state hook. If we were maintaining a stack of names however, this discrepency would be more difficult to manage.\r\n\r\nPerhaps there is a clever solution to this problem. I would probably suggest leaving it out of the initial implementation though and only revisiting if we determine it's a necessary feature.\r\n\r\n## Alternatives considered\r\n\r\n### Pass debug name as an additional (unused) parameter\r\n\r\nAn alternative approach to calling a separate hook for naming purposes would be to pass the display name as an additional parameter to the native hook, e.g.:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true, \"foo\");\r\n  const [bar, setBar] = useState(false, \"bar\");\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Less code.\r\n* Does not introduce a new hook.\r\n\r\n**Cons**:\r\n* It requires knowledge about the arity of native hooks. Ror example `useReducer` has optional parameters that the transform (or manual code) would need to be aware of to avoid a runtime error.\r\n* It would not be possible to support naming custom hooks (if that's something we decided to do).\r\n\r\n### Load source code (with source maps) and parse for name\r\nWe could use an extension API like [`Resource.getContent`](https://developer.chrome.com/extensions/devtools_inspectedWindow#method-Resource-getContent) to load the source code (including custom hooks) and parse it determine the hook/variable names. Essentially this would work like the proposed transform above, but at runtime.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n\r\n**Cons**:\r\n* Adds additional async loading (complexity) to suspense cache used for hooks inspection.\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a full parser.\r\n\r\n### Call `toString` on the function component and parse for name\r\nA possible 80/20 variant of the above proposal would be to simply call` toString` on the function component and parse any top-level hooks.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Does not require any additional asynchronous code.\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a fullp parser.\r\n\r\n### Use a Babel transform to leave an inline comment (and call `toString` to search for it)\r\nRather than inserting a call to a new custom hook, our code transform could just insert an inline comment with the name. We could then parse the code to find the inline comment, e.g.:\r\n```js\r\nfunction Example() {\r\n  /* hook:foo:Example.react.js:3 */\r\n  const foo = useSubscription(...);\r\n  /* hook:bar:Example.react.js:5 */\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Potentially sidesteps difficulty of parsing certain code patterns (e.g. Babel's destructuring transform).\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* Still requires an explicit transform step.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/323",
        "title": "DevTools: Named hooks",
        "labels": "Type: Enhancement",
        "id": 44588
    },
    {
        "body": "My favorite devtools feature, \"Why did this render?\", has a remaining problem: it's too hard to flip through a long list of renders in the Rendered At list to find an interesting render. I know I can use the mouse (or Tab and then Space) to move to the next render, but that's painful if there are 50+ renders to work through.\r\n\r\nSuggestion: when an item in the Rendered At list has focus, then up/down arrows should change the selected render (and scroll the pane up/down if the selected render isn't visible). \r\n\r\nThis would be helpful for accessibility too.\r\n\r\nI'll file a separate issue for keyboard support for the flamegraph view. Keyboard access to that view will be much harder to implement so it makes sense to do it separately.\r\n\r\n---\r\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/332",
        "title": "DevTools: Switch between \"Rendered At\" renders using keyboard arrow keys",
        "labels": "Type: Enhancement",
        "id": 44589
    },
    {
        "body": "It would be good to have keyboard navigation on the flamegraph view to make it easier and faster to scoot around to different components in the same render. \r\n\r\nGiven that flamegraph is implemented in SVG and given the complexity of navigating through an uneven grid, I suspect keyboard access is probably beyond the scope of near-future DevTools releases, but wanted to file this issue while it's top-of-mind. \r\n\r\nExpected behavior: \r\n* There should be a selected/focused UI of some sort around the active component. This could be a black or colored outline around the currently selected component, or perhaps a background pattern like diagonal hatching.  IMHO, this would be valuable even without keyboard support! \r\n* Up arrow should change selection to the parent component\r\n* Left/Right arrows should move selection to the prev/next sibling components. Should wrap when at the beginning or end of the line.\r\n* Tab should move focus to the right pane (this matches behavior of other DevTools tabs like Elements)\r\n* Shift+Tab should move focus to the rightmost control in the toolbar (currently this is the \"next commit\" button)\r\n\r\nThis is a companion issue to #332 which asks for keyboard access for the \"Rendered At\" list. Compared to this suggestion, #332 should be much easier to implement so I split them.\r\n\r\n---\r\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/333",
        "title": "DevTools: Keyboard arrow-key navigation for the flamegraph view",
        "labels": "Type: Enhancement",
        "id": 44590
    },
    {
        "body": "React DevTools v4 adds a new reload and profile feature to measure perf for application \"mount\" ([although it required a bit of hacking](https://github.com/bvaughn/react-devtools-experimental/pull/35)). I don't feel knowledgeable enough about React Native to tackle it, so my current plan is to just **not** support this feature for RN.\r\n\r\nIf we did decide to support it,I think we would need to solve the following:\r\n\r\n1. A reload hook on the backend that worked for all bundle types (not just DEV).\r\n2. Some assurance that the backend will be injected/initialized _before_ the first mount/commit (or a mechanism to delay the first commit, like we do in the browser).\r\n3. Some way for third party code to request a production+profiling build ([similar to how DOM does it](https://fb.me/react-profiling)).\r\n4. A sync storage mechanism (or some other way for DevTools could leave a flag for itself so it knows to begin profiling immediately after reload+connection).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/336",
        "title": "DevTools: React Native: Support reload-and-profile be an important feature",
        "labels": "Type: Enhancement",
        "id": 44591
    },
    {
        "body": "DevTools v4 added a pretty powerful new component filtering feature that enables devs to filter out components by type, name, or file system location. Because these filters can be a bit elaborate to create, they are saved between sessions to improve dev experience.\r\n\r\n**Unfortunately, I don't think I am going to be able to support the persistence functionality for React Native.** (In other words, filters will be forgotten each time you reload the app.)\r\n\r\nThe reason for this is a mix of timing and context. The biggest limiting factor is the lack of a synchronous storage option. React Native has a couple of faux sync storage options, but they just in-memory wrappers around an async storage layer and they require async initialization. That _could_ work if the React Native backend waited to initialize DevTools until it also initialized the async storage layer, _but_ this has implications on reload-and-profile support (#336).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/337",
        "title": "DevTools: React Native: Remember saved component filters between reloads",
        "labels": "Type: Enhancement",
        "id": 44592
    },
    {
        "body": "It would be useful to force components into an error state, in order to test error boundaries (similar to how the suspense toggle works).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/340",
        "title": "DevTools: Triggering Error Boundaries from DevTools",
        "labels": "Type: Enhancement",
        "id": 44593
    },
    {
        "body": "Building on top of #360\r\n\r\nWe could probably improve the search UX in a couple of ways:\r\n\r\n* Visually indicate when the \"match\" is because of a HOC name, e.g.\r\n<img width=\"161\" alt=\"Screen Shot 2019-08-03 at 1 54 21 PM\" src=\"https://user-images.githubusercontent.com/29597/62416804-36f32f00-b5f6-11e9-9150-e32f652c7f98.png\">\r\n\r\n* Match built-in HOC types (e.g. searching \"me\" should match `React.memo` HOCs, searching \"f\" should match `React.forwardRef`, etc.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/365",
        "title": "DevTools: Improve HOC search UX",
        "labels": "Type: Enhancement",
        "id": 44594
    },
    {
        "body": "* Don't show \"context\" for classes without either contextType or contextTypes\r\n* For classes with contextTypes, change the label to \"legacy context\" instead\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/368",
        "title": "DevTools: Don't show \"context\" for classes without either contextType or contextTypes",
        "labels": "Type: Enhancement",
        "id": 44595
    },
    {
        "body": "I have a particular pattern that I struggle with when navigating deep trees in devtools: I want to see all siblings of a node together.\r\n\r\nSay I'm in the middle of something and I wonder what are all nodes on the same level. It's super hard to actually get to that state. I wonder if we could tweak \"left\" button to do that as an intermediate state.\r\n\r\n* first press: collapse the current node\r\n* second press: collapse all siblings (new)\r\n* third press: move to the parent\r\n\r\nMaybe this is too crazy :-) Or maybe there's another mechanic that can achieve the same effect. The goal here is to be able to make sense of the tree structure by going _upwards_. Currently implementation details of children prevent me from seeing it. (At least, with the \"expand\" mode on \u2014 which is now on by default.)\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384",
        "title": "DevTools: An easier way to see all siblings",
        "labels": "Type: Enhancement",
        "id": 44596
    },
    {
        "body": "It\u2019s confusing that 0.14 or earlier is in half-working state where it displays a tree (but incorrectly). We should detect it and fully disable if it doesn\u2019t work. Or fix it.\r\n\r\nIf we go the route of disabling support:\r\n1. DevTools should show a warning message that clearly indicates the version of React isn't supported. (This is probably a good idea for v13 and older anyway.)\r\n2. DevTools should not throw any errors.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384",
        "title": "DevTools: Fully disable 0.14 support",
        "labels": "Type: Enhancement",
        "id": 44597
    },
    {
        "body": "The `ProfilerContext` is currently comprised of several pieces of related state, each managed with `useState`. This necessitates awkward checks like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L126-L131) or even worse like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/SnapshotSelector.js#L62-L73) or [this](https://github.com/bvaughn/react-devtools-experimental/blob/source/src/devtools/views/Profiler/Profiler.js#L71-L83).\r\n\r\nThis context should be refactored to use a single reducer (`useReducer`) like `TreeContext`. This is a bit more involved at the moment because of suspense and the `ProfilerContext` being higher level than the suspense cache. Although maybe we could work around this by using some sort of [subscription](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L118-L124)?\r\n\r\nSee related issues like #16441 and commit [4697f5b](https://github.com/bvaughn/react-devtools-experimental/commit/4697f5b37967b85b2c844044aeebb5b1a740875d).",
        "title": "Refactor ProfilerContext to use reducer instead of multi-state",
        "labels": "Type: Enhancement",
        "id": 44598
    },
    {
        "body": "```js\r\n  let foo = {}\r\n  useEffect(() => {\r\n    foo.bar.baz = 43;\r\n  }, []);\r\n```\r\n\r\nThis asks you to include `foo.bar.baz` into deps. But this doesn't make sense, as you write to it. Instead it should ask to include `foo.bar` into array.\r\n\r\nIf `foo` is a newly created object in render scope then we might additionally nudge you to `useRef` for it instead. Because otherwise it won't be shared between renders.",
        "title": "[ESLint] Assignment like foo.bar.baz = X should warn about foo.bar instead",
        "labels": "Type: Enhancement",
        "id": 44599
    },
    {
        "body": "If you write:\r\n\r\n```js\r\nimport React, {useEffect} from 'react';\r\nconst Foo = ({ orgId }) => {\r\n  const fetchOrg = () => {\r\n    alert(orgId);\r\n  };\r\n  useEffect(() => {\r\n    fetchOrg();\r\n  }, [orgId]);\r\n  return <div />;\r\n};\r\n```\r\n\r\nthen you get the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'fetchOrg'. Either include it or remove the dependency array\r\n\r\nBut if you follow that advice and add `fetchOrg` to the dep array, you get:\r\n\r\n> The 'fetchOrg' function makes the dependencies of useEffect Hook (at line 6) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'fetchOrg' definition into its own useCallback() Hook\r\n\r\nIdeally it could suggest the second solution immediately, instead of suggesting a remediation that it will immediately warn about.",
        "title": "eslint-plugin-react-hooks suggests adding a dependency on a function that always changes",
        "labels": "Type: Enhancement",
        "id": 44600
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n> Write your code so that it still works without useMemo\r\n\r\n-- https://reactjs.org/docs/hooks-reference.html#usememo\r\n\r\nI can try writing my code with this in mind but it would be very helpful if React could try to help spot issues.\r\n\r\n**What is the expected behavior?**\r\n\r\nStrictMode can already help us detect side-effects in render by calling it twice. It also helps detecting side-effects in `useMemo` by calling it twice if the dependencies change. However, there's no way to simulate a purge of the cache.\r\n\r\nIt might help calling the factory in StrictMode regardless of the dependencies (or only on the second render). Other approaches like `<StrictMode areMemoDependenciesEqual={...} />` would give more control to the user.\r\n\r\nThere's already a working solution by using some feature flag at build time e.g. `React.useMemo(factory, __STRICT__ ? undefined : [dependency])` but the linter can't work with that. Using `React.useMemo(factory, [dependency, PURGE_MEMO_CACHE.current])` would make it more controllable if we write e.g. test instructions but the linter complains about those too. I don't think we have a way to detect if React is between two render calls so that we can purge the cache by flipping `PURGE_MEMO_CACHE.current`\r\n\r\nThis is also somewhat opposite to #15278 because we want an API to opt-in to cache purging.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nFuture versions of React that might forget the dependencies.\r\n",
        "title": "useMemo in StrictMode",
        "labels": "Type: Enhancement",
        "id": 44601
    },
    {
        "body": "`ReactTestRenderer.act()` only works for `react-test-renderer`.\r\n`ReactTestUtils.act()` only works for `react-dom`.\r\n\r\nUnfortunately due to poor naming, people confuse those two things.\r\n\r\nWe need to:\r\n\r\n* Make sure `ReactTestRenderer.act()` around `react-dom` updates doesn't silence the warning, and vice versa. (Currently, it does \u2014 but you can fix it by using an empty object that's unique per renderer instead of a `true` value.)\r\n\r\n* Add a special warning message when a different renderer is \"acting\" updates. That warning message should suggest that you're supposed to use `act()` corresponding to the renderer you're using, e.g. `react-dom/test-utils` for `react-dom`.\r\n\r\nThis should fix most cases where people wrap updates in the wrong `act`.",
        "title": "Using TestRenderer.act() should not silence the ReactDOM warning",
        "labels": "Type: Enhancement",
        "id": 44602
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n- *Feature*\r\n\r\n**What is the current behavior?**\r\n\r\nFor toolchains/languages that munge the names of functions, the display of custom hooks in React DevTools is unreadable.\r\n\r\nFor instance, in ClojureScript we might have a custom hook named `<-window` that would be compiled into the name `my_app$hooks$_LT__window`.\r\n\r\n**What is the ~expected~ desired behavior?**\r\n\r\nTo have the ability to set a `displayName`-like value on a custom hook to customize it's name in React DevTools.\r\n\r\nA potential solution:\r\n\r\n```javascript\r\nfunction useSomeReallyLongNameThatIDontWantToShow() {\r\n  // Implement my custom hook\r\n}\r\n\r\nuseSomeReallyLongNameThatIDontWantToShow.debugName = \"useShortName\";\r\n```\r\n\r\n`useShortName` would show up in React DevTools instead of `useSomeReallyLongNameThatIDontWantToShow`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8 / Chrome / macOS 10.13.6",
        "title": "Customize display name of custom hooks",
        "labels": "Type: Enhancement",
        "id": 44603
    },
    {
        "body": "Can we expose a lighter weight set of Performance \"marks\" for people consuming browser Performance tracing? e.g. when a particular `Profiler` commits. This should be a lot less heavyweight than the full mark-and-measure stuff.",
        "title": "Profiler marks",
        "labels": "Type: Enhancement",
        "id": 44604
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'd like to report a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nFirst of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.\r\n\r\n`React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.memo` should forward displayName for the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React 16.8.5\r\n* Jest 24.5.0\r\n* enzyme 3.9.0\r\n* enzyme-adapter-react-16 1.11.2\r\n\r\n---\r\n\r\nN.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!\r\n\r\nI'd be happy to submit a PR if the issue is not too complex to look into :smile: ",
        "title": "Memoized components should forward displayName",
        "labels": "Type: Enhancement",
        "id": 44605
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nSuppose you give an `undefined` object or forget to provide parameters to `useEffect`:\r\n\r\n```js\r\nconst App = () => {\r\n    React.useEffect();\r\n    return \"\";\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('container'));\r\n```\r\n\r\nOn JSFiddle (https://jsfiddle.net/g39javzq), this error stack is logged:\r\n\r\n```\r\nUncaught TypeError: create is not a function\r\n    at commitHookEffectList (react-dom.development.js:17372)\r\n    at commitPassiveHookEffects (react-dom.development.js:17396)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:143)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:193)\r\n    at invokeGuardedCallback (react-dom.development.js:250)\r\n    at commitPassiveEffects (react-dom.development.js:18863)\r\n    at wrapped (react.development.js:1353)\r\n    at flushFirstCallback (react.development.js:587)\r\n    at flushWork (react.development.js:699)\r\n    at MessagePort.channel.port1.onmessage (react.development.js:1093)\r\n```\r\n\r\n...though on a local project in React 16.8.4, this stack is logged:\r\n\r\n```\r\nUncaught TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\r\n    at _iterableToArrayLimit (my-project.chunk.js:123)\r\n    at _slicedToArray (my-project.chunk.js:456)\r\n    at MyComponent (myFile.js:7)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNeither of these were useful during the 5 minutes it took to find the culprit `useEffect` that should have been a `useState`.\r\n\r\nIn development, we check for an `undefined` `deps` argument in `useEffect` and give a better warning?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.4, Chrome on Mac.\r\n",
        "title": "Better error message when useEffect is called with no parameters",
        "labels": "Type: Enhancement",
        "id": 44606
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere are no warnings when assigning to `ref.current` in render phase.\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven that this mostly works now, but may cause issues on release of concurrent mode, it would be helpful to have a warning when assigning to a prop outside of `useEffect()`.\r\n\r\nE.g. I recently wrote this code, which works fine at the moment, and didn't realize the possible issue until @gaearon pointed out the missing `useEffect()`:\r\n\r\n```js\r\nexport function useDidChange(value) {\r\n  let ref = useRef()\r\n  let didChange = ref.current !== value\r\n  ref.current = value\r\n  return didChange\r\n}\r\n```\r\n\r\nIf a warning is not possible due to the lazy initialization pattern, perhaps an eslint rule may be a solution?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions",
        "title": "Warnings when assigning to ref in render phase?",
        "labels": "Type: Enhancement",
        "id": 44607
    },
    {
        "body": "I've noticed a strange bug with the react redux `forwardRef` opt-in.\r\nIf i use it with a connected class component, everything is ok:\r\n```javascript\r\nconst MyComponent = class Test extends React.Component {\r\n  foo = () => console.log(\"Print foo from Test component\");\r\n  render() {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst ConnectedComponent = connect(\r\n  null,\r\n  null,\r\n  null,\r\n  { forwardRef: true }\r\n)(MyComponent);\r\n\r\nconst store = createStore(() => {});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedComponent\r\n        ref={ref => {\r\n          if (ref) ref.foo();\r\n        }}\r\n      />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\nIf i use it with a connected functional component that use `forwardRef` with `useImperativeHandle`, i obtain a strange error: `create is not a function` in `commitHookEffectList` `react-dom` method.\r\n\r\n```javascript\r\nconst MyComponent = React.forwardRef((props, ref) => {\r\n  useImperativeHandle(ref, {\r\n    foo: () => console.log(\"Print foo from Test component\")\r\n  });\r\n\r\n  return null;\r\n});\r\n\r\nconst ConnectedComponent = connect(\r\n  null,\r\n  null,\r\n  null,\r\n  { forwardRef: true }\r\n)(MyComponent);\r\n\r\nconst store = createStore(() => {});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedComponent\r\n        ref={ref => {\r\n          if (ref) ref.foo();\r\n        }}\r\n      />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nI create a codepen to reproduce the issue: https://codesandbox.io/s/r7rpml460o\r\n\r\nPS: Sorry for the cors error, but i don't find the way to add `react@next`as cdn",
        "title": "useImperativeHandle should warn when second arg isn't a function",
        "labels": "Type: Enhancement",
        "id": 44608
    },
    {
        "body": "``` js\r\nexport const Counter = () => {\r\n    let count, setCount;\r\n    if (0 === 1) {\r\n        [count, setCount] = useState(0);\r\n    }\r\n    return count;\r\n};\r\nconst wrapper = Component => Component;\r\nexport const WrappedCounter = wrapper(() => {\r\n    let count, setCount;\r\n    if (0 === 1) {\r\n        [count, setCount] = useState(0);\r\n    }\r\n    return count;\r\n});\r\n```\r\nLinter shows an error in the first component, but ignore the second one.",
        "title": "eslint-plugin-react-hooks does not work with wrapped components",
        "labels": "Type: Enhancement",
        "id": 44609
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a feature (enhancement).\r\n\r\n**What is the current behavior?**\r\n\r\n`props` parameter isn't validated in `Component` and `PureComponent`. Omitted `props` is a common mistake that results in undefined `this.props` in constructor. This may result in a problem:\r\n\r\n```js\r\nclass MyComponent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { a: 1, b: this.props.b }; // cannot read b property of undefined\r\n  }\r\n}\r\n```\r\n\r\nA problem may be harder to determine if previously working code stops working when refactored:\r\n\r\n```js\r\nclass MyComponent extends Component {\r\n  constructor() {\r\n    super(); // no error\r\n  }\r\n\r\n  componentWillMount() {\r\n    // rewriting this to constructor code will result in situation above\r\n    this.setState({ a: 1, b: this.props.b });\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`Component` and `PureComponent` validate `props` parameter to be an object, or `arguments > 0` at least and display a warning in development mode in case `props` isn't passed from child constructor.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.7.0-alpha.0",
        "title": "Display a warning if Component is called without props",
        "labels": "Type: Enhancement",
        "id": 44610
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nGetting `TypeError: dispatcher.useState is not a function` when trying to call `useState`; this is happening in a create-react-app, as well as in the CodeSandbox example below.\r\n\r\n**Example:**\r\nhttps://codesandbox.io/s/7kp55lwwpj\r\n\r\n**What is the expected behavior?**\r\n`useState` hook function should execute without error as defined in the [API documentation](https://reactjs.org/docs/hooks-reference.html#usestate)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n**React**: v16.7.0-alpha.0\r\n**React-DOM**: 16.5.2 (CSB), 16.7.0-alpha.0 (local)\r\n**React-Scripts**: 2.0.3 (CSB), 2.1.0 (local)\r\n",
        "title": "Improve message \"dispatcher.useState is not a function\" when mixing react@next with react-dom@16.5.2",
        "labels": "Type: Enhancement",
        "id": 44611
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen calling `ReactDOM.createPortal` from within a `<noscript />`, nothing happens, no error is logged.\r\n\r\n```javascript\r\nReactDOM.render(\r\n  <noscript>\r\n    {ReactDOM.createPortal(\"yo\", modalNode)}\r\n  </noscript>,\r\n  appNode\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nWhether:\r\n- warn that it doesn't work (it worked in the previous version)\r\n- render the portal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.5.0 & more recent\r\n- Reproducible in every browser\r\n\r\n**Repro**\r\nhttps://jsfiddle.net/bloodyowl/n5u2wwjg/223296/",
        "title": "Warn if ReactDOM.createPortal is inside a noscript or other text content tag",
        "labels": "Type: Enhancement",
        "id": 44612
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nQuite possibly a bug (or maybe confusion about the current API)\r\n\r\nI am using the new Context API as well as the new `static contextType` in React 16.6. I am passing context down a couple components deep but when I attempt to access the context within the component, the object is empty (~only the default value passed into `createContext` is being displayed~). This is happening in a current feature I am working on at my job, so I cannot display that code, but I did create a Codesandbox with the gist of the problem.\r\n\r\nHere is a demonstration of the behavior: https://codesandbox.io/s/r4myz959ro\r\n\r\nI would expect to be able to access the current values of the context. This way, if those values change, I would always have the most recent values. Now, maybe this is expected behavior, however, it would be confusing if it is.\r\n\r\nReact 16.6\r\nReactDOM 16.6\r\n",
        "title": "16.6 Context API not working in class component",
        "labels": "Type: Enhancement",
        "id": 44613
    },
    {
        "body": "*[Edit by @acdlite: Decided in comments below that we will change the semantics so that a missing `fallback` prop means the exception should propagate to the next parent (like a rethrow). That way a Suspense component can specify other props like `maxDuration` without needing to provide a fallback, too.]*\r\n\r\n---\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\n`<React.Suspense>` does not warn you if you omit a `fallback`). While redundant for TS/Flow usage,  I misspelled the `fallback` prop by accident in a playground and was tearing my hair out trying to figure out why things were not working as expected. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nOmit a `fallback`. \r\n\r\n**What is the expected behavior?**\r\nReact should warn during development if `fallback` is `undefined`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nMaster \r\n",
        "title": "Suspense component should only capture if fallback prop is defined",
        "labels": "Type: Enhancement",
        "id": 44614
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature (an improvement)\r\n\r\n**What is the current behavior?**\r\n\r\nWhen defining more than two parameters for a React.forwardRef render function a warning message stating \"forwardRef render functions accept two parameters: props and ref. Did you forget to use the ref parameter?\" gets logged.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/5v704qxvnx\r\n\r\n**What is the expected behavior?**\r\n\r\n**Option 1**\r\n\r\nOverall the message could be more explicit on accepting **exactly** two parameters. Also, when the arity is greater than 2 the second part of the message may be omitted. For instance:\r\n\r\n\"\"forwardRef render functions accept **exactly** two parameters: props and ref\"\r\n\r\n**Option 2**\r\n\r\nIf defining more than 2 arguments to the function is ok, which may be the case since the real goal for this warning is just to make sure people use the ref parameter, I think the message could not be shown for arity > 2, therefore chaging the condition of `=== 2` to `> 1`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.5.0 which is the one that includes this new warning",
        "title": "Warning if React.forwardRef render function doesn't take exactly two arguments is confusing when more than 2 arguments",
        "labels": "Type: Enhancement",
        "id": 44615
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf you're really tired and forget to use a `Context.Provider`, and instead use the `Context` as if it were a provider, React (understandably) freaks out, but the error message is confusing. i.e.:\r\n\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Context = React.createContext();\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <Context value={\"oops\"}>\r\n        <div>duh</div>\r\n      </Context>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nThis results in the console looking something like (pasted from codesandbox):\r\n\r\n```\r\nWarning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\nWarning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\nThe above error occurred in one of your React components:\r\nError in sandbox: \r\nTypeError: render is not a function\r\nCould not consume error: \r\nError {}\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[![Edit 1wv0ly494l](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1wv0ly494l)\r\n\r\n**What is the expected behavior?**\r\n\r\nAn error that (roughly paraphrased) says something along the lines of:\r\n\r\n```\r\nhey idiot, you're trying to use a context directly. You want to use context.Provider. Go take a shower and try again.\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3+\r\n",
        "title": "passing React.createContext() mistakenly as if it were an element causes confusing error",
        "labels": "Type: Enhancement",
        "id": 44616
    },
    {
        "body": "We recently chatted about https://github.com/facebook/react/pull/13367 and related work (e.g. https://github.com/facebook/react/pull/13394) with @sebmarkbage, and he raised a good point.\r\n\r\nIt seems like overall treating them consistently is adding significant overhead in the implementation readability. And there\u2019s undoubtedly runtime overhead to it too. There are two separate issues here:\r\n\r\n* **warning** for invalid values\r\n* ensuring that the output for invalid values is **consistent** (e.g. functions are always skipped)\r\n\r\nThe conclusion we came to is that we should keep **warning** for bad values, but **as long as we warn, consistency is not necessary**. It's fine if we sometimes stringify a function, and sometimes skip it, as long as we always warn for those cases\r\n\r\n**Our guiding principle for invalid inputs should be that we handle them with the least amount of overhead** (both at runtime, and in terms of code size), not that they\u2019re always handled the same way.\r\n\r\nOne exception to this is probably Symbols because they throw when stringified. So it seems like skipping them is actually desirable \u2014 unless we're okay with errors.",
        "title": "Relax ToString consistency guarantees",
        "labels": "Type: Enhancement",
        "id": 44617
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug, I believe\u2014requested to file a new issue per https://github.com/facebook/react/issues/12453#issuecomment-414868619\r\n\r\n**What is the current behavior?**\r\nWhen using ReactTestUtils that navigate the trees for composite components, I am unable to find instances of components wrapped in `React.forwardRef`:\r\n\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n// error, finds 0 instances\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nJSFiddle link [here](https://jsfiddle.net/Luktwrdm/974/)\r\n\r\nI have a HOC that returns a forwardRef pretty much exactly like the one written up in the [docs](https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components), except while using React Context:\r\n\r\n```jsx\r\nconst MyContext = React.createContext(someDefault);\r\n\r\nconst withMyContext = (Component) => {\r\n  class MyContextConsumer extends React.Component {\r\n    render() {\r\n      const {forwardedRef, ...rest} = this.props;\r\n\r\n      return (\r\n        <MyContext.Consumer>\r\n          {(value) => (\r\n            <Component\r\n              {...rest}\r\n              ref={forwardedRef}\r\n              myValue={value}\r\n            />\r\n          )}\r\n        </MyContext.Consumer>\r\n      );\r\n    }\r\n  }\r\n\r\n  return React.forwardRef((props, ref) => (\r\n    <MyContextConsumer {...props} forwardedRef={ref} />\r\n  ));\r\n};\r\n\r\n@withMyContext\r\nclass MyHOCForwardedComponent extends React.Component {\r\n  render() {\r\n     return <div>HELLO</div>;\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would hope that we could still navigate the tree, such that\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n```\r\n\r\nis able to find the rendered instance.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.4\u2014affected everywhere, I believe.\r\n\r\nThank you for the time!!\r\n",
        "title": "forwardRef precludes use of composite component test utils methods",
        "labels": "Type: Enhancement",
        "id": 44618
    },
    {
        "body": "This:\r\n\r\n```js\r\ncreateElement(<div />)\r\n```\r\n\r\ndoesn't currently give a distinguishable message.\r\n\r\nhttps://stackoverflow.com/questions/51110436/wrapping-provider-in-same-component-throws-element-type-is-invalid-expected-a-s\r\n\r\nBut we can easily detect it by checking for `$$typeof` and in that case suggest something more concrete (e.g. \"Did you accidentally export JSX instead of a component?\").",
        "title": "Add a more helpful message when passing an element to createElement() as a type",
        "labels": "Type: Enhancement",
        "id": 44619
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI am proposing adding a warning in development.\r\n\r\n**What is the current behavior?**\r\n\r\nwhen I do `this.setState(({ bool }) => { bool: !bool });` this is valid javascript but is meaningless in React. ESLint:no-label helps to catch this but we can probably do one better by building a warning into dev-mode React itself.\r\n\r\nsandbox demo: https://codesandbox.io/s/xopj5nx07o\r\n\r\n**What is the expected behavior?**\r\n\r\nwarn when a function is applied to setState that returns undefined. if the user wants to indicate nothing changed they should return null.",
        "title": "Warn when setState is a function that doesn't return",
        "labels": "Type: Enhancement",
        "id": 44620
    },
    {
        "body": "See https://github.com/facebook/react/pull/12985 for details. Not sure if it matters in practice. Do people often have many (dozens and more?) providers deep inside the tree?\r\n\r\nIf we can remove the loop there it would be nice.",
        "title": "Popping SSR providers is O(N) where N = number of providers on the stack",
        "labels": "Type: Enhancement",
        "id": 44621
    },
    {
        "body": "Currently when hydrating server-rendered markup we ignore changes the user makes before hydration. We also don't reset their changes once hydration finishes. The motivation there was likely to avoid losing user input. See this test:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/__tests__/ReactDOMServerIntegrationForms-test.js#L543-L552\r\n\r\nThe problem with that is that it assumes the value will continue to be changed after hydration completes (e.g., a user keeps typing). If they _don't_, then the DOM and React will be out of sync.\r\n\r\nWe should try to detect if there have been any changes made to an input when hydrating, and if so dispatch a change event so that the component is notified of the new value.\r\n\r\nSee https://github.com/facebook/react/pull/12939 for some more discussion.\r\n",
        "title": "Fire change events for changes made to inputs before hydration",
        "labels": "Type: Enhancement",
        "id": 44622
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nThe warning for a failure to initialize state when using `getDerivedStateFromProps` is not as clear as it could be.\r\n\r\nThis component produces the warning:\r\n> MyComponent: Did not properly initialize state during construction. Expected state to be an object, but it was undefined.`\r\n\r\n```js\r\nclass MyComponent extends React.Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return null;\r\n  }\r\n  render() {\r\n    return <span>Foo</span>\r\n  }\r\n}\r\n```\r\n\r\nThe warning can be resolved by adding `state = {}` either in the class definition or the constructor, or by not using `getDerivedStateFromProps`.\r\n\r\nSee https://github.com/reactjs/reactjs.org/issues/796 for more detail on why this warning message can be counter-intuitive.\r\n\r\nSince the [warning is specific](https://github.com/facebook/react/blob/b548b3cd640dbd515f5d67dafc0216bb7ee0d796/packages/react-reconciler/src/ReactFiberClassComponent.js#L509-L510) to the use of `getDerivedStateFromProps` and not triggered by any other state or lifecycle methods, and state initialization isn't required for other state methods like `this.setState`, it would make sense to me to mention `getDerivedStateFromProps` explicitly in the warning.\r\n\r\nHere's a proposal for a new warning message:\r\n> MyComponent: Component state must be initialized when using getDerivedStateFromProps. Expected state to be an object, but it was undefined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact >= 16.3.0\r\n",
        "title": "Improve warning message for failure to initialize `state` when using `getDerivedStateFromProps`",
        "labels": "Type: Enhancement",
        "id": 44623
    },
    {
        "body": "https://github.com/facebook/react/blob/ba245f6f9b0bf31c2ebff5c087c21bcae111e6c3/packages/react-reconciler/src/ReactFiberNewContext.js#L51\r\n\r\nWe currently don't allow multiple renderers share the same context.\r\n\r\nHowever, we should relax that constraint. They should be allowed, as long as rendering isn't interleaved. So when we pop the provider, we should also pop the sigil.\r\n\r\nWe need this to run Fabric and RN at the same time.",
        "title": "Multiple Renderers Should Allow Context",
        "labels": "Type: Enhancement",
        "id": 44624
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nImprovement request/discussion\r\n\r\n**What is the current behavior?**\r\nRendering `<fooBar/>` in ReactDOM:\r\n> fooBar is using uppercase HTML. Always use lowercase HTML tags in React.\r\n\r\n**What is the expected behavior?**\r\nThe warning message can be improved to make it more obvious how to fix the issue for different use cases. For example, it's not obvious from this message that custom components should add dashes or that the first letter should be capitalized if it's actually a React component. Here's my idea, but I'm open to suggestions:\r\n\r\n> Warning: \\<foorBar /\\> looks like an HTML or web component element because it starts with a lowercase letter, but it has uppercase letters instead of dashes. Use PascalCase for React components, or lowercase letters and dashes for HTML.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster: eb6e752cabafed0b72e1d0a38819ff156557d537",
        "title": "Improve ReactDOM's uppercase HTML warning",
        "labels": "Type: Enhancement",
        "id": 44625
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nI get a confusing error when not using a new line in the children of a Consumer un the new Context API:\r\nhttps://codesandbox.io/s/13n733xp5j\r\n\r\nError:\r\n![selection_108](https://user-images.githubusercontent.com/10557463/36343595-1e28ece8-13dc-11e8-99ae-2c4a2e707000.png)\r\n\r\nFix:\r\n![selection_109](https://user-images.githubusercontent.com/10557463/36343599-245ae51c-13dc-11e8-95b2-be8491ccd39f.png)\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nComponent just getting redered\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1 and 16.3.0-alpha.0, Chromium 63, Archilinux. React 16.2 didn't support the new Context Api.\r\n",
        "title": "Children of Consumer without new line gives \"TypeError: render is not a function\"",
        "labels": "Type: Enhancement",
        "id": 44626
    },
    {
        "body": "The use case is when an abstraction wants to listen to some event bubbling up and intercept the event somehow.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <div onClick={() => props.onAction()}>{props.children}</div>;\r\n}\r\n```\r\n\r\nPerhaps there is some state and context involved too.\r\n\r\nThis works fine today as long as you can wrap it in a `<div />`. However, you can't necessarily always do that. I hear that some of this will be relaxed but conceptually I think the constraints will remain in many environment that you don't want a wrapper element around these.\r\n\r\n```js\r\n<ul>\r\n  <Abstraction onAction={...}>\r\n    <li>A</li>\r\n    <li>B</li>\r\n  </Abstraction>\r\n</ul>\r\n```\r\n\r\n```js\r\n<table>\r\n  <tbody>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\nIt would be nice to be able to use fragments for this.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <Fragment onClick={() => props.onAction()}>{props.children}</Fragment>;\r\n}\r\n```\r\n\r\nIt is easy to implement with the synthetic event system but I suspect it is doable with other approaches too (including just inserting an element called `<fragment />` in the DOM).\r\n\r\nTo implement this we'd need somewhere to store the \"current\" props. We can use the `stateNode` on fragment fibers to hold that. We also need to schedule commit phase effects whenever the set of event handlers on a fragment changes. In the commit phase we update the stateNode on both Fibers to hold the \"current props\".\r\n\r\nThat way when we bubble up the fiber return pointers, we know that stateNode holds the current set of props and those will be the ones we extract event handlers from.",
        "title": "Event Handlers on Fragments",
        "labels": "Type: Enhancement",
        "id": 44627
    },
    {
        "body": "Same as https://github.com/facebook/react/issues/10103, but for the server renderer. You can look at implementation in https://github.com/facebook/react/pull/11168 and do something very similar in `ReactPartialRenderer.js`.",
        "title": "Warn in server renderer if class doesn't extend React.Component but has a render() method",
        "labels": "Type: Enhancement",
        "id": 44628
    },
    {
        "body": "Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):\r\n\r\n>I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.\r\n\r\n>Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?\r\n\r\nI think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used.",
        "title": "Consider a more specific warning for key={undefined}",
        "labels": "Type: Enhancement",
        "id": 44629
    },
    {
        "body": "See https://github.com/facebook/react/pull/11644. Filing this as a follow up.",
        "title": "Figure out a better fix for memory leak",
        "labels": "Type: Enhancement",
        "id": 44630
    },
    {
        "body": "React manually stringifies all attributes before assigning them:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/DOMPropertyOperations.js#L169-L179\r\n\r\nThis appears to be for IE8/9. However it's possible that this is an IE8 only behavior. See IE9:\r\n\r\n<img width=\"1104\" alt=\"screen shot 2017-11-30 at 8 02 51 pm\" src=\"https://user-images.githubusercontent.com/590904/33463221-2eeb4770-d60a-11e7-9915-2a2918ca22b9.png\">\r\n\r\n<img width=\"752\" alt=\"screen shot 2017-11-30 at 8 03 38 pm\" src=\"https://user-images.githubusercontent.com/590904/33463224-3595328e-d60a-11e7-9786-e2ac050ffb53.png\">\r\n\r\nCan we get rid of `'' + value` in DOMPropertyOperations?\r\n",
        "title": "Do we still need to stringify attributes before assigning them?",
        "labels": "Type: Enhancement",
        "id": 44631
    },
    {
        "body": "We currently validate DOM attributes on the client and ignore the ones with invalid names:\r\n\r\nhttps://github.com/facebook/react/blob/0c164bb4851e78e5f789dd8619f17ffcfee0221f/packages/react-dom/src/client/DOMPropertyOperations.js#L202-L204\r\n\r\nThis check used to be important for safety when we did `innerHTML` rendering on the client side, but it's not anymore. If we just let it call `setAttribute`, the browser would throw on a bad attribute name.\r\n\r\nThis check used to run very infrequently (only for data attributes and custom elements), but now more attributes follow this code path (since any \"simple\" attributes with the same names are effectively treated as unknown attributes). So even though we cache the result, it seems unfortunate to do the work that the browser is already doing for us.\r\n\r\nWhile this would be a breaking change (so it has to go in 17), I think we should just remove this check, and let the browser throw. This does make spreading props blindly a bit more dangerous, but we have a warning so it should be visible.",
        "title": "RFC: Drop isAttributeNameSafe() check in React 17",
        "labels": "Type: Enhancement",
        "id": 44632
    },
    {
        "body": "IIRC we didn't include it because it was DEV-only. But it's not anymore.\r\nMaybe let's start including it?\r\n\r\nErrors are often more prominent than warnings, and it would be great to have this info in both.",
        "title": "Include component stack in invariants",
        "labels": "Type: Enhancement",
        "id": 44633
    },
    {
        "body": "The [ReactBrowserEventEmitter checks for browser support of the `cancel` and `close` events.](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L136-L138) before attaching those listeners.\r\n\r\nI'm curious why this is necessary. Did we need it for IE8? \r\n\r\nI'd like to:\r\n\r\n- [ ] Determine if there are ramifications to removing these checks\r\n- [ ] Add comments above those lines if these checks are necessary.\r\n- [x] ~Maybe eliminate [`isEventSupported.js`](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/isEventSupported.js)~ this is needed to check for `input` in ChangeEventPlugin",
        "title": "Investigate need to feature check cancel and close events.",
        "labels": "Type: Enhancement",
        "id": 44634
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI accidently generated my SSR output using `renderToStaticMarkup` instead of `renderToString`, which I then hydrated using `hydrate`. This  led to a warning, caused by collapsed text nodes. `renderToString` would have added HTML comments between them.\r\n\r\nThe warning I got was: \r\nWarning: Text content did not match. Server: \"a (b)\" Client: \"a\"\r\n\r\nWhen rendering:\r\n```jsx\r\n    const a = 'a';\r\n    const b = 'b';\r\n    const component = <select><option>{a} ({b})</option></select>;\r\n```\r\n\r\nIt would be nice if `hydrate`  could detect that it is executed on output from `renderToStaticMarkup` instead of `renderToString`. It seems to me a simple check on the `data-reactroot` attribute on the root element would suffice.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like some kind of warning along the following lines:\r\n\r\n`Warning: You are hydrating output that was not created by ReactDOMServer.renderToString(). Perhaps you are using ReactDOMServer.renderToStaticMarkup() or modifying the output after rendering. Please see ... for more information.`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.1.1.\r\n\r\nDue to the changes in 16, this worked before.",
        "title": "Add warning when hydrating output from renderToStaticMarkup",
        "labels": "Type: Enhancement",
        "id": 44635
    },
    {
        "body": "See this example: https://github.com/facebook/react/issues/11508#issuecomment-345464797.\r\n\r\nI think it probably reflects a misunderstanding of how props and state work, and we should detect and warn if we see this.",
        "title": "Warn if this.state is set to this.props referentially",
        "labels": "Type: Enhancement",
        "id": 44636
    },
    {
        "body": "I think we can move the [`wheel` event support check in BrowserEventEmitter](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L126-L135) into [BrowserEventConstants](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/BrowserEventConstants.js)\r\n\r\nThat runs the check once, which is nice for wheel and scroll events, which eventually need to be attached locally.\r\n\r\nFiling this for myself as a part of https://github.com/facebook/react/pull/11550. But this could happen on master right now.\r\n\r\nMore or less, I'm interested in cutting the overhead of event listening as much as possible, and this is really low hanging \ud83e\udd5d. ",
        "title": "Move MouseWheel event type detection to BrowserEventConstants",
        "labels": "Type: Enhancement",
        "id": 44637
    },
    {
        "body": "I thought before it might cause knee jerk reactions, and it does in practice: https://twitter.com/freeformflo/status/928454078903894016\r\n\r\nI think we should change the phrasing to a more neutral one. Potentially explaining *why* we prefer camel case. ",
        "title": "Reword \"unknown property\" warning to be less obnoxious",
        "labels": "Type: Enhancement",
        "id": 44638
    },
    {
        "body": "Currently helpers like `React.Children.toArray` will not validate the passed elements, so things like missing keys go unnoticed.\r\n\r\nSee the discussion in https://twitter.com/sebmarkbage/status/930239051092803585 (I deleted the original tweet) for more context",
        "title": "Add validation to the React.Children helpers",
        "labels": "Type: Enhancement",
        "id": 44639
    },
    {
        "body": "See https://github.com/reactjs/reactjs.org/issues/268#issuecomment-343402728.\r\n\r\nFeels like an easy mistake to make, and easy for us to detect. ",
        "title": "Warn when component has PropTypes rather than propTypes",
        "labels": "Type: Enhancement",
        "id": 44640
    },
    {
        "body": "Based on a conversation with @vjeux:\r\n\r\n>I wrote\r\n>\r\n>```js\r\n>constructor(props) {\r\n>  return {\r\n>    something: false\r\n>  }\r\n>}\r\n>```\r\n>instead of\r\n>\r\n>```js\r\n>constructor(props) {\r\n>  super(props);\r\n>  this.state = {\r\n>    something: false\r\n>  }\r\n>}\r\n>```\r\n>\r\n>and the error was super confusing, it told me that render is not defined on the component, which didn't make sense since I returned it!\r\n\r\nWe can fix this to show a different message if `type` has `.prototype.isReactComponent` but `constructor()` gave us something without a `render` method.\r\n\r\n",
        "title": "Show a better warning when accidentally returning from constructor",
        "labels": "Type: Enhancement",
        "id": 44641
    },
    {
        "body": "Follow up for https://github.com/facebook/react/pull/10783/files/ab1a58ec0675b34d6eb15854c4b573f2abebe489#r145577198\r\n\r\n>  This is neat but it also means that we're sometimes comparing strings to numbers/symbols. That could potentially deopt the type hints in this function. It might actually be better to check the child.tag to ensure that it is a HostComponent or Fragment and compare the type in separate branches.\r\n>\r\n> In fact, that might already be a bug incase we ever add strings to fiber.type on other fibers than HostComponent.\r\n\r\nBy checking for tags before we do type comparison branches, we can ensure we don't have possible bugs from this, as well as optimize type hints by having monomorphic functions.",
        "title": "Branch on tag before doing type checking",
        "labels": "Type: Enhancement",
        "id": 44642
    },
    {
        "body": "It doesn\u2019t have a `@flow` annotation. We should start Flow-ifying it to avoid bugs like https://github.com/facebook/react/pull/11173.\r\n\r\n@iamdustan Wanna take it?",
        "title": "Flow-ify ReactPartialRenderer.js",
        "labels": "Type: Enhancement",
        "id": 44643
    },
    {
        "body": "## Note: @anushreesubramani is working on this, please don\u2019t send PRs if you aren\u2019t her :-)\r\n\r\n----\r\n\r\nSimilar to https://github.com/facebook/react/issues/11081.\r\n\r\n@anushreesubramani Wanna take this one as well? It would need to deduplicate based on owner/stack info, similar to how https://github.com/facebook/react/pull/11120 works.",
        "title": "Deduplicate the \"Can only update a mounted or mounting component\" warning",
        "labels": "Type: Enhancement",
        "id": 44644
    },
    {
        "body": "It can be confusing to recall that the range input type is not supported in IE9, invalidating a few of our test cases. For example:\r\n\r\n<img width=\"924\" alt=\"screen shot 2017-10-06 at 7 03 18 am\" src=\"https://user-images.githubusercontent.com/590904/31275269-97e687ac-aa64-11e7-97fb-e430e7dfc369.png\">\r\n\r\nThis test case verifies that changing a range slider with arrow keys works as expected, however it looks like a standard input in IE9. If we plan to make these test fixtures more public, I wonder if it would be worth adding some caveat language or marking a test as invalid for a certain browser.\r\n\r\nMaybe this would be annoying, but I thought it might be nice to collect the opinion of others.",
        "title": "DOM Test Fixtures: Add caveats for IE9 range inputs (and other unsupported things)",
        "labels": "Type: Enhancement",
        "id": 44645
    },
    {
        "body": "Cases like https://github.com/facebookincubator/create-react-app/issues/3199#issuecomment-334475000 can be pretty confusing. We should probably move the warning to happen during first `ReactDOM.render` rather than immediately.",
        "title": "Check for rAF polyfill lazily",
        "labels": "Type: Enhancement",
        "id": 44646
    },
    {
        "body": "As reported in https://blog.discordapp.com/lessons-from-migrating-a-large-codebase-to-react-16-e60e49102aa6, it could've been clearer. ",
        "title": "Make undefined ref message better",
        "labels": "Type: Enhancement",
        "id": 44647
    },
    {
        "body": "@sebmarkbage tried this in https://github.com/facebook/react/pull/8545 but Flow couldn't handle it well.\r\nMight be worth trying again someday.",
        "title": "Type Fiber by tag as disjoint union",
        "labels": "Type: Enhancement",
        "id": 44648
    },
    {
        "body": "-----\r\n\r\n**(This is a repost of https://github.com/facebook/jest/issues/4597 by @erikras.)**\r\n\r\n----\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSomewhere in between?\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I'm running tests on [my library](https://github.com/erikras/redux-form), there are some behaviors that I want to test _do_ throw an error. These currently result in:\r\n\r\n```\r\nConsider adding an error boundary to your tree to customize error handling behavior.\r\nYou can learn more about error boundaries at https://fb.me/react-error-boundaries.\r\n```\r\n\r\n...being output to the console. This error is great in an application, but not so great for a library test.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great if I could do something like:\r\n```jsx\r\nexpect(() => {\r\n  TestUtils.renderIntoDocument(<DoSomething naughty/>)\r\n})\r\n.toThrow(/Bad developer!/)\r\n.andCatch() // <---- prevents React 16 error boundary warning\r\n```\r\n\r\n**Please provide your exact Jest configuration and mention your Jest, node, yarn/npm version and operating system.**\r\n\r\n```\r\njest@21.2.1\r\nreact@16.0.0\r\nreact-dom@16.0.0\r\n```\r\n\r\n**See also**\r\n\r\n- https://github.com/facebook/react/issues/11083\r\n- https://github.com/facebook/react/issues/10474#issuecomment-334164834\r\n",
        "title": "Allow suppressing error boundary logs from intentionally thrown/caught errors",
        "labels": "Type: Enhancement",
        "id": 44649
    },
    {
        "body": "Same as https://github.com/facebook/react/issues/11081, but for this one:\r\n\r\n<img width=\"476\" alt=\"screen shot 2017-10-04 at 16 35 07\" src=\"https://user-images.githubusercontent.com/810438/31184704-0d705000-a922-11e7-852e-5890962ff1e5.png\">\r\n",
        "title": "Deduplicate the warning about functions not being valid children",
        "labels": "Type: Enhancement",
        "id": 44650
    },
    {
        "body": "## Note: the task is already claimed.\r\n\r\nJust saw this in a fiddle that has a nested update bug:\r\n\r\n<img width=\"414\" alt=\"screen shot 2017-10-04 at 11 52 52\" src=\"https://user-images.githubusercontent.com/810438/31172209-923c2278-a8fa-11e7-8ffe-4dbfaa472663.png\">\r\n\r\nIt would be nice to just dedupe them in the first place instead of calling `console.error` a thousand times.\r\n\r\n---\r\n\r\n## Note: the task is already claimed.\r\n",
        "title": "Deduplicate \"Render methods should be pure\" warning",
        "labels": "Type: Enhancement",
        "id": 44651
    },
    {
        "body": "It is a Jest-ism that shouldn't be in our open source package.\r\nPeople using Jest can implement a similar pattern directly.",
        "title": "Deprecate and remove TestUtils.mockComponent",
        "labels": "Type: Enhancement",
        "id": 44652
    },
    {
        "body": "I deleted it in https://github.com/facebook/react/pull/10281 because it wasn\u2019t testing the public API, and it was hard to say if it tested the path the code actually took.\r\n\r\nWe should either add a similar test against public API or an equivalent test to manual fixtures.\r\nSee https://github.com/facebook/react/pull/10281#issuecomment-320471544 for details.",
        "title": "Add tests for <select multiple> => <select> transition",
        "labels": "Type: Enhancement",
        "id": 44653
    },
    {
        "body": "I realized that the refactor to use ReactDebugCurrentFrame as a decoupled stack frame for error messages is not reentrant: https://github.com/facebook/react/pull/10105/files#r127573520\r\n\r\nFiber is not reentrant but other renderers might be. The synchronous server renderer is atm.\r\n\r\nWe should add tests for warnings between renderers, such as calling a server-render from within a client render, and update the set/reset callsites to use push/pop instead to account for that.\r\n",
        "title": "Make Uses of ReactDebugCurrentFrame.getCurrentStack Reentrant",
        "labels": "Type: Enhancement",
        "id": 44654
    },
    {
        "body": "When you forget to extend `React.Component` you get the following error:\r\n\r\n```\r\nTypeError: Cannot call a class as a function\r\n    at _classCallCheck (null.js:7:99)\r\n    at Hello (null.js:11:5)\r\n    ...react internals...\r\n```\r\n\r\n[[Example](http://react.jsbin.com/?html,js,console)]\r\n\r\nIt would be nice if in dev you could do a check for `Component.prototype.render` and if it exists, provide a better warning along the lines of:\r\n\r\n```\r\nWarning: Using a class with a render method as a function, did you forget to extend React.Component?\r\n``` \r\n\r\nI believe it would happen in [ReactCompositeComponent.js](https://github.com/facebook/react/blob/b840229286ac2a82fa49553ce793cf7b953d1845/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L248).",
        "title": "Improve error when you've forgotten to extend React.Component",
        "labels": "Type: Enhancement",
        "id": 44655
    },
    {
        "body": "Currently if the `__source` transform is enabled together with the production build there are no indicators of a poorly performant configuration. https://facebook.github.io/react/ even has it.\r\n\r\nWe already check for the [existence of a `__source` field](https://github.com/facebook/react/blob/master/src/isomorphic/classic/element/ReactElement.js#L203). So we can just reuse the same check to issue something in prod mode if it exists.\r\n\r\nThe problem is that we don't have any warning module in prod and it is unclear if it would get attention or even considered to spammy in prod.\r\n\r\nWe could throw but that might be too extreme since a misconfiguration would kill the site.\r\n\r\nWe could also use this to set a flag on the `__REACT_DEVTOOLS_GLOBAL_HOOK__` object. The icon in the devtools extension could use this to indicate a misconfigured build.",
        "title": "Error when `__source` is provided to production build",
        "labels": "Type: Enhancement",
        "id": 44656
    },
    {
        "body": "(wrong repo)",
        "title": "(Wrong repo)",
        "labels": "Type: Enhancement",
        "id": 44657
    },
    {
        "body": "CLI `yarn prettier` return error too long command.\r\n\r\nThe problem is only on windows OS. Checked on windows 10 x64 CLI cmd\r\n",
        "title": "yarn prettier runs a too long command for OS windows",
        "labels": "Type: Enhancement",
        "id": 44658
    },
    {
        "body": "We are currently warning about \u201cunknown properties\u201d in the DOM.\r\nFor example if you render:\r\n\r\n```js\r\n<div foo=\"bar\" />\r\n```\r\n\r\nyou\u2019re going to see a warning from React, and `foo` won\u2019t actually turn up in the DOM.\r\n\r\nPeople have wanted support for custom attributes since forever: https://github.com/facebook/react/issues/140. Now that we've actually been warning for a whole release, I think it's a good time to flip this behavior, and to set any unknown attributes on the DOM instead of skipping them.\r\n\r\nSo the goal is that you would actually see `<div foo=\"bar\" />` in your DOM.\r\n\r\nThere is just one caveat: we still haven't updated all FB callsites to fix this warning. Ideally we want to stay synced with open source version of React, but I don't want React 16 to be delayed because of this, nor do I want delaying this change until React 17. So I think we should bite the bullet, introduce an [internal feature flag](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMFeatureFlags.js) that will differ for our FB builds, and enable the new behavior in the open source version. Some time during React 16 we\u2019ll finish updating our code, and remove the conditional code path.\r\n\r\nI don\u2019t think anybody on the team has time to work on this right now, so I\u2019d love this to be a community contribution. Requirements as I see them:\r\n\r\n* Introduce a new feature flag to `ReactDOMFeatureFlags`. Something like `shouldSetCustomAttributes`. Set it to `true`.\r\n* Keep the warning about unknown DOM props but only enable it if `shouldSetCustomAttributes` is `false`. Make sure tests still cover this case (you can override feature flag in tests\u2014see existing tests concerning feature flags for how to do it).\r\n* Add new behavior of falling back to `setAttribute` for any unknown properties (rather than skipping them like we do now). Add tests for it. Those tests shouldn\u2019t need to touch the feature flag (since it\u2019s the new default behavior). Make sure this works both for SVG and HTML.\r\n* Make sure Fiber tests pass (when you create a PR, there are instructions on running them).\r\n* This might affect server rendering test suite previously added by @aickin. You might need to change those tests to verify the new behavior. It\u2019s fine to only verify the *new* behavior there (with flag set to `true`) since we don\u2019t use server rendering ourselves.\r\n* Good point from @syranide: https://github.com/facebook/react/issues/9477#issuecomment-296170676. We should still warn for known attributes that are miscapitalized. (It\u2019s fine if that\u2019s a different warning message than the one behind the flag.)\r\n* Send the PR!\r\n\r\nPlease let me know if you\u2019d like to take this. It could turn out a little complicated (there won\u2019t be a *lot* of guidance from us on this so we probably can\u2019t coach a completely new contributor for this task). But if you sent a PR or two to React, you should be able to do it.\r\n\r\n--\r\n\r\n## Update: @nhunzaker already started a PR on this a while back (https://github.com/facebook/react/pull/7311) and might be able to rebase it. Let\u2019s discuss the plan more in more specifics below (https://github.com/facebook/react/issues/9477#issuecomment-296179889).",
        "title": "Implement Setting Unknown Attributes",
        "labels": "Type: Enhancement",
        "id": 44659
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nA checkbox input can have a `value` prop which is most likely ignored (it should be `checked`).\r\n\r\n**What is the expected behavior?**\r\n\r\nI think we should throw a warning if a user provides a `value` instead of `checked` to a `<input type=\"checkbox\" />`.",
        "title": "Show a warning when value is provided to a checkbox input",
        "labels": "Type: Enhancement",
        "id": 44660
    },
    {
        "body": "\r\n*Feature*\r\n\r\nReturn all contextProps available via a wildcard prop, this would be helpful for those who want to do `shouldComponentUpdate` comparisons with props, state, **and** context.\r\n\r\nPossible solutions\r\n```\r\nstatic contextTypes = true;\r\n// or\r\nstatic contextTypes = /.*/;\r\n// or\r\nstatic contextTypes = {\r\n  __all: true\r\n}\r\n```",
        "title": "Stop masking context",
        "labels": "Type: Enhancement",
        "id": 44661
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\nReact component silently overwrites instance property `updater`.\r\n\r\n```js\r\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\r\nfunction ReactComponent(props, context, updater) {\r\n  this.props = props;\r\n  this.context = context;\r\n  this.refs = emptyObject;\r\n  // We initialize the default updater but the real one gets injected by the\r\n  // renderer.\r\n  this.updater = updater || ReactNoopUpdateQueue;\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nIt would be very useful to raise a warning in DEV mode for such a case.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact v15.4.2\r\n\r\n**Did this work in previous versions of React?** Yes\r\n",
        "title": "Warn about overwriting React component's instance property `updater`",
        "labels": "Type: Enhancement",
        "id": 44662
    },
    {
        "body": "Probably lots of React apps depend on babel-runtime, perhaps directly or maybe indirectly. This can problematic, though, because it can cause such apps to depend on two versions of core-js:\r\n\r\n1. Your babel using React app -> babel-runtime ^6.22.0 -> [core-js ^2.4.0](https://github.com/babel/babel/blob/2104ab6c44e807e50a799f010ba3e896f0c2e54d/packages/babel-runtime/package.json#L9)\r\n2. React -> [fbjs ^0.8.4](https://github.com/facebook/react/blob/59aac010dd049719394c9cc4b70417302ce73c14/packages/react/package.json#L26) -> [core-js ^1.0.0](https://github.com/facebook/fbjs/blob/e13bb5721844bee2afa065321f260355d080bc3f/package.json#L63)\r\n\r\nThese two versions aren't semver compatible, so it means a project that depends on babel-runtime and also React will have two copies of core-js in use. A concrete example of this is a React app that [also depends on Relay](https://github.com/facebook/relay/blob/7d5e9165ede146c91b3f0b6583f28f6687289eeb/package.json#L32). There are probably many other such examples, though. It'd be nice to collapse this dependency into a single version of core-js.\r\n\r\nReact could bump its dependency to the latest fbjs which is [fbjs 0.9.0-alpha.1](https://github.com/facebook/fbjs/blob/master/packages/fbjs/package.json#L61). That's alpha right now, but it's been alpha for 7 months and probably you guys can arrange a stable release if you want to.\r\n\r\nSee also:\r\n\r\n* https://github.com/facebook/fbjs/issues/217\r\n* https://github.com/facebook/relay/issues/1421\r\n",
        "title": "Bump fbjs to 0.9.x",
        "labels": "Type: Enhancement",
        "id": 44663
    },
    {
        "body": "As proposed in https://github.com/facebook/react/pull/8495#issuecomment-271311978, I think we should find the warnings where we add a dynamic part to the end (like `\"Check the render method of <...>\"`) and delimit it with two newlines. This way it\u2019s much easier to recognize in the middle of a bunch of errors:\r\n\r\n![](https://cloud.githubusercontent.com/assets/810438/21771524/9b3aeccc-d67f-11e6-8f5d-dfe0dd195d2f.png)\r\n\r\nThis is a good first issue to contribute. You would need to find `warning()` calls that include additional info like `Check the render method of` and add a couple of newlines. You'd also need to change the tests in case they fail.",
        "title": "Delimit dynamic part of the warning messages with newlines",
        "labels": "Type: Enhancement",
        "id": 44664
    },
    {
        "body": "We need to host a standalone React component (DraftJS editor) inside a HTML5 application which will run on other JS framework, or even plain JS or jQuery.\r\nThe code of the application is beyond our control, we are just a vendor of a component which adds some content, part of which is this React-based editor.\r\n\r\nAnyway, the most important part is that we need to add the component with the following code to an existing DIV.\r\n\r\n```\r\nconst editor = ReactDOM.render(\r\n    React.createElement(\r\n      EditorComponent,\r\n      props\r\n    ),\r\n    divElem\r\n  );\r\n```\r\n\r\nEditorComponent is a regular React component with some onClick events attached to its content (primarily toolbar buttons for the editor).\r\n\r\nI learned that React event model and its bubbling executes independently after the event bubbles all the way up to the document, and that if ev.stopPropagation() is called on native event, React events won't execute at all.\r\nThat is understandable for situations where document contains only the React app / component at its root and no other content, meaning you have control over all events on the page from React code.\r\n\r\nHowever, when React component is just a small fraction of the entire page, it may be severely influenced by the rest of the page.\r\nThe problem is that any event handling code above the component which calls ev.stopPropagation() cuts of the events of that smaller fraction, even that the event originated from the React component scope.\r\nThat influencing code could very well be just some jQuery plugin, so even author of the page may not be able to rewrite their code for some special event handling.\r\n\r\nHere is a fiddle to demonstrate that: [https://jsfiddle.net/martinh_kentico/kept9anh/3/](https://jsfiddle.net/martinh_kentico/kept9anh/3/)\r\n\r\nI believe that the point where the event chain breaks, allowing React to execute its events, should be the root element of React component, rather than the whole document.\r\nThis way, React root element could be considered an isolation edge of the React application / component.\r\n\r\n![reactevents](https://cloud.githubusercontent.com/assets/11004903/21673497/7d6a11b8-d329-11e6-9642-9d7427331fb1.png)\r\n\r\nI tracked the React event registration down to function ReactDOMComponent.ensureListeningTo(...) where I found the following code:\r\n\r\n```\r\n  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;\r\n  listenTo(registrationName, doc);\r\n```\r\n  \r\nI tried to change `containerInfo._ownerDocument` to `containerInfo._node` to register the React event chain to the root of the React container, and tried it for several basic events (onClick, onMouseDown/Up) and it seems working for us as expected.\r\nReact events are not influenced by stopping propagation at the native events outside of React component root, so the two differently implemented parts of the application can coexist in peace.\r\n\r\nI am not sure why _ownerDocument was chosen over _node in the implementation and if changing it to _node could break something important.\r\n\r\nPlease advise if the proposed solution seems viable (in that case consider a change to that), or for what reasons you wouldn't recommend it.",
        "title": "Native event.stopPropagation outside of React root cuts out React events",
        "labels": "Type: Enhancement",
        "id": 44665
    },
    {
        "body": "*feature*\r\n\r\n>Warning: A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.\r\n\r\nIt would help heaps if I would know _which_ component is causing this.",
        "title": "Add component stack to the contentEditable warning",
        "labels": "Type: Enhancement",
        "id": 44666
    },
    {
        "body": "In Fiber there are a number of states that a component can be in. However, it is not formalized in the code right now. Instead, the state is inferred. This leads to hard to follow code. Instead we can organize the code in terms of explicit states - which is what the original prototype did.\n\nBefore componentDidMount (i.e. `current === null`):\n- Never begun.\n- Have been begun before but never completed.\n- Have been completed before, not committed, but hasn't begun this time around.\n- Begun but not yet completed.\n- Completed but not yet committed.\n\nAfter componentDidMount (i.e. `current !== null`):\n- Haven't begun an update yet\n- Have been begun before but never completed.\n- An update have been completed before, not committed, but hasn't begun this update.\n- Begun update but not yet completed.\n- Completed update but not yet committed.\n\nThe \"children\" set of a component also have some states:\n- Never reconciled.\n- The current set last committed.\n- A previously reconciled set that hasn't committed yet.\n",
        "title": "[Fiber] Formalize States",
        "labels": "Type: Enhancement",
        "id": 44667
    },
    {
        "body": "This is spill-over from #7707 that I don't plan on doing in the initial batch.\r\n- [ ] Fix text node merging edge case... Search forward to find the next sibling, swap out the end of the text node to the sum of the previous value of the siblings. This trick lets us avoid back-references.\r\n- [ ] Have tag include children updated so that you can recalculate all children if needed. E.g. coroutines. Alternatively, pass the nearest host or coroutine down the tree so that it can be quickly flagged as child changed and insert/moves can be avoided to be added to the side-effect list for coroutines. The second option is probably better.\r\n- [ ] Possibly use two side-effect lists so that two passes are not needed and forward order is possible.\r\n- [x] Remove the notion of `output`? Unnecessary extra traversal and requires duck typing to know which is terminal.\r\n- [ ] Reconsider if we need backpointers. There are several optimizations that are possible with them but uses more memory.\r\n",
        "title": "[Fiber] Spill-over from child reconciliation",
        "labels": "Type: Enhancement",
        "id": 44668
    },
    {
        "body": "To make compiler optimizations around classes and inlining defaultProps we need to know that they don't get mutated. This escape analysis can be difficult to do in a JS compiler so we should start enforce it so we don't have to rely on escape analysis.\n\n``` js\nconst type = element.type;\nif (typeof type === 'function' && !type.wasTaggedReactComponent) {\n  Object.defineProperty(type, 'wasTaggedReactComponent', { value: true });\n  Object.defineProperty(type, 'defaultProps', { writable: false, configurable: false });\n  Object.defineProperty(type.prototype, 'render', { writable: false, configurable: false });\n  Object.defineProperty(type.prototype, 'componentDidUpdate', { writable: false, configurable: false });\n  ...\n  Object.freeze(type);\n  Object.freeze(type.defaultProps);\n  Object.freeze(type.prototype);\n}\n```\n\nWe can also make them getters/setters so that we can make nice warning messages for sets. Although we should weigh this against slowing down DEV mode.\n\nIf a property exists it should preserve its enumerability. If a property doesn't exist it is still ok to attach a getter/setter as long as it is non-enumerable.\n",
        "title": "Freeze classes and defaultProps in DEV mode",
        "labels": "Type: Enhancement",
        "id": 44669
    },
    {
        "body": "We have a queue for state transitions. There is a natural place for a `new Error()` stack frame to be stored there.\n\nWe could use this information to work our way back from errors to show information about which `setState` call was the source of the error.\n\nBecause of batching, it is not always possible to make the correct attribution. It could be one of several possible sources.\n\n(Specifically I'd like to use this in Fiber when the starvation protection kicks in. We can show which state transition was kept getting deferred due to higher priority work.)\n",
        "title": "Attach Stack at setState Calls in DEV Mode",
        "labels": "Type: Enhancement",
        "id": 44670
    },
    {
        "body": "**Update: claimed by @jin**\n\nThis is what I see when I mistype an import:\n\n<img width=\"768\" alt=\"screen shot 2016-07-19 at 21 12 01\" src=\"https://cloud.githubusercontent.com/assets/810438/16964870/7392ba8c-4df5-11e6-8af6-7d00181e5089.png\">\n\nThis is not very useful.\n\nWhen `type` is `undefined`, we should provide a better message. In 95% of cases it is caused by an invalid import. We should create a page explaining common cases how this could happen (e.g. mismatching default/named export, forgetting to export the component, or importing a non-existing named export), and link to that page from the warning.\n",
        "title": "Make createElement(undefined) warning more descriptive",
        "labels": "Type: Enhancement",
        "id": 44671
    },
    {
        "body": "I just ran [React Bootstrap doc page](http://react-bootstrap.github.io/components.html) on master and saw a ton of warnings from #6800:\n\n![jun 30 2016 01 55](https://cloud.githubusercontent.com/assets/810438/16473598/90585b8e-3e66-11e6-8e9e-7187935937dd.gif)\n\nThat page is really long so maybe it\u2019s an edge case, but at the very least I think we should group props from the same element into a single warning. For example, these warnings could become one:\n\n<img width=\"993\" alt=\"screen shot 2016-06-30 at 01 53 11\" src=\"https://cloud.githubusercontent.com/assets/810438/16473610/a5f6df06-3e66-11e6-964c-be482fdfeb27.png\">\n",
        "title": "Group warnings for unknown DOM properties",
        "labels": "Type: Enhancement",
        "id": 44672
    },
    {
        "body": "We want to strip the code _that implements PropTypes validation functions_ in production. This doesn\u2019t mean `React.PropTypes` won\u2019t exist\u2014just that the functions will throw in production every time.\n\nI did an initial attempt at this in #6401 but it\u2019s too much of a change because people might be calling `PropTypes` in production right now for introspection, and we\u2019d need to **deprecate calling them in production** before actually turning them into shims that throw errors.\n\n@spicyj [suggested](https://github.com/facebook/react/pull/6401#issuecomment-224386567) a good first step: we should pass an extra argument to propType checkers. We would warn if that argument is not passed (or, if passed, does not match our \u201csecret\u201d value). This way we can detect if somebody manually calls `PropTypes` validators, and warn with `console.error` in production.\n\nIf you\u2019d like to work on this, please comment here so we don\u2019t have many people implementing this at the same time. You would need to:\n1. Pass an extra argument to prop type checkers.\n2. In production, warn inside the prop type checkers if they don\u2019t receive the expected extra argument.\n3. The warning should say something like `You are manually calling React.PropTypes validation functions in a production build. This is deprecated and will not work in the next major version.`\n4. Don\u2019t forget to write tests. You can peek at #6401 to see how to write tests that simulate production environment.\n5. Send a PR and we\u2019ll discuss further!\n",
        "title": "Deprecate calling PropTypes validators in production",
        "labels": "Type: Enhancement",
        "id": 44673
    },
    {
        "body": "Consider the following example (live at http://www.webpackbin.com/Vk0Q_FqmZ with React 15.0.1):\n\n``` js\nconst MySelect = (props) => (\n  <select value={this.props.value} onChange={this.props.onChange}>\n    <option value=\"fruit\">banana</option>\n    <option value=\"vegetable\">broccoli</option>\n    <option value=\"fruit\">orange</option>\n    <option value=\"vegetable\">tomato</option>\n  </select>\n);\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {}\n    this.onSelectChange = this.onSelectChange.bind(this)\n  }\n\n  onSelectChange(e) {\n    this.setState({ selectedValue: e.target.value })\n  }\n\n  render() {\n    return <MySelect \n      value={this.state.selectedValue} \n      onChange={this.onSelectChange}\n    />\n  }\n}\n```\n\nHTML itself doesn't seem to have any problems with duplicate values in the `<select>` tag. As you can see in the example above, there are semantically valid reasons you might want to do this.\n\nBut this controlled component example makes it impossible to select e.g. \"orange\" or \"tomato\": the selection will be forced to the first matching value.  \n\nI thought about a solution that stores both the `selectedValue` and the `selectedIndex`, but react-dom's `<select>` does not take any sort of index prop, so I'd have to manipulate the internal DOM node, which I'm sure is bad form.  \n\nReact _could_ be enhanced to take a `selectedIndex`, but I foresee problems with single source of truth.\n\nThe fruit/vegetable example is a bit contrived, and there may not be many real-world scenarios you would want to do this in. My gut feeling is this should be a warning so developers (like me) don't paint themselves into a corner trying to support this case.  \n",
        "title": "Should React warn when controlled <select> components have duplicate values?",
        "labels": "Type: Enhancement",
        "id": 44674
    },
    {
        "body": "Would it be feasible to specify the version of warnings you want through a static environment variable?\n\nThat would silence new warnings so that you can safely update minor versions without worrying about warning spew.\n\nDynamic configuration creates stateful shared module dependencies which we're very close to getting rid of for the isomorphic package (ReactCurrentOwner being the last one).\n",
        "title": "RFC: Configure Warning Levels Using ENV Variable",
        "labels": "Type: Enhancement",
        "id": 44675
    },
    {
        "body": "#6046 is a rewrite of ReactPerf that aims to provide the existing features of ReactPerf in a more testable and future-proof way. However there are a few things that are out of scope of #6046 but are important to fix later after it is shipped.\n\nToday, `printOperations()` prints informations about the DOM \u201cnative\u201d events that supposedly happened. Later, this information is used by `printWasted()` in the following way: if a component was rendered but no DOM events on its children were emitted during a batch, the render is considered wasted.\n\nThere are a few problems with this:\n- As discussed in https://github.com/facebook/react/pull/6612, we overemphasize the overhead of DOM operations which are actually often negligible. \n- With incremental reconciliation (#6170), the assumption that DOM operations happen in the same batch as rendering might become incorrect.\n- We might want to get rid of relying on batches at all: https://github.com/facebook/react/pull/6046#discussion_r61482538.\n\nI don\u2019t know what would be a good solution considering these constraints. People widely consider `printWasted()` the most useful `ReactPerf` method because it helps finding `shouldComponentUpdate()` sweet spots. If we remove its reliance on DOM, we should offer an equivalent (e.g. deeply comparing React elements?) that is just as useful but more friendly to incremental reconciliation.\n",
        "title": "Change how ReactPerf.printWasted() and ReactPerf.printOperations() work",
        "labels": "Type: Enhancement",
        "id": 44676
    },
    {
        "body": "This is a tracking issue, because we're not ready to deprecate the return value of `ReactDOM.render()` yet.  This will likely be a longer-term objective (not immediate), but we should have an issue to reference as we start to get the ball rolling.\n\nReasoning: We are working towards a new incremental reconciler, which means that a render may not be complete prior to `ReactDOM.render()` returning.  For anyone relying on the return value of `ReactDOM.render()`, there would be a race condition where the returned instance is potentially not fully mounted.  Safe-looking code might work 99% of the time, but fail 1% of the time, at the sole discretion of the scheduler.  To be clear: this is not an issue today, but will become an issue once we start utilizing an incremental renderer, iff people rely on the return value.\n\nAs we prepare for the new reconciliation algorithm, we should start encouraging people should start avoiding the return value of `ReactDOM.render`.  People should, instead, attach a callback ref to their root component when rendering the component, thus allowing them to get a reference to the instance after mounting is complete.\n\nFirst step in this process is to update the documentation to state that the return value of `ReactDOM.render` is legacy, and that people should attach a ref instead (similar to what we did for string refs).\n",
        "title": "Deprecate return value of `ReactDOM.render()`",
        "labels": "Type: Enhancement",
        "id": 44677
    },
    {
        "body": "@dieppe worked on making `ResponderEventPlugin` work with DOM in #4303 but this was put on hold.\nAfter #6338 brings all the relevant files into React repo, we can start thinking about it again.\n\nI\u2019m creating this issue to keep track of whether we want this to happen or not, and what is our plan regarding this. If there is a consensus, we can look into rebasing #4303.\n\ncc @sebmarkbage @jordwalke \n",
        "title": "Make ResponderEventPlugin cross-platform",
        "labels": "Type: Enhancement",
        "id": 44678
    },
    {
        "body": "There are a few concerns that I heard about `ReactPerf`, in the order of importance:\n- (1) It is gated by `__DEV__` but React Native wants to have a way to enable it in production builds and pass the accumulated info into systrace\n- (2) It is often broken by refactoring\n- (3) It appears generic but depends on specific module and method names\n- (4) It has some obscure bugs that are hard to fix because of the coupling\n- (5) The `console.table()` visualization is poor\n- (6) We are working on a new DevTools API so they should align\n\nIf I\u2019m mistaken here, please let me know!\n\nIn #5306, we started introducing a new set of APIs for first-class instrumentation. It makes sense that we transition `ReactPerf` to the new API, and fix some of these issues while we\u2019re at it.\n\nI talked to some\u00a0people on the React Native about this. What I understand so far is:\n### ASAP\n- We want to remove `ReactPerf` function wrapping completely (addresses 2, somewhat mitigates overhead from fixing 1)\n- We want to create a devtool like `ReactDOMDebugTool`, e.g. `ReactPerfTool` (addresses 6)\n- Unlike `ReactDOMDebugTool`, `ReactPerfTool` will _not_ be gated by `__DEV__` (addresses 1)\n- `ReactPerfTool` will have `startMeasurement()` and `endMeasurement()` methods for profiling functions (addresses 1)\n- It can have more granular methods for specific parts of React lifecycle if needed (addresses 2, 3, 5)\n- Calls to `ReactPerfTool` will be gated by a runtime flag, e.g. `ReactPerfTool.isActive` (addresses 1)\n### In the Future\n- Rather than reach out into the profiled functions, `startMeasurement()` will accept arbitrary arguments (addresses 3)\n- We would separate generating user-meaningful data from its accumulation so it would be easy to test (addresses 4)\n- (Bonus) We can use a noop decorator + Babel plugin to insert `if (ReactPerfTool.isActive) ReactPerfTool.startMeasurement()` and `.endMeasurement()` calls (mitigates pain and potential breakage from addressing 1)\n- (Bonus) Rather than `console.table()` API we can provide a component that interprets that data and displays it in an overlay, both on web and native (addresses 5)\n\nThe decorator + Babel plugin part is the one I\u2019m not sure about because it would involve complicating tooling. On the other hand, it will allow adding performance measurement to any functions in the codebase without risking having early `return`s, missing `endMeasurement()` calls, and similar breakage during refactorings.\n\nThe first actionable step, in my opinion, would be to remove the function wrapping and the `__DEV__` gate from the existing `ReactPerf`, and replace `measure()` with explicit `startMeasurement()` and `endMeasurement()` calls gated by `ReactPerf.isActive` wherever it is used.\n\nWe would still pass the function as an argument so we don\u2019t have to rewrite everything at once, but this would give the RN team more freedom, and unlock future refactorings. We can also combine this with introducing decorator + Babel transform if this is the way we want to go, to avoid adding manual `startMeasurement()` and `endMeasurement()` calls all over the place.\n\nDoes this make sense? What have I missed?\n",
        "title": "Porting ReactPerf to the new DevTools API",
        "labels": "Type: Enhancement",
        "id": 44679
    },
    {
        "body": "I really like the convenience of the `getInitialState()` API in ES5 react, so I decided to reimplement it in a simple wrapper around `React.Component`, but I get an annoying warning. Is there a way to disable this warning, since I'm doing it intentionally and providing my own functionality?\n",
        "title": "Way to disable the getInitialState warning in ES6?",
        "labels": "Type: Enhancement",
        "id": 44680
    },
    {
        "body": "You have a warning in React if you call setState() from within a render method, with the check `ReactCurrentOwner.current == null`. I would like to add this check to other methods of my project because they also trigger rerender or are too expensive.\nThe issue I have is that ReactCurrentOwner is not exposed by React, so how can I achieve that? The current solution I have in mind is to check from the stack trace but that's a lot more expensive than your check so I would prefer if there was something equivalent to your code but from outside React.\n",
        "title": "Prevent a function to be called from within render",
        "labels": "Type: Enhancement",
        "id": 44681
    },
    {
        "body": "As it is known (but [not documented](https://github.com/facebook/react/issues/3657)), React's SyntheticEvent is pooled.\n\nThis is confusing for many users as they don't understand why the event starts to behave strangely when used in an async callback, like inside a `setTimeout`, a `setState` or a `render` callback.\n\nThere has already been an attempt to solve this problem here: https://github.com/facebook/react/pull/1664\n\nThe code of SyntheticEvent's default methods is:\n\n``` javascript\n  preventDefault: function() {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function() {\n    var event = this.nativeEvent;\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;\n  },\n```\n\nIt may make sense to be more defensive because calling `event.preventDefault()` on a pooled event will raise `can't call preventDefault on null`.\n\nIt would be more useful to add a check like:\n\n```\nif ( this.nativeEvent ) throw new Error(\"Baaad you are using a pooled event!!!\");\n```\n",
        "title": "Be defensive when calling methods of a SyntheticEvent inside the pool",
        "labels": "Type: Enhancement",
        "id": 44682
    },
    {
        "body": "Related bug in Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=126379\n\nMy [workaround for this is to use onKeyDown](https://gist.github.com/insin/c2a00a7e85ccfab0e7c7), allowing the selection to change then calling an `onChange` handler manually, but this won't bubble..\n\nIs this something `ChangeEventPlugin` could support?\n",
        "title": "Keyboard selection doesn't fire onChange for <select> in Firefox",
        "labels": "Type: Enhancement",
        "id": 44683
    },
    {
        "body": "We currently do a lot of work at the end of mount to find all the nodes and attach listeners after the fact. This is severely impacting initial rendering performance of `<form />`, `<img />` and click handlers.\n\nInstead we can just use inline event handlers in the innerHTML string. For the iOS Safari hack it should be trivial. The handler doesn't even have to do anything.\n\nThe inline event handler would need to either redispatch the event, or call into some other event handler system. Probably a global listeners.\n\n``` js\nwindow._handleReactEvent = ...;\n```\n\n``` html\n<img onload=\"_handleReactEvent(event)\">\n```\n\nSince there could potentially be multiple Reacts, they should probably chain the handler if there already is one registered. (Although multiple Reacts in the same document is already pretty broken in this regard.)\n\nIt doesn't have to be a global. Since inline event handlers gets the element added as a `with(element)` scope around itself. It is equivalent to add it to the prototype:\n\n``` js\nElement.prototype._handleReactEvent = ...;\n```\n\nor\n\n``` js\nHTMLImgElement.prototype._handleReactEvent = ...;\n```\n\nThis makes them a bit more hidden, unobtrusive.\n\nWe still need to render this string for server-side rendering to avoid needing to change the HTML or wire up handlers after-the-fact on the client.\n\nSince these events can fire before React has loaded, we need to check for the existence of the handler before it is used.\n\n``` js\n<img onload=\"this._handleReactEvent&&_handleReactEvent(event)\">\n```\n\nIt is critical that this string is short - for innerHTML string concat performance and network performance. Yet it needs to be unlikely to collide with anything else.\n\nIs there a unicode character we could use?\n",
        "title": "Use Inline Event Handlers for trapBubbledEventsLocal and the iOS Safari Click Hack",
        "labels": "Type: Enhancement",
        "id": 44684
    },
    {
        "body": "Outside of the [relatively unknown word \"scry\"](https://twitter.com/angustweets/status/590659867926462465) being used, it's difficult for someone to tell just by name how these differ.  \n\nThe current names seem to be based on the original JX.DOM.scry api usage based on #3278 so likely made more sense internally, but as with the person that filed #2301 it would be much more discoverable and easier to use with names that were more obvious for what they do.\n\nFor back compat reasons, renaming them and then adding the existing names as pointers with comments/jsdoc saying they're deprecated probably makes more sense, IMHO.\n\nThanks!\n",
        "title": "ReactTestUtils: rename find*/scry* pairs to findOne*/findAll* or similar?",
        "labels": "Type: Enhancement",
        "id": 44685
    },
    {
        "body": "Given the following piece of code:\n\n``` javascript\nlet some_text = 'Hello\"<>&\\'World';\nReact.render(<div>{some_text}</div>, somewhere);\n```\n\nReact replaces the angle brackets, quotation mark, apostrophe and ampersands with their HTML entities, ie &amp;lt; &amp;gt; &amp;quot; &amp;amp; etc. I don't believe it is necessary to replace the quotation mark or the apostrophe. They don't need escaping. They would only need escaping when used in an attribute, not when used as the text content of an element.\n\nThe reason I noticed this is because I'm trying to encode some JSON into a HTML element on the server side which can then be read back by the client side javascript. JSON contains a lot of double quotation marks and they're all being needlessly replaced by &amp;quot;'s\n",
        "title": "Unnecessary encoding of element text content",
        "labels": "Type: Enhancement",
        "id": 44686
    },
    {
        "body": "Without `getInitialState`, `this.state` is `null`, which causes this line in `shallowEqual` to throw.\n\n``` js\nif (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n```\n\nFix is to make shallowEqual bail if either argument is falsey (or not an object if we want to be very safe).\n",
        "title": "Calling setState without getInitialState throws when using PureRenderMixin",
        "labels": "Type: Enhancement",
        "id": 44687
    },
    {
        "body": "As discussed in https://github.com/facebook/react/issues/3207#issuecomment-75181038, a complementary improvement is to turn on a mutation observer in dev, and warn of someone other than React modifies the DOM and/or if dom nodes appear without a data-reactid, thus indicating an extension or some other script is doing fancy magic.\n",
        "title": "Warn when React DOM modified by not-React",
        "labels": "Type: Enhancement",
        "id": 44688
    },
    {
        "body": "I'm rendering my React app at the document root, with server-side rendering.\nI've got an email and password login form. It renders on the server without any state (both fields empty).\nWhen the browser loads the page, the email and password are autofilled by the browser.\n\nThis happens before React bootstraps, and when it loads, it wipes out that state. So the user sees the inputs being autofilled then being emptied. Not ideal.\n\nI tried using `componentWillMount` to grab the raw DOM node value and `setState` before render, but react complains that the checksum is invalid.\n\nI realise this is a case where the DOM is being modified before react bootstraps on the client, but it would be good to be able to do this kinda stuff...\n\n**Update:** A workaround I used was to pull the values out of the `<input>`s inside `componentWillMount`, then `setState` to those values inside `componentDidMount`. Would still be nice to handle this cleanly though...\n",
        "title": "Handle browser autofill gracefully when server-side rendering",
        "labels": "Type: Enhancement",
        "id": 44689
    },
    {
        "body": "As `propTypes` are only used in development mode, it seems like it would be preferable to only evaluate them as the result of a method call returning the object instead of the current object literal declared on the class. I imagine this isn't a particularly expensive operation, but if you're using shapes, this results in a lot of type declaration evaluations that are never used outside of development.\n\nCurrent\n\n``` javascript\nReact.createClass({\n    propTypes: {\n        prop: React.PropTypes.shape({...}),\n        ...\n    },\n    ...\n});      \n```\n\nProposed\n\n``` javascript\nReact.createClass({\n    getPropTypes: function () {\n        return {\n            prop: React.PropTypes.shape({...}),\n            ...\n        };\n    },\n    ...\n});      \n```\n\nIs there a reason it's this way instead of the same functional convention as `getDefaultProps`, `getInitialState`, etc.?\n",
        "title": "propTypes property (current) vs. getPropTypes function (proposed)",
        "labels": "Type: Enhancement",
        "id": 44690
    },
    {
        "body": "The current state of implicit keys in React, psuedo-JSX:\n\n```\n1. <div .0><span .0.0 /></div>\n2. <div .0>[<span .0.0 />]</div> -- GOOD reconciles .0.0\n\n1. <div .0><span .0.0 /></div>\n2. <div .0>[<span .0.0 /><span .0.1 />]</div> -- GOOD reconciles .0.0\n\n1. <div .0><span .0.0 /><span .0.1 /></div>\n2. <div .0>[<span .0.0:0 />]<span .0.1 /></div> -- BAD destroys .0.0\n\n1. <div .0>[<span .0.0 />]</div>\n2. <div .0>[[<span .0.0:0 />]]</div> -- BAD destroys .0.0\n```\n\nI propose Array/Set should ignore tailing sub-array indices with value 0 and if the root is an only child then it has index 0 (this is currently the case, except it's broken for objects):\n\n```\n.0.0 => .0.0\n.0.0:0:1:0:0 => .0.0:0:1\n.0.0:0:1:0:0:1:0:0 => .0.0:0:1:0:0:1\n```\n\nThe first ReactNode in every Array now reconciles from and to any depth. If we want to improve Maps to reconcile in the same way then all previous indices should be discarded when a Map is encountered (possibly discarding the entire \"computed name so far\" even).\n\nPseudo-JSX showing how the new indices would be computed (`[...]` is discarded), all the examples at the top now reconcile correctly.\n\n```\n<div .0>\n  [\n    [\n      <span .0.0[:0:0] />\n        [\n          <span .0.0:0:1[:0] />\n            [\n              [\n                <span .0.0:0:1:1[:0:0] />\n                <span .0.0:0:1:1:0:1 />\n              ]\n            ]\n          <span .0.0:0:2 />\n        ]\n      <span .0.0:1 />\n    ]\n  <span .0.1 />\n</div>\n```\n\ncc @sebmarkbage \n",
        "title": "New method for implicit keys, traverseAllChildren",
        "labels": "Type: Enhancement",
        "id": 44691
    },
    {
        "body": "ReactMount caches all children for each parent it visits, this avoids worst-case exponential cost. However, use of ReactDOMIDOperations for updates forces ReactMount to populate the cache with the previous children.\n\nIf a newly rendered node needs to be found, then \"the children of the parent\" of \"the newly rendered root\" has to be re-traversed as it does not exist in the node cache. Since it's guaranteed that all the siblings of newly rendered roots are cached and that we have a reference to the node, it's trivial to manually add it to the node cache which should avoid \"double-traversals\" entirely.\n",
        "title": "Rendered markup roots should be added to ReactMount node cache",
        "labels": "Type: Enhancement",
        "id": 44692
    },
    {
        "body": "https://github.com/facebook/react/blob/master/src/browser/ui/dom/components/ReactDOMInput.js#L86\n\nIt should be preferable to just access `this._rootNodeID` directly.\n",
        "title": "ReactDOMInput unnecessarily traverses to its node on mount",
        "labels": "Type: Enhancement",
        "id": 44693
    },
    {
        "body": "I was a moron and had two separate React components both responsible for the same div:\n\n```\nvar Component1 = React.createClass({\n    render: function() {\n        React.renderComponent(<Component2/>, document.getElementById('my_div'));\n        return (<div id=\"my_div\"><span>Some stuff goes here</span></div>);\n    }    \n});\n```\n\nIt wasn't quite as obvious as that in real life, but ultimately that's what it boiled down to. It caused the whole page to freeze until the browser killed it. But the warning / error that React gave me was no help at all in trying to diagnose the issue:\n\n> \"React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injectednew markup to compensate which works but you have lost many of  the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.\"\n",
        "title": "Unhelpful error when two react components are responsible for updating the same div",
        "labels": "Type: Enhancement",
        "id": 44694
    },
    {
        "body": "React currently accepts Arrays as children:\n\n```\nvar array = [<span />, <span />, <span />];\n<div>{spans}</div>\n```\n\nIt would be excellent if we can generalize this concept to accept both collections and iterables.\n\nCollections (such as Set, Map, or Immutable-js's variants) can be identified if they implement `values()` and the result of calling `values()` is an Iterator (`typeof maybeIterator.next === 'function'`).\n\nIterables (Array, arguments object, other array-ish things, third-party data structures) can be identified if they have `Symbol.iterator` or `@@iterator` returning an Iterator.\n\nIn both cases, you're left with an Iterator, at which point extracting the children becomes straight-forward.\n\nThis unlocks a few really useful things:\n\nUse Immutable-js with React efficiently:\n\n```\nvar data = Immutable.Vector('a', 'b', 'c');\n<div>{data.map(str => <span>{str.toUpperCase}</span>)}</div>\n```\n\nUse generators:\n\n```\nvar data = function*() {\n  yield <span />;\n  yield <span />;\n  yield <span />;\n}\n<div>{data}</div>\n```\n",
        "title": "Accept iterables and collections as children.",
        "labels": "Type: Enhancement",
        "id": 44695
    },
    {
        "body": "https://github.com/facebook/react/blob/master/src/browser/ui/ReactDOMComponent.js#L113\n\nIt works well for visually highlighting HTML tags in print, but it's somewhat weird for SVG and web components. Also because it's a public property that could be used for other purposes. This would also mean that we can drop the internal `_tagName` and just use `tag` unless there are other considerations.\n",
        "title": "Drop upper-casing of ReactDOMComponent.tagName",
        "labels": "Type: Enhancement",
        "id": 44696
    },
    {
        "body": "Take the alternative approach discussed in #2161. I think we can take advantage of the self-closing information we already have in ReactDOM (and make use of in ReactDOMComponent).\n\ncc @audreyt in case you're interested in taking a stab at this.\n",
        "title": "Generate XML compatible markup",
        "labels": "Type: Enhancement",
        "id": 44697
    },
    {
        "body": "This issue demonstrate the problem I had:\nhttp://jsfiddle.net/kb3gN/6069/\n\nAs you can see, both cases are not handled the same way.\n\n```\nWarning: unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. 10333102_793476900703299_1710860803_n.js:20226\nWarning: _renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. 10333102_793476900703299_1710860803_n.js:20226\nUncaught Error: Invariant Violation: unmountComponent(): Can only unmount a mounted component. \n```\n\nVS \n\n```\nUncaught Error: Invariant Violation: replaceState(...): Cannot update during an existing state transition (such as within `render`). This could potentially cause an infinite loop so it is forbidden. 10333102_793476900703299_1710860803_n.js:18689invariant 10333102_793476900703299_1710860803_n.js:18689validateLifeCycleOnReplaceState 10333102_793476900703299_1710860803_n.js:6226ReactCompositeComponentMixin.replaceState 10333102_793476900703299_1710860803_n.js:6645ReactCompositeComponentMixin.setState 10333102_793476900703299_1710860803_n.js:6626React.createClass.render Inline JSX script:23(anonymous function) 10333102_793476900703299_1710860803_n.js:7017ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710(anonymous function) 10333102_793476900703299_1710860803_n.js:6947ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710ReactCompositeComponentMixin._performComponentUpdate 10333102_793476900703299_1710860803_n.js:6891ReactCompositeComponentMixin.performUpdateIfNecessary 10333102_793476900703299_1710860803_n.js:6831runBatchedUpdates 10333102_793476900703299_1710860803_n.js:15012Mixin.perform 10333102_793476900703299_1710860803_n.js:16875Mixin.perform 10333102_793476900703299_1710860803_n.js:16875mixInto.perform 10333102_793476900703299_1710860803_n.js:14958(anonymous function) 10333102_793476900703299_1710860803_n.js:15036ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710Mixin.closeAll 10333102_793476900703299_1710860803_n.js:16948Mixin.perform 10333102_793476900703299_1710860803_n.js:16889ReactDefaultBatchingStrategy.batchedUpdates 10333102_793476900703299_1710860803_n.js:9162batchedUpdates 10333102_793476900703299_1710860803_n.js:14973ReactEventListener.dispatchEvent 10333102_793476900703299_1710860803_n.js:10663\n```\n\nActually I encountered the 1st case, and it was quite difficult to see where the problem was in my real life application because there was only a warning, and the message were not very helpful. Is it possible to handle this consistantly or at least include the component name if available?\n",
        "title": "Add better guard for nested renderings.",
        "labels": "Type: Enhancement",
        "id": 44698
    },
    {
        "body": "From #2249, I found that `setInnerHTML` and `createNodesFromMarkup` (which calls `getMarkupWrap`) both solve largely the same problem and includes the same fixes for IE8.\n\nSubmitting this issue as a reminder to myself and for your information.\n",
        "title": "Replace setInnerHTML with createNodesFromMarkup/getMarkupWrap",
        "labels": "Type: Enhancement",
        "id": 44699
    },
    {
        "body": "If lifecycle methods cause re-renders we can potentially end up in infinite recursion. I've seen this happen somewhere in a bigger application and it was difficult to find. I'm not sure there's anything React could do to prevent these cases though.\n\nTwo reduced examples: https://gist.github.com/kassens/7e223c2b299f4a46ada1\n",
        "title": "Inifinite recursion can be caused when lifecycle methods trigger a re-render",
        "labels": "Type: Enhancement",
        "id": 44700
    },
    {
        "body": "See this example:\nhttp://jsfiddle.net/jeanlauliac/2x3dk23m/1/\n\nThe console only report: `Warning: Required prop `bar` was not specified in `Hello`.`. It should probably report the whole path to the inner field, such as `test.bar`.\n",
        "title": "Inner required fields in shaped props not reported properly",
        "labels": "Type: Enhancement",
        "id": 44701
    },
    {
        "body": "Currently no media events are supported, which makes working with audio or video tags in react a pain in the ass\n\n``` js\ncomponentDidMount: function () {\n    var audioElement = this.refs.audioObject.getDOMNode();\n    audioElement.addEventListener('progress', this.updateProgress);\n    audioElement.addEventListener('timeupdate', this.updateProgress);\n    audioElement.addEventListener('ended', this.handleMediaEnd);\n},\ncomponentWillUnmount: function () {\n    var audioElement = this.refs.audioObject.getDOMNode();\n    audioElement.removeEventListener('progress', this.updateProgress);\n    audioElement.removeEventListener('timeupdate', this.updateProgress);\n    audioElement.removeEventListener('ended', this.handleMediaEnd);\n}\n```\n\nThere are also still many missing attributes for audio and video tags. I find it strange that these tags are completely unsupported - they should probably be removed from the list in the documentation to reduce confusion until they are properly supported.\n",
        "title": "Support for media events",
        "labels": "Type: Enhancement",
        "id": 44702
    },
    {
        "body": "@nathansobo will that help your event perf issues a bit? I'm not familiar with atom's plugin infrastructure, But this'll help if you have `<Editor/><Plugin1/>` (two `renderComponent`s). Doesn't help if you have `<Editor><Plugin1/></Editor>` though, but I have some ideas to optimize events a bit more.\n\nThis is nonetheless an ok idea, I think.\n@spicyj \n",
        "title": "Attach event per react container root, rather than on the document",
        "labels": "Type: Enhancement",
        "id": 44703
    },
    {
        "body": "The document-wide handlers for native events that perform synthetic event dispatch execute in 0.2-0.7 milliseconds on my machine. I realize this doesn't seem like much time, but we're really trying to shave off any non-essential source of latency for typing and cursor movement in Atom, and every little bit helps. Disabling synthetic events on `keydown` and `textinput` is saving about 1ms of latency for a keystroke.\n\nIn our fork, I've added the ability to add a `reactSkipEventDispatch` property to the native event to opt out of synthetic dispatch, but I'd be interested in a more official mechanism for opting out of this feature for certain event types. Even better, perhaps React could maintain a cache of what event types are actually being listened for and bail out as soon as possible if handling an event.\n",
        "title": "Don't add top-level events for uncontrolled inputs",
        "labels": "Type: Enhancement",
        "id": 44704
    },
    {
        "body": "See [mailing list post](https://groups.google.com/d/msg/reactjs/pKxD3JY_Y84/zc59P2T5IP4J), reproduced below for convenience:\n\nThe following reduced test case ([jsfiddle](http://jsfiddle.net/Tn83a/)) has an unnecessary reflow:\n\n``` javascript\nvar Input = React.createClass({\n    getInitialState: function () {\n        return {\n            text: this.props.text + \"...\"\n        };\n    },\n    componentWillReceiveProps: function (nextProps) {\n        this.setState({\n            text: nextProps.text + \"...\"\n        });\n    },\n    render: function () {\n        return React.DOM.div(null, this.state.text);\n    }\n});\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            value: \"foo\"\n        };\n    },\n    render: function () {\n        var that = this;\n        return React.DOM.div(null,\n            React.DOM.input({\n                value: this.state.value,\n                onChange: function (e) {\n                    that.setState({\n                        value: e.target.value\n                    });\n                }\n            }),\n            Input({\n                text: this.state.value\n            }));\n    }\n});\n\nReact.renderComponent(App(null), document.body);\n```\n\nAnd a screenshot from the Timeline tab in Chrome Dev Tools showing the reflow:\n\n![reflow](https://cloud.githubusercontent.com/assets/1037172/3712415/33574b9e-1513-11e4-9dca-cecc3233353a.png)\n\nAn equivalent implementation ([jsfiddle](http://jsfiddle.net/EG7hL/)) not using `setState` in `componentWillReceiveProps` does not have the same reflow:\n\n``` javascript\nvar Input = React.createClass({\n    render: function () {\n        return React.DOM.div(null, this.props.text + \"...\");\n    }\n});\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            value: \"foo\"\n        };\n    },\n    render: function () {\n        var that = this;\n        return React.DOM.div(null,\n            React.DOM.input({\n                value: this.state.value,\n                onChange: function (e) {\n                    that.setState({\n                        value: e.target.value\n                    });\n                }\n            }),\n            Input({\n                text: this.state.value\n            }));\n    }\n});\n\nReact.renderComponent(App(null), document.body);\n```\n",
        "title": "Unnecessary reflow due to setState in componentWillReceiveProps",
        "labels": "Type: Enhancement",
        "id": 44705
    },
    {
        "body": "`tabIndex` is an integer, positive or negative, add `HAS_NUMERIC_VALUE`?\n\n`rowSpan` and `colSpan` are integers, but only non-negative, which I assume would necessitate `HAS_NONNEGATIVE_VALUE`?\n\n`spellCheck` is boolean with a third indeterminate state, so `HAS_TRISTATE_VALUE` would need to be added (`undefined` and `null` should both map to indeterminate). It expects `\"true\"` or `\"false\"`.\n\n`autoComplete` is a regular boolean attribute except that it defaults to `on`, so you have to explicitly set it to `off` to disable it. Expects `off` (or `on`, but that is default and is redundant). Add something like `IS_DEFAULT_ENABLED`?\n\nThoughts? Have I missed something? Also yes, lots of new properties sadly, but worth the discussion at least.\n",
        "title": "RFC: Introduce more DOM property definitions",
        "labels": "Type: Enhancement",
        "id": 44706
    },
    {
        "body": "https://github.com/facebook/react/blob/8a47813baabcb200f5e0a496dd959cb0ef3adcf3/src/vendor/stubs/cx.js#L36\n\nIf we get rid of `Object.keys` we save one allocation for a potentially commonly used function (except for you guys running your internal transform). Yes no?\n",
        "title": "Avoid unnecessary object allocation in ClassSet",
        "labels": "Type: Enhancement",
        "id": 44707
    },
    {
        "body": "Hi guys, since Facebook is using the `prefix` attribute on the `head` element to declare open graph namespace. Could we add it to the list of supported attributes?\n\nthis would be useful when generating templates  with https://github.com/reactjs/express-react-views\n\nsee this link too for more details\nhttp://stackoverflow.com/questions/8235687/open-graph-namespace-declaration-html-with-xmlns-or-head-prefix\n",
        "title": "add support for head prefix attribute",
        "labels": "Type: Enhancement",
        "id": 44708
    },
    {
        "body": "Right now, somewhere buried on the React site, there's a list of polyfills that React requires, with links to a project that has them, intermingled with a bunch of others.\n\nIt would be nice if React (optionally) shipped with all the polyfills, and only the polyfills, it needs to function.\n\nThis would make it easier for people to fall into the pit of success and build browser-compatible React sites. Also it would save me a bunch of work every time I start a new project.\n",
        "title": "Provide a build with required polyfills, or a separate react-polyfills.js",
        "labels": "Type: Enhancement",
        "id": 44709
    },
    {
        "body": "If you have\n\n```\n{this.state.show &&\n  <div onTouchStart={this.hideTheDiv} onTouchMove={...} />}\n```\n\nsuch that the onTouchStart handler removes the div (and maybe replaces it with another one in the same place, useful in certain draggable interactions), the onTouchMove handler doesn't fire because the events of a detached element no longer bubble to document. We should probably bind the touchmove handler when the element receives touchstart instead of delegating to document.\n\nSort of related to #1254.\n\ncc @merbs @eater\n",
        "title": "touchmove doesn't fire on removed element",
        "labels": "Type: Enhancement",
        "id": 44710
    },
    {
        "body": "Code below could be a result of a typo in a mixin name or an attempt to use a mixin from a module which has no `module.exports` (by a mistakte).\n\n```\nvar Component = React.createClass({\n  mixins: [undefined],\n  ...\n});\n```\n\nIt would be nice if React can warn/throw on such condition.\n",
        "title": "Make React.createClass warn/throw if mixins contains undefined value",
        "labels": "Type: Enhancement",
        "id": 44711
    },
    {
        "body": "React adds a scroll listener that tracks and caches the scroll position (I assume for some undocumented internal purpose). Additionally, the scroll listener forces a synchronous layout (see screenshot). This seems wasteful, especially considering that the values tracked are never exposed in the API.\n\nWhat is the scroll listener used for? Can it be removed?\n\n![screen shot 2014-03-24 at 3 11 09 pm](https://f.cloud.github.com/assets/6031/2506088/446c708a-b3a2-11e3-9aa3-4b6af531a4a0.png)\n",
        "title": "React tracks scroll position internally and forces synchronous layout",
        "labels": "Type: Enhancement",
        "id": 44712
    },
    {
        "body": "React binds touchmove, touchstart, touchend, touchcancel and wheel handlers to the document. When the user tries to scroll the browser needs to execute these event handlers to ensure event.preventDefault() was not called. This means scrolling will stall while JavaScript is executing.\n\nChrome has a fast-path that checks whether the coordinate where the touch event happens has touch listeners (https://plus.google.com/+RickByers/posts/cmzrtyBYPQc). If there are no listeners Chrome can allow the scroll to happen even if the main thread is blocked on JavaScript. \n\nWe should bind our listeners for these events directly to the node which requires it. That event handler can then dispatch the event to the standard React top level event system. Then it will bubble/capture just like everything else and be visible to all event plugins.\n",
        "title": "React shouldn't bind wheel or touch events to the document. ",
        "labels": "Type: Enhancement",
        "id": 44713
    },
    {
        "body": "https://github.com/facebook/react/blob/master/src/dom/getTextContentAccessor.js\n\nCould for instance be simplified to the below code, and even if many of these tests were to be done during start-up the effect should be immeasureable (by comparison, even IE8 can manage to create ~250.000 elements a second) and it seems like we could simplify the code slightly by doing it like this.\n\nSince we still use `ExecutionEnvironment.canUseDOM` it should be safe to use in all environments, right?\n\n```\n\"use strict\";\n\nvar ExecutionEnvironment = require('ExecutionEnvironment');\n\n/**\n * Gets the key used to access text content on a DOM node.\n */\nif (ExecutionEnvironment.canUseDOM) {\n  module.exports = 'innerText' in document.createElement('div') ?\n    'innerText' :\n    'textContent';\n}\n```\n",
        "title": "Feature test during start-up instead?",
        "labels": "Type: Enhancement",
        "id": 44714
    },
    {
        "body": "Right now we run any tests we find in `build/modules/`, which includes tests still sitting around from previous builds that don't currently exist in `src/`.\n\ncc @subtleGradient @spicyj\n",
        "title": "Only run tests built from files that exist in src/",
        "labels": "Type: Enhancement",
        "id": 44715
    },
    {
        "body": "Here's my idea. Please let me know if it's any good.\n\nRoutes in a single-page app basically just represent state (or props, depending on your perspective), and no-one does state better than React. Which makes me think that React will be awesome at route management.\n\nI've taken a stab at [making a single-page app in react](https://github.com/jaredly/github-issues-viewer), using Backbone.Router for routing, and it wasn't terrible. But it wasn't amazing, either. I had a [router with event handlers](https://github.com/jaredly/github-issues-viewer/blob/v0.1.2/lib/view.js#L36) that then called setState. But translating between route+params and state was very ad-hoc.\n\nIdeally, you could have a one-to-one mapping:\n\n```\n/people/joan/2-jan-13\n\n=>\n\n{\n   page: \"personArchive\",\n   params: {\n      person: \"joan\",\n      date: new Date(...)\n   }\n}\n```\n\n_And back again._\n\nSo you could call\n\n```\nsetRoute(\"personArchive\", {person: \"joan\", date: new Date(...)})\n```\n\nand it would do the right thing. Abstract the urls away so developers never have to care. They just read the props, state and route and render appropriately.\n\nAm I super off-base? Is there a better way to do state-conscious routing?\n\nI would love to put together a proof of concept if the idea sounds appealing.\n",
        "title": "wishlist: integrated, stateful routing",
        "labels": "Type: Enhancement",
        "id": 44716
    },
    {
        "body": "Original description by @petehunt:\nRight now even if you aren't using server rendering you're paying the price of adler32 bytes down the wire. We should instead make this injectable.\n",
        "title": "Make ReactMarkupChecksum.canReuseMarkup() injectable to save bytes",
        "labels": "Type: Enhancement",
        "id": 44717
    },
    {
        "body": "Would be nice.\n",
        "title": "Source map support for jsx binary",
        "labels": "Type: Enhancement",
        "id": 44718
    },
    {
        "body": "",
        "title": "Handle PhantomJS crashes better",
        "labels": "Type: Enhancement",
        "id": 44719
    },
    {
        "body": "In HTML, certain tags stop the HTML5 parser from parsing children, e.g. `<textarea>`, `<style>`, `<script>`, etc\u2026\n\nIt should be possible to do something similar in JSX. e.g.,\u2026\n\nThis JSX code\u2026\n\n``` HTML\n<foo><bar /></foo><baz />\n<reactishTextareaOrSomethingLikeThat isHip={true}>\n    <foo><bar /></foo><baz />\n</reactishTextareaOrSomethingLikeThat>\n```\n\nwould be compiled to this JavaScript\u2026\n\n``` JavaScript\nfoo(null, bar(null )); baz(null);\nreactishTextareaOrSomethingLikeThat({ isHip:true }, function(wrapper){\n    wrapper(null, foo(null, bar(null )), baz(null));\n});\n```\n\ninstead of immediately executing the children like this\u2026\n\n``` JavaScript\nfoo(null, bar(null ));\nreactishTextareaOrSomethingLikeThat({ isHip:true },\n    foo(null, bar(null )), baz(null)\n);\n```\n",
        "title": "JSX \u2014 Enable lazy subtree execution",
        "labels": "Type: Enhancement",
        "id": 44720
    },
    {
        "body": "The JSON format is great for Sauce but not so great for running tests manually in the console.\n",
        "title": "Make `grunt test` output less noisy",
        "labels": "Type: Enhancement",
        "id": 44721
    },
    {
        "body": "Any event that occurs on the page (regardless of if it's on a DOM subtree managed by React) goes through React's event subsystem. It would be great if we instead listened at the mount point (and any child documents in e.g. iframes) instead of at the top of the page.\n",
        "title": "Listen for events at mount point, not top level?",
        "labels": "Type: Enhancement",
        "id": 44722
    },
    {
        "body": "Browserify sort of allows you to do this, but it puts them inline in the same file, which is _far_ from ideal. We should consider working with the browserify team and make it possible to build the map outside of the bundle or do something else (might be able to extract sourcemap out, might have to stop using browserify)\n",
        "title": "Create sourcemaps for the build",
        "labels": "Type: Enhancement",
        "id": 44723
    },
    {
        "body": "http://react.zpao.com/builds/master/latest/ has the browser packages, but we've had requests for the npm package as well.\n",
        "title": "Send npm package to builds site as well",
        "labels": "Type: Enhancement",
        "id": 44724
    },
    {
        "body": "Apparently it doesn't, but it would be pretty awesome if it did. We already listen for `DOMCharacterDataModified` so I don't think it should be too terrible. Tangentially it would be great to stop using mutation events and switch over to observers (let's not do that here though unless it dovetails really nicely).\n\nInterested @spicyj?\n",
        "title": "Make onChange work for contenteditable",
        "labels": "Type: Enhancement",
        "id": 44725
    },
    {
        "body": "React is currently incompatible with sites that enable a Content Security Policy:\n\n> Uncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"default-src 'self'\". [1]\n\nFrom some quick testing, there appears to be only one place in React currently preforming evaluation from a string: https://github.com/facebook/react/blob/master/src/environment/ExecutionEnvironment.js#L39\n\n```\n- global: new Function('return this;')()\n+ global: function() { return this; }()\n```\n\nThis one-off is easy enough to fix in a single pull request that I'll gladly submit. However, I'm uneasy deploying React on a CSP-enabled site without a bit of integration testing and an understanding of whether CSP incompatibility issues even qualify as bugs. What's the official stance on React+Content-Security-Policy?\n\n[1] https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html#usage\n",
        "title": "React should support Content Security Policy",
        "labels": "Type: Enhancement",
        "id": 44726
    },
    {
        "body": "Like if you do `<textarea maxlength={...} />`. The current behavior is opaque and sort of confusing for people.\n",
        "title": "Consider warning when using the wrong case for an HTML attribute",
        "labels": "Type: Enhancement",
        "id": 44727
    },
    {
        "body": "One thing I've wanted a couple of times in React is having computed properties, something vaguely like [Ember's computed properties](http://emberjs.com/guides/object-model/computed-properties/):\n\n```\nfullName: function() {\n    var firstName = this.get('firstName');\n    var lastName = this.get('lastName');\n\n    return firstName + ' ' + lastName;\n}.property('firstName', 'lastName')\n```\n\nIn my app one case where this would be useful is where one prop is a string that gets parsed into a more elaborate object before being displayed. Currently I'm doing the parsing in componentWillMount and componentWillReceiveProps and then setting state, which works pretty well, but perhaps there's a nicer way we can provide.\n",
        "title": "Computed properties",
        "labels": "Type: Enhancement",
        "id": 44728
    },
    {
        "body": "This event doesn't exist yet.\n",
        "title": "onContextMenu event?",
        "labels": "Type: Enhancement",
        "id": 44729
    },
    {
        "body": "Currently accidentally using `this.setState('title', 'Car')` throws an unhelpful `MERGE_CORE_FAILURE` error. Would be nice to either throw a better error or accept this format.\nSame goes for `setProps`, etc.\n",
        "title": "setState (and others) parameters format",
        "labels": "Type: Enhancement",
        "id": 44730
    },
    {
        "body": "Just like for `componentDidMount` and others.\n",
        "title": "Pass rootNode for componentWillUnmount",
        "labels": "Type: Enhancement",
        "id": 44731
    },
    {
        "body": "The most recurrent source of disagreement between test results within Facebook and those given by `grunt test` is that Facebook has a more consistent strategy for mocking modules that are not currently under test.\n\nWhen I implemented the PhantomJS test harness for this open-source repository, for the sake of experiment and because the \"right way\" would have been \"hard,\" I decided to play with fire: I discarded the assumption of auto-mocking entirely, in preference to simply fixing any tests that failed because of the lack of mocking.\n\nFortunately, there have not been too many test failures of that sort, partly due to another mitigating factor: we run each test suite in its own `<iframe>`, so information is somewhat isolated between each test unit.\n\nNevertheless, I think we can do a much better job of emulating the mocking behavior of the FB codebase. Discussion of plans here: https://github.com/facebook/react/issues/154#issuecomment-20419661\n\ncc @zpao @jeffmo @jordwalke @petehunt\n",
        "title": "Enable mocking of required modules during tests",
        "labels": "Type: Enhancement",
        "id": 44732
    },
    {
        "body": "cc @petehunt @zpao\n",
        "title": "Come up with a convention for forcing bin/jsx rebuilds without manually clearing .module-cache",
        "labels": "Type: Enhancement",
        "id": 44733
    },
    {
        "body": "cc @petehunt\n",
        "title": "Add a demo using .coffee files to implement a React component",
        "labels": "Type: Enhancement",
        "id": 44734
    },
    {
        "body": "Inspired by https://github.com/facebook/react/issues/71#issuecomment-19143496\n\nThis will reduce the number of assumptions imposed by `bin/jsx` considerably.\n\nWe should still use `--relativize` for our grunt tasks, but that's our poison to pick.\n\ncc @petehunt @zpao\n",
        "title": "bin/jsx should not relativize required module IDs unless --relativize is passed",
        "labels": "Type: Enhancement",
        "id": 44735
    },
    {
        "body": "```\n23:07 < balpert> can we add <Namespaced.Things /> to JSX?\n23:07 < jwalke> I like that you chose the dot!\n23:07 < jwalke> Keep it javascript-first.\n23:07 < balpert> yes\n23:08 < balpert> translating colon to dot would be absurd\n23:08 < balpert> (in my opinion)\n23:08 < jwalke> So you could have var MyComponentsPackage = {Typeahead:\n                R.createClass.. }\n23:08 < jwalke> <MyComponentsPackage.Typeahead />\n23:08 < jwalke> I like it.\n23:08 < jwalke> Make an issue!\n```\n",
        "title": "Allow namespacing in component names in JSX",
        "labels": "Type: Enhancement",
        "id": 44736
    },
    {
        "body": "JSX is nice, but those using compile-to-JS language have to change the transpiler to connect to the JSX compiler. Is there any chance of adding alternative DOM syntax to JSX so it does not break every compile-to-JS language? Something `gettext`-style would be nice. So in addition to:\n\n```\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <div>{'Hello ' + this.props.name}</div>;\n  }\n});\n```\n\nit would be nice to support\n\n```\nvar HelloMessage = React.createClass({\n  render: function() {\n    return _dom_(\"<div>{'Hello ' + this.props.name}</div>\");\n  }\n});\n```\n",
        "title": "Work with compile-to-JS languages (like CoffeeScript)",
        "labels": "Type: Enhancement",
        "id": 44737
    },
    {
        "body": "A DevTools user has requested the following feature (reworded by me):\r\nExpose an ordered table of all component types (names) along with the number of instances currently mounted. This would help identify the most impactful components to examine for memory related optimizations.\r\n\r\nThe Profiler isn't very useful in this scenario because it's too CPU-centric.\r\n\r\ncc @yungsters",
        "title": "Component summary view by type",
        "labels": "Type: Feature Request",
        "id": 44738
    },
    {
        "body": "Some of this might not be possible or might be prohibitively difficult, but this was some user feedback/requests for the scheduling profiler:\r\n* Show lane labels instead of bitmap index\r\n* On hover for a batch of render work highlight update events that were related to that render batch\r\n* Show when tasks are scheduled (in the scheduler, any JavaScript, not just React\r\n* Find-in-page that shows number of results like Chrome and updates as you zoom and scroll\r\n* Show lane(s) state update get associated with in chart tooltip\r\n* Highlight batched updates on hover (hovering one item would update others)",
        "title": "Scheduling profiler feedback",
        "labels": "Type: Feature Request",
        "id": 44739
    },
    {
        "body": "<div>{1n}</div> should render 1. Instead it renders ''.  \r\n\r\nIt looks like 'bigint' just needs adding here: https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ToStringValue.js#L26. \r\n\r\nHappy to raise a PR or take guidance on a better approach.\r\n\r\nReact version: all\r\n\r\n## Steps To Reproduce\r\nLink to code example: https://codepen.io/boyne/pen/vYXJWVr\r\n\r\n\r\n## The current behavior\r\nRenders \"\"\r\n\r\n\r\n## The expected behavior\r\nRenders 1\r\n",
        "title": "Bug: BigInt does not get toString()'d when rendered",
        "labels": "Type: Feature Request",
        "id": 44740
    },
    {
        "body": "react-devtools not working inside react based chrome extensions\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. install react-devtools extension in chrome\r\n2. git clone https://github.com/lxieyang/chrome-extension-boilerplate-react\r\n3. cd into directory\r\n4. yarn install\r\n5. yarn build \r\n6. open chrome extensions page\r\n7. change to developer mode\r\n8. load unpacked, point to the directory build within chrome-extension-boilerplate-react directory\r\n9. click on react dev tools extension\r\n10. The following text is displayed \"This is a restricted browser page. React devtools cannot access this page.\"\r\n11. When inspecting the page, the tabs components and profiler are NOT shown\r\n\r\nLink to code example: https://github.com/lxieyang/chrome-extension-boilerplate-react\r\n\r\n## The current behavior\r\n1. When clicking on the react devtools chrome extension: \"This is a restricted browser page. React devtools cannot access this page.\"\r\n2. Also when inspecting the pages of the chrome extension, the tabs components and profiler are NOT shown\r\n\r\n## The expected behavior\r\n1. When clicking on the react devtools chrome extension: The devtools recognize that the page is using react\r\n2. when inspecting the pages of the chrome extension, the tabs components and profiler are shown and populated",
        "title": "Bug: react-devtools not working inside react based chrome extensions",
        "labels": "Type: Feature Request",
        "id": 44741
    },
    {
        "body": "### Why: \r\n\r\nUser can open the source file in editor/ide by one-click.\r\n\r\nIt' is a useful feature in `vue-devtools`.\r\n\r\n---\r\n\r\n### How: \r\n\r\nAdd a click event on here:\r\n\r\nhttps://github.com/facebook/react/blob/cdfde3ae110844baf068706e7ed3fe97ec15f1d7/packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js#L226-L228\r\n\r\ncall ```fetch(`/__open-in-editor?file=${fileName}:${lineNumber}`)```\r\n\r\nAdd [launch-editor-middleware](https://github.com/yyx990803/launch-editor) to dev-server(or any scaffold handle by himself)\r\n\r\n---\r\n\r\nBefore anyone(maybe me) sends a PR, I want to know how do the react-team thinks about it?",
        "title": "Feature Request(devtools): `launch-editor` for selected component",
        "labels": "Type: Feature Request",
        "id": 44742
    },
    {
        "body": "The `exhaustive-deps` lint rule doesn't require setters from `useState`, dispatch from `useReducer`, and refs from `useRef` in dependencies, because we know for sure those will never change. I'd like to be able to add additional custom hooks to that \"safe list\". I understand this is potentially very dangerous, but we have a handful of hooks that simply wrap `useRef` with some logic. The returned result is essentially just a `useRef` result, so it's perfectly safe to ignore as a dependency.\r\n\r\nI'm imagining something like this in the eslint config:\r\n\r\n```\r\n{\r\n  \"rules\": {\r\n    // ...\r\n    \"react-hooks/exhaustive-deps\": [\"warn\", {\r\n      \"safeHooks\": \"(useRefWrapper|useOtherRefWrapper)\"\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\nWhere `useRefWrapper` might look like so:\r\n\r\n```\r\nconst useRefWrapper = () => {\r\n  const ref = useRef();\r\n  if (ref.current) {\r\n    console.log('hi!');\r\n  }\r\n  return ref;\r\n}\r\n```\r\n\r\nDoes this seem like a reasonable option, assuming the documentation has a clear caveat mentioning the dangers? If so, I'm happy to work on implementation.",
        "title": "Feature suggestion: Allow custom list of hooks to ignore on exhaustive-deps",
        "labels": "Type: Feature Request",
        "id": 44743
    },
    {
        "body": "A few months ago, we added a tooltip to react DevTools Profiler (cc @bvaughn), so that for very small components, without clicking on them it is possible to see an overview of why they are re-rendered.\r\nHowever, still, for a not very big page, there can be tens of re-renders, so it is hard to find the component that you are looking for.\r\n\r\nAn easy solution for this to add some search bar, where the user can type down the name of the component, and find the component. \r\n\r\nIf this is something that you think we care about, I can pick it up and add the search field. \r\n\r\n<img src=\"https://user-images.githubusercontent.com/28848972/97014068-25bf7680-154a-11eb-8ba3-a07dd7a45d45.png\" width=\"250\">\r\n\r\n",
        "title": "Feature Request: Adding filter (search) to react DevTools Profiler",
        "labels": "Type: Feature Request",
        "id": 44744
    },
    {
        "body": "Today, `useLayoutEffect` can be used for synchronous read/writes across the DOM.\r\n\r\n```javascript\r\nuseLayoutEffect(() => {\r\n  // Write\r\n  ref.current.style.transform = \"\"\r\n\r\n  // Read\r\n  const box = ref.current.getBoundingClientRect()\r\n})\r\n```\r\n\r\nFor a single instance of a single component, this works well. But if this code is repeated or reused anywhere in the tree, we trigger  [layout thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing). The severity of the layout thrashing scales linearly with the number of hooks/components featuring either this code or code like it.\r\n\r\nHooks and components are designed to be composable, yet it's this trivial to write one that isn't. \r\n\r\nInstead, what I'd like is a batched version of `useLayoutEffect` that provides `read` and `write` callbacks. These schedule callbacks that will be called:\r\n\r\n1. Synchronously before paint\r\n2. In \"parallel\" in reads/writes/reads etc\r\n3. After all child components in the tree have run `useLayoutEffect` - including those entering the tree (currently these don't mount until after other `useLayoutEffect`s have been called)\r\n\r\nIt could look like this, though I'm more interested in the above specs than actual API:\r\n\r\n```javascript\r\nuseBatchedLayoutEffect((read, write) => {\r\n  write(() =>  {\r\n    ref.current.style.transform = \"\"\r\n  })\r\n\r\n  read(() => {\r\n    const box = ref.current.getBoundingClientRect()\r\n  })\r\n})\r\n```\r\n\r\nThen, adhering the 3 specifications above, these callbacks are executed in order, so all `read`s from across the tree, then all `write`s, then all `read`s etc. There is no upper limit for the number of permitted ping-ponged reads/writes IMO as the amount of layout thrashing you could possibly suffer will never be worse than the single hungriest hook. In my experience I've never needed more than a read/write/read/write.\r\n\r\n## Measurement accuracy\r\n\r\nIn the given example, we're measuring a component after first resetting its `transform` because we want to snapshot its actual bounding box without any transforms applied. But if this component is [nested in itself](https://codesandbox.io/s/dazzling-varahamihira-2qiyw?file=/src/App.js), so both a parent and child are performing the same type of animation, we want to unset all the transforms before measuring any of the elements, otherwise the resulting measurements will be incorrect.\r\n\r\n## What about `requestAnimationFrame`?\r\n\r\nTheoretically it could be possible to implement this ourselves in userland by creating a batcher that executes on the next available frame. Sadly this isn't possible in practise. For whatever browser-internal reason it is necessary to run these reads and writes synchronously to prevent flashes of incorrectly-styled components.\r\n\r\nIf you play with this very simple layout animation implementation by clicking on the red box you'll see it suffers no flashes:\r\n\r\nhttps://codesandbox.io/s/broken-star-cycfz?file=/src/App.js:528-537\r\n\r\nBut if you uncomment the wrapping `requestAnimationFrame` within the `useLayoutEffect` you'll see it does randomly flash with the undesired styles.",
        "title": "Feature request: A useLayoutEffect with read/write batching across a tree",
        "labels": "Type: Feature Request",
        "id": 44745
    },
    {
        "body": "This is regarding the discussion in #17773. \r\n\r\nReact-DOM currently stringifies DOM attribute values  before passing them to `Element.setAttribute(NS)` functions. This might be unnecessary, as these functions implicitly stringify attribute values on their own (WebIDL attributes typed as `DOMString`). It also makes it difficult to enforce [Trusted Types](https://w3c.github.io/webappsec-trusted-types/dist/spec/) in React applications, as the trusted type objects would be stringified before values reach the DOM sinks.\r\n\r\nCurrently there is a `enableTrustedTypesIntegration` feature flag to disable stringification, but it seems like this behavior can be safely removed for modern browsers with no backwards-compatibility problems. Let me explain:\r\n\r\nAttribute stringification was introduced in https://github.com/facebook/react/commit/b0455f46709fca94da0b6126b719d6dd07605e65, at that time to workaround a [**jsdom**](https://github.com/jsdom/jsdom) limitation (jsdom's DOM emulation didn't stringify on its own). **IE 8/9** [have a similar issue](https://github.com/facebook/react/commit/3b94abcb3b2c05fc38406b02a501427e58377c44). If an object is passed to a DOM attribute, its value becomes `[object]`, ignoring any stringification rules defined in objects' `toString` function.\r\n\r\n- Jsdom does not have the issue anymore. Since at least 4.0.0 its `setAttribute` function does stringify the values via its IDL layer ([runkit demo](https://runkit.com/kkotowicz/jsdom-setattribute)).\r\n- React doesn't support IE 8 anymore.\r\n- The issue still exists for IE9 (contrary to https://github.com/facebook/react/issues/11735, my tests confirm that the bug still exists, but one needs to try a standard attribute, like `p.title`, and not one with a custom name).\r\n- All other browsers, even in their old versions (I tested IEs, Firefox, Chrome, Safari, Opera and a few mobile browsers ) correctly stringify.\r\n\r\nI propose to remove the stringification (similar to https://github.com/facebook/react/pull/17774) unless a browser bug is detected. \r\n\r\nThat way there is no spurious stringification, and the code branches with the workaround can be removed once buggy browsers stop being supported. My testing shows that only IE9 is affected. The change would be backwards-compatible. I'll send a PR with the proposed change.",
        "title": "DOM attribute stringification fixes",
        "labels": "Type: Feature Request",
        "id": 44746
    },
    {
        "body": "(Deleted template as this is a suggestion, not a bug.)\r\n\r\nThe dev tools helpfully extracts HOC names and shows them in the components tree. [Example](https://react-devtools-tutorial.now.sh/higher-order-components):\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86582724-03ddbc00-bf7a-11ea-83fb-f9d0a3902e5f.png)\r\n\r\nHowever, it doesn't give the same treatment to components in the profiler:\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86582766-135d0500-bf7a-11ea-8e2a-520597150db6.png)\r\n\r\nIn large trees, it is very confusing to see two components with the same name, so it would be useful to show the HOC name here as well.\r\n\r\nAs a workaround for now, users can click through to the \"components\" tab from the profiler, when a component is selected in the profiler flamegraph, to see this extra information.",
        "title": "Suggestion: show HOC names in profiler",
        "labels": "Type: Feature Request",
        "id": 44747
    },
    {
        "body": "Would this be useful?\r\n\r\n> A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.\r\n\r\nFrom [createSlice](https://redux-toolkit.js.org/api/createSlice).",
        "title": "Feature proposal: Hook equivalent to createSlice from Redux Toolkit?",
        "labels": "Type: Feature Request",
        "id": 44748
    },
    {
        "body": "I notice that the standalone react-devtools use http instead https like `\"<script src=\"http://192.1.2.3:8097\"></script>\"` ([src code](https://github.com/facebook/react/blob/4c7036e807fa18a3e21a5182983c7c0f05c5936e/packages/react-devtools/app.html#L186-L194))\uff0cbut my website is always https, so it will get broken because I cant change it to http if it's in `iframe`(it's diffcult to change the host environment/website protocol).\r\n\r\nI'm not familar with the react-devtools implementations, maybe something cause it can only use http to open the server, happy to hear the details, thanks!\r\n\r\nReact-devtools: 3.6.3\r\n\r\n",
        "title": "Add https support to standalone DevTools",
        "labels": "Type: Feature Request",
        "id": 44749
    },
    {
        "body": "It'd be nice to have a toggle to pause the debugger when warnings fire so you can inspect the stack as it's happening.\r\n\r\n```\r\nconsole.error = function() {\r\n  ...\r\n  if (isBreakOn) {\r\n    debugger;\r\n  }\r\n}\r\n```\r\n\r\nSee https://github.com/facebook/react/pull/19044",
        "title": "[DevTools Feature Request] Break on Warnings",
        "labels": "Type: Feature Request",
        "id": 44750
    },
    {
        "body": "Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in https://github.com/vuejs/vue-devtools/pull/479).\r\n\r\nThe React devtools should have the same feature! It would be useful when debugging for sure.\r\n",
        "title": "Add devtools \"Inspect React component\" to right-click menu",
        "labels": "Type: Feature Request",
        "id": 44751
    },
    {
        "body": "## The current behavior\r\n\r\nThe full value of the `key` is very difficult / impossible to find and use in the interface of the React Devtools.\r\n\r\n![Kapture 2020-04-22 at 11 47 47](https://user-images.githubusercontent.com/1935696/79997715-25222680-84ba-11ea-97ba-51f1679a8c91.gif)\r\n\r\nOnly managed to find it by accident :(\r\n\r\n## The expected behavior\r\n\r\nThe `key` is visible in the props list to the right.\r\n\r\n### Detailed Proposal\r\n\r\nAs mentioned below in https://github.com/facebook/react/issues/18702#issuecomment-617924196\r\n\r\nAdd a light divider and new section in the props panel to the right.\r\n\r\nPotentially also add a question mark that shows an explanation about the fact that things in this section are not really props.\r\n\r\nRef (Original implementation): https://github.com/facebook/react-devtools/pull/328",
        "title": "Improve UX of finding full `key` value",
        "labels": "Type: Feature Request",
        "id": 44752
    },
    {
        "body": "At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`.\r\n\r\nIt works well. So well that several testing frameworks also get their uncaught exception handling triggered.\r\n\r\n**Example with mocha:**\r\n```js\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction MyComponent({ doThrow }) {\r\n    if (doThrow) { throw new Error('I'm bad'); }\r\n    return <div></div>;\r\n}\r\n\r\nit('should throw', function () {\r\n    expect(() => {\r\n        render(<MyComponent doThrow/>);\r\n    }).to.throw();\r\n});\r\n```\r\n**Behavior:**\r\n- When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build).\r\n- When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`.\r\n\r\nThe root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block\u2026 and trips Mocha.js uncaught exception detector.\r\n\r\n*Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.*\r\n\r\n*Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.*\r\n\r\n**Expected behavior:**\r\n- Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.\r\n",
        "title": "Allow opting out of invokeGuardedCallbackDev",
        "labels": "Type: Feature Request",
        "id": 44753
    },
    {
        "body": "## Feature Request\r\n\r\nprovide API on react-dom to convert style object to CSS string. the API could be used to build dynamic CSS easily.\r\n\r\n### Approach 1\r\n\r\n```js\r\nimport {createCSS} from 'react-dom'\r\n\r\nconst inlineStyleString = createCSS({\r\n  overflow: 'hidden', \r\n  display: '-webkit-box',\r\n  WebkitLineClamp: 2,\r\n})\r\n\r\nreturn <style>{`.clamp-text { ${inlineStyleString} }`}</style>\r\n```\r\n\r\n### Approach 2\r\n\r\nAnother approach is to only map the key and value from the original style object, and let user play with it.\r\n\r\n```js\r\nimport {createStyles} from 'react-dom'\r\n\r\n// return a object with key-value pairs of css rules\r\nconst cssStyleObject = createCSS({\r\n  WebkitTransform: 'scale(2)',\r\n})\r\n// return { '-webkit-transform': 'scale(2)'  }\r\n\r\nconst inlineStyleString = Object.keys(cssStyleObject).reduce((serialized, key) => {\r\n  serialized += `${key}: ${cssStyleObject[key]};`\r\n  return serialized\r\n}, '')\r\n\r\nreturn <style>{`.clamp-text { ${inlineStyleString} }`}</style>\r\n```\r\n\r\n\r\n## Why\r\n\r\nSee other react styling library like **radium**, the way to build css is quite similar with react inline style if they need anything aligned with react like browser prefix such as `Webkit` or detect the unit less number for some special rule such as `line-height`, they have to re-implement the logic.\r\n\r\nthe style object in react is quite convenient, but it's can only used for inline style. hope react team could consider to expose it in the react-dom. might not the origin function name, but the same functionality.",
        "title": "Expose API like `createStyles` for converting style object to CSS string",
        "labels": "Type: Feature Request",
        "id": 44754
    },
    {
        "body": "Dan asked me to open up an issue: https://twitter.com/dan_abramov/status/1246883821477339139\r\n\r\nMy proposal is to extend React with a small hook that allows us to mutate nodes without causing render:\r\n\r\n```jsx\r\nimport React, { useMutation }\r\n\r\nfunction A() {\r\n  const [specialRef, set] = useMutation()\r\n\r\n  useEffect(() => {\r\n    // the following would execute sync and without causing render\r\n    // going through the same channel as a regular props update with all\r\n    // the internal interpolation (100 --> \"100px\")\r\n    set({ style: { left: 100 } })\r\n  }, [])\r\n\r\n  return <div ref={specialRef} ... />\r\n```\r\n\r\nThis would make the react eco system essentially cross platform in one strike. It uses the fact that reconcilers know how to handle props, something we don't know in userland unless we cause render to set fresh props, which is not at all optimal for animation or anything frame based. react-dom for instance knows what `margin: 3px` is, react-three-fiber knows what `position: [1,2,3]` is, and so on. These details are defined in the reconciler:\r\n\r\n```jsx\r\n  commitUpdate(instance: any, updatePayload: any, type: string, oldProps: any, newProps: any, fiber: Reconciler.Fiber)\r\n```\r\n\r\nIf libraries could use this knowledge from outside they could deal with any platform. Animation libraries like react-spring or framer-motion could animate everything: dom nodes, react native views, meshes, hardware diodes. We could finally write libraries that are not reliant on platforms.",
        "title": "Provide a renderer-agnostic equivalent of setNativeProps()",
        "labels": "Type: Feature Request",
        "id": 44755
    },
    {
        "body": "This list is pretty awesome:\r\n\r\n<img width=\"390\" alt=\"Screenshot 2020-04-03 at 00 12 08\" src=\"https://user-images.githubusercontent.com/810438/78308234-e0047780-753f-11ea-9d4f-1e2d31e5baa0.png\">\r\n\r\nBut always struggle to guess which component in the owner list I need to jump to.\r\n\r\nWe should make hovering the owner list highlight components, just like the main tree view does.\r\n\r\n@hristo-kanchev, interested?",
        "title": "DevTools: Hovering \"Rendered by\" list should highlight elements",
        "labels": "Type: Feature Request",
        "id": 44756
    },
    {
        "body": "React version: 16.13 and `0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. Goto https://codesandbox.io/s/xenodochial-field-rfdjz\r\n2. Try editing value of `MessageListContext.Provider`\r\n\r\nLink to code example: https://codesandbox.io/s/xenodochial-field-rfdjz\r\n\r\n## The current behavior\r\n\r\nContext from `createContext` can't be edited in the current devtools (provider, consumer, hooks)\r\n\r\n## The expected behavior\r\n\r\nContext value should be editable. I already proposed an implementation for [Provider](https://github.com/facebook/react/pull/18255) and [Consumer](https://github.com/facebook/react/pull/18257).\r\n",
        "title": "Bug: Editing context in react-devtools",
        "labels": "Type: Feature Request",
        "id": 44757
    },
    {
        "body": "Feature request from a DevTools user at Faceook:\r\n> If I mouse over a node in the flame graph if you can highlight it in the view like the inspector that would be really amazing!",
        "title": "Profiler should highlight host components (e.g. DOM elements) on mouseover",
        "labels": "Type: Feature Request",
        "id": 44758
    },
    {
        "body": "**What is the current behavior?**\r\n\r\nAll the components name  in the Component tree are of the same color\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.\r\n",
        "title": "Add colors to component's name ( in Component tree ) for visual feedback about type of Component or Node",
        "labels": "Type: Feature Request",
        "id": 44759
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI have played a bit with Concurrent Mode and the Suspense API.\r\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\r\n\r\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\r\n\r\n**What is the expected behavior?**\r\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \r\nhttps://codesandbox.io/s/cold-monad-ifr29.\r\n\r\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\r\nIn my opinion, this is a bit unpleasant to the eye.\r\n\r\nWouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:\r\n\r\n```jsx\r\n...\r\nfunction ProfilePage({ resource }) {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}\r\n      // If the fallback ever gets rendered,\r\n      // it will be shown for at least 1500 millisec.,\r\n      // even if the promise resolves right after rendering the fallback.\r\n      fallbackMinDurationMs={1500}>\r\n      <ProfileDetails resource={resource} />\r\n      <Suspense fallback={<h1>Loading posts...</h1>}>\r\n        <ProfileTimeline resource={resource} />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n...\r\n```\r\n\r\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\r\n\r\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\r\n\r\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\r\n\r\n```js\r\nfunction maxDelayFallbackPromise({\r\n  promise,\r\n  timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`\r\n  onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)\r\n  fallbackMinDurationMs\r\n} = {}) {\r\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\r\n  const uniqueIdentifier = `promise_value_${Math.random()}`\r\n  return Promise.race([\r\n    promise,\r\n    timeout(timeoutMs).then(() => uniqueIdentifier)\r\n  ]).then(value => {\r\n    if (value === uniqueIdentifier) {\r\n      onFallback()\r\n      return minDelayPromise(promise, fallbackMinDurationMs)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nWhere `timeout` and `minDelayPromise` are:\r\n\r\n```js\r\nfunction timeout(delayMs) {\r\n  return new Promise(resolve => setTimeout(resolve, delayMs))\r\n}\r\n\r\nfunction minDelayPromise(promise, minDelay) {\r\n  return Promise.all([\r\n    promise,\r\n    timeout(minDelay)\r\n  ]).then(([value]) => {\r\n    return value\r\n  })\r\n}\r\n```\r\n\r\nThis could also apply to the `isPending` flag of `useTransition`...\r\n\r\nDo you think such a feature could improve the UX in such cases?\r\n",
        "title": "Possibility to set min duration of Suspense fallback",
        "labels": "Type: Feature Request",
        "id": 44760
    },
    {
        "body": "Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.\r\n\r\nTo reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode.",
        "title": "Hotkey for \"Select an element in the page to inspect it\" in Chrome extension",
        "labels": "Type: Feature Request",
        "id": 44761
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature I suppose.\r\n\r\n**What is the current behavior?**\r\nSuspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).\r\n\r\n**What is the expected behavior?**\r\nIt would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.\r\n",
        "title": "Adding visible state to Suspense Fallback component to enhance CSS transitions.",
        "labels": "Type: Feature Request",
        "id": 44762
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\nRight now babel plugin emits globals: https://github.com/facebook/react/issues/16604\r\n\r\n```js\r\nwindow.$RefreshReg$ = () => {};\r\nwindow.$RefreshSig$ = () => type => type;\r\n```\r\n\r\nIt would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation:\r\n\r\n```js\r\nimport runtime from 'react-refresh/runtime'\r\nruntime.injectIntoGlobalHook(window)\r\n\r\nSystem.constructor.prototype.createContext = function (url) {\r\n  return {\r\n    url,\r\n    $RefreshSig$: runtime.createSignatureFunctionForTransform,\r\n    $RefreshReg$: (type, id) => {\r\n      id = url + ' ' + id\r\n      runtime.register(type, id)\r\n    }\r\n  };\r\n};\r\n```\r\n\r\nIf you don't mind I could create PR with changes to react-refresh/babel next week.\r\n\r\nenvironment:\r\n```js\r\n{\r\n    \"systemjs\": \"^6.1.4\",\r\n    \"react\": \"^16.11.0\",\r\n    \"react-dom\": \"^16.11.0\",\r\n    \"react-refresh\": \"^0.6.0\"\r\n }\r\n```",
        "title": "react-refresh: add options to override $RefreshReg$ and $RefreshSig$ for better System.js integration",
        "labels": "Type: Feature Request",
        "id": 44763
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nSo for whatever reason, terser/minification causes a bug where one of my components is undefined during render. What I get is the standard production mode minified error.\r\n\r\nFor some reason this time, I can't seem to do *any* of the following:\r\n\r\n1. See any stack information for the component (React just says \"something somewhere is undefined\")\r\n2. Set a breakpoint on the error point (for some reason with webpack + devtool sourcemap, chrome isn't letting me do a mid-line breakpoint at any place above the error)\r\n3. Disable Reacts error catching temporarily so I can pause on the actual error\r\n4. Use a development version of React with any ease but with the prod settings (I tried turning off both process.env.NODE_ENV checks but then you get an error `It is not supported to run the profiling version of a renderer (for example, react-dom/profiling) without also replacing the scheduler/tracing)`\r\n\r\nA big upgrade here would be to fix all of these (except 2, which is either a Webpack or Chrome bug). Can we get better stacks in production mode? That's the ideal. That with number 3 would be the most helpful: a query like `?disableNiceErrors=true` that prevents React from catching/re-throwing the error later would make it so much easier.\r\n\r\nAs it is now, it's incredibly painful to debug (already an hour into it and without the breakpoints working on minified React it's hard to really even figure out where besides manual code commenting).\r\n\r\nEdit: A fifth would be source maps for react itself in production bundles which may work.",
        "title": "Make it easier to debug (undefined components) in production",
        "labels": "Type: Feature Request",
        "id": 44764
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n**What is the current behavior?**\r\ntrigger by press enter button\r\n**What is the expected behavior?**\r\ntrigger by out of focus or pressing enter button\r\n",
        "title": "Apply props/state/hooks edits on blur",
        "labels": "Type: Feature Request",
        "id": 44765
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n**What is the current behavior?**\r\nit\u2018s hard for me to find a component in the profiler tab\r\n**What is the expected behavior?**\r\nadd a search function,just like components tab\r\n\r\n",
        "title": "Add \"search\" functionality to Profiler graphs",
        "labels": "Type: Feature Request",
        "id": 44766
    },
    {
        "body": "I'd like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/65933573-35b06980-e3cf-11e9-8245-e5bedac5c552.png)\r\n\r\nThis can be accomplished today by adding a new prop and changing the prop, but it's more work than I want to do.\r\n\r\nThis would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that's tied to a \"forceRender\" function:\r\n\r\n```jsx\r\nfunction useForceRerender() {\r\n  const [, set] = React.useState()\r\n  return React.useCallback(() => set({}), [])\r\n}\r\n\r\nfunction FilterComponent() {\r\n  const forceRerender = useForceRerender()\r\n \r\n  return (\r\n    <>\r\n      <button onClick={forceRerender}>force rerender</button>\r\n      {/* more JSX */}\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\nWould be cool to have this built-in :)",
        "title": "React DevTools force re-render button",
        "labels": "Type: Feature Request",
        "id": 44767
    },
    {
        "body": "Hey guys, great job with the new devtools \ud83d\udcaf perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers. \r\n\r\n**What is the current behavior?**\r\n- Copying data to clipboard stringifies all key-value pairs of an object\r\n- When the keys' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array\r\n\r\nThis is what was copied:\r\n<img width=\"369\" alt=\"Screen Shot 2019-09-27 at 12 24 19\" src=\"https://user-images.githubusercontent.com/30755017/65767498-f4496100-e125-11e9-8f8b-3faa4516d0c2.png\">\r\n\r\nThis is a pasted version in VSCode:\r\n<img width=\"399\" alt=\"Screen Shot 2019-09-27 at 12 24 48\" src=\"https://user-images.githubusercontent.com/30755017/65767486-ee538000-e125-11e9-9886-7dcd165c19db.png\">\r\n\r\n**What is the desired behavior?**\r\n- When I click on \"Copy to clipboard\" in react-devtools, my copied object's data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format\r\n- The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools)\r\n<img width=\"311\" alt=\"Screen Shot 2019-09-27 at 12 29 11\" src=\"https://user-images.githubusercontent.com/30755017/65767365-99176e80-e125-11e9-98d3-98fd9c4889f9.png\">\r\n\r\n",
        "title": "react-devtools: tiny feature request (copy to clipboard related)",
        "labels": "Type: Feature Request",
        "id": 44768
    },
    {
        "body": "I wonder whether is it in the plan to do the inverse of hiding components that match the filters, which is \"show only components where match the filters\"?\r\n\r\nI am currently doing a negative lookahead regex filter to achieve the behavior: https://twitter.com/lihautan/status/1174239606612647941. \r\n\r\nI am willing to work on it if this is a good feature to have.",
        "title": "DevTools: \"Show only components where...\" instead of just \"Hide components where\"",
        "labels": "Type: Feature Request",
        "id": 44769
    },
    {
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n[as demonstrated here, \"Why did this render?\"](https://github.com/facebook/react/issues/16437#issuecomment-524892514) does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects.\r\n\r\n**What is the expected behavior?**\r\nThe \"why did this render?\" shows a collapsible tree with the \"leaf\" value that changed inside the prop object displayed.\r\n\r\nA couple use cases this would benefit:\r\nIn some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you'd like to avoid storing the individual object items as separate prop variables such that you don't need to redefine them together as a dict later on, but changes are due to a single element in the dict that you'd like visibility on in react devTools.\r\n\r\nIn rarer cases, it is unavoidable having props that aren't nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNew feature never before released in React DevTools. I am using `16.8.6`\r\n",
        "title": "Enhance React DevTools \"Why did this render?\" for values nested in prop objects",
        "labels": "Type: Feature Request",
        "id": 44770
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* feature request\r\n* Original issue is: https://github.com/facebook/react-devtools/issues/922\r\n   * There are more details.\r\n* Mozilla's Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1573027\r\n\r\n**What is the current behavior?**\r\n\r\nThe react-devtools toolbar button does not light up and clicking on it says \"This page does not appear to be using react\". This is probably since extensions are not allowed to inject scripts into other extensions' pages.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe react-devtools toolbar button should light up and the addon should be able to debug the page\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is still reproducible\r\n\r\n* Firefox v68~\r\n* react devtools v4.0.5\r\n* react v16.9\r\n",
        "title": "Devtools: Impossible to debug firefox webextension moz-extension: pages due to strict CSP",
        "labels": "Type: Feature Request",
        "id": 44771
    },
    {
        "body": "**feature**\r\n\r\n**What is the current behavior?**\r\nOn the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: \"1\" (string) or id: 1 (int)). Both string and int are shown without quotes.\r\n\r\n**What is the expected behavior?**\r\nI want to see if the value inside the prop or state is an string or integer by using quotation marks on the value.\r\n`id: \"1\"`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm using version:\r\n4.0.5 (8/19/2019)\r\n\r\nDid this work in previous versions of React?\r\nYes, 3.*",
        "title": "Show property type of value (string,int,etc) on state/props.",
        "labels": "Type: Feature Request",
        "id": 44772
    },
    {
        "body": "Hi, I really like new dev tools (4.0.5), but I would like to request one useful feature.\r\n\r\nIn previous version it was possible to save inspected value (prop/state/context) and its parts as a global variable using context menu->store as global variable, so it can be easily be accessed through console using `$tmp{n}`. In current version this is behaviour was replaced be creating new \"bug\" button which will just print all values in console. Unfortunately it's hard to navigate through this object, because $_ in console will return undefined. And in order to access it you need to expand group, find desired property and open context menu->store as global variable. \r\nIt would be perfect if you combine these 2 approaches so it would be possible to both print values using \"bug\" button and opening context menu directly in react dev tools panel wihtout need of intermediate step. \r\n\r\nThanks! \r\n\r\n",
        "title": "DevTools: Ability to save inspected values as global variable (as it was in previous version)",
        "labels": "Type: Feature Request",
        "id": 44773
    },
    {
        "body": "If I understood correctly, this is the correct repository for devtools v4, right?\r\n\r\nI just noticed that react devtool were updated. I'm missing the \"Highlight Updates\" function.\r\nHow can I activate it?\r\n\r\n![image](https://user-images.githubusercontent.com/12381373/63209674-4ab58f80-c0e4-11e9-8134-40789625c81e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12381373/63209676-543ef780-c0e4-11e9-8128-a73c4b6bf8f7.png)\r\n\r\nVersion: 4.0.2 (8/15/2019)\r\n",
        "title": "Devtools V4: Where is Highlight Updates?",
        "labels": "Type: Feature Request",
        "id": 44774
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug/unexpected behavior.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen an object or array is empty, there's no arrow to expand and see that it's empty, nor is there an `(empty)` indication. Initially, I was concerned that I couldn't expand any object or array from the new React DevTools due to this.\r\n\r\n![Screen Shot 2019-08-16 at 3 11 35 PM](https://user-images.githubusercontent.com/11951801/63195539-7aa75900-c038-11e9-95fe-4754f7d14693.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect to either be able to expand the empty object, or to see `(empty)` next to the non-expandable object.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome version: 76.0.3809.100 (Official Build) (64-bit)\r\nReact Developer Tools Version: 4.0.2 (8/15/2019)\r\n\r\n[Reference discussion on Twitter](https://twitter.com/taniarascia/status/1162441422496325633)\r\n",
        "title": "New React Developer Tools does not clearly indicate empty object or array",
        "labels": "Type: Feature Request",
        "id": 44775
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDevtools used to be able to expand observables created by Mobx. With the new update that is no longer possible.\r\n![image](https://user-images.githubusercontent.com/3083189/63194767-18495b00-c02e-11e9-95d2-1c83edbf2f26.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/embed/clever-blackwell-h0nzb\r\n\r\nCheck the props of the wrappedComponent in devtools. store.things does not expand.\r\n\r\n**What is the expected behavior?**\r\nDevtools should expand Observables as it does any other object.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis only seems to be an issue with Observables created by Mob v4. v5 works as expected.\r\n",
        "title": "New Devtools Cannot Expand Obervables",
        "labels": "Type: Feature Request",
        "id": 44776
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the state or props are formed by Immutable.js objects, react devtools cannot expand it nor copy to temporal variable anymore.\r\n![Screenshot from 2019-08-16 16-18-09](https://user-images.githubusercontent.com/28344917/63174215-c90d2580-c041-11e9-847c-7bbd153399f9.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/withered-cherry-h3dfh\r\n\r\n**What is the expected behavior?**\r\nBe able to inspect the value of the immutable object or at least, copy it into a temporal variable.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6\r\nChrome Version 70.0.3538.77 (Official Build) (64-bit)",
        "title": "New React DevTools can't access immutable.js objects?",
        "labels": "Type: Feature Request",
        "id": 44777
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the expected behavior?**\r\n\r\nPortals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can\u2019t be server-side rendered. And so on.\r\n\r\nThis is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:\r\n\r\n* Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`\r\n* Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)\r\n* Deprecate `ReactDOM.createPortal()`\r\n\r\nNow with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:\r\n\r\n```\r\nfunction App(props) {\r\n  const modal = useRef(null)\r\n  return (\r\n    <div>\r\n      <ModalContext.Provider value={modal}>\r\n        <div>{props.content}</div>\r\n      </ModalContext.Provider>\r\n      <div ref={modal} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Modal(props) {\r\n  const modal = useContext(ModalContext)\r\n  return React.createPortal(\r\n    props.children,\r\n    modal,\r\n  )\r\n}\r\n\r\n// Somewhere in {props.content} tree...\r\nreturn (\r\n  <>\r\n    {visible && (\r\n      <Modal>\r\n        Hello, World!\r\n      </Modal>\r\n    )}\r\n  </>\r\n)\r\n```\r\n\r\nAfter `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:\r\n\r\n```\r\nthis.el = React.createRef(document.createElement('div'))\r\n```\r\n\r\nfor the same behavior.\r\n\r\nAs an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn\u2019t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.",
        "title": "[Feature Request] Finish/normalize Portal API",
        "labels": "Type: Feature Request",
        "id": 44778
    },
    {
        "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nBoth in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.\r\n\r\nWe could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
        "title": "Collapsible Error Dialogs for the Ecosystem",
        "labels": "Type: Feature Request",
        "id": 44779
    },
    {
        "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nWe might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
        "title": "getDerivedStateFromError for Control Flow",
        "labels": "Type: Feature Request",
        "id": 44780
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n![2019-05-29_13-00](https://user-images.githubusercontent.com/33522235/58580030-d3254200-8211-11e9-882d-85da2664a3b2.png)\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools. \r\n**What is the current behavior?**\r\nJust now I can Edit some information with React DevTools in the production environment\r\n\r\n",
        "title": "DevTools in production environment ",
        "labels": "Type: Feature Request",
        "id": 44781
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nCurrently, the options element only allows types number and string. \r\n\r\n**What is the expected behavior?**\r\nAn option should allow for a ReactNode as a child in addition to a number + string. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions.\r\nAll browser types.\r\nTo the best of my knowledge, no.\r\n\r\np.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way. ",
        "title": "Allow ReactNode as a type for the child of <option/>",
        "labels": "Type: Feature Request",
        "id": 44782
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature request\r\n\r\n**What is the current behavior?**\r\n\r\nThe warnings for missing act() warnings around updates only happen in jest. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe should support other test runners/frameworks as well (like jasmine, karma, etc)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.0+",
        "title": "act() should warn in testing frameworks besides jest ",
        "labels": "Type: Feature Request",
        "id": 44783
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nCurrently the recommended way to use hooks involves coupling them with components. By this I mean that components are aware of the hooks they consume and depend on them explicitly.\r\nThis [issue thread on the recompose repo](https://github.com/acdlite/recompose/issues/756) discusses this issue in some detail and how recompose favored keeping components dumb, but wraps them in HOC's to make them smart. Hooks promote baking the smartness right into the component itself.\r\n\r\n**What is the expected behavior?**\r\nReact should offer a way to decouple components from the hooks they consume. I suggest a `withHooks` HOC that maps hooks to props. This will be a familiar model for those who have used redux with react.\r\n\r\n```jsx\r\nconst withHooks = mapHooksToProps => WrappedComponent => {\r\n  return props => {\r\n    let hookProps = mapHooksToProps(props);\r\n    return <WrappedComponent {...hookProps} {...props} />;\r\n  };\r\n};\r\n\r\nconst Counter = props => {\r\n  return (\r\n    <div>\r\n      <div>Counter: {props.counter}</div>\r\n      <button onClick={props.increment}>Increment</button>\r\n      <button onClick={props.decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapHooksToProps = props => {\r\n  let [counter, setCounter] = useState(0);\r\n\r\n  return {\r\n    counter,\r\n    increment: () => setCounter(prev => prev + 1),\r\n    decrement: () => setCounter(prev => prev - 1)\r\n  };\r\n};\r\n\r\nconst EnhancedCounter = withHooks(mapHooksToProps)(Counter);\r\n```\r\n\r\nDemo:\r\nhttps://codesandbox.io/s/ympq0rlv79\r\n\r\nSome reasons why this is nice:\r\n\r\n1) It decouples components from the things that make them smart. Some examples of things that could make dumb components smart include hooks, redux, and good ol' parent components. By mapping hooks to props, we make it very easy to swap a dumb component's hook-powered 'brain' for a new 'brain', say a redux-powered 'brain'.\r\n\r\n2) Not sure if it's a good idea, but i know several people trying to replace redux with hooks in their applications. For these people, migrations from redux to hooks would be dead simple because they could replace `mapStateToProps` and `mapDispatchToProps` with `mapHooksToProps` and wouldn't have to worry about touching the underlying component.\r\n \r\n3) Testing is also easier because we can test the component in isolation without the hooks baked in.\r\n\r\n4) It makes prop overrides possible. In the case of our EnhancedCounter, we could override the counter prop by doing `<EnhancedCounter counter={10} />`. A real world example of hooks making things harder to override includes material-ui's [new styling approach via hooks](https://material-ui.com/css-in-js/basics/#hook-api). Because classes are provided via hook and no longer via props, we would need custom logic to override classes via props with the new hook-based approach:\r\n```jsx\r\nexport default function Hook(props) {\r\n  let classes = useStyles();\r\n  classes = {...classes, ...props.classes};\r\n  return <Button className={classes.root}>Hook</Button>;\r\n}\r\n```\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nFor versions of react >= 16.8",
        "title": "Provide withHooks HOC to decouple hooks and components",
        "labels": "Type: Feature Request",
        "id": 44784
    },
    {
        "body": "some background:\r\n\r\nwhen dealing with inline styles (e.g. radium), SSR and caching of SSR results, you might run into problems because of differences in vendor prefixes. Best tradeof is to render always with all vendor prefixes on the server. But this will lead to style missmatches on hydration. You can use `suppressHydrationWarning`, but then you have to add this property to every element that receives these styles, which is not practical.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nstyle missmatch causes a warning on development. \r\n\r\n**What is the expected behavior?**\r\n\r\nyou can set a global flag to supress style missmatch warnings\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8",
        "title": "allow to disable style hydration missmatch warning",
        "labels": "Type: Feature Request",
        "id": 44785
    },
    {
        "body": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)\r\n\r\nIt's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:\r\n\r\n```js\r\nfunction useNext(value) {\r\n  const valueRef = useRef(value);\r\n  const resolvesRef = useRef([]);\r\n  useEffect(() => {\r\n    if (valueRef.current !== value) {\r\n      for (const resolve of resolvesRef.current) {\r\n        resolve(value);\r\n      }\r\n      resolvesRef.current = [];\r\n      valueRef.current = value;\r\n    }\r\n  }, [value]);\r\n  return () => new Promise(resolve => {\r\n    resolvesRef.current.push(resolve);\r\n  });\r\n}\r\n```\r\n\r\nand use it like so:\r\n\r\n```js\r\nconst nextState = useNext(state);\r\n\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  // get the new state after the action has taken effect\r\n  state = await nextState();\r\n\r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n\r\nThis is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.\r\n\r\nWhat we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as\r\n\r\n```js\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  state = await dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n## EDIT\r\n\r\nThinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:\r\n\r\n```js\r\nconst stateRef = useRef(state);\r\nuseEffect(() => {\r\n  stateRef.current = state;\r\n}, [state]);\r\n\r\nuseEffect(() => {\r\n  fetchStuff();\r\n}, []);\r\n\r\nasync function fetchStuff() {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n\r\n  // can look at current state here too\r\n  if (!stateRef.current.shouldReceiveData) return;\r\n  \r\n  await dispatch({ type: 'RECEIVE_DATA', data });\r\n\r\n  if (!stateRef.current.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```",
        "title": "useReducer's dispatch should return a promise which resolves once its action has been delivered",
        "labels": "Type: Feature Request",
        "id": 44786
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nit's a *feature*.\r\n\r\n**What is the current behavior?**\r\n\r\n[Internal shared libraries of ReactDOM](https://github.com/facebook/react/tree/master/packages/react-dom/src/shared) is not exported.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nn/a\r\n\r\n**What is the expected behavior?**\r\n\r\nIt is great that some shared libraries such as [`isCustomComponent`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/isCustomComponent.js) or [`DOMNamespaces`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/DOMNamespaces.js) are exported from `react-dom` and available externally.\r\n\r\nThey are useful to know what types of HTML tags are regarded to be valid one by React, for example, with static analysis issued at https://github.com/yannickcr/eslint-plugin-react/issues/1752.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "title": "feature request: export of ReactDOM libraries",
        "labels": "Type: Feature Request",
        "id": 44787
    },
    {
        "body": "Proposal: Ensure that all reads from a `ref` use `.current`.\r\n\r\n```js\r\nexport function MyComponent() {\r\n  const isActiveRef = useRef<boolean>(false);\r\n\r\n  // Proposal: this should be a linting violation\r\n  if (isActiveRef) {\r\n    console.log('will always be true');\r\n  }\r\n\r\n  // Reads need to be done from .current\r\n  if (isActiveRef.current) {\r\n    console.log('correct usage');\r\n  }\r\n}\r\n```\r\n\r\nI often find myself doing boolean checks based on the `.current` value of a `ref`. I am paranoid that if I leave the `.current` off then I am creating a bug",
        "title": "useRef eslint rule proposal",
        "labels": "Type: Feature Request",
        "id": 44788
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nthe shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short)\r\n\r\n**What is the expected behavior?**\r\nSee [this enzyme issue](https://github.com/airbnb/enzyme/issues/1938#issuecomment-476137018) for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests. \r\n\r\nIf the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous.\r\n\r\nEnzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll and no it was never supported AFAIK",
        "title": "Add option in shallow renderer to run effects/componentDidUpdate/componentDidMount",
        "labels": "Type: Feature Request",
        "id": 44789
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:\r\n> Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:\r\n\r\n```js\r\nfunction ScrollingList(props) {\r\n  const lengthRef = React.useRef(0);\r\n  const listRef = React.useRef(null);\r\n\r\n  const prevHeight = React.useSnapshot(() => {\r\n    if (lengthRef.current < props.list.length) {\r\n      const list = listRef.current;\r\n      return list.scrollHeight - list.scrollTop;\r\n    }\r\n  }); \r\n\r\n  React.useEffect(() => {\r\n    lengthRef.current = props.list.length;\r\n  }, [props.list.length]);\r\n\r\n  React.useEffect(() => {\r\n    if (prevHeight != null) {\r\n      const list = listRef.current;\r\n      list.scrollTop = list.scrollHeight - prevHeight;\r\n    }\r\n  }, [prevHeight]);\r\n  return (\r\n    <div ref={listRef}>{/* ... */}</div>\r\n  );\r\n}\r\n```\r\n\r\nThis code probably is bug-ridden and not the best use of hooks but you get the idea.\r\n\r\nI\u2019d like to know:\r\n1. If this feature is planned or on the roadmap.\r\n2. What the proposed API will be.\r\n3. If anyone is working on this.\r\n\r\nSorry, if this is being tracked somewhere and I haven\u2019t seen it. I\u2019m planning an intense component which will use `getSnapshotBeforeUpdate` and I\u2019d love some guidance about the future of this lifecycle method.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.0 and later. All browsers and OSes.\r\n\r\n",
        "title": "Hook equivalent for `getSnapshotBeforeUpdate`",
        "labels": "Type: Feature Request",
        "id": 44790
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature / use case\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems currently there is no way to get the order of children from the children themselves with context.\r\n\r\n**What is the expected behavior?**\r\n\r\nI've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing.\r\n\r\nExample 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested:\r\n\r\n```ts\r\nlet BreadcrumbOrder = createContext({ index: -1, total: -1 })\r\n\r\nlet Button = props => {\r\n  let order = useContext(BreadcrumbOrder)\r\n  return <div style={{ borderRight: order.index > total ? '1px solid red' : 'none' }} {...props} />\r\n}\r\n\r\nlet MyView = () => {\r\n  return (\r\n    <BreadcrumbProvider>\r\n      <Button />\r\n      <Button />\r\n      <div><Button /></div>\r\n    </BreadcrumbProvider>\r\n  )\r\n}\r\n```\r\n\r\nWhere MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style.\r\n\r\nThe other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column.\r\n\r\nReally this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case?\r\n\r\nNamely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this.",
        "title": "Using context to pass down mount order to children with concurrent",
        "labels": "Type: Feature Request",
        "id": 44791
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `react-hooks/exhaustive-deps` will currently accept either (and fix neither) of the following:\r\n\r\n```javascript\r\n// Scenario A: Function returned by core hook IS NOT specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), []);\r\n```\r\n\r\n```javascript\r\n// Scenario B: Function returned by core hook IS specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), [setValue]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIf we add the following to our `.eslintrc.js`\r\n\r\n```\r\n// Introduces a `requireCoreFunctions` config option.\r\n'react-hooks/exhaustive-deps': ['error', { requireCoreFunctions: true }]\r\n```\r\nthen the rule should fail in scenario A, and fixing should result in scenario B.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "title": "[eslint-plugin-react-hooks] Add option to require functions from core hooks in dependencies",
        "labels": "Type: Feature Request",
        "id": 44792
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature (need better errors)\r\n\r\n**What is the current behavior?**\r\nConsider the following functional component\r\n```\r\nimport React, { useContext } from \"React\"\r\n\r\nconst myFunctionComponent = props => <div>Hello useContext</div>\r\n```\r\n\r\nThe immediate reaction for most of us (newbies to hooks) to refactor the above code to accomodate `useContext` is as follows\r\n\r\n```\r\nimport React, { useContext } from \"React\"\r\nimport MyContext from \"./MyContext\"\r\n\r\n// React does not throw error\r\nconst { myContextValue } = useContext(MyContext)\r\n\r\nconst myFunctionComponent = props => <div>Hello useContext - {myContextValue}</div>\r\n```\r\n\r\nThe way to actually refactor is to explictly convert the arrow function return expression into a function body and then accomodate `useContext` inside along with a return statement, like this\r\n\r\n```\r\nimport React, { useContext } from \"React\"\r\nimport MyContext from \"./MyContext\"\r\n\r\nconst myFunctionComponent = props => {\r\n const { myContextValue } = useContext(MyContext)\r\n return (<div>Hello useContext - {myContextValue}</div>)\r\n}\r\n```\r\n\r\nNot only, react **does not throw error**, React app actually compiles, while the component in question fails to load with no information. This is very difficult to pin the reason to this specific issue.\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nReact should ideally throw some kind of error, when `useContext` is used outside of function components. This lack of error really bites us for people who are refactoring function components without a return statement.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact `16.8.x` with hooks support\r\n",
        "title": "[useContext] Throw error if 'useContext' is used outside function components",
        "labels": "Type: Feature Request",
        "id": 44793
    },
    {
        "body": "1. Regarding the performance optimization, should we always use React.useMemo in case there is no state hooks inside a function component?\r\n2. If the answer is yes, can we use some eslint rules to make sure everyone do it?",
        "title": "eslint-react-hooks: should we enforce to use React.useMemo if there is no state hooks?",
        "labels": "Type: Feature Request",
        "id": 44794
    },
    {
        "body": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.\r\n\r\nMaybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
        "title": "Can an error boundary prevent React's error logging?",
        "labels": "Type: Feature Request",
        "id": 44795
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nThere is no rule\r\n\r\n**What is the expected behavior?**\r\nWe have some hardcore plugins like `eslint-plugin-lodash-fp`.\r\nWhy not have ESLint hardcore rule allowing default hooks using only inside custom ones?\r\n",
        "title": "[ESLint] Hardcore rule allowing default hooks using only inside custom ones",
        "labels": "Type: Feature Request",
        "id": 44796
    },
    {
        "body": "**Feature**\r\n\r\n**What is the current behavior?**\r\n\r\nWith a UI kit that uses forwardRefs, I get error messages like this:\r\n\r\n![image](https://user-images.githubusercontent.com/12100/53372321-61ceae00-3907-11e9-9d20-190315cc7f06.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would look a lot better if forwardRefs were a bit less obtrusive, and if they picked up the functions displayName rather than just the name of the function they wrap.\r\n\r\nIn our UI Kit we have a pattern like:\r\n\r\n```\r\nconst View = forwardRef(function UIView(){ return <div /> })\r\nView.displayName = 'SomeDisplayName'\r\n```\r\n\r\nFor some reason it's not showing that, just showing the inner one. Further the \"bigness\" of ForwardRef() makes it hard to see visually when scanning. Perhaps something more like this would help:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n    in div (created by ForwardRef(Gloss))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by OnboardMain)\r\n    in div (created by Gloss (ForwardRef))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by SliderPane)\r\n```\r\n\r\nFurther, the `created by` information is often more useful to me, but it's never aligned nicely. Could do something like:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n      in div (created by ForwardRef(Gloss))\r\n      in Gloss (ForwardRef)\r\n    from OnboardMain:\r\n      in Gloss (ForwardRef)\r\n   from Gloss (ForwardRef):\r\n      in div\r\n      in Gloss (ForwardRef)\r\n   from SliderPane:\r\n      in Gloss (ForwardRef)\r\n```\r\n\r\nAll together, if it would pick up displayNames, the stack would be far more readable for me:\r\n\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n      in div (created by Row)\r\n      in View (forwardRef)\r\n    from OnboardMain:\r\n      in Row (forwardRef)\r\n   from Col (forwardRef):\r\n      in div\r\n      in Grid (forwardRef)\r\n   from SliderPane:\r\n      in View (forwardRef)\r\n```\r\n",
        "title": "Collapse forwardRef and other wrappers in React error stacks",
        "labels": "Type: Feature Request",
        "id": 44797
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `useMemo` factory function does not receive any arguments.\r\n\r\n**What is the desired behavior?**\r\n\r\nThe `useMemo` factory function would receive the dependencies as arguments.\r\n\r\n**Why?**\r\n\r\nThis would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too \r\n\r\n**Example of current behavior**\r\n\r\n```jsx\r\nconst Avatar = () => {\r\n  const [src] = useSomeGlobalState([\r\n    state => state.user.avatar.src\r\n  ]);\r\n  return useMemo(() => <img src={src} />, [src])\r\n}\r\n```\r\n\r\n**Example of proposed behavior**\r\n\r\n```jsx\r\nconst Avatar = () => \r\n  useMemo(\r\n    (src) => <img src={src} />,\r\n    useSomeGlobalState([state => state.user.avatar.src])\r\n  );\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.1\r\n",
        "title": "Pass dependencies to `useMemo` callback as arguments",
        "labels": "Type: Feature Request",
        "id": 44798
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn normal rendering, you can memoize a class-based component: https://jsfiddle.net/586ea3cx/\r\n\r\nWith the shallow renderer, it seems like you can't: https://jsfiddle.net/odj217Lv/1/\r\n\r\nThis might be blocking https://github.com/airbnb/enzyme/pull/1914, in which tests are failing with `Cannot call a class as a function`. (it's tough to repro stuff with the shallow renderer)",
        "title": "Shallow renderer does not support React.memo",
        "labels": "Type: Feature Request",
        "id": 44799
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature/Improvement\r\n\r\n**What is the current behavior?**\r\n\r\nIf there is test code that should be wrapped in `act(...)` then the current warning is given:\r\n\r\n```\r\n console.error node_modules/react-dom/cjs/react-dom.development.js:506\r\n    Warning: An update to null inside a test was not wrapped in act(...).\r\n\r\n    When testing, code that causes React state updates should be wrapped into act(...):\r\n\r\n    act(() => {\r\n      /* fire events that update state */\r\n    });\r\n    /* assert on the output */\r\n\r\n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act\r\n```\r\n\r\nWhen upgrading a large code base, this is basically useless.\r\n\r\n**What is the expected behavior?**\r\n\r\nProvide at least the test name if not the line number of code that triggered the warning.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.8.0\r\nreact-dom@16.8.0",
        "title": "Unhelpful warning for `act` for react-dom@16.8",
        "labels": "Type: Feature Request",
        "id": 44800
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nI have an app that's registering event listeners for `window`'s key events (via `useEffect`). Those event listeners are triggering state updates (via `useState`). I think I have found a bug where simultaneous key events occurring in the same frame (whether down or up) will be handled out of order, causing state to becoming out of sync.\r\n\r\nTake the following simple app (https://codesandbox.io/s/1z3v9zrk4j). I've kept this as keyup only for simplicity.\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]);\r\n\r\n  console.log('App', keys);\r\n\r\n  const onKeyUp = function (event) {\r\n    console.log('onKeyUp', event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n  };\r\n\r\n  useEffect(function () {\r\n    console.log('effect', keys);\r\n\r\n    window.addEventListener('keyup', onKeyUp);\r\n\r\n    return function () {\r\n      console.log('removing event listener', keys);\r\n\r\n      window.removeEventListener('keyup', onKeyUp);\r\n    };\r\n  });\r\n\r\n  return <p>{keys.join(', ')}</p>;\r\n}\r\n```\r\n\r\nIf I press down any two keys, e.g. the \"q\" and \"w\" keys, and then release them at precisely the same time, the following happens:\r\n\r\n- The `keyup` event listener for `w` is called, which in turn calls `setKeys` with `['w']`\r\n- `App` is re-rendered with `keys === ['w']`\r\n- The `keyup` event listener for `q` is called, which in turn calls `setKeys` with `['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys === []`\r\n- The effect is run again, the event listener being added with `keys === ['w']`\r\n- `App` is re-rendered with `keys === ['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys ===['w']`\r\n- The effect is run again, the event listener being added with `keys === ['q']`\r\n\r\nThis results in `keys === ['q']`. The render with `w` has been lost.\r\n\r\nWith three keys, only two keys are reliably shown. Four keys - only two are reliably shown.\r\n\r\nIf I add another `useState` call, the first `useState` has no issues - all keys are reliably detected. See https://codesandbox.io/s/0yo51n5wv:\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]); \r\n  const [dummy, setDummy] = useState('foo');\r\n\r\n  console.log(\"rendering App\", keys);\r\n\r\n  const onKeyUp = function(event) {\r\n    console.log(\"onKeyUp event received\", event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n    setDummy('foo');\r\n  };\r\n\r\n  useEffect(function() {\r\n    console.log(\"adding event listener\", keys);\r\n\r\n    window.addEventListener(\"keyup\", onKeyUp);\r\n\r\n    return function() {\r\n      console.log(\"removing event listener\", keys);\r\n\r\n      window.removeEventListener(\"keyup\", onKeyUp);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>Keyups received:</p>\r\n      <p>{keys.join(\", \")}</p>\r\n      <button onClick={() => setKeys([])}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the final state array to contain all keys released, in order. There are a few workarounds for this issue (e.g. passing a function to `setState` to retrieve the current value instead of using the rendered value), but from the documentation it seems that is an escape hatch for use when the effect's callback is not renewed on each state change, and should not be necessary in this case (unless I've misunderstood).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt happens on both versions that support hooks - `16.8.0-alpha.0` and `16.8.0-alpha.1`. This is on Chrome/Safari/Firefox on MacOS Mojave.\r\n",
        "title": "Simultaneous key events in effect handled out of order",
        "labels": "Type: Feature Request",
        "id": 44801
    },
    {
        "body": "if you added if directive to any element for showing the element or not that would be better than making a js expression in my opinion \r\n\r\n**regular way**\r\n```js\r\nconst App = (props) => {reactif={true}\r\n    let name = props.name;\r\n    return (\r\n        <div >\r\n            {name === 'koko' ? <div className=\"yousef\">{name}</div> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))\r\n```\r\n**my way** ( i edited the react file btw and it worked )\r\n```js\r\nconst App = (props) => {\r\n    let name = props.name;\r\n    return (\r\n        <div >\r\n            <div className=\"yousef\" reactif={name === 'koko'}>{name}</div> \r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))\r\n```\r\n**mmm**\r\ni hope you talk that into consideration \r\ni mean less than 1kb will not make difference :\"D\r\n\r\n**React code**\r\n```js\r\nvar RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true,\r\n  reactif: true\r\n};\r\n\r\nif (config != null) {\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n    }\r\n    if (hasValidKey(config)) {\r\n      key = '' + config.key;\r\n    }\r\n    // i added that\r\n    if (config.reactif){\r\n      reactif = config.reactif\r\n      if (reactif === false){\r\n        return null\r\n      } else if (reactif !== true || reactif !== false){\r\n        console.error('reactif expression didn\\'t return bolean value')\r\n      }\r\n    }\r\n\r\n    self = config.__self === undefined ? null : config.__self;\r\n    source = config.__source === undefined ? null : config.__source;\r\n    // Remaining properties are added to a new props object\r\n    for (propName in config) {\r\n      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\r\n        props[propName] = config[propName];\r\n      }\r\n    }\r\n }\r\n```",
        "title": "adding if directive ",
        "labels": "Type: Feature Request",
        "id": 44802
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `ref` attribute passed to a DOM node can be either a callback or a `RefObject`, but not both. Sometimes, that's exactly what's required: for example, a library like [react-pose](https://popmotion.io/pose/api/posed/#posed-usage-create-a-posed-component-existing-components) demands ref forwarding to work with a React Component, but you'd also like to retain a reference to the _same_ parent DOM node within that component itself for a different reason. It's often not possible to nest DOM nodes to achieve a similar thing using two different ref attributes as that breaks layout.\r\n\r\nHere's a link to a naive attempt to achieve this: https://codesandbox.io/s/4jyw3q3v57\r\n\r\nI'm not surprised this doesn't work as there's no reason for the parent ref callback to fire, but I don't know how else to go about it.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe callback provides the component with its own reference to the parent DOM node, whilst also providing it to the parent component via the passed `RefObject`.\r\n",
        "title": "Allow the same DOM node to use both a callback and a RefObject in its ref prop",
        "labels": "Type: Feature Request",
        "id": 44803
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nObjects are not valid as a React child\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nN/A\r\n\r\n**What is the expected behavior?**\r\nI'm trying to build a system that auto-detects if data is used in a React component. To do this, I detect usage during `render()` by using Proxies, which can register all access. This data, in turn, is used to prevent needless re-renders.\r\n\r\nA parent component can pass a Proxy which represents a string, for example, to a child component, which, without knowing it is a Proxy, can use this value in a calculation (e.g. `props.value + 1` or `` `The value is ${props.value}` ``). This can be handled with `proxy[Symbol.toPrimitive]()`, which is called by JS automatically when used in this sort of expression.\r\n\r\nHowever, this doesn't work if the child now passes the proxy directly to React as a child:\r\n```jsx\r\n  return (<span>{this.props.childValue</span>);\r\n```\r\nReact will do a `typeof` on the child, find it is an object, and report `Objects are not valid as a React child`. Unfortunately, `typeof` cannot be spoofed with Proxy, and it will always return `'object'`.\r\n\r\nThe relevant code is found [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189-L204). The alternative could be for React to check if there's a `child[Symbol.tpPrimitive]` and, if so, evaluate it to find the intended value, and to retry with this value as the child.\r\nIt could be as simple as inserting the following code [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189):\r\n```js\r\n  if (typeof Symbol !== 'undefined') {\r\n    const toPrimitive = children[Symbol.toPrimitive];\r\n    if (toPrimitive) {\r\n      const value = toPrimitive('string');\r\n      if (typeof value !== 'object') {\r\n\t\treturn traverseAllChildrenImpl(\r\n\t\t  value,\r\n\t\t  nameSoFar,\r\n\t\t  callback,\r\n\t\t  traverseContext,\r\n\t\t)\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nIt would be great if React would support this use-case. The alternative is for parent components to resolve the value, which would attribute the access to the parent component, instead of the child, where it's really being used. This in turn would cause the parent to be rerendered when only the child is being changed.\r\n\r\nIf the child is aware it may be receiving Proxy objects, it can resolve the value itself. However, the whole point of using Proxies is to automate all the refresh logic (like `shouldComponentUpdate`). Also, not needing to resolve the value would allow the value to propagate through to descendant components which may be wholly unaware of the proxy. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll version, never worked before.",
        "title": "Support Proxy as child",
        "labels": "Type: Feature Request",
        "id": 44804
    },
    {
        "body": "This is more about a bridge between actual DOM Tree and React Tree.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nYou can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.\r\n\r\nThis is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's better to explain it by example\r\n- you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.\r\n- inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.\r\n- you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.\r\n\r\nIt's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.\r\n\r\nProposed solution:\r\n- `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.\r\n- `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.\r\n\r\nCons:\r\n- requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.\r\n- does twice dreadfull things than deprecated `findDomNode`\r\n- usage scope is very narrow.\r\n\r\nPros:\r\n- _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.\r\n\r\nExample using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNever worked",
        "title": "Nested portals should be discoverable",
        "labels": "Type: Feature Request",
        "id": 44805
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIt's a feature. \r\n\r\n**What is the current behavior?**\r\n\r\nReact.Suspense mounts its children with a `display: none` style if a promise is thrown. Once the thrown promise is resolved, React removes the `display: none` style.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe children components have no easy way to know when the `display: none` style is removed by React. This is problematic when one child component needs to read from the DOM layout to correctly display its elements. Most people wait for the `componentDidMount` callback to trigger, but because the element is `display: none`, it can't read any value from the DOM layout.\r\n\r\nThe issue was discovered in https://github.com/mui-org/material-ui/issues/14077. I believe that React should provide a lifecycle so the children components know when they are visible, that it's safe to do layout computations. \r\n\r\nThe best workaround I'm aware of it to use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) but it requires a polyfill on IE 11 and Safari.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion: 16.7.0-alpha.2",
        "title": "React.Suspense provide a lifecycle so components can handle the `display:none` removal",
        "labels": "Type: Feature Request",
        "id": 44806
    },
    {
        "body": "I just spend several hours debugging app blaming everything except me ofc.\r\nI am using this useTheme Hook.\r\n\r\n```ts\r\nimport React from 'react';\r\nimport ThemeContext from '../contexts/ThemeContext';\r\n\r\nconst useTheme = () => {\r\n  const theme = React.useContext(ThemeContext);\r\n  //if (theme == null)\r\n  //  throw Error('useTheme: Please provide ThemeContext value.');\r\n  return theme;\r\n};\r\n\r\nexport default useTheme;\r\n```\r\n\r\nSome styles were light while other dark. Very strange.\r\nThen I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme.\r\nThemeContext had an initial value different than provided.\r\n\r\nWhile it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs.\r\n\r\nTherefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it.\r\n\r\nBecause of DX, React should reconsider default / initial context values. In my humble opinion.\r\n\r\n\r\n",
        "title": "Make it easier to debug when Context uses defaultValue accidentally due to no provider",
        "labels": "Type: Feature Request",
        "id": 44807
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nThe core built-in hooks \u2013 `useRef`, `useMemo`, etc. \u2013 rely on internal React state which is not exposed, namely the current rendering component. This means that these hooks cannot be implemented in user-land. Similar hooks cannot be implemented either.\r\n\r\nI'm proposing adding a built-in hook which would provide information about the current rendering component. This would enable more advanced hooks to be implementable in user-land.\r\n\r\nI have a use case which is a perfect example. I need a hook similar to `useMemo`, but where the computed value is shared across all components of the same type. I\u2019m calling it `useSharedMemo`.\r\n\r\nThe ideal API would look something like this:\r\n\r\n```typescript\r\nconst Component = ({cacheKey}) => {\r\n  const value1 = useSharedMemo(() => /* expensive computation 1 */, [cacheKey]);\r\n  const value2 = useSharedMemo(() => /* expensive computation 2 */, [cacheKey]);\r\n  return <>{value1} {value2}</>;\r\n};\r\n```\r\n\r\nIn the code above, every instance of `Component` would get the same values for `value1` and `value2`, provided `cacheKey` is the same. When `cacheKey` changes, the two values would recompute once and the new values would be returned to all instances as they re-render. (The actual use case in my app is styles that need to update only when the theme changes.)\r\n\r\nI have a [hacky implementation](https://codesandbox.io/s/jplyz2pkr9) of this hook that works, but it requires changing the API to the following:\r\n\r\n```typescript\r\nconst useSharedMemo = createUseSharedMemo();\r\n\r\nconst Component = ({cacheKey}) => {\r\n  const ref = React.useRef();\r\n  const value1 = useSharedMemo(ref, () => /* expensive computation 1 */, [cacheKey]);\r\n  const value2 = useSharedMemo(ref, () => /* expensive computation 2 */, [cacheKey]);\r\n  return <>{value1} {value2}</>;\r\n};\r\n```\r\n\r\nFor this to work, the [implementation](https://codesandbox.io/s/jplyz2pkr9) has to keep a counter of calls that resets every time a component\u2019s render call starts or ends. This would be trivial if there were a way to know which component is currently rendering. Since there is no way, the implementation has to make up for it by requiring a `ref` be passed in. Since it has no information about the type of the current component, it also requires that a `useSharedMemo` \u201cinstance\u201d be created in the component definition\u2019s enclosing scope.\r\n\r\nWorse, the implementation uses `useLayoutEffect` to detect when the render is done, which might break with concurrent mode or with future React changes.\r\n\r\n**What is the expected behavior?**\r\n\r\nIf React provided information about the current rendering component, the implementation of `useSharedMemo` would be much easier and less brittle.\r\n\r\nA possible solution is a hook like the following:\r\n\r\n```typescript\r\nconst [currentType, currentRef] = React.useCurrentComponent();\r\n```\r\n\r\nWith this information, we can implement the ideal API above and we do not have to rely on `useLayoutEffect`:\r\n\r\n```typescript\r\nlet values = new WeakMap();\r\nlet cacheKeys = new WeakMap();\r\nlet lastRef = null;\r\nlet callIndex = 0;\r\n\r\nfunction useSharedMemo(fn, keys) {\r\n  const [currentType, currentRef] = React.useCurrentComponent();\r\n  if (currentRef !== lastRef) {\r\n    callIndex = 0;\r\n  }\r\n  const index = callIndex;\r\n  callIndex++;\r\n  const typeValues = values.get(currentType) || [];\r\n  const typeCacheKeys = cacheKeys.get(currentType) || [];\r\n  if (!typeValues[index] || !compareKeys(keys, typeCacheKeys[index])) {\r\n    typeValues[index] = fn();\r\n    typeCacheKeys[index] = keys;\r\n    values.set(currentType, typeValues);\r\n    cacheKeys.set(currentType, typeCacheKeys);\r\n  }\r\n  return typeValues[index];\r\n}\r\n```\r\n\r\n(Note that I\u2019m treating `currentType` and `currentRef` as opaque values, so for my purposes it doesn\u2019t matter if they are the actual type and an actual ref to the component instance. I imagine having them be accurate would be a more powerful API, but the implementation might require them to be opaque values.)\r\n\r\nP.S. - A common use case that would benefit from `useSharedMemo` is `useCallback`. 99% of the time callbacks are identical across components of the same type. It\u2019s wasteful not to share the cache.\r\n\r\n**Demo**\r\nhttps://codesandbox.io/s/jplyz2pkr9\r\n",
        "title": "[Hooks] Proposal: expose info about current component for custom hooks",
        "labels": "Type: Feature Request",
        "id": 44808
    },
    {
        "body": "I want to report a bug for the hooks plugin.\r\n\r\n**What is the current behavior?**\r\nThere was no error report after running eslint, but the component failed when running in the browser.\r\nFrom the chrome dev console it reported \"Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\" \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.\r\nHere is a link to the github repo:\r\nhttps://github.com/paboulos/react-hooks-eslint\r\n\r\n**What is the expected behavior?**\r\nFollowed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. \r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing window 10 OS and Chrome browser.\r\n1. First ran npx create-react-app Hooks\r\n2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2\r\n3. Installed eslint dev dependencies:\r\n \"babel-eslint\": \"9.0.0\",\r\n    \"babel-loader\": \"8.0.4\",\r\n    \"eslint\": \"5.9.0\",\r\n    \"eslint-config-airbnb\": \"17.1.0\",\r\n    \"eslint-loader\": \"2.1.1\",\r\n    \"eslint-plugin-import\": \"2.14.0\",\r\n    \"eslint-plugin-jsx-a11y\": \"6.1.2\",\r\n    \"eslint-plugin-react\": \"7.11.1\",\r\n    \"eslint-plugin-react-hooks\": \"0.0.0\"\r\n4. Created the .eslintrc.json following the instructions from the Hooks API Doc\r\nThen ran package script lint as follows: \"npm run lint\"\r\nno errors reported.\r\nThen ran package script start as follows: \"npm start\"\r\nThe React component CountHooks calls useState incorrectly and reports error in the browser dev console.",
        "title": "eslint-plugin-react-hooks should report errors inside unnamed functions",
        "labels": "Type: Feature Request",
        "id": 44809
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThere is no way to see if `componentDidMount` was caused by a context change\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```typescript\r\nimport React from 'react';\r\n\r\ninterface ExampleContext {\r\n    param: string;\r\n}\r\n\r\nconst ExampleContext = React.createContext<ExampleContext>({\r\n    param: 'foo',\r\n});\r\n\r\ninterface ExampleState {\r\n    data: any;\r\n}\r\n\r\nclass Example extends React.Component<{}, ExampleState> {\r\n    static contextType = ExampleContext;\r\n    context!: ExampleContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n        };\r\n    }\r\n\r\n    fetchData(param: string): void {\r\n        // whatever\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(this.context.param);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // ???        \r\n    }\r\n}\r\n```\r\n**What is the expected behavior?**\r\nA 4th parameter for `previousContext`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6",
        "title": "calculating context changes in componentDidUpdate",
        "labels": "Type: Feature Request",
        "id": 44810
    },
    {
        "body": "Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls. ",
        "title": "[Scheduler] Add support for delayed scheduling of callbacks.",
        "labels": "Type: Feature Request",
        "id": 44811
    },
    {
        "body": "## Timeline\r\n1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases\r\n2. 16.3 (2018-03-28): `forwardRef` is introduced:\r\n  It can be used in HOCs to avoid using `findDOMNode` on the enhanced component\r\n3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`\r\n4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:\r\n  This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.\r\n5. 16.8 (Q2 2019): stable `React.Concurrent` mode\r\n  \r\n## findDOMNode use cases\r\nIf you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.\r\n### with a planned alternative\r\n- focus handling (React Fire, \"exploratory phase\") \r\n- passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]\r\n\r\n## State of `forwardRef`\r\n`react` has 3.4M downloads/week.\r\n\r\n### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)\r\nA utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version\r\ndoes not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor\r\nissues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.\r\n\r\n### react-docgen (400k downloads/week)\r\nNot recognized as a valid component definition. PR open at [reactjs/react-docgen#311].\r\n\r\n### react-redux (1.4M downloads/week)\r\n`connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given\r\nhowever 3 betas have already been released so it's probably soon.\r\n\r\n### react-router (1.4M downloads/week)\r\n`withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).\r\nHowever no comment about the other components and no major release candidate is published.\r\n\r\n### display name\r\n`React.forwardRef` components are recognized by `react-devtools`. However when wrapped\r\nin a HOC it's very likely that the display name is lost. See [facebook/react#14319]\r\n\r\n### The issue\r\n**Assumptions:**\r\n- you are not in control of your whole component tree i.e. you use components from 3rd party libraries\r\n- you want to use `React.ConcurrentMode`\r\n- Usable includes production and development. It specifically means for development that deprecation warnings in a component\r\n  make that component not usable in development mode because of all the *noise* it adds in those cases.\r\n  *Noise* because it's not actionable if that component is from a 3rd party library.\r\n\r\nIf none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.\r\n\r\nThe mode of a partial tree can only be made more restrictive but not loosened up. If\r\nyou wrap your tree in `React.StrictMode` and use a component from a 3rd party library\r\nthat 3rd party library has to be `React.StrictMode` compliant too. \r\n\r\nThis means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.\r\n\r\nIn addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.\r\n\r\n### Conclusion\r\nRefs are not a viable upgrade path to replace `findDOMNode` yet. \r\nUntil refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.\r\n\r\n## Releated\r\n- [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)\r\n- [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)\r\n- [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)\r\n\r\n[facebook/react#6436]: https://github.com/facebook/react/issues/6436\r\n[facebook/react#13525]: https://github.com/facebook/react/issues/13525\r\n[facebook/react#14319]: https://github.com/facebook/react/issues/14319\r\n[reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311\r\n[ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678\r\n[React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html",
        "title": "findDOMNode deprecation",
        "labels": "Type: Feature Request",
        "id": 44812
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** \r\n\r\nFeature idea\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently there is no hook for dealing with errors in a component's sub-tree.\r\n\r\n**What is the expected behavior?**\r\n\r\nHave a hook that allows for functional components to act as Error Boundaries.\r\n\r\nExample:\r\n\r\n```\r\nfunction myErrorBoundary() {\r\n  const caughtError = useErrorCatching();\r\n  if (caughtError !== null) { return <ErrorHandler error={caughtError} />; }\r\n  return <RegularContent />;\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nn/a",
        "title": "Feature Idea: useError hook",
        "labels": "Type: Feature Request",
        "id": 44813
    },
    {
        "body": "TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nExpose an API to get the display name of every component (in `__DEV__` only).\r\n\r\n**What is the current behavior?**\r\nMost of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` \r\n (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSince components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:\r\n\r\nhttps://codesandbox.io/s/zqj9v50243\r\n\r\n- `react-redux` creates `\"connect(Component)\"`\r\n- `react-router` creates `\"withRouter(undefined)\"`\r\n\r\n**What is the expected behavior?**\r\nThe new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.\r\n\r\nNow there are a couple of solutions to this issue:\r\n1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)\r\n2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932\r\n3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)\r\n4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI guess this started with `forwardRef` in 16.3.\r\n",
        "title": "API for display name on forwardRef, memo and potential future exotic components",
        "labels": "Type: Feature Request",
        "id": 44814
    },
    {
        "body": "See https://github.com/facebook/react/issues/14287#issuecomment-440277999 and https://github.com/facebook/react/pull/14182#issuecomment-440125029. This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API.",
        "title": "Provide a way to pass context to renderToStaticMarkup on the client",
        "labels": "Type: Feature Request",
        "id": 44815
    },
    {
        "body": "Feature request\r\n\r\n**What is the current behavior?**\r\n`react-is` now doesn't have method to check if element is `memo`(like `isForwardRef`).\r\nMaybe there are some reasons why it's not implemented?\r\n",
        "title": "react-is memo",
        "labels": "Type: Feature Request",
        "id": 44816
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIt can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue: https://codesandbox.io/s/v8921j642l\r\n\r\n**What is the expected behavior?**\r\n\r\nA promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAFAIK all version of React that include `lazy`.\r\n",
        "title": "React.lazy does not allow retrying a rejected promise",
        "labels": "Type: Feature Request",
        "id": 44817
    },
    {
        "body": "Cryptic title I can imagine, but I am not aware that something like this would have been mentioned anywhere so far.\r\n\r\nI have a page showing some statistics and it's split into two even panels. The left panel is showing some numbers and contains a form to set necessary filters. The right panel is showing some other details about filtered data. Initially, only filter form is visible, nothing else.\r\n\r\nThe user sets the filter and hits the \"filter\" button to send out a request. There is a requirement to show a text loader in the left panel and the right panel should be showing content loader animation. Too many loaders perhaps? Well, it kinda makes sense in this context :)\r\n\r\nNow my confusion is how to achieve that. Obviously, I don't want each panel to run the same query on its own. I would like to do that once in the upper level. I can surely pass down the `isLoading` prop to both panels. However, I am not too happy about it, because once there will be a fully fledged data fetching relying on the Suspense, it would mean that for such scenarios I will need to fall back to a regular solution. Am I misunderstanding something in here?",
        "title": "Support reporting Suspense loading indicator outside of the suspended tree",
        "labels": "Type: Feature Request",
        "id": 44818
    },
    {
        "body": "# Feature Request\r\n\r\n## Current Behavior\r\n\r\nuseState/useReducers Hook's updater/dispatch functions do not expose a way to execute code _after_ the update has been made.\r\n\r\n## Expected Behavior\r\n\r\nuseState or useReducer Hooks expose some way to locally execute the equivalent of inline useEffect/didUpdate etc. (to allow for overriding default side effect behavior) (e.g. emitEffect(() => ...)).\r\n\r\n## Use Case\r\n\r\nFormik exposes 2 props which control when form validation occurs: `validateOnChange` and `validateOnBlur`. When `validateOnChange` set to `true`, form validation will run whenever `handleChange`, `setFieldValue`, or `setValues` are called (these fns all update form `values`). Similarly, when `validateOnBlur` is `true`, validation will also run whenever `handleBlur`, `setFieldTouched`, and `setTouched` are called (these fns all update the `touched` state of the form). The reason that Formik doesn't centralize orchestrating validation logic into `componentDidUpdate` (i.e. run validation whenever either `this.state.values` or `this.state.touched` changes) is to allow for local overrides in custom input components.\r\n\r\nFor example, often times in a 3rd party input component (e.g. like Airbnb's Rheostat (https://github.com/airbnb/rheostat)) the value and touched state need to update together because there isn't a real \"blur\" event for the component or there isn't a prop for it. With Formik, you get around this by updating the field's value and touched state imperatively but override the validation behavior to only run once. To do this, Formik's current non-hooks API exposes an extra parameter to the `setFieldValue` and `setFieldTouched` methods which allow you to opt out of running validation after the update is made. Internally this looks like:\r\n\r\n```js\r\nsetFieldValue(name, value, shouldValidate = true) {\r\n   this.setState(prevState => setIn(prevState.values, name, value), () => {\r\n      if (this.props.validateOnChange && shouldValidate) {\r\n        this.validateForm(this.state.values)\r\n      }\r\n    })\r\n  }\r\n\r\nsetFieldTouched(name, touch = true, shouldValidate = true) {\r\n   this.setState(prevState => setIn(prevState.touched, name, touch), () => {\r\n      if (this.props.validateOnBlur && shouldValidate) {\r\n        this.validateForm(this.state.values)\r\n      }\r\n    })\r\n  }\r\n```\r\n\r\nIf a callback was supported by either `useReducer`'s `dispatch` or `useState` update fn, Formik could maintain its current API footprint and allow for the following code to work as expected:\r\n\r\n```js\r\nconst CustomRangedInput = (props) => {\r\n  const formik = useFormikContext();\r\n  function handleChangeValue(value) {\r\n    // Set the value\r\n    formik.setFieldValue(props.name, value, false /* avoid normal validation logic */)\r\n    // Mark the field as touched\r\n    formik.setFieldTouched(props.name, true)\r\n  }\r\n\r\n   return <Rheostat\r\n     onValueChange={handleChangeValue}\r\n      min={1}\r\n      max={100}\r\n      values={[1, 100]}\r\n   />;\r\n}\r\n``` \r\n\r\nHowever, with the current hooks API's there is not a way for me to expose this to users, since I have to lift update the validateOnChange/validateOnBlur validation logic to `useEffect`. In my current Formik x Hooks PR, this looks like\r\n\r\n```js\r\n React.useEffect(\r\n    () => {\r\n      if (!!didMount.current && !!validateOnChange && !state.isSubmitting) {\r\n          validateForm(state.values);\r\n      }\r\n    },\r\n    [state.values, validateOnChange, state.isSubmitting]\r\n  );\r\n\r\n React.useEffect(\r\n    () => {\r\n      if (!!didMount.current && !!validateOnBlur && !state.isSubmitting) {\r\n          validateForm(state.values);\r\n      }\r\n    },\r\n    [state.touched, validateOnBlur, state.isSubmitting]\r\n  );\r\n\r\n```\r\n\r\nThis will execute whenever `state.values` or `state.touched` change, which is usually what people want 98% of the time. However, I don't know/see a way to make this compatible with the old API (where you can locally override validation).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.7.0-alpha\r\n",
        "title": "setState/dispatch 2nd arg callback or emitEffect() use case",
        "labels": "Type: Feature Request",
        "id": 44819
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe current synthetic keyboard event does not support the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property.\r\n\r\n**What is the expected behavior?**\r\nThe synthetic keyboard event should pass along the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome ([CanIUse](https://caniuse.com/#feat=keyboardevent-code)) so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added.\r\n\r\nEdit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.\r\n",
        "title": "Synthetic KeyboardEvent should support KeyboardEvent.code",
        "labels": "Type: Feature Request",
        "id": 44820
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature request\r\n\r\n**What is the current behavior?**\r\n\r\nIf you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]'\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/38tz0ym2/\r\n\r\n**What is the expected behavior?**\r\n\r\nThe string returned by the component should be rendered as the elements innerHTML.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0",
        "title": "<option> and <textarea> elements should be able to contain Components that return strings and render their output correctly",
        "labels": "Type: Feature Request",
        "id": 44821
    },
    {
        "body": "Hello,\r\n\r\nI tried testing components that use the cool new hooks API, but `useEffect` doesn't seem to work with the test renderer.\r\n\r\nHere's a small failling Jest test:\r\n\r\n```js\r\nimport React, { useEffect } from \"react\";\r\nimport { create as render } from \"react-test-renderer\";\r\n\r\nit(\"calls effect\", () => {\r\n  return new Promise(resolve => {\r\n    render(<EffectfulComponent effect={resolve} />);\r\n  });\r\n});\r\n\r\nfunction EffectfulComponent({ effect }) {\r\n  useEffect(effect);\r\n\r\n  return null;\r\n}\r\n```\r\n\r\nAnd here's a minimal reproducing repo: https://github.com/skidding/react-test-useeffect\r\n\r\n> Note that other _use_ APIs seemed to work (eg. `useContext`).",
        "title": "Provide a way to trigger useEffect from tests",
        "labels": "Type: Feature Request",
        "id": 44822
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you pass a unknown prop to a DOM element - common when you pass `{...props}` to something that turns out to be a div/span/any other DOM element rather than a composite component - you get a warning like so:\r\n\r\n```Warning: React does not recognize the `propName` prop on a DOM element. ....```\r\n\r\nIf the tree is pretty complicated, especially if you're using HOCs, it can be very hard to find where this prop has been passed and to which DOM element. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe had a quick muck around with react-dom and logging the DOM element that triggers this warning allows you to see the element in the DOM and makes it much easier to work out where the prop is being accidentally passed. You can even use the react dev tools to work out exactly which line the component is defined in the code.\r\n\r\nSimply logging the element is obviously not the most elegant way of showing the user where the mistake is, but would it be possible to do _something_ in order to make it quicker to fix mistaken prop passing like this?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll.",
        "title": "More helpful interaction for \"React does not recognize the 'propName' prop on a DOM Element\"",
        "labels": "Type: Feature Request",
        "id": 44823
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nContext not passed into getDerivedStateFromProps:\r\n\r\n```\r\nstatic getDerivedStateFromProps(props, state, context) {}\r\n```\r\n\r\nJust curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.\r\n\r\nJust curious if there's been any discussion on this.",
        "title": "16.6 contextType + getDerivedStateFromProps",
        "labels": "Type: Feature Request",
        "id": 44824
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is feature request.\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:\r\n\r\n```js\r\nclass App extends Component {\r\n  state = {}\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // do we really need this?\r\n    // the state is derived from error, not props\r\n    if (state.error)\r\n      return remapStateToPreferredStructure(state);\r\n  }\r\n\r\n  render() { /* ... */ }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`getDerivedStateFromError` is expected to receive previous state and have\r\n\r\n```\r\ngetDerivedStateFromError(error, state)\r\n```\r\nsignature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.6.0\r\n",
        "title": "Receive previous state in getDerivedStateFromError",
        "labels": "Type: Feature Request",
        "id": 44825
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nOnly `className` exists right now.\r\n\r\n**What is the expected behavior?**\r\n\r\nI think adding `classList` property for DOM elements would be useful. As far as I understand React Fire will drop support for IE11 but even in IE11, you can add or remove classList from elements.\r\n\r\nAnother idea might be adding support for for array type for `className` (or future `class`, which will make more sense because array). If array is passed, `classList` will be used for DOM elements. Otherwise, `className` is used as usual in the real DOM side.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions. I hope this is added in React Fire.",
        "title": "Support for classList",
        "labels": "Type: Feature Request",
        "id": 44826
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nOften we will use expressions like this:\r\n\r\n`{ !x ? null : <Component title={x.title} /> }`\r\n\r\n**What is the desired behavior?**\r\n\r\nWe would like to have expressive components such as\r\n\r\n```\r\n<When c={x}>\r\n   <Component title={x.title} />\r\n</When>\r\n```\r\n\r\nIn many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.\r\n\r\nThe issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).\r\n\r\nWhat is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nPresumably any version of React.",
        "title": "Conditional Components",
        "labels": "Type: Feature Request",
        "id": 44827
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature.\r\n\r\n**What is the current behavior?**\r\nI am working on writing a custom React renderer (https://github.com/toxicFork/react-three-renderer-fiber) and right now I have to use `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` in order to access stack information for the current frame in order to display warnings for the developer (https://github.com/Methuselah96/react-three-renderer-fiber/blob/react-reconciler/src/core/customRenderer/descriptors/CustomDescriptor.ts#L102).\r\n\r\n**What is the expected behavior?**\r\nI would like to be able to access the stack information for the current frame without worrying for the safety of my employment. Is there a better way for me to be doing this?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.5.2",
        "title": "Accessing ReactDebugCurrentFrame without using __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",
        "labels": "Type: Feature Request",
        "id": 44828
    },
    {
        "body": "I'm trying to use the Profiler server side rendering with `renderToString` but the onRender callbacks are not getting called.\r\n\r\nIs there a way to do it?\r\nI'm using 16.5.1, NODE_ENV === \"development\".\r\n\r\nMy code looks like this, works fine client side:\r\n```javascript\r\nimport React, { unstable_Profiler } from 'react';\r\n\r\nconst profilerCallback = (id, phase, actualTime, baseTime, startTime, commitTime) => {\r\n        console.log(`${id}'s ${phase} phase:`);\r\n        console.log(`Actual time: ${actualTime}`);\r\n        console.log(`Base time: ${baseTime}`);\r\n        console.log(`Start time: ${startTime}`);\r\n        console.log(`Commit time: ${commitTime}`);\r\n};\r\n\r\nconst MyComponent = () => (\r\n    <Profiler id=\"card\" onRender={profilerCallback}>\r\n        ...\r\n    </Profiler>\r\n)\r\n```",
        "title": "Is it possible to use Profiler server side?",
        "labels": "Type: Feature Request",
        "id": 44829
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no good way to get the a list of component parents. The only way to do it is to wrap the rendered component to an error boundary, throw a dummy error and pass `componentStack` to the rendered component without throwing the error again.\r\n\r\n![image](https://user-images.githubusercontent.com/1082083/44995658-cb9b7a00-afac-11e8-83da-6b60f6edb6e6.png)\r\n\r\nUnfortunately the idea of hiding thrown errors was refused (see https://github.com/facebook/react/issues/11098) so this experimental hack isn't useful. \r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like to deterministically identify components at DOM tree and use this data to assign persistent data to it without using any custom identifiers. For example store visibility state for a specific component at window.localStorage. \r\n\r\nRelated to https://github.com/facebook/react/issues/1137\r\n",
        "title": "Make possible to get component stack or at least its hash",
        "labels": "Type: Feature Request",
        "id": 44830
    },
    {
        "body": "This topic originally came up in a `react-devtools` discussion: https://github.com/facebook/react-devtools/issues/1099#issuecomment-414138771.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`.\r\n\r\nDue to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder.\r\n\r\n**What is the expected behavior?**\r\nIt would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode.\r\n\r\nWith this information we could have a \"redux-devtools\"-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode.\r\n\r\nTools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.\r\n\r\n",
        "title": "Cache Provider: Add hooks to read and preload in dev mode",
        "labels": "Type: Feature Request",
        "id": 44831
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDocumentation of SyntheticEvent claims: \"React normalizes events so that they have consistent properties across different browsers.\" https://reactjs.org/docs/events.html#supported-events\r\n\r\nDocumentation of Keyboard Events lists `boolean repeat` as a supported field: https://reactjs.org/docs/events.html#keyboard-events\r\n\r\nIE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nTab to to the only div in this repro and hold down a key:\r\nhttps://jsfiddle.net/acsr4ofu/\r\n\r\nBug: 'repeat!' alert does not appear in IE11\r\n\r\n**What is the expected behavior?**\r\nAn alert dialog showing 'repeat!' should appear in any browser that React supports.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nCurrent version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React.",
        "title": "KeyboardEvent.repeat is not normalized",
        "labels": "Type: Feature Request",
        "id": 44832
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature Request\r\n\r\n**What is the current behavior?**\r\n`testInstance` provides a `props` property, but does not provide a `context` property allowing for context tests.\r\n\r\n**What is the expected behavior?**\r\n`testInstance.context` should return an object containing the instance's current context\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAt least 16.4.1",
        "title": "Provide a `testInstance.context` property to facilitate context testing",
        "labels": "Type: Feature Request",
        "id": 44833
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen an element is cloned with [React.cloneElement](https://reactjs.org/docs/react-api.html#cloneelement), it's possible to add new props or modify existing ones, but not to remove existing props. \r\n\r\n[Relevant code](https://github.com/facebook/react/blob/v16.8.0-alpha.1/packages/react/src/ReactElement.js#L333).\r\n\r\nExample of how it works right now:\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {href: undefined}\r\n```\r\n\r\n**What is the desired behavior?**\r\n\r\nIt would be great to add some way to remove props (passing `undefined` as value?):\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {}\r\n```\r\n\r\nI guess I could use directly `React.createElement` but, AFAIK, I'll have also to worry about special attributes like `key` and `ref`. I'd rather not mess with internals.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI think it has worked this way in all React versions.\r\n\r\n**What's your use case?**\r\n\r\nI am applying a map transformation of elements recursively and I need to remove some virtual props before passing the real elements for React to render.  Console shows `React does not recognize the [unknownProp] prop on a DOM element` for those props, I'd want to avoid that.",
        "title": "React.cloneElement cannot remove existing props",
        "labels": "Type: Feature Request",
        "id": 44834
    },
    {
        "body": "As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:\r\n> Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.\r\n\r\nif used. \r\n\r\nThis incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).\r\n\r\nI believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87). \r\n\r\nI'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use.",
        "title": "Ability to use return value of React.Children.map with React.Children.only",
        "labels": "Type: Feature Request",
        "id": 44835
    },
    {
        "body": "Currently `createPortal` only works within the current renderer.\r\n\r\nThis means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.\r\n\r\nWith this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.\r\n\r\nAt the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like\r\n\r\n```js\r\n<div>\r\n  <Portal to={ReactART}>\r\n    <surface>\r\n      <rect />\r\n    </surface>\r\n  </Portal>\r\n</div>\r\n```\r\n\r\nBut it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?\r\n\r\nWe'll want to figure something out eventually. For now I'm filing this for future reference.",
        "title": "Support cross-renderer portals",
        "labels": "Type: Feature Request",
        "id": 44836
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\n`<Surface>` of canvas mode and `<Surface>` of svg mode cannot be used in a document at the same time.\r\n\r\n**What is the expected behavior?**\r\nTwo more `<Surface>` components with each other modes can be used in a document at the same time.\r\n\r\n\r\nCurrently developers can set only one rending mode globally in react-art, using `setCurrent()` of `art/modes/current` module. So there is no way to use `<Surface>` of canvas mode and `<Surface>` of svg mode in a document together. On the other hand, `art.js` internally used in `react-art` provides a way to use each other modes together as directly importing their corresponding modules.  (e.g. svg.js for svg mode, canvas.js for canvas mode in `art.js` lib). \r\n\r\nI would like to suggest a way to set own rendering mode per instance of `<Surface>` Component by new property `mode`. This feature makes `<Surface>` with canvas mode and `<Surface>` with svg mode to be used together in a document like the following.\r\n\r\n```javascript\r\nconst {\r\n  Surface,\r\n  Group,\r\n  Shape\r\n} = require('react-art');\r\n\r\nclass TestComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Surface mode=\"svg\" width={100} height={100}>\r\n          <Group>\r\n            <Shape width={10} height={10} />\r\n          </Group>\r\n        </Surface>\r\n        <Surface mode=\"canvas\" width={100} height={100}>\r\n          <Group>\r\n            <Shape width={10} height={10} />\r\n          </Group>\r\n        </Surface>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n```\r\n\r\nIf `mode` property is not set, `<Surface>` works as canvas mode for compatibility.\r\n\r\nI have made a PR for this feature to show how to work and use it ([#13249](https://github.com/facebook/react/pull/13249)).\r\nAnd you can check this feature through `art` fixture of my PR.\r\n\r\nFeel free to discuss about this feature.\r\n\r\n\r\n\r\n",
        "title": "Setting rendering mode to <Surface> component of react-art",
        "labels": "Type: Feature Request",
        "id": 44837
    },
    {
        "body": "A DevTools user has requested the following feature (reworded by me):\r\nExpose an ordered table of all component types (names) along with the number of instances currently mounted. This would help identify the most impactful components to examine for memory related optimizations.\r\n\r\nThe Profiler isn't very useful in this scenario because it's too CPU-centric.\r\n\r\ncc @yungsters",
        "title": "Component summary view by type",
        "labels": "Type: Feature Request",
        "id": 44838
    },
    {
        "body": "Some of this might not be possible or might be prohibitively difficult, but this was some user feedback/requests for the scheduling profiler:\r\n* Show lane labels instead of bitmap index\r\n* On hover for a batch of render work highlight update events that were related to that render batch\r\n* Show when tasks are scheduled (in the scheduler, any JavaScript, not just React\r\n* Find-in-page that shows number of results like Chrome and updates as you zoom and scroll\r\n* Show lane(s) state update get associated with in chart tooltip\r\n* Highlight batched updates on hover (hovering one item would update others)",
        "title": "Scheduling profiler feedback",
        "labels": "Type: Feature Request",
        "id": 44839
    },
    {
        "body": "<div>{1n}</div> should render 1. Instead it renders ''.  \r\n\r\nIt looks like 'bigint' just needs adding here: https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ToStringValue.js#L26. \r\n\r\nHappy to raise a PR or take guidance on a better approach.\r\n\r\nReact version: all\r\n\r\n## Steps To Reproduce\r\nLink to code example: https://codepen.io/boyne/pen/vYXJWVr\r\n\r\n\r\n## The current behavior\r\nRenders \"\"\r\n\r\n\r\n## The expected behavior\r\nRenders 1\r\n",
        "title": "Bug: BigInt does not get toString()'d when rendered",
        "labels": "Type: Feature Request",
        "id": 44840
    },
    {
        "body": "react-devtools not working inside react based chrome extensions\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. install react-devtools extension in chrome\r\n2. git clone https://github.com/lxieyang/chrome-extension-boilerplate-react\r\n3. cd into directory\r\n4. yarn install\r\n5. yarn build \r\n6. open chrome extensions page\r\n7. change to developer mode\r\n8. load unpacked, point to the directory build within chrome-extension-boilerplate-react directory\r\n9. click on react dev tools extension\r\n10. The following text is displayed \"This is a restricted browser page. React devtools cannot access this page.\"\r\n11. When inspecting the page, the tabs components and profiler are NOT shown\r\n\r\nLink to code example: https://github.com/lxieyang/chrome-extension-boilerplate-react\r\n\r\n## The current behavior\r\n1. When clicking on the react devtools chrome extension: \"This is a restricted browser page. React devtools cannot access this page.\"\r\n2. Also when inspecting the pages of the chrome extension, the tabs components and profiler are NOT shown\r\n\r\n## The expected behavior\r\n1. When clicking on the react devtools chrome extension: The devtools recognize that the page is using react\r\n2. when inspecting the pages of the chrome extension, the tabs components and profiler are shown and populated",
        "title": "Bug: react-devtools not working inside react based chrome extensions",
        "labels": "Type: Feature Request",
        "id": 44841
    },
    {
        "body": "### Why: \r\n\r\nUser can open the source file in editor/ide by one-click.\r\n\r\nIt' is a useful feature in `vue-devtools`.\r\n\r\n---\r\n\r\n### How: \r\n\r\nAdd a click event on here:\r\n\r\nhttps://github.com/facebook/react/blob/cdfde3ae110844baf068706e7ed3fe97ec15f1d7/packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js#L226-L228\r\n\r\ncall ```fetch(`/__open-in-editor?file=${fileName}:${lineNumber}`)```\r\n\r\nAdd [launch-editor-middleware](https://github.com/yyx990803/launch-editor) to dev-server(or any scaffold handle by himself)\r\n\r\n---\r\n\r\nBefore anyone(maybe me) sends a PR, I want to know how do the react-team thinks about it?",
        "title": "Feature Request(devtools): `launch-editor` for selected component",
        "labels": "Type: Feature Request",
        "id": 44842
    },
    {
        "body": "The `exhaustive-deps` lint rule doesn't require setters from `useState`, dispatch from `useReducer`, and refs from `useRef` in dependencies, because we know for sure those will never change. I'd like to be able to add additional custom hooks to that \"safe list\". I understand this is potentially very dangerous, but we have a handful of hooks that simply wrap `useRef` with some logic. The returned result is essentially just a `useRef` result, so it's perfectly safe to ignore as a dependency.\r\n\r\nI'm imagining something like this in the eslint config:\r\n\r\n```\r\n{\r\n  \"rules\": {\r\n    // ...\r\n    \"react-hooks/exhaustive-deps\": [\"warn\", {\r\n      \"safeHooks\": \"(useRefWrapper|useOtherRefWrapper)\"\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\nWhere `useRefWrapper` might look like so:\r\n\r\n```\r\nconst useRefWrapper = () => {\r\n  const ref = useRef();\r\n  if (ref.current) {\r\n    console.log('hi!');\r\n  }\r\n  return ref;\r\n}\r\n```\r\n\r\nDoes this seem like a reasonable option, assuming the documentation has a clear caveat mentioning the dangers? If so, I'm happy to work on implementation.",
        "title": "Feature suggestion: Allow custom list of hooks to ignore on exhaustive-deps",
        "labels": "Type: Feature Request",
        "id": 44843
    },
    {
        "body": "A few months ago, we added a tooltip to react DevTools Profiler (cc @bvaughn), so that for very small components, without clicking on them it is possible to see an overview of why they are re-rendered.\r\nHowever, still, for a not very big page, there can be tens of re-renders, so it is hard to find the component that you are looking for.\r\n\r\nAn easy solution for this to add some search bar, where the user can type down the name of the component, and find the component. \r\n\r\nIf this is something that you think we care about, I can pick it up and add the search field. \r\n\r\n<img src=\"https://user-images.githubusercontent.com/28848972/97014068-25bf7680-154a-11eb-8ba3-a07dd7a45d45.png\" width=\"250\">\r\n\r\n",
        "title": "Feature Request: Adding filter (search) to react DevTools Profiler",
        "labels": "Type: Feature Request",
        "id": 44844
    },
    {
        "body": "Today, `useLayoutEffect` can be used for synchronous read/writes across the DOM.\r\n\r\n```javascript\r\nuseLayoutEffect(() => {\r\n  // Write\r\n  ref.current.style.transform = \"\"\r\n\r\n  // Read\r\n  const box = ref.current.getBoundingClientRect()\r\n})\r\n```\r\n\r\nFor a single instance of a single component, this works well. But if this code is repeated or reused anywhere in the tree, we trigger  [layout thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing). The severity of the layout thrashing scales linearly with the number of hooks/components featuring either this code or code like it.\r\n\r\nHooks and components are designed to be composable, yet it's this trivial to write one that isn't. \r\n\r\nInstead, what I'd like is a batched version of `useLayoutEffect` that provides `read` and `write` callbacks. These schedule callbacks that will be called:\r\n\r\n1. Synchronously before paint\r\n2. In \"parallel\" in reads/writes/reads etc\r\n3. After all child components in the tree have run `useLayoutEffect` - including those entering the tree (currently these don't mount until after other `useLayoutEffect`s have been called)\r\n\r\nIt could look like this, though I'm more interested in the above specs than actual API:\r\n\r\n```javascript\r\nuseBatchedLayoutEffect((read, write) => {\r\n  write(() =>  {\r\n    ref.current.style.transform = \"\"\r\n  })\r\n\r\n  read(() => {\r\n    const box = ref.current.getBoundingClientRect()\r\n  })\r\n})\r\n```\r\n\r\nThen, adhering the 3 specifications above, these callbacks are executed in order, so all `read`s from across the tree, then all `write`s, then all `read`s etc. There is no upper limit for the number of permitted ping-ponged reads/writes IMO as the amount of layout thrashing you could possibly suffer will never be worse than the single hungriest hook. In my experience I've never needed more than a read/write/read/write.\r\n\r\n## Measurement accuracy\r\n\r\nIn the given example, we're measuring a component after first resetting its `transform` because we want to snapshot its actual bounding box without any transforms applied. But if this component is [nested in itself](https://codesandbox.io/s/dazzling-varahamihira-2qiyw?file=/src/App.js), so both a parent and child are performing the same type of animation, we want to unset all the transforms before measuring any of the elements, otherwise the resulting measurements will be incorrect.\r\n\r\n## What about `requestAnimationFrame`?\r\n\r\nTheoretically it could be possible to implement this ourselves in userland by creating a batcher that executes on the next available frame. Sadly this isn't possible in practise. For whatever browser-internal reason it is necessary to run these reads and writes synchronously to prevent flashes of incorrectly-styled components.\r\n\r\nIf you play with this very simple layout animation implementation by clicking on the red box you'll see it suffers no flashes:\r\n\r\nhttps://codesandbox.io/s/broken-star-cycfz?file=/src/App.js:528-537\r\n\r\nBut if you uncomment the wrapping `requestAnimationFrame` within the `useLayoutEffect` you'll see it does randomly flash with the undesired styles.",
        "title": "Feature request: A useLayoutEffect with read/write batching across a tree",
        "labels": "Type: Feature Request",
        "id": 44845
    },
    {
        "body": "This is regarding the discussion in #17773. \r\n\r\nReact-DOM currently stringifies DOM attribute values  before passing them to `Element.setAttribute(NS)` functions. This might be unnecessary, as these functions implicitly stringify attribute values on their own (WebIDL attributes typed as `DOMString`). It also makes it difficult to enforce [Trusted Types](https://w3c.github.io/webappsec-trusted-types/dist/spec/) in React applications, as the trusted type objects would be stringified before values reach the DOM sinks.\r\n\r\nCurrently there is a `enableTrustedTypesIntegration` feature flag to disable stringification, but it seems like this behavior can be safely removed for modern browsers with no backwards-compatibility problems. Let me explain:\r\n\r\nAttribute stringification was introduced in https://github.com/facebook/react/commit/b0455f46709fca94da0b6126b719d6dd07605e65, at that time to workaround a [**jsdom**](https://github.com/jsdom/jsdom) limitation (jsdom's DOM emulation didn't stringify on its own). **IE 8/9** [have a similar issue](https://github.com/facebook/react/commit/3b94abcb3b2c05fc38406b02a501427e58377c44). If an object is passed to a DOM attribute, its value becomes `[object]`, ignoring any stringification rules defined in objects' `toString` function.\r\n\r\n- Jsdom does not have the issue anymore. Since at least 4.0.0 its `setAttribute` function does stringify the values via its IDL layer ([runkit demo](https://runkit.com/kkotowicz/jsdom-setattribute)).\r\n- React doesn't support IE 8 anymore.\r\n- The issue still exists for IE9 (contrary to https://github.com/facebook/react/issues/11735, my tests confirm that the bug still exists, but one needs to try a standard attribute, like `p.title`, and not one with a custom name).\r\n- All other browsers, even in their old versions (I tested IEs, Firefox, Chrome, Safari, Opera and a few mobile browsers ) correctly stringify.\r\n\r\nI propose to remove the stringification (similar to https://github.com/facebook/react/pull/17774) unless a browser bug is detected. \r\n\r\nThat way there is no spurious stringification, and the code branches with the workaround can be removed once buggy browsers stop being supported. My testing shows that only IE9 is affected. The change would be backwards-compatible. I'll send a PR with the proposed change.",
        "title": "DOM attribute stringification fixes",
        "labels": "Type: Feature Request",
        "id": 44846
    },
    {
        "body": "(Deleted template as this is a suggestion, not a bug.)\r\n\r\nThe dev tools helpfully extracts HOC names and shows them in the components tree. [Example](https://react-devtools-tutorial.now.sh/higher-order-components):\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86582724-03ddbc00-bf7a-11ea-83fb-f9d0a3902e5f.png)\r\n\r\nHowever, it doesn't give the same treatment to components in the profiler:\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86582766-135d0500-bf7a-11ea-8e2a-520597150db6.png)\r\n\r\nIn large trees, it is very confusing to see two components with the same name, so it would be useful to show the HOC name here as well.\r\n\r\nAs a workaround for now, users can click through to the \"components\" tab from the profiler, when a component is selected in the profiler flamegraph, to see this extra information.",
        "title": "Suggestion: show HOC names in profiler",
        "labels": "Type: Feature Request",
        "id": 44847
    },
    {
        "body": "Would this be useful?\r\n\r\n> A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.\r\n\r\nFrom [createSlice](https://redux-toolkit.js.org/api/createSlice).",
        "title": "Feature proposal: Hook equivalent to createSlice from Redux Toolkit?",
        "labels": "Type: Feature Request",
        "id": 44848
    },
    {
        "body": "I notice that the standalone react-devtools use http instead https like `\"<script src=\"http://192.1.2.3:8097\"></script>\"` ([src code](https://github.com/facebook/react/blob/4c7036e807fa18a3e21a5182983c7c0f05c5936e/packages/react-devtools/app.html#L186-L194))\uff0cbut my website is always https, so it will get broken because I cant change it to http if it's in `iframe`(it's diffcult to change the host environment/website protocol).\r\n\r\nI'm not familar with the react-devtools implementations, maybe something cause it can only use http to open the server, happy to hear the details, thanks!\r\n\r\nReact-devtools: 3.6.3\r\n\r\n",
        "title": "Add https support to standalone DevTools",
        "labels": "Type: Feature Request",
        "id": 44849
    },
    {
        "body": "It'd be nice to have a toggle to pause the debugger when warnings fire so you can inspect the stack as it's happening.\r\n\r\n```\r\nconsole.error = function() {\r\n  ...\r\n  if (isBreakOn) {\r\n    debugger;\r\n  }\r\n}\r\n```\r\n\r\nSee https://github.com/facebook/react/pull/19044",
        "title": "[DevTools Feature Request] Break on Warnings",
        "labels": "Type: Feature Request",
        "id": 44850
    },
    {
        "body": "Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in https://github.com/vuejs/vue-devtools/pull/479).\r\n\r\nThe React devtools should have the same feature! It would be useful when debugging for sure.\r\n",
        "title": "Add devtools \"Inspect React component\" to right-click menu",
        "labels": "Type: Feature Request",
        "id": 44851
    },
    {
        "body": "## The current behavior\r\n\r\nThe full value of the `key` is very difficult / impossible to find and use in the interface of the React Devtools.\r\n\r\n![Kapture 2020-04-22 at 11 47 47](https://user-images.githubusercontent.com/1935696/79997715-25222680-84ba-11ea-97ba-51f1679a8c91.gif)\r\n\r\nOnly managed to find it by accident :(\r\n\r\n## The expected behavior\r\n\r\nThe `key` is visible in the props list to the right.\r\n\r\n### Detailed Proposal\r\n\r\nAs mentioned below in https://github.com/facebook/react/issues/18702#issuecomment-617924196\r\n\r\nAdd a light divider and new section in the props panel to the right.\r\n\r\nPotentially also add a question mark that shows an explanation about the fact that things in this section are not really props.\r\n\r\nRef (Original implementation): https://github.com/facebook/react-devtools/pull/328",
        "title": "Improve UX of finding full `key` value",
        "labels": "Type: Feature Request",
        "id": 44852
    },
    {
        "body": "At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`.\r\n\r\nIt works well. So well that several testing frameworks also get their uncaught exception handling triggered.\r\n\r\n**Example with mocha:**\r\n```js\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction MyComponent({ doThrow }) {\r\n    if (doThrow) { throw new Error('I'm bad'); }\r\n    return <div></div>;\r\n}\r\n\r\nit('should throw', function () {\r\n    expect(() => {\r\n        render(<MyComponent doThrow/>);\r\n    }).to.throw();\r\n});\r\n```\r\n**Behavior:**\r\n- When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build).\r\n- When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`.\r\n\r\nThe root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block\u2026 and trips Mocha.js uncaught exception detector.\r\n\r\n*Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.*\r\n\r\n*Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.*\r\n\r\n**Expected behavior:**\r\n- Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.\r\n",
        "title": "Allow opting out of invokeGuardedCallbackDev",
        "labels": "Type: Feature Request",
        "id": 44853
    },
    {
        "body": "## Feature Request\r\n\r\nprovide API on react-dom to convert style object to CSS string. the API could be used to build dynamic CSS easily.\r\n\r\n### Approach 1\r\n\r\n```js\r\nimport {createCSS} from 'react-dom'\r\n\r\nconst inlineStyleString = createCSS({\r\n  overflow: 'hidden', \r\n  display: '-webkit-box',\r\n  WebkitLineClamp: 2,\r\n})\r\n\r\nreturn <style>{`.clamp-text { ${inlineStyleString} }`}</style>\r\n```\r\n\r\n### Approach 2\r\n\r\nAnother approach is to only map the key and value from the original style object, and let user play with it.\r\n\r\n```js\r\nimport {createStyles} from 'react-dom'\r\n\r\n// return a object with key-value pairs of css rules\r\nconst cssStyleObject = createCSS({\r\n  WebkitTransform: 'scale(2)',\r\n})\r\n// return { '-webkit-transform': 'scale(2)'  }\r\n\r\nconst inlineStyleString = Object.keys(cssStyleObject).reduce((serialized, key) => {\r\n  serialized += `${key}: ${cssStyleObject[key]};`\r\n  return serialized\r\n}, '')\r\n\r\nreturn <style>{`.clamp-text { ${inlineStyleString} }`}</style>\r\n```\r\n\r\n\r\n## Why\r\n\r\nSee other react styling library like **radium**, the way to build css is quite similar with react inline style if they need anything aligned with react like browser prefix such as `Webkit` or detect the unit less number for some special rule such as `line-height`, they have to re-implement the logic.\r\n\r\nthe style object in react is quite convenient, but it's can only used for inline style. hope react team could consider to expose it in the react-dom. might not the origin function name, but the same functionality.",
        "title": "Expose API like `createStyles` for converting style object to CSS string",
        "labels": "Type: Feature Request",
        "id": 44854
    },
    {
        "body": "Dan asked me to open up an issue: https://twitter.com/dan_abramov/status/1246883821477339139\r\n\r\nMy proposal is to extend React with a small hook that allows us to mutate nodes without causing render:\r\n\r\n```jsx\r\nimport React, { useMutation }\r\n\r\nfunction A() {\r\n  const [specialRef, set] = useMutation()\r\n\r\n  useEffect(() => {\r\n    // the following would execute sync and without causing render\r\n    // going through the same channel as a regular props update with all\r\n    // the internal interpolation (100 --> \"100px\")\r\n    set({ style: { left: 100 } })\r\n  }, [])\r\n\r\n  return <div ref={specialRef} ... />\r\n```\r\n\r\nThis would make the react eco system essentially cross platform in one strike. It uses the fact that reconcilers know how to handle props, something we don't know in userland unless we cause render to set fresh props, which is not at all optimal for animation or anything frame based. react-dom for instance knows what `margin: 3px` is, react-three-fiber knows what `position: [1,2,3]` is, and so on. These details are defined in the reconciler:\r\n\r\n```jsx\r\n  commitUpdate(instance: any, updatePayload: any, type: string, oldProps: any, newProps: any, fiber: Reconciler.Fiber)\r\n```\r\n\r\nIf libraries could use this knowledge from outside they could deal with any platform. Animation libraries like react-spring or framer-motion could animate everything: dom nodes, react native views, meshes, hardware diodes. We could finally write libraries that are not reliant on platforms.",
        "title": "Provide a renderer-agnostic equivalent of setNativeProps()",
        "labels": "Type: Feature Request",
        "id": 44855
    },
    {
        "body": "This list is pretty awesome:\r\n\r\n<img width=\"390\" alt=\"Screenshot 2020-04-03 at 00 12 08\" src=\"https://user-images.githubusercontent.com/810438/78308234-e0047780-753f-11ea-9d4f-1e2d31e5baa0.png\">\r\n\r\nBut always struggle to guess which component in the owner list I need to jump to.\r\n\r\nWe should make hovering the owner list highlight components, just like the main tree view does.\r\n\r\n@hristo-kanchev, interested?",
        "title": "DevTools: Hovering \"Rendered by\" list should highlight elements",
        "labels": "Type: Feature Request",
        "id": 44856
    },
    {
        "body": "React version: 16.13 and `0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. Goto https://codesandbox.io/s/xenodochial-field-rfdjz\r\n2. Try editing value of `MessageListContext.Provider`\r\n\r\nLink to code example: https://codesandbox.io/s/xenodochial-field-rfdjz\r\n\r\n## The current behavior\r\n\r\nContext from `createContext` can't be edited in the current devtools (provider, consumer, hooks)\r\n\r\n## The expected behavior\r\n\r\nContext value should be editable. I already proposed an implementation for [Provider](https://github.com/facebook/react/pull/18255) and [Consumer](https://github.com/facebook/react/pull/18257).\r\n",
        "title": "Bug: Editing context in react-devtools",
        "labels": "Type: Feature Request",
        "id": 44857
    },
    {
        "body": "Feature request from a DevTools user at Faceook:\r\n> If I mouse over a node in the flame graph if you can highlight it in the view like the inspector that would be really amazing!",
        "title": "Profiler should highlight host components (e.g. DOM elements) on mouseover",
        "labels": "Type: Feature Request",
        "id": 44858
    },
    {
        "body": "**What is the current behavior?**\r\n\r\nAll the components name  in the Component tree are of the same color\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.\r\n",
        "title": "Add colors to component's name ( in Component tree ) for visual feedback about type of Component or Node",
        "labels": "Type: Feature Request",
        "id": 44859
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI have played a bit with Concurrent Mode and the Suspense API.\r\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\r\n\r\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\r\n\r\n**What is the expected behavior?**\r\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \r\nhttps://codesandbox.io/s/cold-monad-ifr29.\r\n\r\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\r\nIn my opinion, this is a bit unpleasant to the eye.\r\n\r\nWouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:\r\n\r\n```jsx\r\n...\r\nfunction ProfilePage({ resource }) {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}\r\n      // If the fallback ever gets rendered,\r\n      // it will be shown for at least 1500 millisec.,\r\n      // even if the promise resolves right after rendering the fallback.\r\n      fallbackMinDurationMs={1500}>\r\n      <ProfileDetails resource={resource} />\r\n      <Suspense fallback={<h1>Loading posts...</h1>}>\r\n        <ProfileTimeline resource={resource} />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n...\r\n```\r\n\r\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\r\n\r\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\r\n\r\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\r\n\r\n```js\r\nfunction maxDelayFallbackPromise({\r\n  promise,\r\n  timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`\r\n  onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)\r\n  fallbackMinDurationMs\r\n} = {}) {\r\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\r\n  const uniqueIdentifier = `promise_value_${Math.random()}`\r\n  return Promise.race([\r\n    promise,\r\n    timeout(timeoutMs).then(() => uniqueIdentifier)\r\n  ]).then(value => {\r\n    if (value === uniqueIdentifier) {\r\n      onFallback()\r\n      return minDelayPromise(promise, fallbackMinDurationMs)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nWhere `timeout` and `minDelayPromise` are:\r\n\r\n```js\r\nfunction timeout(delayMs) {\r\n  return new Promise(resolve => setTimeout(resolve, delayMs))\r\n}\r\n\r\nfunction minDelayPromise(promise, minDelay) {\r\n  return Promise.all([\r\n    promise,\r\n    timeout(minDelay)\r\n  ]).then(([value]) => {\r\n    return value\r\n  })\r\n}\r\n```\r\n\r\nThis could also apply to the `isPending` flag of `useTransition`...\r\n\r\nDo you think such a feature could improve the UX in such cases?\r\n",
        "title": "Possibility to set min duration of Suspense fallback",
        "labels": "Type: Feature Request",
        "id": 44860
    },
    {
        "body": "Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.\r\n\r\nTo reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode.",
        "title": "Hotkey for \"Select an element in the page to inspect it\" in Chrome extension",
        "labels": "Type: Feature Request",
        "id": 44861
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature I suppose.\r\n\r\n**What is the current behavior?**\r\nSuspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).\r\n\r\n**What is the expected behavior?**\r\nIt would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.\r\n",
        "title": "Adding visible state to Suspense Fallback component to enhance CSS transitions.",
        "labels": "Type: Feature Request",
        "id": 44862
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\nRight now babel plugin emits globals: https://github.com/facebook/react/issues/16604\r\n\r\n```js\r\nwindow.$RefreshReg$ = () => {};\r\nwindow.$RefreshSig$ = () => type => type;\r\n```\r\n\r\nIt would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation:\r\n\r\n```js\r\nimport runtime from 'react-refresh/runtime'\r\nruntime.injectIntoGlobalHook(window)\r\n\r\nSystem.constructor.prototype.createContext = function (url) {\r\n  return {\r\n    url,\r\n    $RefreshSig$: runtime.createSignatureFunctionForTransform,\r\n    $RefreshReg$: (type, id) => {\r\n      id = url + ' ' + id\r\n      runtime.register(type, id)\r\n    }\r\n  };\r\n};\r\n```\r\n\r\nIf you don't mind I could create PR with changes to react-refresh/babel next week.\r\n\r\nenvironment:\r\n```js\r\n{\r\n    \"systemjs\": \"^6.1.4\",\r\n    \"react\": \"^16.11.0\",\r\n    \"react-dom\": \"^16.11.0\",\r\n    \"react-refresh\": \"^0.6.0\"\r\n }\r\n```",
        "title": "react-refresh: add options to override $RefreshReg$ and $RefreshSig$ for better System.js integration",
        "labels": "Type: Feature Request",
        "id": 44863
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nSo for whatever reason, terser/minification causes a bug where one of my components is undefined during render. What I get is the standard production mode minified error.\r\n\r\nFor some reason this time, I can't seem to do *any* of the following:\r\n\r\n1. See any stack information for the component (React just says \"something somewhere is undefined\")\r\n2. Set a breakpoint on the error point (for some reason with webpack + devtool sourcemap, chrome isn't letting me do a mid-line breakpoint at any place above the error)\r\n3. Disable Reacts error catching temporarily so I can pause on the actual error\r\n4. Use a development version of React with any ease but with the prod settings (I tried turning off both process.env.NODE_ENV checks but then you get an error `It is not supported to run the profiling version of a renderer (for example, react-dom/profiling) without also replacing the scheduler/tracing)`\r\n\r\nA big upgrade here would be to fix all of these (except 2, which is either a Webpack or Chrome bug). Can we get better stacks in production mode? That's the ideal. That with number 3 would be the most helpful: a query like `?disableNiceErrors=true` that prevents React from catching/re-throwing the error later would make it so much easier.\r\n\r\nAs it is now, it's incredibly painful to debug (already an hour into it and without the breakpoints working on minified React it's hard to really even figure out where besides manual code commenting).\r\n\r\nEdit: A fifth would be source maps for react itself in production bundles which may work.",
        "title": "Make it easier to debug (undefined components) in production",
        "labels": "Type: Feature Request",
        "id": 44864
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n**What is the current behavior?**\r\ntrigger by press enter button\r\n**What is the expected behavior?**\r\ntrigger by out of focus or pressing enter button\r\n",
        "title": "Apply props/state/hooks edits on blur",
        "labels": "Type: Feature Request",
        "id": 44865
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n**What is the current behavior?**\r\nit\u2018s hard for me to find a component in the profiler tab\r\n**What is the expected behavior?**\r\nadd a search function,just like components tab\r\n\r\n",
        "title": "Add \"search\" functionality to Profiler graphs",
        "labels": "Type: Feature Request",
        "id": 44866
    },
    {
        "body": "I'd like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/65933573-35b06980-e3cf-11e9-8245-e5bedac5c552.png)\r\n\r\nThis can be accomplished today by adding a new prop and changing the prop, but it's more work than I want to do.\r\n\r\nThis would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that's tied to a \"forceRender\" function:\r\n\r\n```jsx\r\nfunction useForceRerender() {\r\n  const [, set] = React.useState()\r\n  return React.useCallback(() => set({}), [])\r\n}\r\n\r\nfunction FilterComponent() {\r\n  const forceRerender = useForceRerender()\r\n \r\n  return (\r\n    <>\r\n      <button onClick={forceRerender}>force rerender</button>\r\n      {/* more JSX */}\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\nWould be cool to have this built-in :)",
        "title": "React DevTools force re-render button",
        "labels": "Type: Feature Request",
        "id": 44867
    },
    {
        "body": "Hey guys, great job with the new devtools \ud83d\udcaf perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers. \r\n\r\n**What is the current behavior?**\r\n- Copying data to clipboard stringifies all key-value pairs of an object\r\n- When the keys' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array\r\n\r\nThis is what was copied:\r\n<img width=\"369\" alt=\"Screen Shot 2019-09-27 at 12 24 19\" src=\"https://user-images.githubusercontent.com/30755017/65767498-f4496100-e125-11e9-8f8b-3faa4516d0c2.png\">\r\n\r\nThis is a pasted version in VSCode:\r\n<img width=\"399\" alt=\"Screen Shot 2019-09-27 at 12 24 48\" src=\"https://user-images.githubusercontent.com/30755017/65767486-ee538000-e125-11e9-9886-7dcd165c19db.png\">\r\n\r\n**What is the desired behavior?**\r\n- When I click on \"Copy to clipboard\" in react-devtools, my copied object's data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format\r\n- The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools)\r\n<img width=\"311\" alt=\"Screen Shot 2019-09-27 at 12 29 11\" src=\"https://user-images.githubusercontent.com/30755017/65767365-99176e80-e125-11e9-98d3-98fd9c4889f9.png\">\r\n\r\n",
        "title": "react-devtools: tiny feature request (copy to clipboard related)",
        "labels": "Type: Feature Request",
        "id": 44868
    },
    {
        "body": "I wonder whether is it in the plan to do the inverse of hiding components that match the filters, which is \"show only components where match the filters\"?\r\n\r\nI am currently doing a negative lookahead regex filter to achieve the behavior: https://twitter.com/lihautan/status/1174239606612647941. \r\n\r\nI am willing to work on it if this is a good feature to have.",
        "title": "DevTools: \"Show only components where...\" instead of just \"Hide components where\"",
        "labels": "Type: Feature Request",
        "id": 44869
    },
    {
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n[as demonstrated here, \"Why did this render?\"](https://github.com/facebook/react/issues/16437#issuecomment-524892514) does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects.\r\n\r\n**What is the expected behavior?**\r\nThe \"why did this render?\" shows a collapsible tree with the \"leaf\" value that changed inside the prop object displayed.\r\n\r\nA couple use cases this would benefit:\r\nIn some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you'd like to avoid storing the individual object items as separate prop variables such that you don't need to redefine them together as a dict later on, but changes are due to a single element in the dict that you'd like visibility on in react devTools.\r\n\r\nIn rarer cases, it is unavoidable having props that aren't nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNew feature never before released in React DevTools. I am using `16.8.6`\r\n",
        "title": "Enhance React DevTools \"Why did this render?\" for values nested in prop objects",
        "labels": "Type: Feature Request",
        "id": 44870
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* feature request\r\n* Original issue is: https://github.com/facebook/react-devtools/issues/922\r\n   * There are more details.\r\n* Mozilla's Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1573027\r\n\r\n**What is the current behavior?**\r\n\r\nThe react-devtools toolbar button does not light up and clicking on it says \"This page does not appear to be using react\". This is probably since extensions are not allowed to inject scripts into other extensions' pages.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe react-devtools toolbar button should light up and the addon should be able to debug the page\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is still reproducible\r\n\r\n* Firefox v68~\r\n* react devtools v4.0.5\r\n* react v16.9\r\n",
        "title": "Devtools: Impossible to debug firefox webextension moz-extension: pages due to strict CSP",
        "labels": "Type: Feature Request",
        "id": 44871
    },
    {
        "body": "**feature**\r\n\r\n**What is the current behavior?**\r\nOn the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: \"1\" (string) or id: 1 (int)). Both string and int are shown without quotes.\r\n\r\n**What is the expected behavior?**\r\nI want to see if the value inside the prop or state is an string or integer by using quotation marks on the value.\r\n`id: \"1\"`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm using version:\r\n4.0.5 (8/19/2019)\r\n\r\nDid this work in previous versions of React?\r\nYes, 3.*",
        "title": "Show property type of value (string,int,etc) on state/props.",
        "labels": "Type: Feature Request",
        "id": 44872
    },
    {
        "body": "Hi, I really like new dev tools (4.0.5), but I would like to request one useful feature.\r\n\r\nIn previous version it was possible to save inspected value (prop/state/context) and its parts as a global variable using context menu->store as global variable, so it can be easily be accessed through console using `$tmp{n}`. In current version this is behaviour was replaced be creating new \"bug\" button which will just print all values in console. Unfortunately it's hard to navigate through this object, because $_ in console will return undefined. And in order to access it you need to expand group, find desired property and open context menu->store as global variable. \r\nIt would be perfect if you combine these 2 approaches so it would be possible to both print values using \"bug\" button and opening context menu directly in react dev tools panel wihtout need of intermediate step. \r\n\r\nThanks! \r\n\r\n",
        "title": "DevTools: Ability to save inspected values as global variable (as it was in previous version)",
        "labels": "Type: Feature Request",
        "id": 44873
    },
    {
        "body": "If I understood correctly, this is the correct repository for devtools v4, right?\r\n\r\nI just noticed that react devtool were updated. I'm missing the \"Highlight Updates\" function.\r\nHow can I activate it?\r\n\r\n![image](https://user-images.githubusercontent.com/12381373/63209674-4ab58f80-c0e4-11e9-8134-40789625c81e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12381373/63209676-543ef780-c0e4-11e9-8128-a73c4b6bf8f7.png)\r\n\r\nVersion: 4.0.2 (8/15/2019)\r\n",
        "title": "Devtools V4: Where is Highlight Updates?",
        "labels": "Type: Feature Request",
        "id": 44874
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug/unexpected behavior.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen an object or array is empty, there's no arrow to expand and see that it's empty, nor is there an `(empty)` indication. Initially, I was concerned that I couldn't expand any object or array from the new React DevTools due to this.\r\n\r\n![Screen Shot 2019-08-16 at 3 11 35 PM](https://user-images.githubusercontent.com/11951801/63195539-7aa75900-c038-11e9-95fe-4754f7d14693.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect to either be able to expand the empty object, or to see `(empty)` next to the non-expandable object.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome version: 76.0.3809.100 (Official Build) (64-bit)\r\nReact Developer Tools Version: 4.0.2 (8/15/2019)\r\n\r\n[Reference discussion on Twitter](https://twitter.com/taniarascia/status/1162441422496325633)\r\n",
        "title": "New React Developer Tools does not clearly indicate empty object or array",
        "labels": "Type: Feature Request",
        "id": 44875
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDevtools used to be able to expand observables created by Mobx. With the new update that is no longer possible.\r\n![image](https://user-images.githubusercontent.com/3083189/63194767-18495b00-c02e-11e9-95d2-1c83edbf2f26.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/embed/clever-blackwell-h0nzb\r\n\r\nCheck the props of the wrappedComponent in devtools. store.things does not expand.\r\n\r\n**What is the expected behavior?**\r\nDevtools should expand Observables as it does any other object.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis only seems to be an issue with Observables created by Mob v4. v5 works as expected.\r\n",
        "title": "New Devtools Cannot Expand Obervables",
        "labels": "Type: Feature Request",
        "id": 44876
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the state or props are formed by Immutable.js objects, react devtools cannot expand it nor copy to temporal variable anymore.\r\n![Screenshot from 2019-08-16 16-18-09](https://user-images.githubusercontent.com/28344917/63174215-c90d2580-c041-11e9-847c-7bbd153399f9.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/withered-cherry-h3dfh\r\n\r\n**What is the expected behavior?**\r\nBe able to inspect the value of the immutable object or at least, copy it into a temporal variable.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6\r\nChrome Version 70.0.3538.77 (Official Build) (64-bit)",
        "title": "New React DevTools can't access immutable.js objects?",
        "labels": "Type: Feature Request",
        "id": 44877
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the expected behavior?**\r\n\r\nPortals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can\u2019t be server-side rendered. And so on.\r\n\r\nThis is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:\r\n\r\n* Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`\r\n* Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)\r\n* Deprecate `ReactDOM.createPortal()`\r\n\r\nNow with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:\r\n\r\n```\r\nfunction App(props) {\r\n  const modal = useRef(null)\r\n  return (\r\n    <div>\r\n      <ModalContext.Provider value={modal}>\r\n        <div>{props.content}</div>\r\n      </ModalContext.Provider>\r\n      <div ref={modal} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Modal(props) {\r\n  const modal = useContext(ModalContext)\r\n  return React.createPortal(\r\n    props.children,\r\n    modal,\r\n  )\r\n}\r\n\r\n// Somewhere in {props.content} tree...\r\nreturn (\r\n  <>\r\n    {visible && (\r\n      <Modal>\r\n        Hello, World!\r\n      </Modal>\r\n    )}\r\n  </>\r\n)\r\n```\r\n\r\nAfter `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:\r\n\r\n```\r\nthis.el = React.createRef(document.createElement('div'))\r\n```\r\n\r\nfor the same behavior.\r\n\r\nAs an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn\u2019t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.",
        "title": "[Feature Request] Finish/normalize Portal API",
        "labels": "Type: Feature Request",
        "id": 44878
    },
    {
        "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nBoth in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.\r\n\r\nWe could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
        "title": "Collapsible Error Dialogs for the Ecosystem",
        "labels": "Type: Feature Request",
        "id": 44879
    },
    {
        "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nWe might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
        "title": "getDerivedStateFromError for Control Flow",
        "labels": "Type: Feature Request",
        "id": 44880
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n![2019-05-29_13-00](https://user-images.githubusercontent.com/33522235/58580030-d3254200-8211-11e9-882d-85da2664a3b2.png)\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools. \r\n**What is the current behavior?**\r\nJust now I can Edit some information with React DevTools in the production environment\r\n\r\n",
        "title": "DevTools in production environment ",
        "labels": "Type: Feature Request",
        "id": 44881
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nCurrently, the options element only allows types number and string. \r\n\r\n**What is the expected behavior?**\r\nAn option should allow for a ReactNode as a child in addition to a number + string. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions.\r\nAll browser types.\r\nTo the best of my knowledge, no.\r\n\r\np.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way. ",
        "title": "Allow ReactNode as a type for the child of <option/>",
        "labels": "Type: Feature Request",
        "id": 44882
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature request\r\n\r\n**What is the current behavior?**\r\n\r\nThe warnings for missing act() warnings around updates only happen in jest. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe should support other test runners/frameworks as well (like jasmine, karma, etc)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.0+",
        "title": "act() should warn in testing frameworks besides jest ",
        "labels": "Type: Feature Request",
        "id": 44883
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nCurrently the recommended way to use hooks involves coupling them with components. By this I mean that components are aware of the hooks they consume and depend on them explicitly.\r\nThis [issue thread on the recompose repo](https://github.com/acdlite/recompose/issues/756) discusses this issue in some detail and how recompose favored keeping components dumb, but wraps them in HOC's to make them smart. Hooks promote baking the smartness right into the component itself.\r\n\r\n**What is the expected behavior?**\r\nReact should offer a way to decouple components from the hooks they consume. I suggest a `withHooks` HOC that maps hooks to props. This will be a familiar model for those who have used redux with react.\r\n\r\n```jsx\r\nconst withHooks = mapHooksToProps => WrappedComponent => {\r\n  return props => {\r\n    let hookProps = mapHooksToProps(props);\r\n    return <WrappedComponent {...hookProps} {...props} />;\r\n  };\r\n};\r\n\r\nconst Counter = props => {\r\n  return (\r\n    <div>\r\n      <div>Counter: {props.counter}</div>\r\n      <button onClick={props.increment}>Increment</button>\r\n      <button onClick={props.decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapHooksToProps = props => {\r\n  let [counter, setCounter] = useState(0);\r\n\r\n  return {\r\n    counter,\r\n    increment: () => setCounter(prev => prev + 1),\r\n    decrement: () => setCounter(prev => prev - 1)\r\n  };\r\n};\r\n\r\nconst EnhancedCounter = withHooks(mapHooksToProps)(Counter);\r\n```\r\n\r\nDemo:\r\nhttps://codesandbox.io/s/ympq0rlv79\r\n\r\nSome reasons why this is nice:\r\n\r\n1) It decouples components from the things that make them smart. Some examples of things that could make dumb components smart include hooks, redux, and good ol' parent components. By mapping hooks to props, we make it very easy to swap a dumb component's hook-powered 'brain' for a new 'brain', say a redux-powered 'brain'.\r\n\r\n2) Not sure if it's a good idea, but i know several people trying to replace redux with hooks in their applications. For these people, migrations from redux to hooks would be dead simple because they could replace `mapStateToProps` and `mapDispatchToProps` with `mapHooksToProps` and wouldn't have to worry about touching the underlying component.\r\n \r\n3) Testing is also easier because we can test the component in isolation without the hooks baked in.\r\n\r\n4) It makes prop overrides possible. In the case of our EnhancedCounter, we could override the counter prop by doing `<EnhancedCounter counter={10} />`. A real world example of hooks making things harder to override includes material-ui's [new styling approach via hooks](https://material-ui.com/css-in-js/basics/#hook-api). Because classes are provided via hook and no longer via props, we would need custom logic to override classes via props with the new hook-based approach:\r\n```jsx\r\nexport default function Hook(props) {\r\n  let classes = useStyles();\r\n  classes = {...classes, ...props.classes};\r\n  return <Button className={classes.root}>Hook</Button>;\r\n}\r\n```\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nFor versions of react >= 16.8",
        "title": "Provide withHooks HOC to decouple hooks and components",
        "labels": "Type: Feature Request",
        "id": 44884
    },
    {
        "body": "some background:\r\n\r\nwhen dealing with inline styles (e.g. radium), SSR and caching of SSR results, you might run into problems because of differences in vendor prefixes. Best tradeof is to render always with all vendor prefixes on the server. But this will lead to style missmatches on hydration. You can use `suppressHydrationWarning`, but then you have to add this property to every element that receives these styles, which is not practical.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nstyle missmatch causes a warning on development. \r\n\r\n**What is the expected behavior?**\r\n\r\nyou can set a global flag to supress style missmatch warnings\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8",
        "title": "allow to disable style hydration missmatch warning",
        "labels": "Type: Feature Request",
        "id": 44885
    },
    {
        "body": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)\r\n\r\nIt's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:\r\n\r\n```js\r\nfunction useNext(value) {\r\n  const valueRef = useRef(value);\r\n  const resolvesRef = useRef([]);\r\n  useEffect(() => {\r\n    if (valueRef.current !== value) {\r\n      for (const resolve of resolvesRef.current) {\r\n        resolve(value);\r\n      }\r\n      resolvesRef.current = [];\r\n      valueRef.current = value;\r\n    }\r\n  }, [value]);\r\n  return () => new Promise(resolve => {\r\n    resolvesRef.current.push(resolve);\r\n  });\r\n}\r\n```\r\n\r\nand use it like so:\r\n\r\n```js\r\nconst nextState = useNext(state);\r\n\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  // get the new state after the action has taken effect\r\n  state = await nextState();\r\n\r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n\r\nThis is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.\r\n\r\nWhat we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as\r\n\r\n```js\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  state = await dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n## EDIT\r\n\r\nThinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:\r\n\r\n```js\r\nconst stateRef = useRef(state);\r\nuseEffect(() => {\r\n  stateRef.current = state;\r\n}, [state]);\r\n\r\nuseEffect(() => {\r\n  fetchStuff();\r\n}, []);\r\n\r\nasync function fetchStuff() {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n\r\n  // can look at current state here too\r\n  if (!stateRef.current.shouldReceiveData) return;\r\n  \r\n  await dispatch({ type: 'RECEIVE_DATA', data });\r\n\r\n  if (!stateRef.current.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```",
        "title": "useReducer's dispatch should return a promise which resolves once its action has been delivered",
        "labels": "Type: Feature Request",
        "id": 44886
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nit's a *feature*.\r\n\r\n**What is the current behavior?**\r\n\r\n[Internal shared libraries of ReactDOM](https://github.com/facebook/react/tree/master/packages/react-dom/src/shared) is not exported.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nn/a\r\n\r\n**What is the expected behavior?**\r\n\r\nIt is great that some shared libraries such as [`isCustomComponent`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/isCustomComponent.js) or [`DOMNamespaces`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/DOMNamespaces.js) are exported from `react-dom` and available externally.\r\n\r\nThey are useful to know what types of HTML tags are regarded to be valid one by React, for example, with static analysis issued at https://github.com/yannickcr/eslint-plugin-react/issues/1752.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "title": "feature request: export of ReactDOM libraries",
        "labels": "Type: Feature Request",
        "id": 44887
    },
    {
        "body": "Proposal: Ensure that all reads from a `ref` use `.current`.\r\n\r\n```js\r\nexport function MyComponent() {\r\n  const isActiveRef = useRef<boolean>(false);\r\n\r\n  // Proposal: this should be a linting violation\r\n  if (isActiveRef) {\r\n    console.log('will always be true');\r\n  }\r\n\r\n  // Reads need to be done from .current\r\n  if (isActiveRef.current) {\r\n    console.log('correct usage');\r\n  }\r\n}\r\n```\r\n\r\nI often find myself doing boolean checks based on the `.current` value of a `ref`. I am paranoid that if I leave the `.current` off then I am creating a bug",
        "title": "useRef eslint rule proposal",
        "labels": "Type: Feature Request",
        "id": 44888
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nthe shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short)\r\n\r\n**What is the expected behavior?**\r\nSee [this enzyme issue](https://github.com/airbnb/enzyme/issues/1938#issuecomment-476137018) for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests. \r\n\r\nIf the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous.\r\n\r\nEnzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll and no it was never supported AFAIK",
        "title": "Add option in shallow renderer to run effects/componentDidUpdate/componentDidMount",
        "labels": "Type: Feature Request",
        "id": 44889
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:\r\n> Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:\r\n\r\n```js\r\nfunction ScrollingList(props) {\r\n  const lengthRef = React.useRef(0);\r\n  const listRef = React.useRef(null);\r\n\r\n  const prevHeight = React.useSnapshot(() => {\r\n    if (lengthRef.current < props.list.length) {\r\n      const list = listRef.current;\r\n      return list.scrollHeight - list.scrollTop;\r\n    }\r\n  }); \r\n\r\n  React.useEffect(() => {\r\n    lengthRef.current = props.list.length;\r\n  }, [props.list.length]);\r\n\r\n  React.useEffect(() => {\r\n    if (prevHeight != null) {\r\n      const list = listRef.current;\r\n      list.scrollTop = list.scrollHeight - prevHeight;\r\n    }\r\n  }, [prevHeight]);\r\n  return (\r\n    <div ref={listRef}>{/* ... */}</div>\r\n  );\r\n}\r\n```\r\n\r\nThis code probably is bug-ridden and not the best use of hooks but you get the idea.\r\n\r\nI\u2019d like to know:\r\n1. If this feature is planned or on the roadmap.\r\n2. What the proposed API will be.\r\n3. If anyone is working on this.\r\n\r\nSorry, if this is being tracked somewhere and I haven\u2019t seen it. I\u2019m planning an intense component which will use `getSnapshotBeforeUpdate` and I\u2019d love some guidance about the future of this lifecycle method.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.0 and later. All browsers and OSes.\r\n\r\n",
        "title": "Hook equivalent for `getSnapshotBeforeUpdate`",
        "labels": "Type: Feature Request",
        "id": 44890
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature / use case\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems currently there is no way to get the order of children from the children themselves with context.\r\n\r\n**What is the expected behavior?**\r\n\r\nI've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing.\r\n\r\nExample 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested:\r\n\r\n```ts\r\nlet BreadcrumbOrder = createContext({ index: -1, total: -1 })\r\n\r\nlet Button = props => {\r\n  let order = useContext(BreadcrumbOrder)\r\n  return <div style={{ borderRight: order.index > total ? '1px solid red' : 'none' }} {...props} />\r\n}\r\n\r\nlet MyView = () => {\r\n  return (\r\n    <BreadcrumbProvider>\r\n      <Button />\r\n      <Button />\r\n      <div><Button /></div>\r\n    </BreadcrumbProvider>\r\n  )\r\n}\r\n```\r\n\r\nWhere MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style.\r\n\r\nThe other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column.\r\n\r\nReally this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case?\r\n\r\nNamely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this.",
        "title": "Using context to pass down mount order to children with concurrent",
        "labels": "Type: Feature Request",
        "id": 44891
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `react-hooks/exhaustive-deps` will currently accept either (and fix neither) of the following:\r\n\r\n```javascript\r\n// Scenario A: Function returned by core hook IS NOT specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), []);\r\n```\r\n\r\n```javascript\r\n// Scenario B: Function returned by core hook IS specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), [setValue]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIf we add the following to our `.eslintrc.js`\r\n\r\n```\r\n// Introduces a `requireCoreFunctions` config option.\r\n'react-hooks/exhaustive-deps': ['error', { requireCoreFunctions: true }]\r\n```\r\nthen the rule should fail in scenario A, and fixing should result in scenario B.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "title": "[eslint-plugin-react-hooks] Add option to require functions from core hooks in dependencies",
        "labels": "Type: Feature Request",
        "id": 44892
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature (need better errors)\r\n\r\n**What is the current behavior?**\r\nConsider the following functional component\r\n```\r\nimport React, { useContext } from \"React\"\r\n\r\nconst myFunctionComponent = props => <div>Hello useContext</div>\r\n```\r\n\r\nThe immediate reaction for most of us (newbies to hooks) to refactor the above code to accomodate `useContext` is as follows\r\n\r\n```\r\nimport React, { useContext } from \"React\"\r\nimport MyContext from \"./MyContext\"\r\n\r\n// React does not throw error\r\nconst { myContextValue } = useContext(MyContext)\r\n\r\nconst myFunctionComponent = props => <div>Hello useContext - {myContextValue}</div>\r\n```\r\n\r\nThe way to actually refactor is to explictly convert the arrow function return expression into a function body and then accomodate `useContext` inside along with a return statement, like this\r\n\r\n```\r\nimport React, { useContext } from \"React\"\r\nimport MyContext from \"./MyContext\"\r\n\r\nconst myFunctionComponent = props => {\r\n const { myContextValue } = useContext(MyContext)\r\n return (<div>Hello useContext - {myContextValue}</div>)\r\n}\r\n```\r\n\r\nNot only, react **does not throw error**, React app actually compiles, while the component in question fails to load with no information. This is very difficult to pin the reason to this specific issue.\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nReact should ideally throw some kind of error, when `useContext` is used outside of function components. This lack of error really bites us for people who are refactoring function components without a return statement.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact `16.8.x` with hooks support\r\n",
        "title": "[useContext] Throw error if 'useContext' is used outside function components",
        "labels": "Type: Feature Request",
        "id": 44893
    },
    {
        "body": "1. Regarding the performance optimization, should we always use React.useMemo in case there is no state hooks inside a function component?\r\n2. If the answer is yes, can we use some eslint rules to make sure everyone do it?",
        "title": "eslint-react-hooks: should we enforce to use React.useMemo if there is no state hooks?",
        "labels": "Type: Feature Request",
        "id": 44894
    },
    {
        "body": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.\r\n\r\nMaybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
        "title": "Can an error boundary prevent React's error logging?",
        "labels": "Type: Feature Request",
        "id": 44895
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nThere is no rule\r\n\r\n**What is the expected behavior?**\r\nWe have some hardcore plugins like `eslint-plugin-lodash-fp`.\r\nWhy not have ESLint hardcore rule allowing default hooks using only inside custom ones?\r\n",
        "title": "[ESLint] Hardcore rule allowing default hooks using only inside custom ones",
        "labels": "Type: Feature Request",
        "id": 44896
    },
    {
        "body": "**Feature**\r\n\r\n**What is the current behavior?**\r\n\r\nWith a UI kit that uses forwardRefs, I get error messages like this:\r\n\r\n![image](https://user-images.githubusercontent.com/12100/53372321-61ceae00-3907-11e9-9d20-190315cc7f06.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would look a lot better if forwardRefs were a bit less obtrusive, and if they picked up the functions displayName rather than just the name of the function they wrap.\r\n\r\nIn our UI Kit we have a pattern like:\r\n\r\n```\r\nconst View = forwardRef(function UIView(){ return <div /> })\r\nView.displayName = 'SomeDisplayName'\r\n```\r\n\r\nFor some reason it's not showing that, just showing the inner one. Further the \"bigness\" of ForwardRef() makes it hard to see visually when scanning. Perhaps something more like this would help:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n    in div (created by ForwardRef(Gloss))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by OnboardMain)\r\n    in div (created by Gloss (ForwardRef))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by SliderPane)\r\n```\r\n\r\nFurther, the `created by` information is often more useful to me, but it's never aligned nicely. Could do something like:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n      in div (created by ForwardRef(Gloss))\r\n      in Gloss (ForwardRef)\r\n    from OnboardMain:\r\n      in Gloss (ForwardRef)\r\n   from Gloss (ForwardRef):\r\n      in div\r\n      in Gloss (ForwardRef)\r\n   from SliderPane:\r\n      in Gloss (ForwardRef)\r\n```\r\n\r\nAll together, if it would pick up displayNames, the stack would be far more readable for me:\r\n\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n      in div (created by Row)\r\n      in View (forwardRef)\r\n    from OnboardMain:\r\n      in Row (forwardRef)\r\n   from Col (forwardRef):\r\n      in div\r\n      in Grid (forwardRef)\r\n   from SliderPane:\r\n      in View (forwardRef)\r\n```\r\n",
        "title": "Collapse forwardRef and other wrappers in React error stacks",
        "labels": "Type: Feature Request",
        "id": 44897
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `useMemo` factory function does not receive any arguments.\r\n\r\n**What is the desired behavior?**\r\n\r\nThe `useMemo` factory function would receive the dependencies as arguments.\r\n\r\n**Why?**\r\n\r\nThis would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too \r\n\r\n**Example of current behavior**\r\n\r\n```jsx\r\nconst Avatar = () => {\r\n  const [src] = useSomeGlobalState([\r\n    state => state.user.avatar.src\r\n  ]);\r\n  return useMemo(() => <img src={src} />, [src])\r\n}\r\n```\r\n\r\n**Example of proposed behavior**\r\n\r\n```jsx\r\nconst Avatar = () => \r\n  useMemo(\r\n    (src) => <img src={src} />,\r\n    useSomeGlobalState([state => state.user.avatar.src])\r\n  );\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.1\r\n",
        "title": "Pass dependencies to `useMemo` callback as arguments",
        "labels": "Type: Feature Request",
        "id": 44898
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn normal rendering, you can memoize a class-based component: https://jsfiddle.net/586ea3cx/\r\n\r\nWith the shallow renderer, it seems like you can't: https://jsfiddle.net/odj217Lv/1/\r\n\r\nThis might be blocking https://github.com/airbnb/enzyme/pull/1914, in which tests are failing with `Cannot call a class as a function`. (it's tough to repro stuff with the shallow renderer)",
        "title": "Shallow renderer does not support React.memo",
        "labels": "Type: Feature Request",
        "id": 44899
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature/Improvement\r\n\r\n**What is the current behavior?**\r\n\r\nIf there is test code that should be wrapped in `act(...)` then the current warning is given:\r\n\r\n```\r\n console.error node_modules/react-dom/cjs/react-dom.development.js:506\r\n    Warning: An update to null inside a test was not wrapped in act(...).\r\n\r\n    When testing, code that causes React state updates should be wrapped into act(...):\r\n\r\n    act(() => {\r\n      /* fire events that update state */\r\n    });\r\n    /* assert on the output */\r\n\r\n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act\r\n```\r\n\r\nWhen upgrading a large code base, this is basically useless.\r\n\r\n**What is the expected behavior?**\r\n\r\nProvide at least the test name if not the line number of code that triggered the warning.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.8.0\r\nreact-dom@16.8.0",
        "title": "Unhelpful warning for `act` for react-dom@16.8",
        "labels": "Type: Feature Request",
        "id": 44900
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nI have an app that's registering event listeners for `window`'s key events (via `useEffect`). Those event listeners are triggering state updates (via `useState`). I think I have found a bug where simultaneous key events occurring in the same frame (whether down or up) will be handled out of order, causing state to becoming out of sync.\r\n\r\nTake the following simple app (https://codesandbox.io/s/1z3v9zrk4j). I've kept this as keyup only for simplicity.\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]);\r\n\r\n  console.log('App', keys);\r\n\r\n  const onKeyUp = function (event) {\r\n    console.log('onKeyUp', event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n  };\r\n\r\n  useEffect(function () {\r\n    console.log('effect', keys);\r\n\r\n    window.addEventListener('keyup', onKeyUp);\r\n\r\n    return function () {\r\n      console.log('removing event listener', keys);\r\n\r\n      window.removeEventListener('keyup', onKeyUp);\r\n    };\r\n  });\r\n\r\n  return <p>{keys.join(', ')}</p>;\r\n}\r\n```\r\n\r\nIf I press down any two keys, e.g. the \"q\" and \"w\" keys, and then release them at precisely the same time, the following happens:\r\n\r\n- The `keyup` event listener for `w` is called, which in turn calls `setKeys` with `['w']`\r\n- `App` is re-rendered with `keys === ['w']`\r\n- The `keyup` event listener for `q` is called, which in turn calls `setKeys` with `['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys === []`\r\n- The effect is run again, the event listener being added with `keys === ['w']`\r\n- `App` is re-rendered with `keys === ['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys ===['w']`\r\n- The effect is run again, the event listener being added with `keys === ['q']`\r\n\r\nThis results in `keys === ['q']`. The render with `w` has been lost.\r\n\r\nWith three keys, only two keys are reliably shown. Four keys - only two are reliably shown.\r\n\r\nIf I add another `useState` call, the first `useState` has no issues - all keys are reliably detected. See https://codesandbox.io/s/0yo51n5wv:\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]); \r\n  const [dummy, setDummy] = useState('foo');\r\n\r\n  console.log(\"rendering App\", keys);\r\n\r\n  const onKeyUp = function(event) {\r\n    console.log(\"onKeyUp event received\", event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n    setDummy('foo');\r\n  };\r\n\r\n  useEffect(function() {\r\n    console.log(\"adding event listener\", keys);\r\n\r\n    window.addEventListener(\"keyup\", onKeyUp);\r\n\r\n    return function() {\r\n      console.log(\"removing event listener\", keys);\r\n\r\n      window.removeEventListener(\"keyup\", onKeyUp);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>Keyups received:</p>\r\n      <p>{keys.join(\", \")}</p>\r\n      <button onClick={() => setKeys([])}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the final state array to contain all keys released, in order. There are a few workarounds for this issue (e.g. passing a function to `setState` to retrieve the current value instead of using the rendered value), but from the documentation it seems that is an escape hatch for use when the effect's callback is not renewed on each state change, and should not be necessary in this case (unless I've misunderstood).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt happens on both versions that support hooks - `16.8.0-alpha.0` and `16.8.0-alpha.1`. This is on Chrome/Safari/Firefox on MacOS Mojave.\r\n",
        "title": "Simultaneous key events in effect handled out of order",
        "labels": "Type: Feature Request",
        "id": 44901
    },
    {
        "body": "if you added if directive to any element for showing the element or not that would be better than making a js expression in my opinion \r\n\r\n**regular way**\r\n```js\r\nconst App = (props) => {reactif={true}\r\n    let name = props.name;\r\n    return (\r\n        <div >\r\n            {name === 'koko' ? <div className=\"yousef\">{name}</div> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))\r\n```\r\n**my way** ( i edited the react file btw and it worked )\r\n```js\r\nconst App = (props) => {\r\n    let name = props.name;\r\n    return (\r\n        <div >\r\n            <div className=\"yousef\" reactif={name === 'koko'}>{name}</div> \r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))\r\n```\r\n**mmm**\r\ni hope you talk that into consideration \r\ni mean less than 1kb will not make difference :\"D\r\n\r\n**React code**\r\n```js\r\nvar RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true,\r\n  reactif: true\r\n};\r\n\r\nif (config != null) {\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n    }\r\n    if (hasValidKey(config)) {\r\n      key = '' + config.key;\r\n    }\r\n    // i added that\r\n    if (config.reactif){\r\n      reactif = config.reactif\r\n      if (reactif === false){\r\n        return null\r\n      } else if (reactif !== true || reactif !== false){\r\n        console.error('reactif expression didn\\'t return bolean value')\r\n      }\r\n    }\r\n\r\n    self = config.__self === undefined ? null : config.__self;\r\n    source = config.__source === undefined ? null : config.__source;\r\n    // Remaining properties are added to a new props object\r\n    for (propName in config) {\r\n      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\r\n        props[propName] = config[propName];\r\n      }\r\n    }\r\n }\r\n```",
        "title": "adding if directive ",
        "labels": "Type: Feature Request",
        "id": 44902
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `ref` attribute passed to a DOM node can be either a callback or a `RefObject`, but not both. Sometimes, that's exactly what's required: for example, a library like [react-pose](https://popmotion.io/pose/api/posed/#posed-usage-create-a-posed-component-existing-components) demands ref forwarding to work with a React Component, but you'd also like to retain a reference to the _same_ parent DOM node within that component itself for a different reason. It's often not possible to nest DOM nodes to achieve a similar thing using two different ref attributes as that breaks layout.\r\n\r\nHere's a link to a naive attempt to achieve this: https://codesandbox.io/s/4jyw3q3v57\r\n\r\nI'm not surprised this doesn't work as there's no reason for the parent ref callback to fire, but I don't know how else to go about it.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe callback provides the component with its own reference to the parent DOM node, whilst also providing it to the parent component via the passed `RefObject`.\r\n",
        "title": "Allow the same DOM node to use both a callback and a RefObject in its ref prop",
        "labels": "Type: Feature Request",
        "id": 44903
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nObjects are not valid as a React child\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nN/A\r\n\r\n**What is the expected behavior?**\r\nI'm trying to build a system that auto-detects if data is used in a React component. To do this, I detect usage during `render()` by using Proxies, which can register all access. This data, in turn, is used to prevent needless re-renders.\r\n\r\nA parent component can pass a Proxy which represents a string, for example, to a child component, which, without knowing it is a Proxy, can use this value in a calculation (e.g. `props.value + 1` or `` `The value is ${props.value}` ``). This can be handled with `proxy[Symbol.toPrimitive]()`, which is called by JS automatically when used in this sort of expression.\r\n\r\nHowever, this doesn't work if the child now passes the proxy directly to React as a child:\r\n```jsx\r\n  return (<span>{this.props.childValue</span>);\r\n```\r\nReact will do a `typeof` on the child, find it is an object, and report `Objects are not valid as a React child`. Unfortunately, `typeof` cannot be spoofed with Proxy, and it will always return `'object'`.\r\n\r\nThe relevant code is found [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189-L204). The alternative could be for React to check if there's a `child[Symbol.tpPrimitive]` and, if so, evaluate it to find the intended value, and to retry with this value as the child.\r\nIt could be as simple as inserting the following code [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189):\r\n```js\r\n  if (typeof Symbol !== 'undefined') {\r\n    const toPrimitive = children[Symbol.toPrimitive];\r\n    if (toPrimitive) {\r\n      const value = toPrimitive('string');\r\n      if (typeof value !== 'object') {\r\n\t\treturn traverseAllChildrenImpl(\r\n\t\t  value,\r\n\t\t  nameSoFar,\r\n\t\t  callback,\r\n\t\t  traverseContext,\r\n\t\t)\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nIt would be great if React would support this use-case. The alternative is for parent components to resolve the value, which would attribute the access to the parent component, instead of the child, where it's really being used. This in turn would cause the parent to be rerendered when only the child is being changed.\r\n\r\nIf the child is aware it may be receiving Proxy objects, it can resolve the value itself. However, the whole point of using Proxies is to automate all the refresh logic (like `shouldComponentUpdate`). Also, not needing to resolve the value would allow the value to propagate through to descendant components which may be wholly unaware of the proxy. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll version, never worked before.",
        "title": "Support Proxy as child",
        "labels": "Type: Feature Request",
        "id": 44904
    },
    {
        "body": "This is more about a bridge between actual DOM Tree and React Tree.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nYou can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.\r\n\r\nThis is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's better to explain it by example\r\n- you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.\r\n- inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.\r\n- you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.\r\n\r\nIt's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.\r\n\r\nProposed solution:\r\n- `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.\r\n- `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.\r\n\r\nCons:\r\n- requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.\r\n- does twice dreadfull things than deprecated `findDomNode`\r\n- usage scope is very narrow.\r\n\r\nPros:\r\n- _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.\r\n\r\nExample using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNever worked",
        "title": "Nested portals should be discoverable",
        "labels": "Type: Feature Request",
        "id": 44905
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIt's a feature. \r\n\r\n**What is the current behavior?**\r\n\r\nReact.Suspense mounts its children with a `display: none` style if a promise is thrown. Once the thrown promise is resolved, React removes the `display: none` style.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe children components have no easy way to know when the `display: none` style is removed by React. This is problematic when one child component needs to read from the DOM layout to correctly display its elements. Most people wait for the `componentDidMount` callback to trigger, but because the element is `display: none`, it can't read any value from the DOM layout.\r\n\r\nThe issue was discovered in https://github.com/mui-org/material-ui/issues/14077. I believe that React should provide a lifecycle so the children components know when they are visible, that it's safe to do layout computations. \r\n\r\nThe best workaround I'm aware of it to use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) but it requires a polyfill on IE 11 and Safari.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion: 16.7.0-alpha.2",
        "title": "React.Suspense provide a lifecycle so components can handle the `display:none` removal",
        "labels": "Type: Feature Request",
        "id": 44906
    },
    {
        "body": "I just spend several hours debugging app blaming everything except me ofc.\r\nI am using this useTheme Hook.\r\n\r\n```ts\r\nimport React from 'react';\r\nimport ThemeContext from '../contexts/ThemeContext';\r\n\r\nconst useTheme = () => {\r\n  const theme = React.useContext(ThemeContext);\r\n  //if (theme == null)\r\n  //  throw Error('useTheme: Please provide ThemeContext value.');\r\n  return theme;\r\n};\r\n\r\nexport default useTheme;\r\n```\r\n\r\nSome styles were light while other dark. Very strange.\r\nThen I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme.\r\nThemeContext had an initial value different than provided.\r\n\r\nWhile it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs.\r\n\r\nTherefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it.\r\n\r\nBecause of DX, React should reconsider default / initial context values. In my humble opinion.\r\n\r\n\r\n",
        "title": "Make it easier to debug when Context uses defaultValue accidentally due to no provider",
        "labels": "Type: Feature Request",
        "id": 44907
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nThe core built-in hooks \u2013 `useRef`, `useMemo`, etc. \u2013 rely on internal React state which is not exposed, namely the current rendering component. This means that these hooks cannot be implemented in user-land. Similar hooks cannot be implemented either.\r\n\r\nI'm proposing adding a built-in hook which would provide information about the current rendering component. This would enable more advanced hooks to be implementable in user-land.\r\n\r\nI have a use case which is a perfect example. I need a hook similar to `useMemo`, but where the computed value is shared across all components of the same type. I\u2019m calling it `useSharedMemo`.\r\n\r\nThe ideal API would look something like this:\r\n\r\n```typescript\r\nconst Component = ({cacheKey}) => {\r\n  const value1 = useSharedMemo(() => /* expensive computation 1 */, [cacheKey]);\r\n  const value2 = useSharedMemo(() => /* expensive computation 2 */, [cacheKey]);\r\n  return <>{value1} {value2}</>;\r\n};\r\n```\r\n\r\nIn the code above, every instance of `Component` would get the same values for `value1` and `value2`, provided `cacheKey` is the same. When `cacheKey` changes, the two values would recompute once and the new values would be returned to all instances as they re-render. (The actual use case in my app is styles that need to update only when the theme changes.)\r\n\r\nI have a [hacky implementation](https://codesandbox.io/s/jplyz2pkr9) of this hook that works, but it requires changing the API to the following:\r\n\r\n```typescript\r\nconst useSharedMemo = createUseSharedMemo();\r\n\r\nconst Component = ({cacheKey}) => {\r\n  const ref = React.useRef();\r\n  const value1 = useSharedMemo(ref, () => /* expensive computation 1 */, [cacheKey]);\r\n  const value2 = useSharedMemo(ref, () => /* expensive computation 2 */, [cacheKey]);\r\n  return <>{value1} {value2}</>;\r\n};\r\n```\r\n\r\nFor this to work, the [implementation](https://codesandbox.io/s/jplyz2pkr9) has to keep a counter of calls that resets every time a component\u2019s render call starts or ends. This would be trivial if there were a way to know which component is currently rendering. Since there is no way, the implementation has to make up for it by requiring a `ref` be passed in. Since it has no information about the type of the current component, it also requires that a `useSharedMemo` \u201cinstance\u201d be created in the component definition\u2019s enclosing scope.\r\n\r\nWorse, the implementation uses `useLayoutEffect` to detect when the render is done, which might break with concurrent mode or with future React changes.\r\n\r\n**What is the expected behavior?**\r\n\r\nIf React provided information about the current rendering component, the implementation of `useSharedMemo` would be much easier and less brittle.\r\n\r\nA possible solution is a hook like the following:\r\n\r\n```typescript\r\nconst [currentType, currentRef] = React.useCurrentComponent();\r\n```\r\n\r\nWith this information, we can implement the ideal API above and we do not have to rely on `useLayoutEffect`:\r\n\r\n```typescript\r\nlet values = new WeakMap();\r\nlet cacheKeys = new WeakMap();\r\nlet lastRef = null;\r\nlet callIndex = 0;\r\n\r\nfunction useSharedMemo(fn, keys) {\r\n  const [currentType, currentRef] = React.useCurrentComponent();\r\n  if (currentRef !== lastRef) {\r\n    callIndex = 0;\r\n  }\r\n  const index = callIndex;\r\n  callIndex++;\r\n  const typeValues = values.get(currentType) || [];\r\n  const typeCacheKeys = cacheKeys.get(currentType) || [];\r\n  if (!typeValues[index] || !compareKeys(keys, typeCacheKeys[index])) {\r\n    typeValues[index] = fn();\r\n    typeCacheKeys[index] = keys;\r\n    values.set(currentType, typeValues);\r\n    cacheKeys.set(currentType, typeCacheKeys);\r\n  }\r\n  return typeValues[index];\r\n}\r\n```\r\n\r\n(Note that I\u2019m treating `currentType` and `currentRef` as opaque values, so for my purposes it doesn\u2019t matter if they are the actual type and an actual ref to the component instance. I imagine having them be accurate would be a more powerful API, but the implementation might require them to be opaque values.)\r\n\r\nP.S. - A common use case that would benefit from `useSharedMemo` is `useCallback`. 99% of the time callbacks are identical across components of the same type. It\u2019s wasteful not to share the cache.\r\n\r\n**Demo**\r\nhttps://codesandbox.io/s/jplyz2pkr9\r\n",
        "title": "[Hooks] Proposal: expose info about current component for custom hooks",
        "labels": "Type: Feature Request",
        "id": 44908
    },
    {
        "body": "I want to report a bug for the hooks plugin.\r\n\r\n**What is the current behavior?**\r\nThere was no error report after running eslint, but the component failed when running in the browser.\r\nFrom the chrome dev console it reported \"Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\" \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.\r\nHere is a link to the github repo:\r\nhttps://github.com/paboulos/react-hooks-eslint\r\n\r\n**What is the expected behavior?**\r\nFollowed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. \r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing window 10 OS and Chrome browser.\r\n1. First ran npx create-react-app Hooks\r\n2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2\r\n3. Installed eslint dev dependencies:\r\n \"babel-eslint\": \"9.0.0\",\r\n    \"babel-loader\": \"8.0.4\",\r\n    \"eslint\": \"5.9.0\",\r\n    \"eslint-config-airbnb\": \"17.1.0\",\r\n    \"eslint-loader\": \"2.1.1\",\r\n    \"eslint-plugin-import\": \"2.14.0\",\r\n    \"eslint-plugin-jsx-a11y\": \"6.1.2\",\r\n    \"eslint-plugin-react\": \"7.11.1\",\r\n    \"eslint-plugin-react-hooks\": \"0.0.0\"\r\n4. Created the .eslintrc.json following the instructions from the Hooks API Doc\r\nThen ran package script lint as follows: \"npm run lint\"\r\nno errors reported.\r\nThen ran package script start as follows: \"npm start\"\r\nThe React component CountHooks calls useState incorrectly and reports error in the browser dev console.",
        "title": "eslint-plugin-react-hooks should report errors inside unnamed functions",
        "labels": "Type: Feature Request",
        "id": 44909
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThere is no way to see if `componentDidMount` was caused by a context change\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```typescript\r\nimport React from 'react';\r\n\r\ninterface ExampleContext {\r\n    param: string;\r\n}\r\n\r\nconst ExampleContext = React.createContext<ExampleContext>({\r\n    param: 'foo',\r\n});\r\n\r\ninterface ExampleState {\r\n    data: any;\r\n}\r\n\r\nclass Example extends React.Component<{}, ExampleState> {\r\n    static contextType = ExampleContext;\r\n    context!: ExampleContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n        };\r\n    }\r\n\r\n    fetchData(param: string): void {\r\n        // whatever\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(this.context.param);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // ???        \r\n    }\r\n}\r\n```\r\n**What is the expected behavior?**\r\nA 4th parameter for `previousContext`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6",
        "title": "calculating context changes in componentDidUpdate",
        "labels": "Type: Feature Request",
        "id": 44910
    },
    {
        "body": "Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls. ",
        "title": "[Scheduler] Add support for delayed scheduling of callbacks.",
        "labels": "Type: Feature Request",
        "id": 44911
    },
    {
        "body": "## Timeline\r\n1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases\r\n2. 16.3 (2018-03-28): `forwardRef` is introduced:\r\n  It can be used in HOCs to avoid using `findDOMNode` on the enhanced component\r\n3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`\r\n4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:\r\n  This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.\r\n5. 16.8 (Q2 2019): stable `React.Concurrent` mode\r\n  \r\n## findDOMNode use cases\r\nIf you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.\r\n### with a planned alternative\r\n- focus handling (React Fire, \"exploratory phase\") \r\n- passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]\r\n\r\n## State of `forwardRef`\r\n`react` has 3.4M downloads/week.\r\n\r\n### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)\r\nA utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version\r\ndoes not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor\r\nissues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.\r\n\r\n### react-docgen (400k downloads/week)\r\nNot recognized as a valid component definition. PR open at [reactjs/react-docgen#311].\r\n\r\n### react-redux (1.4M downloads/week)\r\n`connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given\r\nhowever 3 betas have already been released so it's probably soon.\r\n\r\n### react-router (1.4M downloads/week)\r\n`withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).\r\nHowever no comment about the other components and no major release candidate is published.\r\n\r\n### display name\r\n`React.forwardRef` components are recognized by `react-devtools`. However when wrapped\r\nin a HOC it's very likely that the display name is lost. See [facebook/react#14319]\r\n\r\n### The issue\r\n**Assumptions:**\r\n- you are not in control of your whole component tree i.e. you use components from 3rd party libraries\r\n- you want to use `React.ConcurrentMode`\r\n- Usable includes production and development. It specifically means for development that deprecation warnings in a component\r\n  make that component not usable in development mode because of all the *noise* it adds in those cases.\r\n  *Noise* because it's not actionable if that component is from a 3rd party library.\r\n\r\nIf none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.\r\n\r\nThe mode of a partial tree can only be made more restrictive but not loosened up. If\r\nyou wrap your tree in `React.StrictMode` and use a component from a 3rd party library\r\nthat 3rd party library has to be `React.StrictMode` compliant too. \r\n\r\nThis means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.\r\n\r\nIn addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.\r\n\r\n### Conclusion\r\nRefs are not a viable upgrade path to replace `findDOMNode` yet. \r\nUntil refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.\r\n\r\n## Releated\r\n- [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)\r\n- [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)\r\n- [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)\r\n\r\n[facebook/react#6436]: https://github.com/facebook/react/issues/6436\r\n[facebook/react#13525]: https://github.com/facebook/react/issues/13525\r\n[facebook/react#14319]: https://github.com/facebook/react/issues/14319\r\n[reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311\r\n[ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678\r\n[React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html",
        "title": "findDOMNode deprecation",
        "labels": "Type: Feature Request",
        "id": 44912
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** \r\n\r\nFeature idea\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently there is no hook for dealing with errors in a component's sub-tree.\r\n\r\n**What is the expected behavior?**\r\n\r\nHave a hook that allows for functional components to act as Error Boundaries.\r\n\r\nExample:\r\n\r\n```\r\nfunction myErrorBoundary() {\r\n  const caughtError = useErrorCatching();\r\n  if (caughtError !== null) { return <ErrorHandler error={caughtError} />; }\r\n  return <RegularContent />;\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nn/a",
        "title": "Feature Idea: useError hook",
        "labels": "Type: Feature Request",
        "id": 44913
    },
    {
        "body": "TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nExpose an API to get the display name of every component (in `__DEV__` only).\r\n\r\n**What is the current behavior?**\r\nMost of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` \r\n (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSince components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:\r\n\r\nhttps://codesandbox.io/s/zqj9v50243\r\n\r\n- `react-redux` creates `\"connect(Component)\"`\r\n- `react-router` creates `\"withRouter(undefined)\"`\r\n\r\n**What is the expected behavior?**\r\nThe new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.\r\n\r\nNow there are a couple of solutions to this issue:\r\n1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)\r\n2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932\r\n3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)\r\n4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI guess this started with `forwardRef` in 16.3.\r\n",
        "title": "API for display name on forwardRef, memo and potential future exotic components",
        "labels": "Type: Feature Request",
        "id": 44914
    },
    {
        "body": "See https://github.com/facebook/react/issues/14287#issuecomment-440277999 and https://github.com/facebook/react/pull/14182#issuecomment-440125029. This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API.",
        "title": "Provide a way to pass context to renderToStaticMarkup on the client",
        "labels": "Type: Feature Request",
        "id": 44915
    },
    {
        "body": "Feature request\r\n\r\n**What is the current behavior?**\r\n`react-is` now doesn't have method to check if element is `memo`(like `isForwardRef`).\r\nMaybe there are some reasons why it's not implemented?\r\n",
        "title": "react-is memo",
        "labels": "Type: Feature Request",
        "id": 44916
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIt can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue: https://codesandbox.io/s/v8921j642l\r\n\r\n**What is the expected behavior?**\r\n\r\nA promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAFAIK all version of React that include `lazy`.\r\n",
        "title": "React.lazy does not allow retrying a rejected promise",
        "labels": "Type: Feature Request",
        "id": 44917
    },
    {
        "body": "Cryptic title I can imagine, but I am not aware that something like this would have been mentioned anywhere so far.\r\n\r\nI have a page showing some statistics and it's split into two even panels. The left panel is showing some numbers and contains a form to set necessary filters. The right panel is showing some other details about filtered data. Initially, only filter form is visible, nothing else.\r\n\r\nThe user sets the filter and hits the \"filter\" button to send out a request. There is a requirement to show a text loader in the left panel and the right panel should be showing content loader animation. Too many loaders perhaps? Well, it kinda makes sense in this context :)\r\n\r\nNow my confusion is how to achieve that. Obviously, I don't want each panel to run the same query on its own. I would like to do that once in the upper level. I can surely pass down the `isLoading` prop to both panels. However, I am not too happy about it, because once there will be a fully fledged data fetching relying on the Suspense, it would mean that for such scenarios I will need to fall back to a regular solution. Am I misunderstanding something in here?",
        "title": "Support reporting Suspense loading indicator outside of the suspended tree",
        "labels": "Type: Feature Request",
        "id": 44918
    },
    {
        "body": "# Feature Request\r\n\r\n## Current Behavior\r\n\r\nuseState/useReducers Hook's updater/dispatch functions do not expose a way to execute code _after_ the update has been made.\r\n\r\n## Expected Behavior\r\n\r\nuseState or useReducer Hooks expose some way to locally execute the equivalent of inline useEffect/didUpdate etc. (to allow for overriding default side effect behavior) (e.g. emitEffect(() => ...)).\r\n\r\n## Use Case\r\n\r\nFormik exposes 2 props which control when form validation occurs: `validateOnChange` and `validateOnBlur`. When `validateOnChange` set to `true`, form validation will run whenever `handleChange`, `setFieldValue`, or `setValues` are called (these fns all update form `values`). Similarly, when `validateOnBlur` is `true`, validation will also run whenever `handleBlur`, `setFieldTouched`, and `setTouched` are called (these fns all update the `touched` state of the form). The reason that Formik doesn't centralize orchestrating validation logic into `componentDidUpdate` (i.e. run validation whenever either `this.state.values` or `this.state.touched` changes) is to allow for local overrides in custom input components.\r\n\r\nFor example, often times in a 3rd party input component (e.g. like Airbnb's Rheostat (https://github.com/airbnb/rheostat)) the value and touched state need to update together because there isn't a real \"blur\" event for the component or there isn't a prop for it. With Formik, you get around this by updating the field's value and touched state imperatively but override the validation behavior to only run once. To do this, Formik's current non-hooks API exposes an extra parameter to the `setFieldValue` and `setFieldTouched` methods which allow you to opt out of running validation after the update is made. Internally this looks like:\r\n\r\n```js\r\nsetFieldValue(name, value, shouldValidate = true) {\r\n   this.setState(prevState => setIn(prevState.values, name, value), () => {\r\n      if (this.props.validateOnChange && shouldValidate) {\r\n        this.validateForm(this.state.values)\r\n      }\r\n    })\r\n  }\r\n\r\nsetFieldTouched(name, touch = true, shouldValidate = true) {\r\n   this.setState(prevState => setIn(prevState.touched, name, touch), () => {\r\n      if (this.props.validateOnBlur && shouldValidate) {\r\n        this.validateForm(this.state.values)\r\n      }\r\n    })\r\n  }\r\n```\r\n\r\nIf a callback was supported by either `useReducer`'s `dispatch` or `useState` update fn, Formik could maintain its current API footprint and allow for the following code to work as expected:\r\n\r\n```js\r\nconst CustomRangedInput = (props) => {\r\n  const formik = useFormikContext();\r\n  function handleChangeValue(value) {\r\n    // Set the value\r\n    formik.setFieldValue(props.name, value, false /* avoid normal validation logic */)\r\n    // Mark the field as touched\r\n    formik.setFieldTouched(props.name, true)\r\n  }\r\n\r\n   return <Rheostat\r\n     onValueChange={handleChangeValue}\r\n      min={1}\r\n      max={100}\r\n      values={[1, 100]}\r\n   />;\r\n}\r\n``` \r\n\r\nHowever, with the current hooks API's there is not a way for me to expose this to users, since I have to lift update the validateOnChange/validateOnBlur validation logic to `useEffect`. In my current Formik x Hooks PR, this looks like\r\n\r\n```js\r\n React.useEffect(\r\n    () => {\r\n      if (!!didMount.current && !!validateOnChange && !state.isSubmitting) {\r\n          validateForm(state.values);\r\n      }\r\n    },\r\n    [state.values, validateOnChange, state.isSubmitting]\r\n  );\r\n\r\n React.useEffect(\r\n    () => {\r\n      if (!!didMount.current && !!validateOnBlur && !state.isSubmitting) {\r\n          validateForm(state.values);\r\n      }\r\n    },\r\n    [state.touched, validateOnBlur, state.isSubmitting]\r\n  );\r\n\r\n```\r\n\r\nThis will execute whenever `state.values` or `state.touched` change, which is usually what people want 98% of the time. However, I don't know/see a way to make this compatible with the old API (where you can locally override validation).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.7.0-alpha\r\n",
        "title": "setState/dispatch 2nd arg callback or emitEffect() use case",
        "labels": "Type: Feature Request",
        "id": 44919
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe current synthetic keyboard event does not support the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property.\r\n\r\n**What is the expected behavior?**\r\nThe synthetic keyboard event should pass along the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome ([CanIUse](https://caniuse.com/#feat=keyboardevent-code)) so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added.\r\n\r\nEdit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.\r\n",
        "title": "Synthetic KeyboardEvent should support KeyboardEvent.code",
        "labels": "Type: Feature Request",
        "id": 44920
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature request\r\n\r\n**What is the current behavior?**\r\n\r\nIf you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]'\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/38tz0ym2/\r\n\r\n**What is the expected behavior?**\r\n\r\nThe string returned by the component should be rendered as the elements innerHTML.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0",
        "title": "<option> and <textarea> elements should be able to contain Components that return strings and render their output correctly",
        "labels": "Type: Feature Request",
        "id": 44921
    },
    {
        "body": "Hello,\r\n\r\nI tried testing components that use the cool new hooks API, but `useEffect` doesn't seem to work with the test renderer.\r\n\r\nHere's a small failling Jest test:\r\n\r\n```js\r\nimport React, { useEffect } from \"react\";\r\nimport { create as render } from \"react-test-renderer\";\r\n\r\nit(\"calls effect\", () => {\r\n  return new Promise(resolve => {\r\n    render(<EffectfulComponent effect={resolve} />);\r\n  });\r\n});\r\n\r\nfunction EffectfulComponent({ effect }) {\r\n  useEffect(effect);\r\n\r\n  return null;\r\n}\r\n```\r\n\r\nAnd here's a minimal reproducing repo: https://github.com/skidding/react-test-useeffect\r\n\r\n> Note that other _use_ APIs seemed to work (eg. `useContext`).",
        "title": "Provide a way to trigger useEffect from tests",
        "labels": "Type: Feature Request",
        "id": 44922
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you pass a unknown prop to a DOM element - common when you pass `{...props}` to something that turns out to be a div/span/any other DOM element rather than a composite component - you get a warning like so:\r\n\r\n```Warning: React does not recognize the `propName` prop on a DOM element. ....```\r\n\r\nIf the tree is pretty complicated, especially if you're using HOCs, it can be very hard to find where this prop has been passed and to which DOM element. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe had a quick muck around with react-dom and logging the DOM element that triggers this warning allows you to see the element in the DOM and makes it much easier to work out where the prop is being accidentally passed. You can even use the react dev tools to work out exactly which line the component is defined in the code.\r\n\r\nSimply logging the element is obviously not the most elegant way of showing the user where the mistake is, but would it be possible to do _something_ in order to make it quicker to fix mistaken prop passing like this?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll.",
        "title": "More helpful interaction for \"React does not recognize the 'propName' prop on a DOM Element\"",
        "labels": "Type: Feature Request",
        "id": 44923
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nContext not passed into getDerivedStateFromProps:\r\n\r\n```\r\nstatic getDerivedStateFromProps(props, state, context) {}\r\n```\r\n\r\nJust curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.\r\n\r\nJust curious if there's been any discussion on this.",
        "title": "16.6 contextType + getDerivedStateFromProps",
        "labels": "Type: Feature Request",
        "id": 44924
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is feature request.\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:\r\n\r\n```js\r\nclass App extends Component {\r\n  state = {}\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // do we really need this?\r\n    // the state is derived from error, not props\r\n    if (state.error)\r\n      return remapStateToPreferredStructure(state);\r\n  }\r\n\r\n  render() { /* ... */ }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`getDerivedStateFromError` is expected to receive previous state and have\r\n\r\n```\r\ngetDerivedStateFromError(error, state)\r\n```\r\nsignature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.6.0\r\n",
        "title": "Receive previous state in getDerivedStateFromError",
        "labels": "Type: Feature Request",
        "id": 44925
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nOnly `className` exists right now.\r\n\r\n**What is the expected behavior?**\r\n\r\nI think adding `classList` property for DOM elements would be useful. As far as I understand React Fire will drop support for IE11 but even in IE11, you can add or remove classList from elements.\r\n\r\nAnother idea might be adding support for for array type for `className` (or future `class`, which will make more sense because array). If array is passed, `classList` will be used for DOM elements. Otherwise, `className` is used as usual in the real DOM side.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions. I hope this is added in React Fire.",
        "title": "Support for classList",
        "labels": "Type: Feature Request",
        "id": 44926
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nOften we will use expressions like this:\r\n\r\n`{ !x ? null : <Component title={x.title} /> }`\r\n\r\n**What is the desired behavior?**\r\n\r\nWe would like to have expressive components such as\r\n\r\n```\r\n<When c={x}>\r\n   <Component title={x.title} />\r\n</When>\r\n```\r\n\r\nIn many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.\r\n\r\nThe issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).\r\n\r\nWhat is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nPresumably any version of React.",
        "title": "Conditional Components",
        "labels": "Type: Feature Request",
        "id": 44927
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature.\r\n\r\n**What is the current behavior?**\r\nI am working on writing a custom React renderer (https://github.com/toxicFork/react-three-renderer-fiber) and right now I have to use `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` in order to access stack information for the current frame in order to display warnings for the developer (https://github.com/Methuselah96/react-three-renderer-fiber/blob/react-reconciler/src/core/customRenderer/descriptors/CustomDescriptor.ts#L102).\r\n\r\n**What is the expected behavior?**\r\nI would like to be able to access the stack information for the current frame without worrying for the safety of my employment. Is there a better way for me to be doing this?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.5.2",
        "title": "Accessing ReactDebugCurrentFrame without using __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",
        "labels": "Type: Feature Request",
        "id": 44928
    },
    {
        "body": "I'm trying to use the Profiler server side rendering with `renderToString` but the onRender callbacks are not getting called.\r\n\r\nIs there a way to do it?\r\nI'm using 16.5.1, NODE_ENV === \"development\".\r\n\r\nMy code looks like this, works fine client side:\r\n```javascript\r\nimport React, { unstable_Profiler } from 'react';\r\n\r\nconst profilerCallback = (id, phase, actualTime, baseTime, startTime, commitTime) => {\r\n        console.log(`${id}'s ${phase} phase:`);\r\n        console.log(`Actual time: ${actualTime}`);\r\n        console.log(`Base time: ${baseTime}`);\r\n        console.log(`Start time: ${startTime}`);\r\n        console.log(`Commit time: ${commitTime}`);\r\n};\r\n\r\nconst MyComponent = () => (\r\n    <Profiler id=\"card\" onRender={profilerCallback}>\r\n        ...\r\n    </Profiler>\r\n)\r\n```",
        "title": "Is it possible to use Profiler server side?",
        "labels": "Type: Feature Request",
        "id": 44929
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no good way to get the a list of component parents. The only way to do it is to wrap the rendered component to an error boundary, throw a dummy error and pass `componentStack` to the rendered component without throwing the error again.\r\n\r\n![image](https://user-images.githubusercontent.com/1082083/44995658-cb9b7a00-afac-11e8-83da-6b60f6edb6e6.png)\r\n\r\nUnfortunately the idea of hiding thrown errors was refused (see https://github.com/facebook/react/issues/11098) so this experimental hack isn't useful. \r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like to deterministically identify components at DOM tree and use this data to assign persistent data to it without using any custom identifiers. For example store visibility state for a specific component at window.localStorage. \r\n\r\nRelated to https://github.com/facebook/react/issues/1137\r\n",
        "title": "Make possible to get component stack or at least its hash",
        "labels": "Type: Feature Request",
        "id": 44930
    },
    {
        "body": "This topic originally came up in a `react-devtools` discussion: https://github.com/facebook/react-devtools/issues/1099#issuecomment-414138771.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`.\r\n\r\nDue to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder.\r\n\r\n**What is the expected behavior?**\r\nIt would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode.\r\n\r\nWith this information we could have a \"redux-devtools\"-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode.\r\n\r\nTools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.\r\n\r\n",
        "title": "Cache Provider: Add hooks to read and preload in dev mode",
        "labels": "Type: Feature Request",
        "id": 44931
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDocumentation of SyntheticEvent claims: \"React normalizes events so that they have consistent properties across different browsers.\" https://reactjs.org/docs/events.html#supported-events\r\n\r\nDocumentation of Keyboard Events lists `boolean repeat` as a supported field: https://reactjs.org/docs/events.html#keyboard-events\r\n\r\nIE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nTab to to the only div in this repro and hold down a key:\r\nhttps://jsfiddle.net/acsr4ofu/\r\n\r\nBug: 'repeat!' alert does not appear in IE11\r\n\r\n**What is the expected behavior?**\r\nAn alert dialog showing 'repeat!' should appear in any browser that React supports.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nCurrent version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React.",
        "title": "KeyboardEvent.repeat is not normalized",
        "labels": "Type: Feature Request",
        "id": 44932
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature Request\r\n\r\n**What is the current behavior?**\r\n`testInstance` provides a `props` property, but does not provide a `context` property allowing for context tests.\r\n\r\n**What is the expected behavior?**\r\n`testInstance.context` should return an object containing the instance's current context\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAt least 16.4.1",
        "title": "Provide a `testInstance.context` property to facilitate context testing",
        "labels": "Type: Feature Request",
        "id": 44933
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen an element is cloned with [React.cloneElement](https://reactjs.org/docs/react-api.html#cloneelement), it's possible to add new props or modify existing ones, but not to remove existing props. \r\n\r\n[Relevant code](https://github.com/facebook/react/blob/v16.8.0-alpha.1/packages/react/src/ReactElement.js#L333).\r\n\r\nExample of how it works right now:\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {href: undefined}\r\n```\r\n\r\n**What is the desired behavior?**\r\n\r\nIt would be great to add some way to remove props (passing `undefined` as value?):\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {}\r\n```\r\n\r\nI guess I could use directly `React.createElement` but, AFAIK, I'll have also to worry about special attributes like `key` and `ref`. I'd rather not mess with internals.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI think it has worked this way in all React versions.\r\n\r\n**What's your use case?**\r\n\r\nI am applying a map transformation of elements recursively and I need to remove some virtual props before passing the real elements for React to render.  Console shows `React does not recognize the [unknownProp] prop on a DOM element` for those props, I'd want to avoid that.",
        "title": "React.cloneElement cannot remove existing props",
        "labels": "Type: Feature Request",
        "id": 44934
    },
    {
        "body": "As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:\r\n> Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.\r\n\r\nif used. \r\n\r\nThis incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).\r\n\r\nI believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87). \r\n\r\nI'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use.",
        "title": "Ability to use return value of React.Children.map with React.Children.only",
        "labels": "Type: Feature Request",
        "id": 44935
    },
    {
        "body": "Currently `createPortal` only works within the current renderer.\r\n\r\nThis means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.\r\n\r\nWith this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.\r\n\r\nAt the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like\r\n\r\n```js\r\n<div>\r\n  <Portal to={ReactART}>\r\n    <surface>\r\n      <rect />\r\n    </surface>\r\n  </Portal>\r\n</div>\r\n```\r\n\r\nBut it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?\r\n\r\nWe'll want to figure something out eventually. For now I'm filing this for future reference.",
        "title": "Support cross-renderer portals",
        "labels": "Type: Feature Request",
        "id": 44936
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\n`<Surface>` of canvas mode and `<Surface>` of svg mode cannot be used in a document at the same time.\r\n\r\n**What is the expected behavior?**\r\nTwo more `<Surface>` components with each other modes can be used in a document at the same time.\r\n\r\n\r\nCurrently developers can set only one rending mode globally in react-art, using `setCurrent()` of `art/modes/current` module. So there is no way to use `<Surface>` of canvas mode and `<Surface>` of svg mode in a document together. On the other hand, `art.js` internally used in `react-art` provides a way to use each other modes together as directly importing their corresponding modules.  (e.g. svg.js for svg mode, canvas.js for canvas mode in `art.js` lib). \r\n\r\nI would like to suggest a way to set own rendering mode per instance of `<Surface>` Component by new property `mode`. This feature makes `<Surface>` with canvas mode and `<Surface>` with svg mode to be used together in a document like the following.\r\n\r\n```javascript\r\nconst {\r\n  Surface,\r\n  Group,\r\n  Shape\r\n} = require('react-art');\r\n\r\nclass TestComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Surface mode=\"svg\" width={100} height={100}>\r\n          <Group>\r\n            <Shape width={10} height={10} />\r\n          </Group>\r\n        </Surface>\r\n        <Surface mode=\"canvas\" width={100} height={100}>\r\n          <Group>\r\n            <Shape width={10} height={10} />\r\n          </Group>\r\n        </Surface>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n```\r\n\r\nIf `mode` property is not set, `<Surface>` works as canvas mode for compatibility.\r\n\r\nI have made a PR for this feature to show how to work and use it ([#13249](https://github.com/facebook/react/pull/13249)).\r\nAnd you can check this feature through `art` fixture of my PR.\r\n\r\nFeel free to discuss about this feature.\r\n\r\n\r\n\r\n",
        "title": "Setting rendering mode to <Surface> component of react-art",
        "labels": "Type: Feature Request",
        "id": 44937
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**feature**\r\n\r\nCan fiber._debugID also be part of performance measure [label](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactDebugFiberPerf.js#L91) along with component name/displayName?\r\n\r\nto distinguish/track multiple instances of a react component in performance measures, please let me know if there is any other way already available to achieve this.",
        "title": "Identify different instances of react component in performance measures",
        "labels": "Type: Feature Request",
        "id": 44938
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nSynthetic keyboard events do not contain `isComposing`.\r\nThey should if the value is true, per the w3 spec 4.7.5: https://www.w3.org/TR/uievents/#events-compositionevents\r\n \r\n**What is the expected behavior?**\r\n`event.isComposing === event.nativeEvent.isComposing`\r\n\r\nSyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nall versions, up through at least 16.4.1",
        "title": "add support for SyntheticKeyboardEvent#isComposing",
        "labels": "Type: Feature Request",
        "id": 44939
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nProbably bug, but arguably a feature request, I suppose.\r\n\r\n**What is the current behavior?**\r\n\r\nI've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.\r\n\r\nhttps://jsfiddle.net/y8o5n2zg/\r\n\r\nAs seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in:\r\n> `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in <div>.`\r\n\r\nAdditionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM:\r\n> `<div id=\"test-1\">Hello WorldHello World</div>`\r\n\r\n**What is the expected behavior?**\r\n\r\nIn an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously.\r\n\r\n\r\n#### *Why* I'm doing this edge-case-y nonsense:\r\n\r\nWe're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the page\u201420-30, perhaps?).\r\n\r\nIn searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case.\r\n\r\nThanks!\r\n",
        "title": "Add support for hydrating portals",
        "labels": "Type: Feature Request",
        "id": 44940
    },
    {
        "body": "I apologise for raising this issue again, I'm not intending to be annoying or disrespectful by this, but my previous issue #13034 was closed with a suggestion which I believe not does mitigate the feature request.  I'm simply not aware if I should take the hint and go away, if there's a bit of a backlog and I should hang in there, or if it's been missed.  I'm assuming the latter, but beg forgiveness if that is not the case.  Should you want me to go away I will do so :)  Thanks.\r\n\r\nI'm trying to build a container component and child component, whereby the children can sit anywhere in the hierarchy beneath the container, but know their relative order/index within that hierarchy.\r\n\r\nMy use-case is to build a helper wrapper for CSS grids, allowing subcomponents to themselves render a \"row\" component which knows it must be the next index, and may or may not progress the row counter for the next \"row\" component found in order.\r\n\r\nI've looked into two possible avenues - recursing using React.Children on the component, which stops when it hits a component without props.children (e.g. a redux-connect()-ed one), and passing some means of counting via context, which fails because it seems the render() methods of the child components isn't always called in \"DOM order\".\r\n\r\nMore background here - https://stackoverflow.com/questions/50776933/react-get-component-order-within-hierarchy\r\n\r\nIt would be great to have some feature in React which might allow for this.\r\n\r\n@aweary had previously suggested in #13034 that context could do this with nesting, however I'd raised the thought that this would give an indication of recursion depth, not relative position.",
        "title": "Some means of determining component order in hierarchy",
        "labels": "Type: Feature Request",
        "id": 44941
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n[Reparenting](https://github.com/facebook/react/issues/3965) is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted.\r\n\r\n```js\r\nReactDOM.render(<Foo />, container);\r\n// This won't get <Foo /> to be unmounted and mounted again:\r\nReactDOM.render(<Foo />, container);\r\n\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n// This also won't get <Foo /> to be unmounted and mounted again, no matter if \r\n// we change parentComponent (and thus call it from a different parent):\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n```\r\n\r\nHowever this unstable API is [going to be deprecated soon](https://github.com/facebook/react/issues/10143) and recent features like the introduction of the new context API introduced [additional issues](https://github.com/facebook/react/issues/12493).\r\n\r\nAs an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always [create a new mount point](https://github.com/facebook/react/issues/10713) inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this [CodeSandbox](https://codesandbox.io/s/91o7oovo54) where calling the portal from a different portal will cause the `<Leaf />` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc.\r\n\r\nBefore we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`.",
        "title": "Allow Portals to be used for Reparenting",
        "labels": "Type: Feature Request",
        "id": 44942
    },
    {
        "body": "Hey,\r\n\r\nIt seems like there is currently no way to take two mounted component instances and tell which one of them is coming earlier in the application structure (they could have been mounted asynchronously, and tracking the instantiation/render/mount time is not enough). Ideologically I cannot traverse the application tree, that is understandable.\r\n\r\nThough, the relative positions are needed sometimes. My use case \u2014 I track focusable elements in the application using context (each focusable element reports of its existence to a focus manager which is provided by the context). This is needed to be able to limit the focusablility/accessibility of all elements which are outside of the currently shown modal dialog/popup so that the focus is trapped inside. For the sake of better accessibility, I need to automatically focus first focusable in the modal dialog when I'm in the keyboard navigation mode. So, I have the references to all focusable elements inside the dialog, but I cannot tell which one comes first using public React API. For web there is a workaround to findDOMNode and compareDocumentPosition(), but that doesn't work with React Native.\r\n\r\nCan we have something similar to compareDocumentPosition() but for React component instances?\r\n\r\nThanks!\r\n",
        "title": "Add a way to compare relative positions of deep children",
        "labels": "Type: Feature Request",
        "id": 44943
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nCreating a custom element with a `ref` attribute currently is not possible, because `React.createElement('my-element', { ref: 'my-attribute' })` will interprete the `ref` attribute in a special sense.\r\n\r\n**What is the expected behavior?**\r\nLike for `htmlFor` it would be great if there were an alias that allows creating a `ref` attribute on a custom element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.3",
        "title": "Allow `ref` attribute on custom elements",
        "labels": "Type: Feature Request",
        "id": 44944
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\n`<event>.code` is undefined\r\n\r\n**What is the expected behavior?**\r\n`.code` is a very useful part of the KeyboardEvent spec: https://www.w3.org/TR/uievents/#dom-keyboardevent-code\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI am on React 16.3, but I saw no mention of this in today's 16.4 changelog.\r\n",
        "title": "Synthetic (keyboard) events don't implement the .code property",
        "labels": "Type: Feature Request",
        "id": 44945
    },
    {
        "body": "**What is the current behavior?**\r\n\r\n`ReactIs.typeOf` currently only works for element types, it does not allow you to pass a raw `Component` or `ForwardRef` to know the type.\r\n\r\nThe use case for this is in `hoist-non-react-statics` I now need a [special cases for `ForwardRefs`](https://github.com/mridgway/hoist-non-react-statics/issues/48). To do this, I will need to know the type of the source and target components, but currently I would need to turn them into elements first.\r\n\r\nAll of the `ReactIs.is*` functions also have this issue since they use the `typeOf` function internally.\r\n\r\n```js\r\nconst ForwardComponent = React.forwardRef(() => {});\r\n\r\nReactIs.typeOf(ForwardComponent); // undefined\r\nReactIs.typeOf(React.createElement(ForwardComponent)); // Symbol(react.forward_ref)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally I could pass in just the Component and get the type of it: \r\n```js\r\nReactIs.typeOf(ForwardComponent) // Symbol(react.forward_ref)\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReactIs@16.3.2\r\n",
        "title": "ReactIs.typeOf for non-elements",
        "labels": "Type: Feature Request",
        "id": 44946
    },
    {
        "body": "I find myself needing a higher-order component every once in a while when using render props, so I can get stuff from context in my lifecycle methods. It's pretty easy to create a HOC from a render prop, so I was wondering how open y'all would be to adding a HOC to the new context API?\r\n\r\nWe can already do this in userland with a little `withContext` helper:\r\n\r\n```js\r\nfunction withContext(Context, Component) {\r\n  return props => {\r\n    return (\r\n      <Context.Consumer>\r\n        {context => <Component {...props} context={context} />}\r\n      </Context.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppWithContext = withContext(MyContext, App);\r\n```\r\n\r\nIt would be useful to have this built-in to the new context API, something like:\r\n\r\n```js\r\nconst MyContext = React.createContext();\r\n\r\nconst AppWithContext = MyContext.provide(App, 'optionalNameOfTheProp');\r\n```\r\n\r\nThe second argument to `provide` (the prop name) could default to `context`.\r\n\r\nAnyway, just thought I'd open this up for discussion before making an actual PR that adds this. Thanks for your consideration \ud83d\ude05\r\n\r\n[EDIT: Removed example using `this.context`]",
        "title": "Provide HOC for new context API",
        "labels": "Type: Feature Request",
        "id": 44947
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nMany react components render multiple times automatically.  Take a graphql component.  First it will render a loading spinner, then the data after it has been fetched.  In react-test-renderer, it's difficult to get a snapshot to consistently render for these types of components.\r\n\r\nCurrently, we set an interval timer and check the component tree to see if the data has loaded and thus rendered.  This approach results in a bunch of unnecessary checks and slows down tests because the interval timer will run after the component has been rendered.\r\n\r\n**What is the expected behavior?**\r\nI would expect react-test-render to allow a callback that will be invoked each time any component in the component tree changes, basically after any component's `componentDidUpdate` ran.  I would expect an API like:\r\n```\r\nimport TestRenderer from 'react-test-renderer';\r\nconst testRenderer = TestRenderer.create(\r\n  <Todos />\r\n);\r\ntestRenderer.onChange(() => {\r\n// check TODOS for whether the data has loaded and do the snapshot\r\n})\r\n```\r\n\r\nThis would be useful in react-dom and react-native.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nIt's a proposal for a new feature, doesn't affect any existing React versions\r\n\r\n",
        "title": "Callback in react-test-renderer for component changes",
        "labels": "Type: Feature Request",
        "id": 44948
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nOur error logging systems has been reporting this error in production: \u201cMaximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\u201d\r\n\r\nHowever, we can\u2019t reliably reproduce this error and it only affects a small percentage of our users. Moreover, we have more than 1,000 in-house components and several third-party components. So, it\u2019s impractical to audit every single component to find out what caused it.\r\n\r\n**What is the expected behavior?**\r\nIt would be much easier for us to debug if, when the nested update count exceeds 1,000 (current NESTED_UPDATE_LIMIT), we could see what components are involved in this nested update chain.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWe are using React 16.3.1.",
        "title": "Provide ways to do post-mortem analysis of \u201cMaximum update depth exceeded\u201d error in production.",
        "labels": "Type: Feature Request",
        "id": 44949
    },
    {
        "body": "[Edit]: **I'm asking for a feature**.\r\n\r\n**Current Behaviour**\r\nAn input `onChange` function that returns a value equalling the prior value causes the cursor to jump to the end of the input. This is the same as [this comment from #995](https://github.com/facebook/react/issues/955#issuecomment-327069204) formally raised as a feature request. \r\n\r\nRepro sandbox: https://codesandbox.io/s/n4k3yx47j\r\nThat same code:  \r\n```javascript\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nclass Input extends React.Component {\r\n  state = { value: \"TypeANumber\" };\r\n\r\n  onChange = e => {\r\n    let nextValue = e.target.value;\r\n\r\n    if (/[0-9]/.test(nextValue)) {\r\n      nextValue = this.state.value;\r\n    }\r\n    this.setState({ value: nextValue });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={this.state.value}\r\n        onChange={this.onChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Input />, document.getElementById(\"root\"));\r\n```\r\n\r\n**What is the expected behavior?**\r\nI'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change. \r\n\r\nI understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case. \r\n\r\n[Edit]: \r\nSince raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters. \r\n\r\nRegarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955.  \r\n\r\nI'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible. \r\n",
        "title": "Cursor jumps to end of input when onChange doesn't call setState",
        "labels": "Type: Feature Request",
        "id": 44950
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI would like to request a new feature. \r\n\r\n**What is the current behavior?**\r\nAt the moment there is no way to create an instance of a `ReactTestInstance`. I would love to be able to do something like:\r\n\r\n```js\r\nconst div = document.createElement('div');\r\nconst componentRef = ReactDOM.render(<MyComponentUnderTest />, div); // or renderIntoDocument\r\nconst testInstance = new ReactTestInstance(componentRef);\r\n// now I can run queries using the API of ReactTestInstance\r\n// against a component tree that has been fully DOM rendered\r\ntestInstance.findAll(..)\r\ntestInstance.children.forEach(() => {});\r\ntestInstance.parent\r\n```\r\n\r\n**Why?**\r\nLibraries such as [Enzyme](https://github.com/airbnb/enzyme) can be used to test React components by [full DOM rendering](http://airbnb.io/enzyme/docs/api/mount.html) and providing an API to find components and get information about them.\r\n\r\nAs far as I know, there is no way of querying the component tree created by `ReactDOM.render` without relying on the internals of React nodes. This means that Enzyme, in order to support full DOM rendering and it's querying API, it has to interact with React nodes directly. This reliance causes problems in Enzyme whenever React adds a new node type (forwardRef, ContextProvider/Consumer for example).\r\n\r\nI have started [this RFC](https://github.com/airbnb/enzyme/issues/1648) that proposes that Enzyme uses `ReactTestWrapper` from `react-test-renderer` as a layer on top of React node objects. This allows the library to be decoupled from the internals of React. The solution proposed in the RFC relies on the being able to create a `ReactTestInstance` from a `ReactDOM.render` component tree.\r\n\r\nPlease let me know if this is something you would consider \ud83d\ude04 ",
        "title": "Expose a way of creating a ReactTestInstance for React DOM nodes",
        "labels": "Type: Feature Request",
        "id": 44951
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nin React tree name of a Context must be like its name in code\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```js\r\nconst MyContext = React.createContext(null);\r\n```\r\n```js\r\n   <MyContext.Consumer>\r\n   { data => ... }\r\n   </MyContext.Consumer>\r\n```\r\nlet's have a look at React tree in Chrome extention's page\r\n\r\nhere is Context - not MyContext\r\n\r\n**What is the expected behavior?**\r\n\r\nexpexted to see MyContext\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.2",
        "title": "Allow to specify displayName for createContext() providers and consumers",
        "labels": "Type: Feature Request",
        "id": 44952
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*Feature.*\r\n\r\n**What is the current behavior?**\r\nWe are probably all familiar with the following message.\r\n\r\n```\r\nbundle.js:1\r\n\r\nWarning: Cannot update during an existing state transition (such as within `render`\r\nor another component's constructor). Render methods should be a pure function\r\nof props and state; constructor side-effects are an anti-pattern, but can be moved\r\nto `componentWillMount`.\r\n```\r\n\r\nFor those who never came across this message, it can be created simply by mounting the following component.\r\n\r\n```js\r\nclass UpdateDuringRender extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: 'initial',\r\n    };\r\n  }\r\n\r\n  updateState(text) {\r\n    this.setState({ text });\r\n  }\r\n\r\n  render() {\r\n    this.updateState('updated!');\r\n\r\n    return (\r\n      <div>\r\n        {this.state.text}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nCan we be more specific which component triggers this warning (I think it could be even treated as an optional error)? When this suddenly appears in the app, sometimes it's tough to find the culprit. Some stack trace or at least the offending component would be helpful in the warning message. Not sure how it's solved internally, but yeah, would be a nice hint to help remove anti-patterns.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n`\"react\": \"^16.3.1\"`",
        "title": "Show culprit in `Cannot update during an existing state transition...` ?",
        "labels": "Type: Feature Request",
        "id": 44953
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\n`getDerivedStateFromProps` is called on a PureComponent even if the props haven't changed\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nAs is\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll\r\n\r\nI was hoping `getDerivedStateFromProps` wouldn't be called on a PureComponent if the props hadn't changed. Any reason why this shouldn't/couldn't be the case?\r\n",
        "title": "Don't call getDerivedStateFromProps on a PureComponent if props are the same?",
        "labels": "Type: Feature Request",
        "id": 44954
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nHydrating some server-rendered content can be difficult, inefficient or impossible. For example, in the process of rendering on the server, significant work or additional data may be required for data processing and conversion, such as custom templating or localization. The content can be large too, such as product information or a news article.\r\n \r\nWhen the resulting content is highly dynamic and changes with state, there is no choice but recreate it within React paradigm and recreate it on client. However, complicated server-generated content is often (if not typically) static. Delivering a redundant copy of static content to client just to compare and ignore it during hydration seems a waste of resources and can be prohibitively expensive. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/zx38ow3z8x\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead of additional complications of recreating it on the client with hydration, wouldn\u2019t it be much easier to just accept the content from server as-is and tell hydrate() to leave it alone?\r\n\r\nThere may be a few options for non-hydrating SSR:\r\n\r\n1. Add a new callback `shouldComponentHydrate()` to disable hydration of component content\r\n```javascript\r\nexport default class NoHydrate extends Component {\r\n    // return false to avoid re-rendering of this component in hydrate()\r\n    shouldComponentHydrate() {\r\n        return false;\r\n    }\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, this is never called and server content is accepted as-is\r\n        return (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n```\r\n\r\n2. Access SSR content from DOM in `render()`\r\n_This is probably the worst option, though it is the only one that definitely works currently._\r\n```javascript\r\nexport default class AutoHydrate extends Component {\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, find SSR in dom and re-render using dangerouslySetInnerHTML\r\n        // ** requires a unique id, generated before or during server rendering **\r\n        return (typeof window === 'undefined') ? (\r\n            <div id={this.props.id}>\r\n                {this.props.children}\r\n            </div\r\n        ) : (\r\n            <div id={this.props.id}\r\n                dangerouslySetInnerHTML={{\r\n                    __html: document.getElementById(this.props.id).innerHTML\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n3. Use `dangerouslySetInnerHTML` with empty content\r\n_It actually works now, but it is not documented that it is supposed to._\r\n```javascript\r\nexport default class Ssr extends Component {\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, render empty content using dangerouslySetInnerHTML,\r\n        // which normally causes a warning of content mismatch and keeps the existing content\r\n        // also add suppressHydrationWarning to turn off the warning.\r\n        return (typeof window === 'undefined') ? (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        ) : (\r\n            <div\r\n                dangerouslySetInnerHTML={{\r\n                    __html: ''\r\n                }}\r\n                suppressHydrationWarning\r\n            />\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nConsidering that there is a way to make it work now, documenting (3) may be all that needs to happen. However if (1) could be added with same behavior, it would look cleaner.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion 16.2. Not sure if the working option 3 has worked before or is supposed to work in future versions.",
        "title": "Support partial hydration for static content",
        "labels": "Type: Feature Request",
        "id": 44955
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n`React.hydrate` replaces the DOM after a SSR page is served, and two sibling links in the page have the `href` attributes wrongly set.\r\n\r\nI did a little repl to replicate this behaviour [here](https://repl.it/@EnoahNetzach/SSR-whitespace-mismatch).\r\n\r\nWhen the server responds, the HTML is correct:\r\n\r\n![screen shot 2018-04-04 at 16 08 06](https://user-images.githubusercontent.com/663755/38312693-b1167650-3822-11e8-85f3-0f100caf8a50.png)\r\n\r\nbut right after hydration, the first `href` is changed: \r\n\r\n![screen shot 2018-04-04 at 16 08 20](https://user-images.githubusercontent.com/663755/38312738-c96e1b4a-3822-11e8-9e7e-0d6a9fa24ed2.png)\r\nand whitespace artifacts are added.\r\n\r\n**What is the expected behavior?**\r\nThe first `href` should not be changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact v16.2\r\nChrome 65.0\r\nmacOS\r\n",
        "title": "Support hydration after HTML minification",
        "labels": "Type: Feature Request",
        "id": 44956
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- Feature (possibly bug?)\r\n\r\n**What is the current behavior?**\r\n\r\nI've been trying out the new Context API in my project and it's awesome. However, in my haste to start using it, I managed to stumble into a situation where every time I would try and render a certain component which was making use of a few different contexts, the app would completely freeze, and the only thing that would let me get out of this error state was to forcefully kill the process via the chrome task manager.\r\n\r\nNothing would be logged to the console, the app would just completely freeze, and when I opened up the task manager and saw the CPU spiked up every time i would go to this component, and the only way I could stop it was to crash the tab. \r\n\r\nI finally threw some `console` statements in and saw that it had just entered into an infinite loop between these providers. I managed to get the app to stop crashing, but I'm still unsure as to why exactly this was happening. I'm sure I was just using this API incorrectly somehow, but this was a very confusing problem to diagnose, and some error checking here would be incredibly useful\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be very beneficial to have some sort of checks in place, similar to what happens with too many `setState` calls happening too closely when you call it from `componentDidUpdate`, for example. That way, instead of freezing everything up permanently, the app could at least crash and report some sort of information and help me realize where I'd gone wrong.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React `16.3.0`\r\n- Chrome `65.0.3325.181`\r\n\r\n",
        "title": "Provide a way to detect infinite component rendering recursion in development",
        "labels": "Type: Feature Request",
        "id": 44957
    },
    {
        "body": "Hello,\r\n\r\nI'm testing v16.3.0 and I'm getting this warning:\r\n```\r\nWarning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported \r\n```\r\n\r\n My use case is that I wanted to render React Test Renderer (for ex) from a Component in an another (ReactDOM) renderer but it does not seem to work - I wanted to use same Provider in both containers.\r\n\r\nI thought `React.createContext` create objects with no state and could be shared across renderers / Fiber containers.. Is there workaround for this? Are there any thoughts on this, Is this a definite behaviour?\r\n\r\nFollowing the warning, I eventually get the error message which I believe is related to the warning:\r\n\r\n```\r\nUncaught Error: Unexpected object passed to ReactTestInstance constructor (tag: 13). This is probably a bug in React.\r\n```\r\n\r\nthank you for any guidance :)",
        "title": "Uncaught Error: Unexpected object passed to ReactTestInstance constructor (tag: 13). This is probably a bug in React.",
        "labels": "Type: Feature Request",
        "id": 44958
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n![image](https://user-images.githubusercontent.com/5977311/38124026-a0984a98-3411-11e8-838f-2d6f3dc97046.png)\r\n",
        "title": "Provide a better error on React.cloneElement(null/undefined)",
        "labels": "Type: Feature Request",
        "id": 44959
    },
    {
        "body": "Moved discussion from https://github.com/facebook/react/issues/6212.\r\n\r\n## Situation\r\n\r\nThe [`focusable` attribute](https://www.w3.org/TR/SVGTiny12/interact.html#focusable-attr) from the SVG specifications is an [enumerated attribute](https://html.spec.whatwg.org/#keywords-and-enumerated-attributes) accepting values `\"true\"`, `\"false\"` and `\"auto\"`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example:\r\n\r\n```diff\r\n-<svg focusable>I should be focusable</svg>\r\n-<svg focusable={true}>I should be focusable</svg>\r\n+<svg focusable='true'>I should be focusable</svg>\r\n```\r\n\r\nThe thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `\"true\"` and `\"false\"` values. The [`aria-hidden` attribute](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) is a good example of that.\r\n\r\nFor instance, [following a good practice for icon-buttons](https://fvsch.com/code/svg-icons/#section-html):\r\n\r\n```html\r\n<button type=\"button\">\r\n  <svg aria-hidden=\"true\" focusable=\"false\">\r\n    <use xlink:href=\"#icon-play\"></use>\r\n  </svg>\r\n  <span class=\"access-label\">Start playback</span>\r\n</button>\r\n```\r\n\r\nFrom an authoring perspective, the above snippet would likely be written like this in JSX:\r\n\r\n```jsx\r\n<button type='button'>\r\n  <Icon icon='play' aria-hidden={true} focusable={false} />\r\n  <span class='access-label'>Start playback</span>\r\n</button>\r\n```\r\n\r\nThe problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React.\r\n\r\n## Proposal\r\n\r\nGiven the default value for the `focusable` attribute is `\"auto\"`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such.\r\n\r\nThe suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work:\r\n\r\n```jsx\r\n<svg focusable>I should be focusable</svg>\r\n<svg focusable={true}>I should be focusable</svg>\r\n<svg focusable='true'>I should be focusable</svg>\r\n<svg focusable={false}>I should not be focusable</svg>\r\n<svg focusable='false'>I should not be focusable</svg>\r\n<svg focusable='auto'>I should be focusable</svg>\r\n```\r\n\r\nFrom an authoring perspective, I believe this would be the most straightforward and less confusing.",
        "title": "[SVG] Enable focusable to accept boolean values",
        "labels": "Type: Feature Request",
        "id": 44960
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSee below.\r\n\r\n**What is the current behavior?**\r\n\r\n1. (Bug / Inconsistency)\r\n```jsx\r\n<input type=\"radio\" checked={false} />\r\n```\r\nNo Warning.\r\n\r\n2. (Feature Request)\r\n```jsx\r\n<input type=\"radio\" checked={true} onChange={undefined} />\r\n```\r\n`Warning: Failed prop type: You provided a 'checked' prop to a form field without an 'onChange' handler. This will render a read-only field. If the field should be mutable use 'defaultChecked'. Otherwise, set either 'onChange' or 'readOnly'.'`\r\n\r\n3. (Bug?)\r\n```jsx\r\n<select value=\"foo\" readOnly={true}>...</select>\r\n```\r\nNo warning.\r\n\r\n**What is the expected behavior?**\r\n\r\n1. Passing a falsy `value` or `checked` attribute will not trigger a warning, but a truthy value does.\r\n\r\n2. If onChange is passed as undefined (or null?) this should be considered as an acknowledgement and silence the warning. I have a case where I split the render method from the component and use it as a preview. When the component is interactive I use the component. When doing a preview I pass undefined as my change handler. A warning is shown to tell me I \"forgot\" it, but I intended it to be this way.\r\n\r\n3. Going along with 2, I can pass `readOnly={!handleChange}`, but according to DefinitelyTyped this isn't a valid attribute for select. I can't use disabled because it changes the appearance of the field.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0\r\nChrome 65\r\n\r\n**Other**\r\n\r\nA proposed \"fix\" would be to change:\r\n\r\nhttps://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L27-L33\r\n\r\nto:\r\n\r\n```js\r\nif ( \r\n    !(propName in props) || // Fixes 1\r\n    hasReadOnlyValue[props.type] || \r\n    \"onChange\" in props ||  // Fixes 2\r\n    props.readOnly || \r\n    props.disabled \r\n ) { \r\n```\r\n\r\nAnd:\r\n\r\nhttps://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L44-L49\r\n\r\nto:\r\n\r\n```js\r\nif (\r\n    !(propName in props[propName]) || // Fixes 1\r\n    \"onChange\" in props || // Fixes 2\r\n    props.readOnly ||\r\n    props.disabled\r\n) {\r\n```",
        "title": "Issues with ReactControlledValuePropTypes",
        "labels": "Type: Feature Request",
        "id": 44961
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nPerhaps a bug, but could also be seen as a feature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you move an element to a portal through `ReactDOM.createPortal` the element looses focus if it had focus. If the element gains focus while in a portal, when moving out of the portal it looses focus.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would have expected React to maintain focus of the element when moving in or out of a portal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with\r\n\r\nReact version: 16.2\r\nBrowsers: Latest chrome and firefox. I did not test others but expect the behaviour to be the same\r\nOS: Tested on Mac High Sierra\r\n",
        "title": "Elements loose focus when moving to or from a portal",
        "labels": "Type: Feature Request",
        "id": 44962
    },
    {
        "body": "_Apologies if this is documented somewhere, but I was unable to find anything related after a pretty exhaustive search of docs + code._\r\n\r\nAre there any production instrumentation hooks for the reconciler?  Specifically, I'm looking for callbacks/events that would allow me to track overall reconciliation time spans (nothing more granular).  E.g. equivalent to the `(React Tree Reconciliation)` span.\r\n\r\nAs best I can tell, there are `performance.timings` spans reported as of Fiber (and `ReactPerf` prior), but those are only enabled in development mode.",
        "title": "Production reconciler Instrumentation",
        "labels": "Type: Feature Request",
        "id": 44963
    },
    {
        "body": "I was curious earlier if the `onSelect` event works on things other than form elements and `contentEditable` elements, and by disabling a couple of conditions in the code, it seems \u2014 at first brush, at least \u2014 that `onSelect` works splendidly on any element that is focusable (via the `tabIndex` attribute), to obtain things like:\r\n\r\n![ezgif-2-326cf42421](https://user-images.githubusercontent.com/205375/36798178-8aa7fdda-1cb2-11e8-8838-46e04300a09a.gif)\r\n\r\nWould there be any problem with relaxing the conditions for allowing `onSelect` to include elements that have a `tabIndex` attribute? (Other than the case where existing implementations in userland rely on the event being disabled when `contenteditable = true` is removed from an element).",
        "title": "Expose the `onSelect` event for any focusable element?",
        "labels": "Type: Feature Request",
        "id": 44964
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug? Maybe.\r\n\r\n**What is the current behavior?**\r\n\r\nUsing non-delegated handler for submit event.\r\n\r\n**What is the expected behavior?**\r\n\r\nAfter IE9, at least I know, submit event bubbled up.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0",
        "title": "Does react still require non-toplevel submit handler?",
        "labels": "Type: Feature Request",
        "id": 44965
    },
    {
        "body": "(This is related to https://github.com/facebook/react/issues/3965.)\r\n\r\nI'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance.\r\n\r\nInstead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.)\r\n\r\nHowever, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this [CodePen](https://codepen.io/anon/pen/PQQKRP).)\r\n\r\nWould it be possible to skip this re-rendering and effectively move the Portal contents instead?",
        "title": "Support for changing a Portal's container without remounting children?",
        "labels": "Type: Feature Request",
        "id": 44966
    },
    {
        "body": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.\r\n\r\nI think the primary use case is logging explicitly.\r\n\r\nCurrently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.\r\n\r\nWe could provide an API that lazily extracts a whole path of contexts from the tree.\r\n\r\n```js\r\n<FooContext.Provider value={\"foo\"}>\r\n  <FooContext.Provider value={\"bar\"}>\r\n    <FooContext.Provider value={\"baz\"}>\r\n      <App />\r\n    </FooContext.Provider>\r\n  </FooContext.Provider>\r\n</FooContext.Provider>\r\n```\r\n\r\n```js\r\nclass App extends React.Component {\r\n  log() {\r\n    var stack = this.getContextStack(FooContext);\r\n    logToServer(stack); // [\"foo\", \"bar\", \"baz\"]\r\n  }\r\n  render() {\r\n    return <div onClick={this.log} />;\r\n  }\r\n}\r\n```\r\n\r\nIt would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.\r\n\r\ncc @acdlite ",
        "title": "Extracting a Context Stack",
        "labels": "Type: Feature Request",
        "id": 44967
    },
    {
        "body": "With the new context API it is really bulky to create a middle man that consumes one context value, transforms it and provides another one. You have to create many components and store an intermediate state to avoid rerendering the provider if the input is unchanged.\r\n\r\nWe could have a convenience API for this use case.\r\n\r\n```js\r\nfunction transform(inputValue) {\r\n  return [...inputValue, extraData];\r\n}\r\n\r\n<Context.Middleware transform={transform}>{children}</Context.Middleware>\r\n```\r\n\r\ncc @acdlite ",
        "title": "Context Transform",
        "labels": "Type: Feature Request",
        "id": 44968
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.\r\n\r\nWe have a component which manages the DOM tree for all nodes below it outside of React \u2014\u00a0it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:\r\n\r\n```javascript\r\nclass ProseMirror extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// ProseMirror manages the DOM for all nodes below this.el.\r\n\t}\r\n\r\n\tsetRef(el) {\r\n\t\tthis.el = el;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<div ref={this.setRef} />);\r\n\t}\r\n}\r\n```\r\n\r\nAs part of its render cycle, our configuration of ProseMirror ends up calling:\r\n\r\n```javascript\r\nReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);\r\n```\r\n\r\nto render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:\r\n\r\n```javascript\r\nthis.el.querySelector('.my-subcomponent')\r\n```\r\n\r\n...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nQuerying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders.",
        "title": "Provide a way to perform a synchronous render into another root during the commit phase",
        "labels": "Type: Feature Request",
        "id": 44969
    },
    {
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n<h2>FEATURE REQUEST</h2>\r\n\r\n\r\n\r\n**What is the current behavior?**\r\n```js\r\nclass MyComponent extends Component {\r\n  state = { a: 1 }\r\n  method1 = () => {\r\n    this.setState({ a: 2 });\r\n    this.method2();\r\n  }\r\n  method2 = () => {\r\n    // It can not log 2 in the console.\r\n    console.log(this.state.a);\r\n  }\r\n  // xxx...\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nclass MyComponent extends Component {\r\n  state = { a: 1 }\r\n  method1 = () => {\r\n    this.setState({ a: 2 });\r\n    this.method2();\r\n  }\r\n  method2 = () => {\r\n    // With the `getState` method, it should log 2 in the console.\r\n    console.log(this.getState().a);\r\n  }\r\n  // xxx...\r\n}\r\n```\r\n",
        "title": "[FEATURE] implement a `getState` method to get the sync state since `setState` is async.",
        "labels": "Type: Feature Request",
        "id": 44970
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromProps` only receives the nextProps and previousState as arguments.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThe deprecated `componentWillReceiveProps(nextProps)` used to allow code like `this.props.foo !== nextProps.foo`. With the new `getDerivedStateFromProps` function, there's no choice (because it is a static method) but to constantly copy `nextProps.foo` into state in order to access it later.\r\n\r\nThis is illustrated in the example posted to twitter by @gaearon: https://twitter.com/dan_abramov/status/953612246634188800?lang=en\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally (if it's not difficult to implement!) the `getDerivedStateFromProps` would also take the current (previous/old) props as an argument, something like:\r\n\r\n`getDerivedStateFromProps(nextProps, prevState, prevProps)`\r\n\r\nThis would eliminate the need to constantly assign props to state purely for comparison purposes...\r\n\r\nA quick look at the source doesn't make it clear to me how easy this would be though...\r\n\r\nhttps://github.com/facebook/react/blob/4a20ff26ecfe9bc66941d79f7fce2c67be8ee236/packages/react-dom/src/server/ReactPartialRenderer.js#L456\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0",
        "title": "Add oldProps as additional argument to getDerivedStateFromProps ?",
        "labels": "Type: Feature Request",
        "id": 44971
    },
    {
        "body": "This is an incomplete draft for a feature I think could be\r\nreally cool. It can replace higher order components\r\nand context in a way I think is more in the component\r\nspirit of React.\r\n\r\nI do not know if this feature is feasible or desirable for\r\nReact, especially as it would lead to a bigger API surface.\r\nThe proposal is written as if it was documentation to\r\ngive a feel for how it would be to use it.\r\n\r\n# About React middleware\r\nA middleware is applied somewhere in the component tree\r\nand are instantiated just after child components are\r\ninstantiated and just before they mount. In this context,\r\nchild components means child components at any depth.\r\n\r\nMiddleware is used just like normal components, but\r\nit works slightly differently. When a middleware element\r\nis used it added to the middleware stack. If it is\r\nalready on the middleware stack, it removed from\r\nthe stack and pushed to the end, with the most\r\ninnermost props.\r\n\r\n## Simplified example\r\nIn addition to the actual classes, the stack also\r\nincludes its most recent props. But this is roughly\r\nhow it works.\r\n\r\n```javascript\r\n<MiddlewareA>\r\n  {/* middleware stack for \"A\": [MiddlewareA] */}\r\n  <A />\r\n  <MiddlewareB>\r\n    {/* middleware stack for \"B\": [MiddlewareA, MiddlewareB] */}\r\n    <B>\r\n      <MiddlewareA\r\n        {/* middleware stack for \"C\": [MiddlewareB, MiddlewareA] */}\r\n        <C />\r\n      </MiddlewareA>\r\n    </B>\r\n  </MiddlewareB>\r\n</MiddlewareB>\r\n```\r\n\r\n# Lifecycle methods\r\n\r\n## Additions to the existing lifecycle methods\r\n\r\n### Mounting\r\n- new: Middleware.shouldMiddlewareMount\r\n- new: Middleware.shouldMiddlewarePropagate\r\n- Component#constructor\r\n- new: Middleware#constructor\r\n- new: Middleware#middlewareWillMount()\r\n- Component#componentWillMount()\r\n- Component#render()\r\n- new: Middleware#interceptRender()\r\n- Component#componentDidMount\r\n\r\n### Unmounting\r\n- new: Middleware#middlewareWillUnmount\r\n\r\n## static shouldMiddlewareMount(ReactComponent)\r\nDetermine if the current middleware should apply for\r\na component. If the method isn't implemented, the\r\nmiddleware will always be applied.\r\n\r\nIf a middleware is on the middleware stack, this method\r\nis called every time a component is constructed.\r\n\r\n### Example\r\n\r\n```javascript\r\nclass TransformInlineStyles extends React.Middleware {\r\n\r\n  /**\r\n   * Only mount middleware when you set\r\n   * transformInlineStyles to a truthy\r\n   * value. Children of the given\r\n   * component can still enable\r\n   * the middleware\r\n   */\r\n  static shouldMiddlewareMount(Component) {\r\n    return Component.transformInlineStyles\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nconst A = props => (\r\n  // ...\r\n)\r\n\r\nconst B = props => (\r\n  // ...\r\n)\r\nB.transformInlineStyles = true\r\n\r\nconst App = () => (\r\n  <TransformInlineStyles>\r\n    {/* Not applied to \"A\" */}\r\n    <A>\r\n      {/* Applied to \"B\" */}\r\n      <B />\r\n    </A>\r\n  </TransformInlineStyles>\r\n)\r\n```\r\n\r\n## static shouldMiddlewarePropagate(ReactComponent)\r\nDetermine whether the middleware should remain on\r\nthe middleware stack or be excluded for the subtree\r\nbelow the given component. If not specified it returns\r\nfalse, in other words: The default behavior for\r\nmiddleware is to propagate.\r\n\r\nThis is useful if you want to limit middleware from\r\naffecting deeply nested children. It is also useful\r\nfor only giving middleware access to its immediate\r\nchildren.\r\n\r\n### Example\r\n\r\n```javascript\r\nimport React from 'react'\r\n\r\nclass ProvideTheme extends React.Middleware {\r\n  static StopPropagation = props => props.children\r\n\r\n  static shouldMiddlewarePropagate(Component) {\r\n    return Component !== this.StopPropagation\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nconst App = () => (\r\n  <ProvideTheme>\r\n    {/* middleware stack for \"A\": [ProvideTheme] */}\r\n    <A>\r\n      <ProvideTheme.StopPropagation>\r\n        {/* middleware stack for \"B\": [] */}\r\n        <B />\r\n      </ProvideTheme.StopPropagation>\r\n      {/* middleware stack for \"C\": [ProvideTheme] */}\r\n      <C />\r\n    </A>\r\n  </ProvideTheme>\r\n)\r\n```\r\n\r\n## middlewareWillMount(reactInstance)\r\nCalled before the child component calls componentWillMount.\r\nThis is a good place to initialize state for the middleware\r\ninstance.\r\n\r\n## MiddlewareWillUnmount(reactInstance)\r\nCalled before the child component calls componentWillUnmount.\r\n\r\n### Example\r\nThis is a na\u00efve example of how it could be used to trigger\r\nautomatic updates with Mobx.\r\n\r\n```javascript\r\nclass Observer extends React.Middleware {\r\n  middlewareWillMount(reactInstance) {\r\n    this.dispose = autorun(() => {\r\n\r\n      // Let Mobx track the observables\r\n      // used in the render method.\r\n      reactInstance.render()\r\n\r\n      // Force update the component instance\r\n      // after Mobx has stopped tracking the\r\n      // autorun function.\r\n      //\r\n      // .. yes, I know it's hacky.\r\n      setTimeout(() => {\r\n        reactInstance.forceUpdate()\r\n      })\r\n    })\r\n  }\r\n\r\n  middlewareWillUnmount(reactInstance) {\r\n    // Stop listening for changes from Mobx\r\n    this.dispose()\r\n  }\r\n}\r\n```\r\n\r\n## interceptRender(children)\r\ninterceptRender is called with the result from the render\r\nfunction of the component. The resulting value is what is\r\nused to render the DOM.\r\n\r\n### Example\r\nThis is an example of a middleware that transforms object\r\nclasses into a string. The result works similarly to how\r\nng-class works in AngularJS.\r\n\r\n```javascript\r\nclass ObjectClassNames extends React.Middleware {\r\n\r\n  /**\r\n   * This is a life cycle method.\r\n   *\r\n   * Intercept the render method and recursively\r\n   * loop through all children, performing\r\n   * this.transformProps() on their props.\r\n   */\r\n  interceptRender(children) {\r\n    return React.Children.map(children, child => {\r\n      if (! React.isValidElement(child)) {\r\n        return child\r\n      }\r\n      return {\r\n        ...child,\r\n        props: this.transformProps(child.props),\r\n        children: this.interceptRender(child.children)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * If a child has an object className, call\r\n   * this.transformClassname() on it.\r\n   */\r\n  transformProps(props) {\r\n    if (! props || ! props.className || typeof props.className !== 'object') {\r\n      return props\r\n    }\r\n\r\n    return {\r\n      ...props,\r\n      className: this.transformClassname(props.className)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Concatenate the truthy keys of the className\r\n   * object into a string.\r\n   */\r\n  transformClassname(className) {\r\n    const result = []\r\n\r\n    for (const key of Object.keys(className)) {\r\n      if (className[key]) {\r\n        result.push(key)\r\n      }\r\n    }\r\n\r\n    return result.join(' ')\r\n  }\r\n}\r\n\r\nconst Widget = (props) => (\r\n  <div className={{ 'Widget': true, 'Widget--active': props.active }}>\r\n    Some widget\r\n  </div>\r\n)\r\n\r\nconst App = () => (\r\n  <ObjectClassNames>\r\n    <Widget active={true} />\r\n  </ObjectClassNames>\r\n)\r\n```\r\n\r\n# Why middleware?\r\nReact middleware can replace two problematic patterns used with React.\r\n\r\n## Context\r\nThe h2 on context in the React docs says \"Why Not To Use\r\nContext\". Context is however a very useful feature. And\r\npeople have been and will continue to use and abuse it\r\nin the forseeable future. React Router has started\r\nabusing context in its most recent version, which shows\r\nthat there is clearly a need here.\r\n\r\nWith middleware, as I propose it, you would be able to\r\ninject props into an arbitrary subtree of your app. This\r\nhas performance implications, but would be an ideal\r\nscenario for libraries such as React Router, as the\r\nrelevant props (or as it is now, context) rarely\r\nchanges. With middleware shouldComponentUpdate\r\nwill still function like you would expect.\r\n\r\n## Higher order components\r\nA primal rule of programming is DRY. When using Mobx\r\nwith React, you must use the observer decorator on\r\nall reactive classes. This isn't a really big deal,\r\nbut not having to include that would reduce the size\r\nof every single observer component by two lines and\r\nmost importantly, I wouldn't forget it.\r\n\r\nWhen creating a higher order component static properties\r\nare no longer available. The package hoist-non-react-static\r\nis designed so that you should be able to access static\r\nproperties of higher order components transparently.\r\nIf a static property is initialized in the lifecycle\r\nmethods of a component, it will however not be proxied.\r\n\r\nCreating higher order components is also a messy affair.\r\n\r\nWith middleware you could achive the same thing in a React\r\nway. To replace connect from react-redux you could set\r\nshouldMiddlewarePropagate to return false, and it would\r\naffect only one component.\r\n\r\nAlternatively you could use static properties for\r\nmapStateToProps and mapDispatchToProps.",
        "title": "Feature request: middleware",
        "labels": "Type: Feature Request",
        "id": 44972
    },
    {
        "body": "i found this issue: https://github.com/facebook/react/issues/4770,  and @sophiebits said that React never reuses an instance after it's been unmounted. \r\n\r\ndoes it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?\r\n",
        "title": "can React support feature like keep-alive in Vue?",
        "labels": "Type: Feature Request",
        "id": 44973
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI want to request a feature.\r\n\r\n**What is the current behavior?**\r\n\r\nWe have no API to verify a ReactNode is a React 16 Fragment. Though now we can use `React.isValidElement(instance) && typeof instance.type === 'symbol'` to distinguish it. It's verbose and seems uncertianly right.\r\n\r\n**What is the expected behavior?**\r\n\r\nAdd api:\r\n\r\n```\r\nReact.isFragment(object)\r\n```\r\nVerifies the object is a React.Fragment. Returns true or false.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2",
        "title": "Add React.isFragment api for verifying Fragment",
        "labels": "Type: Feature Request",
        "id": 44974
    },
    {
        "body": "The addition of the `Fragment` in 16.2.0 is fantastic and helps keep our HTML semantic and clean. Unfortunately there is still no way to inject HTML without a wrapping tag.\r\n\r\n```jsx\r\nconst HTML = <span>Hello World</span>;\r\n\r\n<div key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />\r\n```\r\n\r\nwhich will render:\r\n\r\n```html\r\n<div><span>Hello World</span></div>\r\n```\r\n\r\nIt would be mostly helpful for rendering HTML from jsx on the back end rather than in the SPA context. To me `Fragment` seems to be the ideal candidate to support `dangerouslySetInnerHTML` so that you may inject HTML without wrapping elements.\r\n\r\n```jsx\r\nconst HTML = <span>Hello World</span>;\r\n\r\n<Fragment key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />\r\n```\r\n\r\nwould render:\r\n\r\n```jsx\r\n<span>Hello World</span>\r\n```\r\n\r\nSimple, obvious and aligned with the current API.",
        "title": "Have Fragments support dangerouslySetInnerHTML",
        "labels": "Type: Feature Request",
        "id": 44975
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG or undefined behaviour\r\n\r\n**What is the current behavior?**\r\n\r\nDoing\r\n```\r\nReact.Children.toArray(\r\n  ReactDOM.createPortal(...)\r\n)\r\n```\r\n\r\nfails with:\r\n```\r\nObjects are not valid as a React child (found: object with keys {$$typeof, key, children, containerInfo, implementation}). If you meant to render a collection of children, use an array instead.\r\n```\r\n\r\nNamely, the following complete snippet fails:\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { render, createPortal } from 'react-dom';\r\n\r\nconst RenderChildren = ({ children }) => {\r\n  children = React.Children.toArray(children)\r\n  return <h1>Renders children with toArray: {children}</h1>\r\n}\r\n\r\n\r\nconst App = () => ( \r\n  <RenderChildren name=\"CodeSandbox\">\r\n    {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}\r\n  </RenderChildren>\r\n);\r\n\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n\r\nwhile the following one, which wraps the portal in another element works just fine\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { render, createPortal } from 'react-dom';\r\n\r\nconst RenderChildren = ({ children }) => {\r\n  children = React.Children.toArray(children)\r\n  return <h1>Renders children with toArray: {children}</h1>\r\n}\r\n\r\n\r\nconst App = () => ( \r\n  <RenderChildren name=\"CodeSandbox\">\r\n    <div>\r\n        {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}\r\n    </div>\r\n  </RenderChildren>\r\n);\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\n```\r\n**What is the expected behavior?**\r\nI am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted.\r\n\r\nThe same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal \ud83d\ude04  - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that?\r\n\r\nLet me know your thoughts\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using React 16.*",
        "title": "React.Children.toArray and React.cloneElement do not work with portal elements",
        "labels": "Type: Feature Request",
        "id": 44976
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI want to request a feature\r\n\r\n**What is the current behavior?**\r\n\r\nUsing `Symbols` as element keys throws a type error.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nWhen using `key={Symbol('myKeySymbol')}` we get the following `TypeError: Cannot convert a Symbol value to a string at Object.ReactElement.createElement`\r\n\r\n[codesandbox here](https://codesandbox.io/s/733pypz57j)\r\n\r\n**What is the expected behavior?**\r\nUsing `Symbols` as keys should work seamlessly, in my opinion element keys are a perfect use-case for `Symbols`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nUsing React `16.0.0` and the browsers affected are Safari, Chrome and Firefox on OSX, but I'm pretty sure this is not browser dependent but a matter of implementation.\r\n\r\n~~~\r\n\r\nThanks.\r\n",
        "title": "Symbols as keys in children as arrays or iterators",
        "labels": "Type: Feature Request",
        "id": 44977
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no way to distinguish if a `componentDidMount` or `componentWillMount` lifecycle method was called in response to a call to `ReactDOM.hydrate`.\r\n\r\n**What is the expected behavior?**\r\n\r\nI have a component that scrolls to the top of the page in componentDidMount. This makes sense when the component is first created within the client. However, it doesn't make sense when the component has been hydrated, as `componentDidMount` is called after the content is already visible, and possibly after the user has already scrolled.\r\n\r\nWould it be possible to add a `componentWillHydrate` lifecycle method? Then I could do something like this to achieve the desired behavior:\r\n\r\n```js\r\ncomponentWillHydrate() {\r\n  this.hydrated = true \r\n}\r\ncomponentDidMount() {\r\n  if (!this.hydrated) {\r\n    this.scrollToTop()\r\n  }\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll",
        "title": "Lifecycle methods for ReactDOM.hydrate",
        "labels": "Type: Feature Request",
        "id": 44978
    },
    {
        "body": "Creating this issue to track https://github.com/facebook/react/pull/11555. I intend to close the PR as it's outdated, but we probably want to turn it into a real RFC and potentially get it in during 16.x.",
        "title": "Add React.createRef() as the migration path for string refs",
        "labels": "Type: Feature Request",
        "id": 44979
    },
    {
        "body": "Second argument of `componentDidCatch` contains componentStack like this:\r\n```\r\n{\"componentStack\":\"\r\n in _Header (created by onlyUpdateForKeys(_Header))\r\n in onlyUpdateForKeys(_Header) (created by TDSection)\r\n in TDSection (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by AutoLookup)\r\n in AutoLookup (created by GroupContainer)\r\n in GroupContainer (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by _Content)\r\n in div (created by _Content)\r\n in _Content (created by pure(_Content))\r\n in pure(_Content) (created by ContentList)\r\n in ContentList (created by TabContainer)\r\n in TabContainer (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by AutoLookup)\r\n in AutoLookup (created by CardBase)\r\n in div (created by SharedStorage)\r\n in SharedStorage (created by CardBase)\r\n in TDValidation (created by CardBase)\r\n in CardBase (created by Wrapper)\r\n in Wrapper (created by Connect(Wrapper))\r\n in Connect(Wrapper) (created by mapProps(Connect(Wrapper)))\r\n in mapProps(Connect(Wrapper)) (created by Connect(mapProps(Connect(Wrapper))))\r\n in Connect(mapProps(Connect(Wrapper))) (created by getContext(Connect(mapProps(Connect(Wrapper)))))\r\n in getContext(Connect(mapProps(Connect(Wrapper)))) (created by Card)\r\n in Card (created by branch(Card))\r\n in branch(Card) (created by Connect(branch(Card)))\r\n in Connect(branch(Card)) (created by getContext(Connect(branch(Card))))\r\n in getContext(Connect(branch(Card))) (created by Connect(getContext(Connect(branch(Card)))))\r\n in Connect(getContext(Connect(branch(Card)))) (created by getContext(Connect(getContext(Connect(branch(Card))))))\r\n in getContext(Connect(getContext(Connect(branch(Card))))) (created by mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))\r\n in mapProps(getContext(Connect(getContext(Connect(branch(Card)))))) (created by Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))))\r\n in Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))) (created by getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))))\r\n in getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))) (created by _Tab)\r\n in div (created by LoadingWrapper)\r\n in div (created by LoadingWrapper)\r\n in LoadingWrapper (created by Connect(LoadingWrapper))\r\n in Connect(LoadingWrapper) (created by _Tab)\r\n in div (created by _Tab)\r\n in _Tab (created by Connect(_Tab))\r\n in Connect(_Tab) (created by withContext(Connect(_Tab)))\r\n in withContext(Connect(_Tab)) (created by Page)\r\n in Page (created by Connect(Page))\r\n in Connect(Page) (created by onlyUpdateForKeys(Connect(Page)))\r\n in onlyUpdateForKeys(Connect(Page)) (created by ContentRouter)\r\n in ContentRouter (created by _Content)\r\n in _Content (created by Connect(_Content))\r\n in Connect(_Content) (created by _SplitPane)\r\n in div (created by ContentWrapper)\r\n in div (created by ContentWrapper)\r\n in ContentWrapper (created by _SplitPane)\r\n in div (created by _SplitPane)\r\n in _SplitPane (created by Connect(_SplitPane))\r\n in Connect(_SplitPane) (created by _MasterLayout)\r\n in div (created by _MasterLayout)\r\n in div (created by _MasterLayout)\r\n in _MasterLayout (created by Connect(_MasterLayout))\r\n in Connect(_MasterLayout) (created by Root)\r\n in div (created by ThemeChanger)\r\n in ThemeChanger (created by Connect(ThemeChanger))\r\n in Connect(ThemeChanger) (created by Root)\r\n in StartupSync (created by Connect(StartupSync))\r\n in Connect(StartupSync) (created by Root)\r\n in _default (created by Root)\r\n in Provider (created by Root)\r\n in Root\r\n in AppContainer\"}\r\n```\r\nThis data don't contain any helpful error data if user send me ticket to bugtracker. Can info contain props of every component?\r\n",
        "title": "Include component props into the stack from componentDidCatch()",
        "labels": "Type: Feature Request",
        "id": 44980
    },
    {
        "body": "**Feature request**\r\nWe need to have a way to build the initial state of ReactComponent in case of usage of classes.\r\n\r\n**What is the current behavior?**\r\nWarning in case this.state modified in willComponentMount.\r\n\r\nAccess to partially constructed object in case of somewhat complex state building logic in the constructor.\r\n\r\nFor example, if we have a hierarchy of classes with the _buildState method called in the constructor to generate an initial state.\r\nDerived class overrides the _buildState method to have a richer state. In result, part of the object related to the derived class won't be constructed yet and can't be accessed in the _buildState.\r\n\r\nThe buildState approach is currently used in ReSub framework:\r\nhttps://github.com/Microsoft/ReSub\r\n\r\n**What is the expected behavior?**\r\nRather no warning in case of this.state modification or new Lifecycle method which is called right after constructor call which returns the state.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16+ is affected.\r\n",
        "title": "Lifecycle method to build initial state for classes",
        "labels": "Type: Feature Request",
        "id": 44981
    },
    {
        "body": "Currently ReactInternals.addUserTimingListener enables logging to the User Timing API inside a `setTimeout`. \r\nHowever, for the use case of building a profiling tool where instrumentation is turned off most \r\nof the time to avoid overhead, then randomly turned on for a period to take a sample, it would be ideal to be able to enable this logging synchronously (eg. turn it on at the start of a callstack and turn it off again at the end of the synchronous stack).\r\n\r\nThis is complicated by the fact that the enabled state of the logging should not be toggled inside a React callstack. As the profiler would have control over when the toggling happens, I think it would be fine to throw an error/return false/something like that if the logging was toggled while inside a React stack, allowing the profiler to try again later.\r\n\r\nIn fact, if the toggling was synchronous the profiler cp avoid this error by doing the toggling at the start and end of an event handler/setTimeout/reqAnimFrame etc which would ensure that we are not inside synchronous call into React (though I'm not quite sure what the implications of Fiber are here; would React async rendering mean that we could re-enter from the event loop at a time when this toggling should not happen?). \r\n\r\nAlternatively the toggling could happen 'async but just later in the same React stack' (like setState). In this case the code requesting the toggling would probably need some kind of callback to know that toggling happened so it can keep track of whether React's logging is on or off. However this variant seems like it would be more complicated to implement, and for our use case I don't think it's any more useful than having the toggling just fail in a recoverable way.\r\n\r\ncc @gaearon ",
        "title": "Enable synchronously toggling experimental addUserTimingListener",
        "labels": "Type: Feature Request",
        "id": 44982
    },
    {
        "body": "This is a feature request. It relates to https://discuss.reactjs.org/t/suggestion-for-global-context/9035\r\n\r\nThis has been a pain point for me, and I'm sure we can do better. The issue: How to have some state available to all components without passing everything down on props through the component tree.\r\n\r\nI'm speaking about global state. So why not use context? I have a couple of issue with it.\r\n\r\n1. It's not the root component's job to receive and disseminate state. The root component is just some component. It shouldn't care if it's root or not. Maybe you have (example using Express):\r\n\r\n    `res.render('homepage.jsx', {});`\r\n\r\nBut some other page might just as well have:\r\n\r\n    res.render('otherpage.jsx', {}) where otherpage has:\r\n\r\n    <div>\r\n      <Something />\r\n      <Homepage />\r\n    </div>\r\n\r\nComponents can be composed however you like, they shouldn't care what depth they're at.\r\n\r\n2. Above is talking about a multipage app. The thinking around React seems to be so skewed toward to the special case of Single Page App. SPA is sometimes the right choice. If you're Google Maps it's clearly right. If you're something broader in scope like Amazon.com it's clearly not. The general case is much more interesting to solve.\r\n\r\n3. Having every root component wrapped in some `<Provider>` that publishes context downwards, and every non-root component wrapped in some \"receiver\" higher level component that declares context is just boilerplate. It's not expressive, it's bookkeeping.\r\n\r\n4. Alternatives: There aren't any as far as I know. Each component only knows about the props (and possibly context) passed in, it doesn't have any handle on data for the current render() call. Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped (like query params, route params, cookies, headers, anything generated by middleware based on these things).\r\n\r\n-- PROPOSAL --\r\n\r\nWhy not just handle global state at a higher level than props passed component to component? Why not extend ReactDOM.render to take a 4th argument for global context? It would just make everyone's life easier. Don't even worry about changes firing componentWillReceiveProps, at least as a first version.\r\n\r\nThink of it as analogous to Express and the \"req\" object that's passed around. One should always have access to some \"per request\" object. So many things would be useful to put in there (authenticated user, geolocation, \"store\" from Redux, query and route params, etc, etc).\r\n\r\nIt would look like:\r\n\r\n    ReactDOM.render(rootComponent, someDiv, callback, {... request specific data ...})\r\n\r\nWhere request specific data might have things that are truly request specific and also things that are the same across requests. The latter can be done with imports but it's a bit messy -- you end up with code like:\r\n\r\n    if (typeof window != 'undefined') {\r\n      // Client, get value from window object\r\n    } else {\r\n      // Server, get value from filesystem or wherever\r\n    }\r\n\r\nJust having global data available to all components in the tree simplifies things a lot. Don't you think?\r\n",
        "title": "Feature request: Global state at the render/hydrate level",
        "labels": "Type: Feature Request",
        "id": 44983
    },
    {
        "body": "I believe autoFocus should be improved for the better DX. Browser-native autoFocus is nice and all but does not work when a component is updated. Sure, that's fine. But it's pretty common to need focus after a component has been updated. Yep, declaratively. How? Immutable data ftw. At least, it works for me.\r\n\r\nI use this wrapper component https://github.com/este/este/blob/master/components/AutoFocus.js\r\n\r\nCheck componentDidUpdate method. I hope it makes sense. \r\n",
        "title": "smarter autoFocus",
        "labels": "Type: Feature Request",
        "id": 44984
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nreact-dom SSR performance could be improved using server-side cache, but currently the\r\nReactPartialRenderer is currently not accessible from the `react-dom` package.\r\n\r\n**Desired behavior**\r\nOn the **server** only, it would be nice if _plugins_ could be used to improve render performance. Currently the only way to do this would be to externally maintain a renderer implementation. However, the `ReactPartialRenderer` already contains all the behavior required to support plugins - with a little refactoring. \r\n\r\nI've refactored the `ReactPartialRenderer` and created a **proof of concept** for supporting _plugins_ for react server side rendering. You can see the [ReactPartialPluginRenderer](https://github.com/adam-26/react/commits/pluginRenderer) in this fork, its comprised of 3 different commits:\r\n* [#1](https://github.com/adam-26/react/commit/0b2f7852a19ffabac6b83581f6821f0346434ef0): Strict refactoring of `ReactPartialRenderer`, the only addition is exporting the `ReactPartialRenderer` from the react-dom server package\r\n* [#2](https://github.com/adam-26/react/commit/d30792a8ba42d50188c0dd1fddbc73275b8ff91f): Create the `ReactPartialPluginRenderer` by extending the refactored `ReactPluginRenderer`, and introduce a plugin interface\r\n* [#3](https://github.com/adam-26/react/commit/d4f01973d535c9eb34ba450190b7c8205fe593df): Proof of concept plugin implementations and application example.\r\n\r\nYou can [view instructions for running the example in the repo](https://github.com/adam-26/react/tree/pluginRenderer/fixtures/ssrPlugins).\r\n\r\nI understand that exporting `ReactPartialRenderer` exposes the internal API, which is far from ideal. Is there any scenario in which `ReactPartialRenderer` would be made to be accessible from the `react-dom` package? Or would a plugin implementation similar to above be required to maintain its own forked `ReactPartialRenderer`? Maintaining the plugin renderer in its own repo isn't a problem, but It would be great if plugins could be used without needing to maintain the core server renderer.\r\n\r\nThanks, Adam.\r\n\r\n\r\n",
        "title": "Add hooks to ReactDOMServer to support caching",
        "labels": "Type: Feature Request",
        "id": 44985
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI\u2019d like to request a feature.\r\n\r\n**What is the current behavior?**\r\n\r\nTo create a portal, you currently have to use a function:\r\n\r\n```jsx\r\nfunction MyComponent(props) {\r\n  return <Foo>\r\n    ...\r\n    {ReactDOM.createPortal(<Bar>\r\n      ...\r\n    </Bar>, myElement)}\r\n  </Foo>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n```jsx\r\nfunction MyComponent(props) {\r\n  return <Foo>\r\n    ...\r\n    <ReactDOM.Portal target={myElement}>\r\n      <Bar>...</Bar>\r\n    </ReactDOM.Portal>\r\n  </Foo>\r\n}\r\n```\r\n",
        "title": "Add a <ReactDOM.Portal /> element",
        "labels": "Type: Feature Request",
        "id": 44986
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nThis test\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport renderer from 'react-test-renderer';\r\n\r\nconst Drop = () => (\r\n  createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )\r\n);\r\n\r\ntest('Drop renders', () => {\r\n  const component = renderer.create(\r\n    <div>\r\n      <input />\r\n      <Drop />\r\n    </div>\r\n  );\r\n  const tree = component.toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\n\r\nfails with\r\n\r\n> Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\r\n\r\nThis test passes if I wrap createPortal in a container.\r\n\r\n```javascript\r\n<div>\r\n  {createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )}\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLastest\r\n",
        "title": "React-test-renderer: support for portal",
        "labels": "Type: Feature Request",
        "id": 44987
    },
    {
        "body": "In order to call this method, you'd have to access it via `event.nativeEvent.stopImmediatePropagation()`: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation\r\n\r\nIt'd be awesome if this was supported on `event` itself. I did see a [prior issue](https://github.com/facebook/react/issues/1734) for this, but it was for a use case that sIP wasn't required for.\r\n\r\nFor a specific use case: if you want to kill hover events for touch input, `onTouchStart` will trigger `onMouseOver` and `stopImmediatePropagation` cancels that internal cascade.",
        "title": "stopImmediatePropagation is not available for synthetic events",
        "labels": "Type: Feature Request",
        "id": 44988
    },
    {
        "body": "## Coming from search? See workaround here: https://github.com/facebook/react/issues/11538#issuecomment-417504600. And star this issue: https://bugs.chromium.org/p/chromium/issues/detail?id=872770.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, though there's a decent chance it's a Chrome/Google Translate one\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using Google Translate on a page using React 16, a certain code pattern produces a Javascript error (`Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`) when the rendered content changes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\n(This has only been checked on macOS 10.13.1)\r\n1. Navigate to https://qq49kwjynj.codesandbox.io/ in a Chrome browser set to some language other than Japanese.\r\n2. Right click the page and select \"Translate to English\"\r\n3. Click the checkbox, and the error will show.\r\n\r\nThe source of the example can be found at https://codesandbox.io/s/qq49kwjynj\r\nThe part of the code that seems to cause it is the following two lines:\r\n```js\r\n{this.state.checked && \"\u9078\u629e\u6e08\u307f\"}\r\n{!this.state.checked && \"\u7121\u9078\u629e\"}\r\n```\r\nChanging this to the following fixes the behavior with Google Translate:\r\n```js\r\n{this.state.checked ? \"\u9078\u629e\u6e08\u307f\" : \"\u7121\u9078\u629e\"}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should not produce an error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI created an identical example with React 15 at the following pages:\r\nhttps://p93xxmr0rq.codesandbox.io/\r\nhttps://codesandbox.io/s/p93xxmr0rq\r\nWhen repeating the same steps outlined above, no error was produced.\r\nIt only seems to affect React 16.\r\nAs this is a Chrome-only feature, it only affects Chrome.",
        "title": "Make React resilient to DOM mutations from Google Translate",
        "labels": "Type: Feature Request",
        "id": 44989
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n",
        "title": "createPortal: support option to stop propagation of events in React tree",
        "labels": "Type: Feature Request",
        "id": 44990
    },
    {
        "body": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.\r\n\r\nThe `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.) \r\nThe browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)\r\n\r\nAs indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted.",
        "title": "React should recognize the `valueAsDate` property on DOM elements",
        "labels": "Type: Feature Request",
        "id": 44991
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**  \r\n\r\nbug or v16 feature (dont know)\r\n\r\n**What is the current behavior?**  \r\n\r\nWhen building in dev environment, performance timeline measures appear by default,  \r\nie. without `?react_perf` query string as in v15 described [here](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)\r\n\r\n`react@16.0.0`\r\n\r\nif it's not a bug, then what's the way to disable `react` perf measures?  \r\n\r\nNeed a way to clear timeline to focus on my own custom perf measures.\r\n",
        "title": "Add a way to opt out of User Timing API calls",
        "labels": "Type: Feature Request",
        "id": 44992
    },
    {
        "body": "Hi,\r\nI'm trying to use the \\<animateTransform\\> Element in a React project. But I'm not able to use the \"onend\" attribute:\r\n\r\n> Warning: Unknown event handler property `onend`. It will be ignored.\r\n\r\nIs there a workaround for this ?",
        "title": "Support onEnd SVG event",
        "labels": "Type: Feature Request",
        "id": 44993
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nA feature\r\n\r\n**What is the current behavior?**\r\nN/A\r\n\r\n**What is the expected behavior?**\r\nIt's great that React 16 integrates with the timeline in browsers dev tools and that is very helpful in cases where you are trying to fix the performance of a specific thing. However I do miss the perf tool from previous versions and could not find any issue tracking a re-implementation of such a tool.\r\n\r\nWhat was great in the perf tool that is not covered as well with timeline integration?\r\n - Easily see which components render needlessly and therefore should be easily eliminated with sCU (and what impact it will give)\r\n - Easily see the collective render time of a component. I might for example have a component that renders very fast but which have very many instances and thus contribute to a significant render time anyway.\r\n - Give an overview of which components are slow by themselves and which are fast by themselves but render slow components. The flamegraph shows this, but I find it to specific in some scenarios with too much detail that can distract.\r\n\r\nBasically the wasted, exclusive and inclusive tables. The DOM table I feel is much better represented by the timeline integration.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16, yes the perf addon in 15 was good.",
        "title": "Release a tool for statistical perf analysis (a replacement for ReactPerf)",
        "labels": "Type: Feature Request",
        "id": 44994
    },
    {
        "body": "Just before I have my view, please take a look at these 2 examples\r\n\r\nHello World React => [App.jsx](https://git.io/vdNQb)\r\nHello World Vue => [App.vue](https://git.io/vdNQN)\r\n\r\nIdentical? Isn't it?\r\nYes these are two different **paradigm** but hey they are expressing same things and both are doing it in the same way by taking benefits of the Virtual DOM \r\n\r\nMy Feature Request is that,\r\nJust like Vue supports [JSX](https://vuejs.org/v2/guide/render-function.html) for Programmatic situations.\r\nI think React should also support HTML5 Templates for Non Programmatic situations?? \r\n\r\nAlso, **Imagine trying to create a website based on an existing theme that you purchased. Changing it over to JSX literally will feel like sticking a knife through your eyeballs. With Templates, existing HTML just works.**\r\n\r\nPlease also note that Programmatic situations have a low use case\r\nand Non Programmatic situations have a high use case.",
        "title": "HTML5 Templates apart from JSX for Non Programmatic situations",
        "labels": "Type: Feature Request",
        "id": 44995
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement\r\n\r\n**What is the current behavior?**\r\n\r\n[`SyntheticKeyboardEvent`](https://github.com/facebook/react/blob/e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b/packages/react-dom/src/events/SyntheticKeyboardEvent.js) does not currently support the `code` property.\r\n\r\n`code` ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)) is nice to have when you want to write key-specific handling\u2014rather than input-specific (dependent on layout and modifier keys) handling.\r\n\r\n**What is the expected behavior?**\r\n\r\n`SyntheticKeyboardEvent` already exposes a `keyCode` property. It should have a `code` property as well.\r\n\r\nCurrently, if you want to use the `keyboardEvent`'s  `code`, you must access it through `SyntheticKeyboardEvent`'s `nativeEvent`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAffects React 16 and earlier (I assume).\r\n",
        "title": "Add `code` property to `SyntheticKeyboardEvent`",
        "labels": "Type: Feature Request",
        "id": 44996
    },
    {
        "body": "Currently there is no way to use event handlers in functional components without performance degradation e.g - unnecessary function recreations through .bind or arrow functions \r\n```\r\nfunction Node({node}){\r\n  return (\r\n    <div>\r\n      <button onClick={()=>node.parent.removeChild(node)}>remove</button>\r\n      <div>{node.text}</div>\r\n   </div>\r\n  )\r\n}\r\n```\r\nIn this case on each render a new handler will be created, and also react will need to perform some bookkeeping - remove previous handler from dom element and add new handler (ok, with event delegation system react will not touch dom elements and only replace handler somewhere in internal structure but what about events which don't bubble?) and all this take some noticeable time in my application. \r\nSure I can change to class components and solve problem by bind handlers only once when component will be created but what if I want to use functional components? \r\nSo in my application I came up with new and fastest method of binding handlers. Actually it does not preform binding at all). What is the reason of binding function in event handler? - we need to access current component props or current component state. Is there another way to get props or state of component? React does not describe this in docs but yes - we can access to props or state of current component without any unnecessary functions recreations on each render.\r\n```\r\nfunction Node({node}){\r\n  return (\r\n    <div>\r\n      <button onClick={onClick}>remove</button>\r\n      <div>{node.text}</div>\r\n   </div>\r\n  )\r\n}\r\n\r\nfunction onClick(e){\r\n  const {node} = getProps(e);\r\n  node.parent.removeChild(node)\r\n}\r\n\r\nfunction getProps(e){\r\n  return e.target[Object.keys(e.target).filter(k => k.indexOf('__reactInternalInstance') !== -1)[0]]._debugOwner.memoizedProps;\r\n} \r\n```\r\nand this demo https://codesandbox.io/s/4r59w89lox\r\n\r\nTo perform event delegations in an efficient way react need to assign current vdom-element to each rendered dom element. And vdom-element has link to actual owner component where we can get our props and state. So why react concealed this from developers and made them suffer not only from performance degradation but also from choosing problem (how many articles and advices recommend or investigate this rule to not bind handlers in render function, and how many solutions exist - use bind in constructor ? - use class field properties with arrow functions ? - use autobind decorators?) ??? And my solution not need even to recreate handlers on each component instantiation like all current solutions does, so it definitely the fastest way. I highly suggest make this api public or make some helper to get current props and state from event.target",
        "title": "New way to bind event handler function",
        "labels": "Type: Feature Request",
        "id": 44997
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nAn (almost) immediate re-render is due after `componentWillReceiveProps` is called, unless `shouldComponentUpdate` says otherwise.\r\n\r\n**What is the expected behavior?**\r\nIf new props in `componentWillReceiveProps` cause an async call that's soon going to update the state anyway, won't it be cool if React might as well wait for that async call to do it's thing (which calls `setState`) and do one render instead of two?\r\n\r\nPotential solution: React can see if `componentWillReceiveProps` returns a `Promise`. If it does it defers the re-render until it `resolves`.\r\n\r\n```javascript\r\nasync componentWillReceiveProps(nextProps) {\r\n    const { postId } = nextProps;\r\n    const postTitle = await fetch(`https://api.example.com/posts/${postId}`);\r\n    this.setState({ postTitle });\r\n    return;\r\n}\r\n```\r\n",
        "title": "Async componentWillReceiveProps to allow state update",
        "labels": "Type: Feature Request",
        "id": 44998
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now, the synthetic `onBeforeInput` event is being created based on two other events:\r\n\r\n- `textInput` when possible\u2014which is in Webkit.\r\n- `keypress` as a fallback.\r\n\r\nBut these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:\r\n\r\n- `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.\r\n- `getTargetRanges()` tells you where the input is taking place in the DOM.\r\n\r\nRight now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:\r\n\r\n- `beforeinput`\r\n- `textInput`\r\n- `keypress`\r\n\r\nWhich guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.\r\n\r\n---\r\n\r\nThe `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).) \r\n\r\nWithout that extra information you have to fallback to hackier behavior\u2014allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.\r\n\r\n---\r\n\r\nThere is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.\r\n\r\n\r\n",
        "title": "Use the native `beforeinput` event if it's supported",
        "labels": "Type: Feature Request",
        "id": 44999
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nIn React 16, the `data-react-checksum` attribute was removed from the server rendered markup. In previous versions, we used this attribute to beacon checksum mismatches to our log servers to be notified of production issues. With the attribute removed, we have no mechanism to determine if a checksum mismatch occurred.\r\n\r\nI'm aware that checksum issues no longer cause the entire DOM to re-render, however, it is still important that we know when they do occur. A typical use case is when we display ads or autoplay video. We want to know if an ad gets re-rendered (double counted) or an autoplay video is interrupted due to React re-rendering the DOM.\r\n\r\nOther related bugs/requests:\r\n- Ability to debug checksums in production - https://github.com/facebook/react/issues/10016\r\n\r\n**What is the expected behavior?**\r\nThe solution does not necessarily need to re-introduce the checksum attribute again. It could be some other event, hook, or callback that applications can leverage to handle checksum issues.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React 16\r\n- All browsers\r\n- Worked in  <= React 15\r\n",
        "title": "Need a hook for hydration mismatch",
        "labels": "Type: Feature Request",
        "id": 45000
    },
    {
        "body": "** This is both bug / feature\r\nhttps://www.x3dom.org/\r\n\r\nI used to be able to use x3dom with React. It was great.\r\n\r\n** React ^15 I was able to use the **is** property to generate custom elements and custom attributes that could be picked up by x3dom i.e. <shape is render=\"true\"/>\r\n\r\nNow with React16 i get many warning messages for all of the custom x3dom tag elements. Likewise it seems that certain attributes aren't getting rendered either. For instance if I do x3dom elements like so:\r\n\r\n`<fontstyle size=\"0.6\"/>` I'll get `<fontstyle/>` output without the size attribute.\r\n\r\nI don't think React should have to know what x3dom tags are, nor should they be hard-coded into React. There has got to be a way to have React output custom tags without throwing warning messsages. Why not just re-introduce the **is** attribute to indicate that it's a custom tag with custom attributes? ",
        "title": "React16 not compatible with x3dom",
        "labels": "Type: Feature Request",
        "id": 45001
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\ncurrently you cannot set the srcObject for a video.  You get an error:\r\n```\r\nWarning: React does not recognize the `srcObject` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `srcobject` instead. If you accidentally passed it from a parent component, remove it from the DOM element.\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\n```\r\nreturn (\r\n      <video srcObject={this.props.stream}>\r\n)\r\n```\r\n\r\nThere is another issue that was closed but the issue was never resolved: https://github.com/facebook/react/pull/1474\r\n\r\nFirefox has deprecated using `URL.createObjectURL()` and Safari doesn't support it.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe ability to set the `srcObject` on a video element.  This is common for WebRTC applications now.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.0.0\"",
        "title": "Support srcObject attribute for video element",
        "labels": "Type: Feature Request",
        "id": 45002
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen adding event handlers, it is common practice to do something like:\r\n\r\n```js\r\nconst MyButton = ({ canClick, onClick }) =>\r\n  <div onClick={canClick && onClick}></div>\r\n```\r\n\r\nThis was fine in React 15.x, but in 16 it reports a warning, which is technically correct:\r\n\r\n> Expected `onClick` listener to be a function, instead got a value of `boolean` type.\r\n\r\nHowever, this now forces you to use the more verbose variant:\r\n\r\n```js\r\nconst MyButton = ({ canClick, onClick }) =>\r\n  <div onClick={(canClick && onClick) ? onClick : undefined}></div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI think it makes sense to allow `null`, `false`, and `undefined` in addition to function types for event handlers. Or just anything \"falsy\", although that may be too much to ask.\r\n\r\nI definitely understand the rationale from a type safety perspective, but this does make it less pragmatic. I am personally a huge fan of how JS evaluates `null`, `0`, `\"\"` and `undefined` to `false`, and it reduces the amount of boilerplate needed to conditionally wire up handlers.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16, all browsers. This did not emit a warning in React 15 and below.\r\n",
        "title": "Loosen up type requirements for event handlers",
        "labels": "Type: Feature Request",
        "id": 45003
    },
    {
        "body": "react and react-dom versions: 16.0.0\r\n\r\n```js\r\nconst { createElement: h } = require('react');\r\nconst { renderToStaticMarkup } = require('react-dom-server');\r\n\r\nrenderToStaticMarkup(h('div', null, h('svg', null, h('span')))) \r\n// '<div><svg><span></span></svg></div>'\r\n```\r\n\r\nBut they shouldn't be mixed:\r\n\r\nin browser console:\r\n\r\n```js\r\nnew Range().createContextualFragment('<div><svg><span></span></svg></div>')\r\n// \"<div><svg></svg><span></span></div>\"\r\n```\r\nI guess it's programmer responsibility to avoid that case? I understand that for performance you don't check this",
        "title": "Warn about unexpected HTML inside SVG",
        "labels": "Type: Feature Request",
        "id": 45004
    },
    {
        "body": "When upgrading to 16.0.0 from 15.6.1, react-test-renderer started failing on my tests with the message:\r\n> test renderer is not available in production mode.\r\n\r\nI have in fact been running unit tests using this renderer during my production build.\r\n\r\nI'm trying to understand: why was this restriction introduced?  I saw the change was made in #9514 but couldn't find any explanation on the pull request or the documentation as to why production mode is now disallowed for this renderer.\r\n\r\nThanks,\r\nAlex",
        "title": "Production Check in react-test-renderer",
        "labels": "Type: Feature Request",
        "id": 45005
    },
    {
        "body": "Currently, its not easy to write global logic that executes after React has re-rendered. The `componentDidUpdate` lifecycle method works great when your logic is isolated to a component, but I've found myself more and more recently wanting a global `didUpdate` hook baked into React.\r\n\r\nA simple example where this is useful is if you want an isolated function (perhaps a keyboard shortcut) that creates an element on the screen and then focuses it.\r\n\r\n```js\r\nconst createNewTodo = async () => {\r\n  const id = createTodo()\r\n  await React.didUpdate()\r\n  focusTodoItem(id)\r\n}\r\n```\r\n\r\nAt [Notion](www.notion.so), we've written custom logic for doing this, but it makes upgrading with React more difficult and unstable. I think this would be useful for others too, particularly those who use Redux and are building complicated UI interactions. ",
        "title": "Feature Request: Global didUpdate()",
        "labels": "Type: Feature Request",
        "id": 45006
    },
    {
        "body": "We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears:\r\n\r\n`Warning: Did not expect server HTML to contain the text node \"\r\n  \" in <div>.`\r\n\r\nWe are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem.",
        "title": "\"Did not expect server HTML to contain the text node\" due to whitespace in React 16",
        "labels": "Type: Feature Request",
        "id": 45007
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReactDOMServer generates camelCased markup for the `cellSpacing` and `cellPadding` attributes:\r\n\r\n`<table cellSpacing=\"1\" cellPadding=\"2\"></table>`\r\n\r\n(Here's an example pen: https://codepen.io/anon/pen/jGBLdP)\r\n\r\nI believe these attributes are canonically lowercased. If I lowercase the attributes in JSX, React warns that I'm not using the right names:\r\n\r\n```Warning: Invalid DOM property `cellpadding`. Did you mean `cellPadding`?```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe attribute names would be rendered lowercase:\r\n\r\n`<table cellspacing=\"1\" cellpadding=\"2\"></table>`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is in 16.0.0. Prior versions of React stripped these attributes.",
        "title": "React 16 does not lowercase HTML attributes in generated HTML",
        "labels": "Type: Feature Request",
        "id": 45008
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature, that exists in previous releases of react\r\n\r\n**What is the current behavior?**\r\nfeature is not implemented\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, worked in previous versions\r\n\r\nHey,\r\nWe would really like to be able to use ReactInstrumentation with Fiber. I have found @gaearon 's pull request, but work on it was stopped. Would like to know why? and if we can pick this up and implement it.\r\n\r\nhttps://github.com/facebook/react/pull/8152\r\n(I have also asked why in the pull request, but figured it might get ignored since it is a closed pull request)\r\n\r\nOmer\r\n",
        "title": "Attach third-party tools to monitor component state updates",
        "labels": "Type: Feature Request",
        "id": 45009
    },
    {
        "body": "This is a proposal for the `createPortal` API to in addition to Nodes support strings for the second argument(container), which could pave a declarative way to achieve out of order server side rendering.\r\n\r\n```js\r\n#createPortal(..., container: Node|String, ...)\r\n```\r\n\r\nThe server could render a portals children in-place and have the client-side hydration process move it to the right location client-side using `document.querySelector` if the container is a string.",
        "title": "Support for string targets for isomorphic createPortal",
        "labels": "Type: Feature Request",
        "id": 45010
    },
    {
        "body": "IMO, \r\n```\r\n<select value=\"foo\" onChange={...}>\r\n  <option value=\"yes\">Yes</option>\r\n  <option value=\"no\">No</option>\r\n</select>\r\n```\r\nshould warn because there is no \"foo\" option. It should probably also warn if `value` is not specified, because there is no \"empty\" option either.\r\nOne could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one.",
        "title": "`select` should warn if `value` is not available",
        "labels": "Type: Feature Request",
        "id": 45011
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n Bug\r\n\r\n**What is the current behavior?**\r\n\r\nLet's say you start filling a form input type text or a select element with `foo`. Then you click on a link and press the back button. The browser back-forward cache will kick in and change the initial value of the form elements. We will get our `foo` value back.\r\nHowever, React doesn't account for it when the component is controlled.\r\n\r\nI have tried reproducing the behavior with jsfiddle with [react@latest](https://jsfiddle.net/d4fovwxx/) and [react@next](https://jsfiddle.net/vm5vouqo/) with no luck as the BFcache doesn't kick in without SSR.\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect React triggering a `onChange` event to replicate the actual form value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React `@latest`.\r\n- Chrome `@latest`\r\n\r\nWe have been [using the following hack](https://github.com/callemall/material-ui/blob/v1-beta/src/Input/Input.js#L349-#L356) on Material-UI:\r\n```js\r\n  componentDidMount() {\r\n    // Fix SSR issue with the go back feature of the browsers.\r\n    // Let's say you start filling the input with \"foo\", you change the page then after comes back.\r\n    // The browser will reset the input value to \"foo\", but we also need to tell React about it.\r\n    this.handleChange({\r\n      target: this.input,\r\n    });\r\n  }\r\n```\r\n\r\nBut it comes with issues: https://github.com/callemall/material-ui/pull/8110.\r\nSo instead, we tried simulating a change event [as suggested in StackOverflow](https://stackoverflow.com/questions/23892547/what-is-the-best-way-to-trigger-onchange-event-in-react-js) but it doesn't work anymore\r\n```js\r\nvar event = new Event('input', { bubbles: true });\r\nelement.dispatchEvent(event);\r\n```\r\n\r\nSo for now, we are going to disable the BFcache with `<form autoComplete=\"off\">`.",
        "title": "BFcache, SSR and form elements",
        "labels": "Type: Feature Request",
        "id": 45012
    },
    {
        "body": "When you pass a boolean to some attributes (e.g. `autoSave`, `autoCorrect`) in 15, they don't work correctly because they actually want a specific string (`yes` and `no`). I think there were also some attributes that want `on` and `off`.\r\n\r\nLet's just \u201cmake them work\u201d? Could use a special flag/whitelist for that. There should be very few of these.\r\n\r\nSimilarly we should probably make `<script crossOrigin />` be valid and turn into `<script crossOrigin=\"anonymous\" />`. Currently I don\u2019t think this works on master.",
        "title": "Make on/off, yes/no boolean attributes work",
        "labels": "Type: Feature Request",
        "id": 45013
    },
    {
        "body": "[Reason React](https://github.com/reasonml/reason-react) uses first class OCaml refs to store mutable values (instead of on `this` instances).\r\n\r\nThese are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in.\r\n\r\nWe could also make these first class objects on isomorphic React.\r\n\r\n```js\r\nReact.createRef = () => ({ contents: null });\r\n```\r\n\r\n```js\r\nclass Foo extends React.Component {\r\n  state = {\r\n    myDiv: React.createRef()\r\n  };\r\n  componentDidMount() {\r\n    if (myDiv.contents) {\r\n      myDiv.contents.focus();\r\n    }\r\n  }\r\n  render() {\r\n    return <div ref={this.state.myDiv} />;\r\n  }\r\n}\r\n```\r\n\r\nBasically the implementation would just be:\r\n\r\n```js\r\nif (typeof ref === 'function') {\r\n  ref(newValue);\r\n} else if (typeof ref === 'object') {\r\n  ref.contents = newValue;\r\n} else if (typeof ref === 'string') {\r\n  owner.refs[ref] = newValue;\r\n}\r\n```\r\n\r\nThis is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary.\r\n\r\ncc @adamjernst\r\n",
        "title": "Accept Ref Objects as Refs?",
        "labels": "Type: Feature Request",
        "id": 45014
    },
    {
        "body": "[Reason React](https://github.com/reasonml/reason-react) has silent updates. Meaning it's a normal update in the state queue that can be reverted. The only difference is, it doesn't need a rerender by itself. If props have changed, it does rerender.\r\n\r\nUnclear if we expose this to the existing ClassComponent API or make it a feature of new APIs.",
        "title": "Implement Silent Updates in the State Update Queue",
        "labels": "Type: Feature Request",
        "id": 45015
    },
    {
        "body": "As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.\r\n\r\nIf I understand well, react will ensure the property is set anyway. \r\n\r\n**Current behaviour**\r\nReact renders the html `<video />` element without the attribute `muted` when explicitly passed.\r\n\r\n**Demo time**\r\nIn [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:\r\n![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)\r\n\r\nActually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.\r\n\r\n**The point**\r\nI think is most a _specific need_ than the _expected behaviour_.\r\nFrom the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.\r\n\r\nBut there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.\r\nThe part interested is\r\n> `<video muted>` elements will also be allowed to autoplay without a user gesture.\r\n\r\nSo, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.\r\n\r\nThere's a similar [issue](https://github.com/facebook/react/issues/6544)",
        "title": "<video /> attribute needed but not guaranteed by React",
        "labels": "Type: Feature Request",
        "id": 45016
    },
    {
        "body": "_(This isn't needed for 16.0.)_\r\n\r\nI think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time.\r\n\r\nHowever, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already.\r\n\r\nI see two possible routes:\r\n\r\na) We just call out for this hook and then commit immediately after.\r\n\r\nb) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with \"append async\" and offscreen canvas.\r\n\r\nThe second option is probably preferable but we should only do that if we can do it efficiently and cleanly.",
        "title": "Async Top-level Hook Before Commit",
        "labels": "Type: Feature Request",
        "id": 45017
    },
    {
        "body": "So for the last little while I've been pursuing an idea called [React Snapshot](https://github.com/geelen/react-snapshot), where instead of running your code in a Node environment to generate static HTML, you run it in a virtual browser (jsdom or chrome headless) and take a snapshot of the DOM at a particularly moment in time, then host the snapshots like any other static file (technique also known as pre-rendering).\r\n\r\nI've been tossing around different API choices (https://github.com/geelen/react-snapshot/pull/30) in order to handle components that have async data fetching requirements, but I'm already starting to see real promise in this approach. Because the snapshot environment is so similar to the client one, far fewer changes are needed to get the performance & accessibility benefits of serving real HTML to your users. This is an example of the React Snapshot async API to make a component snapshottable:\r\n\r\n```diff\r\n+ import { snapshot } from 'react-snapshot'\r\n\r\nclass Home extends React.Component {\r\n  state = { quotes: null }\r\n\r\n  componentWillMount() {\r\n+   snapshot(() => (\r\n      fetch('/api/quotes')\r\n        .then(response => response.json())\r\n+   ))\r\n    .then(quotes => {\r\n      this.setState({ quotes })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { quotes } = this.state\r\n    return (\r\n      <div className=\"Quotes\">\r\n        {\r\n          quotes && quotes.map((quote, i) => <Quote key={i} quote={quote}/>)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\nThe idea is that any async parts of your app can be wrapped in a `snapshot` call, which caches responses and rehydrates on the client. However, I've hit a few walls that I think means I'd need changes to React itself to take this to its logical conclusion. Hence, I wanted to start the discussion about whether such changes would be compatible with React's future direction.\r\n\r\n### Rehydration\r\n\r\nAs far as I can tell from my experimentation and from reading the code, the two criteria for reusing the existing DOM elements in a pre-rendered HTML page is:\r\n\r\n* the adler32 hash of the initial client-rendered markup has to match the `data-react-checksum` present on the `rootElement`.\r\n* the `_domID` of each instance in the render tree needs to match the `data-react-id` on each DOM element\r\n\r\nBetween those two criteria, its enforced that the _structure_ and the _content_ of the DOM is the same. I can kinda see why both are needed\u2014the checksum is the cheapest way to confirm the structure will be the same, but the ID of each element is needed to actually wire everything up. Also, `data-react-checksum` is just an attribute, and could be calculated off something that's no longer present in the HTML.\r\n\r\nHowever, generating the exact right checksum in any other way than the existing SSR API turns out to be pretty difficult!\r\n\r\n### HTML-escaping woes\r\n\r\nI hit this problem where I was rendering the React app like normal, then taking the `innerHTML` of the root container, then passing it to [`addChecksumToMarkup`](https://github.com/facebook/react/blob/master/src/renderers/dom/stack/server/ReactMarkupChecksum.js#L26), and not getting the same checksum as `ReactDOMServer.renderToString`. I first realised I needed to add the `data-reactid` to each element along the way, which wasn't too hard, but still it wasn't working. I figured out it's due to [`escapeTextContentForBrowser`](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/escapeTextContentForBrowser.js) converting things like `'` to `&#x27;` and `\"` to `&quot;`, meaning that while the content _appears_ the same once rendered, the precise string is not, therefore the checksum is not, and no rehydration takes place.\r\n\r\nFrom what I can understand, again by reading the code, React _always_ sanitises the HTML content before generating markup (on server or in client), it's just the fact that once its injected into the DOM, `innerHTML` doesn't re-sanitise things like quotes. They don't technically need to be, as discussed in issue https://github.com/facebook/react/issues/3879, and so if that were to be changed this particular problem would disappear, but there may well be more I just haven't hit yet. To me, the real issue is needing to have the content be byte-for-byte equivalent, rather than just functionally (and structurally) equivalent.\r\n\r\n### My interim solution\r\n\r\nAt the moment, I've realised its easier to boot up the app in its entirety, wait for all async processes to take place, then effectively reboot the app using `ReactDOMServer.renderToString` and splice the markup in place. Any side-effects relying on `componentDidMount` (like CSS injection or meta tags in the HEAD) that affect the DOM _outside_ the React app are preserved, but the markup and checksum of the React-rendered HTML are guaranteed to be correct. It works, but its not ideal. You still have to understand that your components are running in two different \"modes\", they'll run different lifecycle methods in each, and only one generates the final snapshot. Which I think adds an unreasonable conceptual burden, much the same way server-rendering does.\r\n\r\nThat's really the problem I see with the status quo and why I started looking into this problem in the first place. If snapshot/server rendering requires too much overhead, most people won't do it, which is exactly where we're at. Create-react-app doesn't include any because none of the options are simple enough with a broad enough applicability. The official [React Router docs](https://reacttraining.com/react-router/web/guides/code-splitting/code-splitting-server-rendering) warn agains combining server-rendering and code-splitting. Server-rendering boilerplates include fairly specific webpack hacks to provide the same environment on server and client, etc.\r\n\r\nThe result is that most people only ever do client-rendering. They serve a blank page & render everything client-side. Code splitting and service worker caching offer useful advantages but imo it's not enough. Snapshot rendering _could_ be the solution, but only if it can offer big benefits for small changes to application code.\r\n\r\n### My Dream Solution\r\n\r\nArchitecturally, what I'd like is for an arbitrary React app to be launched on one browser, executed until ready (async resources complete), snapshotted (serialised to HTML), then resumed on another browser. Those snapshots would be generated then cached at the edge of a CDN during deployment, or periodically depending on how often the content changes.\r\n\r\nPractically, I think that would require two changes to React's architecture:\r\n\r\nThe first is for a weaker check for rehydration\u2014some other fingerprint than a hash of the escaped HTML. Some other method for a snapshot to indicate to React to reuse as much of the existing DOM as possible.\r\n\r\nThe second would be for only parts of the tree to be rehydrated rather than the whole thing. If a component has some side-effect, say in a `componentDidMount`, then the snapshotted HTML would include the result of that side-effect. But when the app boots on the client side, the render method will generate the initial behaviour. At the moment React would replace what's there with what's just been rendered, but it might be preferable to leave the DOM unchanged on the first render, then wire things up later.\r\n\r\nI don't know the exact specifics of a solution, nor do I know enough of the internals of React as it is now or as it will become, but I wanted to start the discussion and see if there was any interest from the React team & wider community in this use case and direction. I look forward to hearing your thoughts!",
        "title": "More permissive rehydration logic",
        "labels": "Type: Feature Request",
        "id": 45018
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\nReact is published to NPM only as ES5 code\r\n\r\n**What is the expected behavior?**\r\nPublish react also in es2015, with es2015 entry point in the package.json\r\n\r\nMotivation: Performance. leverage the targeted client native ES features \r\nIts part of the angular 4 package format\r\nhttps://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#heading=h.jt2mvxhyrshv\r\nhttp://2ality.com/2017/04/setting-up-multi-platform-packages.html",
        "title": "[Feature Suggestion] Publish react also as ES2015 code",
        "labels": "Type: Feature Request",
        "id": 45019
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\n```js\r\nimport * as React from \"react\"\r\n```\r\n\r\nThe above code causes deprecation warnings because of how `_interopRequireWildcard` works in babel:\r\n\r\n```\r\nWarning: Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs\r\nWarning: Accessing createClass via the main React package is deprecated, and will be removed in React v16.0. Use a plain JavaScript class instead. If you're not yet ready to migrate, create-react-class v15.* is available on npm as a temporary, drop-in replacement. For more info see https://fb.me/react-create-class\r\n```\r\n\r\nYou can use this with babel:\r\n\r\n```js\r\nimport React from \"react\"\r\n```\r\n\r\nThis works because of synthetic import support in babel, using `__esModule`.\r\n\r\nIf you use TypeScript the above does not work unless you set `allowSyntheticDefaultImports` to true in tsconfig.json.\r\n\r\nMost packages work fine with `* as Module`, but React's deprecated warnings get tripped because babel copies the object with `_interopRequireWildcard`.\r\n\r\n**What is the expected behavior?**\r\n\r\n```js\r\nimport React from \"react\"\r\n```\r\n\r\nThe above should work without needing to set `allowSyntheticDefaultImports`. This can be done by providing a `default` property.\r\n\r\nPossibly by adding this to `src/isomorphic/ReactEntry.js`:\r\n\r\n```js\r\nReact.default = React\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 15.6.1\r\nChrome 59\r\nOS X 10.12.5\r\nNode 8.1.2\r\n\r\nDoes not work in previous versions since deprecation warning was added.",
        "title": "Add default property for ES2015 modules",
        "labels": "Type: Feature Request",
        "id": 45020
    },
    {
        "body": "The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff.\r\n\r\n1) Instead of warning add [these warn calls](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L74-L115) to a global buffer (array, map, set, whatever).\r\n\r\n2) Inside [prepareForCommit](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberEntry.js#L190), issue all the currently batched up warnings as a single message. \r\n\r\n3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g.\r\n\r\n```\r\n...\r\n<div className=\"unchanged\">\r\n- <div className=\"foo\" />\r\n+ <div className=\"bar\">\u2026</div>\r\n+ <span />\r\n</div>\r\n...\r\n<div className=\"another_unchanged\">\r\n- <span />\r\n</div>\r\n...\r\n```\r\n\r\nThis strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning.",
        "title": "Nicer Formatting of SSR Validation",
        "labels": "Type: Feature Request",
        "id": 45021
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI want to request a *feature*.\r\n\r\n**What is the current behavior?**\r\n- Warning code is hardcoded to call `fbjs/lib/warning`. This makes it hard to integrate warnings with tools.\r\n\r\n- As a workaround we could use webpack\u2019s `resolve.alias` to alias `fbjs/lib/warning` into our fork which displays it on-screen.\r\n\r\n   - This use case is similar to https://github.com/facebook/react/pull/7360.\r\n\r\n- Another use case is to integrate React warnings with our testing infrastructure. This helps us to better see which warning belongs to which test.\r\n\r\n    ![image](https://user-images.githubusercontent.com/193136/27680560-587f934a-5ce6-11e7-985b-a1a2042d831a.png)\r\n\r\n**What is the expected behavior?**\r\n- React allows library user to override the default warnings behavior.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- The workaround works in React 15 and should still work in React 16, as the flat bundles does `var warning = require('fbjs/lib/warning')` which means we can still hook into it for now.\r\n\r\n- This probably breaks when the flat bundles stopped doing `var warning = require('fbjs/lib/warning')`.",
        "title": "Feature request: Warnings hook",
        "labels": "Type: Feature Request",
        "id": 45022
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nI am working on project to build AMP page with React Server Side Rendering. I am having an issue to add custom attribute to built-in AMP element. In order to be able to use [amp-bind](https://www.ampproject.org/docs/reference/components/amp-bind#bindings) we need to be able to output \u201cbindings\u201d, which are special attributes of the form `[attribute]`, eg. `[slide]=\"selectedSlide\"`. \r\n\r\n```\r\n<amp-carousel \r\n    layout={layout}\r\n    height={height}\r\n    width={width}\r\n    [slide]={slide}\r\n>\r\n        ...\r\n</amp-carousel>\r\n```\r\n\r\nHere is AMP carousel example that work with [amp-bind](https://ampbyexample.com/advanced/image_galleries_with_amp-carousel/#linking-carousels-with-amp-bind).\r\n\r\n**What is the current behavior?**\r\n- Parsing error: Unexpected token [ (Fatal) \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- All\r\n\r\nFor more information, you can read all the discussion in this [PR](https://github.com/facebook/react/pull/7311#issuecomment-311516763).",
        "title": "Feature request: Support server-side rendering of non-standard DOM attribute names (eg. AMP's [prop]=\"value\")",
        "labels": "Type: Feature Request",
        "id": 45023
    },
    {
        "body": "(cc @gaearon, from https://github.com/yannickcr/eslint-plugin-react/issues/1258#issuecomment-311211399)\r\n\r\nIn general, there's lots of little utilities that are helpful to have as standalone packages. One of them is https://unpkg.com/airbnb-prop-types@2.7.0/build/helpers/getComponentName.js, for example.\r\n\r\nIt'd be ideal for the React team to maintain this package - primarily, so that it would be guaranteed to either not break when a new React version is released, or be updated to work with the upcoming version prior to release.\r\n\r\nIn the interests of the React team not signing up to maintain all the package requests that might come in, would it be possible to make \"part of the release process\" be \"ensure compatible versions of community packages exist\"? I'd be happy to create the above package, for example, and I know the community would love a guarantee that enzyme would always work with any official React version release, prior to the release.",
        "title": "Include canary tests of community packages as part of the release process",
        "labels": "Type: Feature Request",
        "id": 45024
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nReact ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nInstall react and try to import it in a browser with native modules enabled.\r\n\r\n**What is the expected behavior?**\r\nHave an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions",
        "title": "Feature request: Add a \"module\" entry in package.json to export ES2015 version of React",
        "labels": "Type: Feature Request",
        "id": 45025
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nPer some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render.\r\n\r\nHere's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet):\r\n```jsx\r\nfunction Foo({ yes }){\r\n  return yes ? <Bar /> : <div />;\r\n}\r\nFoo.renderTypes = [Bar, 'div'];\r\n\r\n\r\nclass Bar extends React.Component {\r\n  static renderTypes = [Button];\r\n\r\n  render() {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n```jsx\r\nfunction Foo({ yes }): React.Element<Bar | 'div'> {\r\n  return yes ? <Bar /> : <div />;\r\n}\r\n\r\nclass Bar extends React.Component {\r\n  render(): React.Element<Button> {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n\r\nInside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a `<ButtonRow>`, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `<SpecialProductButton />` that in turn renders a `<Button>` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted.\r\n\r\nHaving `.renderTypes` would allow us to widen our `children` propType to allow for either a `<Button>`, or *anything that renders a `<Button>`*, which helps us maintain separation of concerns (the package doesn't have to know about `<SpecialProductButton>` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside `<ButtonRow>`).\r\n\r\nI imagine the implementation to be:\r\n 1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)\r\n 1. in development only and if `.renderTypes` exists on the component\r\n 1. evaluate the equivalent of [`elementType`](https://www.npmjs.com/package/airbnb-prop-types)`(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,\r\n 1. just like propTypes, log the error if one is returned\r\n\r\n(cc @spicyj)",
        "title": "Feature request: renderTypes",
        "labels": "Type: Feature Request",
        "id": 45026
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature \r\n\r\n**What is the current behavior?**\r\nInitial state is null.\r\n\r\n**What is the expected behavior?**\r\nInitial state is undefined. We can manually set the state to undefined in the class, but it would make sense to be out of the box as it would allow destructuring without errors.\r\n\r\n**Version:**\r\nReact 15.6.1\r\nReact-Dom 15.6.1\r\n\r\nSorry if this has been suggested before. ",
        "title": "Set initial state to undefined",
        "labels": "Type: Feature Request",
        "id": 45027
    },
    {
        "body": "I think a `React.Children.find` method would be really useful in situations where you need to iterate over your children and find just one that satisfies a particular condition. I'm running into this situation more and more often in my React code. A few examples:\r\n\r\n- In [React Router](https://reacttraining.com/react-router), the `<Switch>` component [iterates over its children](https://github.com/ReactTraining/react-router/blob/c46e51bfd61343611ddbc173207952e980b81aec/packages/react-router/modules/Switch.js#L38-L49) to figure out which `<Route>` matches the URL.\r\n- In [a `<Select>` component we use in our training workshops](https://github.com/ReactTraining/react-subjects/blob/44614bc3c6c8ca1de813e0bd1e14f86a74a5c0fb/subjects/Select/solution.js#L24-L37), we need to iterate over the `<Option>`s to figure out which label we should show in the select box.\r\n\r\nI wonder if there would be any interest from others in seeing something like this.",
        "title": "Add React.Children.find",
        "labels": "Type: Feature Request",
        "id": 45028
    },
    {
        "body": "**React v15.5.4**\r\n\r\nUnexpected behaviour of `React.Children.forEach` \u2013 silently filters functions.\r\n\r\n**Current behavior:**\r\n\r\n```jsx\r\nconst element = (\r\n  <div>\r\n    {() => {}}\r\n    {() => {}}\r\n  </div>\r\n);\r\nconsole.log(React.Children.toArray(element.props.children))\r\n// Output: []\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nChildren.forEach should throw *Invariant* error then *function* type child is met.\r\n\r\nor\r\n\r\nChildren.forEach shouldn't filter *function* type children.\r\n",
        "title": "Children forEach filters functions",
        "labels": "Type: Feature Request",
        "id": 45029
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n```\r\nclass TestWrongPropTypes extends Component {\r\n    static propTypes() {\r\n        return {\r\n            children: PropTypes.string,\r\n            missing: PropTypes.string.isRequired\r\n        };\r\n    }\r\n\r\n    static defaultProps() {\r\n        return { children: 'Default props via static function' };\r\n    }\r\n\r\n    render() {\r\n        return <p>{this.props.children}</p>;\r\n    }\r\n}\r\n```\r\n\r\nIn this example React will silently skip `propTypes` checking and default props setting for `TestWrongPropTypes` component.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nhttps://jsbin.com/jidupehebu/edit?js,console\r\nhttps://jsfiddle.net/84v837e9/30/\r\n\r\n**What is the expected behavior?**\r\nI know that in order to work, propTypes definition should be `static get propTypes = {...}` or `TestWrongPropTypes.propTypes = {...}`. But I'd like to have warning like \"propTypes/defaultProps is function but should be either property or getter\" to prevent such errors.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDiscovered in React 15.X, but probably the same behavior will be also in earlier versions.",
        "title": "Warn when `static propTypes/static defaultProps` in ES6 class is a function",
        "labels": "Type: Feature Request",
        "id": 45030
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nWhen a PureComponent renders an impure one as its child, no warning in console or devtool\r\n\r\n**What is the expected behavior?**\r\nIt could be better if we get a warning message for such cases\r\n\r\nThis may be related to https://github.com/facebook/react/pull/9240 since React now disallow PureComponent to have a custom `shouldComponentUpdate` implement, so a \"pure\" component with customized and more efficient `shouldComponentUpdate` method must inherit from `Component` base class and add a `isPureReactComponent` property themselves in order to prevent the warning message appear\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.5.4\r\n",
        "title": "Warn when PureComponent renders impure ones as its children",
        "labels": "Type: Feature Request",
        "id": 45031
    },
    {
        "body": "### Problem\r\n\r\nThe `ReactTestRenderer` now supports a new API, [`toTree`](https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js#L350-L355), which returns an easily traversed tree representing the internal state of the instance and its rendered nodes.\r\n\r\nThe existing solution for this in `TestUtils` is `findAllInRenderedTree` which traverses the root and lets you provide a test function it will call to reduce a tree based on a predicate. The predicate function is passed the public instance for the node.\r\n\r\nThe issue with that is that it makes the predicate function polymorphic and requires every consuming utility to check if it's being passed a component instance or a DOM node. \r\n\r\n\r\n### Solution\r\n\r\nI propose that we implement a new API similar to `findAllInRendererdTree` that calls the predicate function with the result of calling `toTree` on the internal instance instead of the public instance. This would mean:\r\n\r\n* the predicate function will always be called with the same data structure (a tree node)\r\n* third-party traversal utilities can be shared between `ReactTestRenderer` and `ReactTestUtils`, since they would operate on the same tree structure\r\n* You could actually assert on functional components, which currently have no instance and just call the predicate with `null`\r\n\r\nThis new API could just be a pure traversal utility, leaving it up to the consumer to accumulate results.\r\n\r\n```js\r\nimport { renderIntoDocument, traverseTree } from 'react-dom/test-utils';\r\nvar root = renderIntoDocument(<App />);\r\nvar results = [];\r\ntraverseTree(root, node => {\r\n  if (somePredicate(node) { results.push(node) }\r\n})\r\n```\r\n \r\n## Implementation\r\n\r\nWith a brief review, it looks like we could just export the `toTree` function that is currently inlined in `ReactTestRenderer` and provide a way to change:\r\n\r\n```js\r\n var publicInst = node.stateNode;\r\n      if (test(publicInst)) {\r\n        ret.push(publicInst);\r\n      }\r\n```\r\n\r\nto:\r\n```js\r\n var treeNode = toTree(node);\r\n      if (test(treeNode)) {\r\n        ret.push(treeNode);\r\n      }\r\n```\r\n\r\ncc @gaearon @bvaughn @lelandrichardson ",
        "title": "[RFC] Add traversal utility to ReactTestUtils matching toTree shape",
        "labels": "Type: Feature Request",
        "id": 45032
    },
    {
        "body": "I haven\u2019t fully thought through this yet, so hoping for some feedback on whether it is viable or breaks too many assumptions.\r\n\r\nThe goal is to create an escape hatch that would support rendering to conditional comments, alternative method for web components, and other unknown and probably bad ideas.\r\n\r\nSomething along the lines of:\r\n\r\n```jsx\r\nconst DangerousComment = ({children}) => ({\r\n  dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }\r\n});\r\n\r\nReactDOMServer.renderToString(\r\n  <head>\r\n    <DangerousComment>\r\n      {\"[if lte IE 9]><script src='/public/media.match.js'></script><![endif]\"}\r\n    </DangerousComment>\r\n  </head>\r\n); // <head><!--[if lte IE 9]><script src='/public/media.match.js'></script><![endif]--></head>\r\n```\r\n\r\n```jsx\r\nconst WebComponent = ({children}) => ({\r\n  dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }\r\n});\r\nReactDOM.render(() => (\r\n  <WebComponent>`\r\n    <app-toolbar arbitary-prop=\"sure-y-not\">\r\n      <div main-title>Web Components!</div>\r\n    </app-toolbar>\r\n  `</WebComponent>\r\n), document.body.firstChild);\r\n```\r\n\r\nThe first example is the one I\u2019m more interested at this point in time. The benefit here is this could work on both the DOM and server renderer without userland hacks like https://nemisj.com/conditional-ie-comments-in-react-js/ or `componentDidMount` ref replacement (client only, I believe?).\r\n\r\nA couple initial problems I see with this are (may or may not be solvable/avoidable with slight tweaks):\r\n\r\n* returning an arbitrary object `render` which isn\u2019t supported\r\n* how will unmounting this work?\r\n\r\nAlternative proposal:\r\n\r\nIntroduce a new DOM-renderer primitive `<comment />` or `<dangerousComment />` (to follow a similar approach to `dangerouslySetInnerHTML` clearly indicating the caveats that come with rendering comments). This alternative solution only solves the conditional comment issue above.",
        "title": "Feature Request: dangerouslySetInnerHTML as a return value",
        "labels": "Type: Feature Request",
        "id": 45033
    },
    {
        "body": "React has made recent developer experience improvements to lifecycle error handling and logging. Errors thrown during render can be recovered from using ~~`unstable_handleError`~~ `componentDidCatch`. Errors thrown during lifecycle methods are also automatically logged to the console with the component stack location to make them easier to identify (see #8785).\r\n\r\nThe team has discussed similar improvements for warnings- such as using a \"yellow box\" approach to make warnings stand out more in developer mode (see PRs #7360 and #8861). There has been some pushback though to the idea of React modifying the DOM for warning purposes (see issue #8784). I'm not sure how that will play out yet- but in the meanwhile, could we improve at least some of these use cases by making better use of the devtools?\r\n\r\nFor example, what if React exposed a new API that allowed associating a warning with one or more components in the devtools panel? (eg a method that- when called- recorded the current component stack and notified devtools if present) React could use this for things like missing or non-unique keys. 3rd party libraries may also benefit from this (eg react-virtualized could use this to warn about missing or incomplete positioning styles for cells).\r\n\r\nHere's a rough outline of some of the features:\r\n* Components with warnings could be highlighted in some emphasized way (eg yellow background) in devtools to make them easier to spot.\r\n* A new toolbar option could be added to \"Show All Warnings\" (eg filter the tree view to show only components with warnings).\r\n* Warning message could be shown inline in the settings panel for the selected component.\r\n\r\nHere's a rough mockup: \r\n![screen shot 2017-03-15 at 3 47 31 pm](https://cloud.githubusercontent.com/assets/29597/23974108/bc3dabd6-0996-11e7-8d2a-e058c4cafe41.png)\r\n\r\nLimitations:\r\n* Not everyone uses devtools so this would not help a lot of people.\r\n* This would not address issues like using the development mode of React for production sites.\r\n\r\nThoughts? Ideas? Suggestions?",
        "title": "Expose DEV-mode warnings in devtools UI",
        "labels": "Type: Feature Request",
        "id": 45034
    },
    {
        "body": "This is sort of a feature request, mostly because I haven't been able to make the current react tooling do what I need it to do.\r\n\r\nI have a massively huge article up on https://pomax.github.io/bezierinfo that consists of a single page of React-managed content, of which the bulk is \"passive\" HTML content. Paragraphs, headings, that kind of stuff. However, there are also active components with JS interaction bindings, and so I was trying to figure out a way to turn this article into a \"react-managed by the client\" into a \"thin ui managed by the client, react-built offline\" solution. \r\n\r\nI had a look at ReactDOMServer.renderToStaticMarkup, but while this generates all the HTML nicely, it also loses any and all JS bindings that are necessary to keep the UI working. As this is an ~800kb article not counting static assets (there's some 1.6MB of images on top of that), the notion of first loading the plain markup content and then loading the react bundle on top of that, to hook into the preloaded markup would be a terrible experience for people in the slightly-less-wealthy parts of the world.\r\n\r\nIs there some way to, or would there be a sense in developing a way to render React content to HTML \"as much as possible\" while preserving React's management of interactive UI components? Essentially, a solution in between `renderToString` and `renderToStaticMarkup`, to prevent as much data duplication between the pregenerated HTML and the react application itself? It seems that the heavy payload (in bytes, but certainly in client-side processing as well) incurred by using a fully react-managed bundle could be relieved significantly if \"content that is guaranteed passive, regular HTML\" could be serialized out as HTML with React hooking back into that code only for elements that require active management.\r\n\r\n(I have no idea how much work that would be, but I'm pretty sure it would help bring down the average page size down again, which on a global scale would save quite a lot of time and money, while allowing content to be loaded by people for whom parts of the internet are currently inaccessible due to load time and byte cost)",
        "title": "Serializing to \"HTML with only as much JS as necessary\"",
        "labels": "Type: Feature Request",
        "id": 45035
    },
    {
        "body": "This issue is intended to be a discussion for how to distribute the ReactFiberReconciler.js file and dependencies for custom renderers.\r\n\r\nCurrently first-class renderers within the React codebase/Facebook ecosystem do not have any concerns for this because of Haste / access to the React.js build + publish tooling within this codebase.\r\n\r\n3rd party renderers are currently adding `react-dom` to their dependency list and requiring `react-dom/lib/ReactFiberReconciler.js` to build and expose their custom renderer.\r\n\r\nIdeally, `ReactFiberReconciler.js` would be distributed with the `react` package or as a standalone `react-fiber-reconciler` package. Whether this is at `react/reconciler.js` or `react/lib/reconciler.js` idk. I think at the root is better to continue the discouragement of looking in `react/lib/*` for anything.\r\n\r\nI understand flat bundles are coming, too. I don\u2019t know if that should block this or if this could be a flat bundle, or any other alternative.\r\n\r\nIs this something the team is ready to commit to and support if we came to a decision on approach and I put together a PR?\r\n\r\n Related issues:\r\n\r\n* #6795 Create Separate Copies of Each Renderer\r\n* #5472 Include flow type definitions (flow type distribution proposal at https://github.com/facebook/react/issues/5472#issuecomment-282394248)\r\n\r\n+ @sebmarkbage @spicyj ",
        "title": "RFC: ReactFiberReconciler release artifact",
        "labels": "Type: Feature Request",
        "id": 45036
    },
    {
        "body": "This feature request came out of a brief discussion on twitter with @gaearon: https://twitter.com/dan_abramov/status/820356665899945984\r\n\r\n`__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` exposes access to `getClosestInstanceFromNode`, `getNodeFromInstance`, `ReactMount` and `ReactReconciler`. This is great, and we use it to collect component level performance metrics for our customers in production, however, there are more things we'd love to have access to for the purpose of helping our users pinpoint performance issues in their applications.\r\n\r\nThis \"issue\" includes some initial observations, but I hope we can keep an open dialogue about this - in particular considering Fiber will probably change the landscape with regards to what the most common performance problems are and we'd instrument according to that.\r\n\r\nI understand the urge to keep the API surface area as small as possible in order to create minimal commitment to APIs to allow for internals to move fast. Exposing additional internals with the explicit warning that you are not committed to their API is fine for us, as a tool vendor.\r\n\r\nWe've looked at using `batchedUpdates` to highlight the batched nature of the work performed by React. E.g. is the work in your application getting batched properly. If we only have access to the component updating methods on `ReactReconciler` (`mountComponent`, `receiveComponent`, `unmountComponent` etc) we can't really know when a batch of work starts and when it ends. `batchedUpdates` is available in ReactDOM with the `unstable_` prefix, but exposing it in the `inject` hook would be very useful: https://github.com/facebook/react/blob/master/src/renderers/dom/ReactDOM.js#L38\r\n\r\nWe've also (experimentally) hooked into `EventPluginUtils.executeDispatchesInOrder` in order to capture events and measure the work resulting from these, but i suspect there is a better place to do this (`ReactEventListener.dispatchEvent`?). In any case, having access to the event system would be very useful. Again, using the \"unstable_\" prefix to indicate non-committal would be fine for us.\r\n\r\nI've not had much time to look into what we'd need access to for Fiber instrumentation, but so far it looks like a hook into `beginWork` would be very useful: https://github.com/facebook/react/blob/199db638c4d0fbc6e4d99534be0060deea518a32/src/renderers/shared/fiber/ReactFiberBeginWork.js#L640",
        "title": "Expose more through __REACT_DEVTOOLS_GLOBAL_HOOK__.inject",
        "labels": "Type: Feature Request",
        "id": 45037
    },
    {
        "body": "I would like to add React event bubbles to the markup tree of Firefox Developer Tools. To do this I need a way to get a list of nodes and their attached event listeners.\r\n\r\nIf somebody can provide a way for me to do this it will be added within a day.\r\n\r\nIs this possible at the moment and, if not, what can be done to make this possible?",
        "title": "Provide a way for external tools to list nodes with event info",
        "labels": "Type: Feature Request",
        "id": 45038
    },
    {
        "body": "Version 15.4.1\r\n\r\nAs starting Chrome 55, there is a new event `auxclick` to handle middle click, and `click` doesn't trigger by middle click anymore\r\nhttps://developers.google.com/web/updates/2016/10/auxclick",
        "title": "Feature Request: Support auxclick event (onAuxClick)",
        "labels": "Type: Feature Request",
        "id": 45039
    },
    {
        "body": "To use a Web Component in React, you must directly attach an event listener to the React ref for that WC. We could change the implementation so that when React detects a custom element (tag names with dashes, like `my-component`), it will bypass the synthetic event system (and the whitelist) and just attach the event listener on the element itself.\n\nWhy bypass the synthetic event system? Because _anyway_ we already need to bypass it manually when using a Web Component. I'm not so familiar with the React codebase, but this naive approach seems to work. Whoever uses Web Components in React can be responsible for whatever downsides that would cause, maybe in performance, I don't know. They are already having those (supposed) downsides, this issue is just about the convenience of WC usage inside React.\n\nI was about to send a PR for this, but thought of opening an issue. I looked through the issues and didn't see any existing one related to the handling of WC events.\n\n**What is the current behavior?**\n\nA WC custom event (e.g. `flipend`) must be handled by attaching the event listener directly to the element in componentDidMount using a ref.\n\nhttp://jsbin.com/yutocopasu/1/edit?js,output\n\nReact v15.1.0\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  componentDidMount() {\n    this.refs['foo'].addEventListener('flipend', ev =>\n      this.handleFlipend(ev);\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\n**What is the expected behavior?**\n\nA WC custom event can be handled with `onMyEvent={ev => this.handleMyEvent(ev)}` on the ReactElement corresponding to the WC.\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox onFlipend={ev => this.handleFlipend(ev)} class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\nPS: this snippet above still has the `ref`, but for unrelated reasons. Ideally we wouldn't need refs for handling events of WCs.\n",
        "title": "Bypass synthetic event system for Web Component events",
        "labels": "Type: Feature Request",
        "id": 45040
    },
    {
        "body": "_Just going to put it out there for feedback..._\n## Motivation\n\nSubscription management comes with a cost and that eats into the wins of async rendering since it needs to be managed synchronously. Not just managing the direct subscriptions themselves but managing the dynamic dependency graph so that it can be invalidated.\n\nMeanwhile, most of what subscriptions are used for is data that will never update. At least in our apps. It is a pure loss.\n\nThe use case is when you're connecting to third party systems that aren't as easily connected to the top level data tree.\n## Proposal\n\n``` js\nthis.forceDeepUpdate();\n```\n\nSame use case as `forceUpdate`, if you are reading from global mutable state for some reason, you can use this to by-pass `shouldComponentUpdate` in an entire subtree. Basically rerender everything. When combined with Fiber this can be a low-priority update so it's not so bad for things that change a lot of things.\n\nA good example would be changing the locale. Regardless if you read a global mutable locale (like AirBnB does) or a context locale (like Yahoo) does, this lets you change it when you need to. Without needing to manage subscriptions for all those cases when you don't need it.\n\n``` js\nthis.forceDeepUpdateWithScope(scope);\n```\n\n``` js\nclass Foo extends React.Component {\n  shouldComponentUpdateForScope(scope) {\n    return scope.store === UserStore && scope.id === this.props.userID;\n  }\n  render() {\n    ...\n  }\n}\n```\n\n`forceDeepUpdateWithScope` would traverse the subtree and only start rendering if `shouldComponentUpdateForScope` returns `true` for the arbitrary `scope` argument. This allows for a bit more of a targeted update with some convenience overhead.\n\nAdditionally, React would cache the pair of `scope` and `components` that responded. For some number of scopes back. If a new component gets mounted with a `shouldComponentUpdateForScope` we might check it against the cache to see if we need to add it to the cache.\n\nEffectively this creates **lazy subscriptions**.\n\nThe use case is something like typing into an input field that then updates some global store which immediately displays in a completely different place on the page. The first character might be a bit slower but still with responsive levels and the subsequent characters are fast to update.\n## Caveat\n\nThe major downside of this proposal is that it relies on mutation. As we know, React doesn't really like mutation for many more reasons than just `shouldComponentUpdate`.\n\nThe effect in Fiber for example, is that any component that gets a higher priority update will start using the new value. Components that rely on mutable state effectively become up-prioritized which is not good. 1) It can temporarily show inconsistent data. 2) The point of making this kind of update lower priority is because it is likely to be large. Larger updates will stall the page if they take the same priority as higher priority updates. Thereby defeating the benefits of Fiber anyway.\n\nI'd like to try to come up with a variant of this API that doesn't rely on mutation.\n",
        "title": "[RFC] Idea: forceDeepUpdate() and forceDeepUpdateWithScope(scope)",
        "labels": "Type: Feature Request",
        "id": 45041
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\n_Feature_\n\n**What is the current behavior?**\n\nCurrently, whether a prop is expected to change or not, it is passed through props. There is no way for us as developers to mark a prop as fixed (should never change over the lifecycle of a component).\n\n**What is the expected behavior?**\n\nThese would _not_ be static properties, i.e. they can change from instance to instance. But they are created at initial render and never change (`===`) from the original. Ideally, though I'm not sure on implementation, they would also always be `deepEqual` to the original (perhaps something like `Object.freeze(Object.assign({}, originalObject))`.\n\nAdvantages to allowing props to be explicitly marked as fixed:\n1. shouldComponentUpdate would be better if a lot if certain props automatically don't / can't change\n2. Allow for errors / warnings when a prop marked as fixed is changed after the initial render.\n3. Possible compiler / render optimizations knowing that particular props will never change over the course of multiple renders. In particular, if a component only has fixed props (including children), we know the render output is fixed, and we can just inline that output into the parent render output.\n\nOne possible API would allow a separate fixedProps category.\n\n`React.createElement(MyComponent, { name: 'Hello' }, children, { message: 'Always this one string' })` (maintain signature)\n\nFor JSX, one (very mediocre) idea would be something like:\n`<MyComponent name=\"Hello\" $fixed.message=\"Always this one string\" />`\n\nAnother would be a separate prop called $fixed or something similar.\n\n`React.createElement(MyComponent, { name: 'Hello', $fixed: { message: 'Always this one string' } }, children)`\n`<MyComponent name=\"Hello\" $fixed={{ message: 'Always this one string' }} />`\n\nIt would be critical that `props` and `fixedProps` would be merged when the component is actually created. `this.props` would always contain all props, functional components still get one arg, and thus nobody has to rewrite render for any component.\n",
        "title": "Skip comparing known constant props during reconciliation",
        "labels": "Type: Feature Request",
        "id": 45042
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nFeature\n\n**What is the current behavior?**\n\n``` jsx\n// MyComponent.js\nimport React from \"react\";\nimport ThirdPartyComponent from 'third-party-component';\n\nfunction MyInternalComponent() {\n  return <div>test</div>;\n}\n\nexport default function MyComponent() {\n  return <div>\n    <MyInternalComponent></MyInternalComponent>\n    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>\n  </div>;\n}\n\n// test.js\nimport ReactTestRenderer from \"react-test-renderer\";\nimport React from \"react\";\nimport MyComponent from \"./MyComponent.js\";\n\nconst renderer = ReactTestRenderer.create(<MyComponent/>);\n\nconsole.log(renderer.toJSON());\n```\n\nThis renders whole tree of DOM which is actually expected behaviour. The problem is, that I dont want render `ThirdPartyComponent`, only `MyInternalComponent`.  Shallow renderer isnt answer because shallow would not render `MyInternalComponent` at all. Which is problem because it's hard to divide component into smaller, internal chunks.\n\nI have done some work in order to achieve this in #5513. It was fully working patch. It was done as part of ShallowRenderer but now we have TestRenderer. Besides this patch is pretty old so resolving conflicts would be very hard.\n\n**What is the expected behavior?**\n\nI would love to provide \"blacklist\" of components which I don't want to render:\n\n``` js\nimport ThirdPartyComponent from 'third-party-component';\n//...\n\nconst renderer = ReactTestRenderer.create(\n    <MyComponent/>, \n    {\n        dontRender: [ThirdPartyComponent]\n    }\n);\n```\n\nThis would return jsx:\n\n``` js\n<div>\n    <div>test</div>\n    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>\n</div>\n```\n\nSo we can test props returned for `ThirdPartyComponent` and internal logic.\n\nIt's combine of full and shallow renderer.\n\nI have some ideas of implementation but i dont want waste my time writing code which won't be marged into master anyway. \n\nThis possibly would allow to resolve https://github.com/airbnb/enzyme/issues/250.\n",
        "title": "ReactTestRenderer custom depth rendering",
        "labels": "Type: Feature Request",
        "id": 45043
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nI want to report a bug\n\n**What is the current behavior?**\n`render()` doesn't receive props with Symbol keys (for example, `{[Symbol()]: 'lol'}`). I guess it is because of `hasOwnProperty` in [ReactElement.createElement](https://github.com/facebook/react/blob/a56e105081e27877a2ecbfdc8d591e3b151b2af1/src/isomorphic/classic/element/ReactElement.js#L223)\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via jsfiddle or similar.**\nhttps://jsfiddle.net/sh2xbm3x/1/\n\n**What is the expected behavior?**\nSymbol-keyed `props` passed to `render()` \n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nEvery single one, as far as I know\n",
        "title": "Support Symbol keys for props",
        "labels": "Type: Feature Request",
        "id": 45044
    },
    {
        "body": "React's shouldComponentUpdate based performance improvements work great for improving the performance of medium-weight components with large numbers of instances. They even work well with event handlers, as you can ignore event handler changes and instead pass a locally bound method that'll access `this.props.on*` on demand. However this all fails apart you start passing react elements to pure components.\n\n``` js\n'use strict';\nimport React, {Component, PropTypes} from 'react';\nimport ReactDOM from 'react-dom';\nimport shallowEqual from 'recompose/shallowEqual';\n// shallowEqualExcluding: Fictional function that works like shallowEqual, but ignores changes to a list of props passed as the third argument\n\nclass Button extends Component {\n    static propTypes = {\n        icon: PropTypes.node.isRequired,\n        onClick: PropTypes.func\n    };\n\n    onClick = (e) => {\n        this.props.onClick(e);\n    };\n\n    shouldComponentUpdate(nextProps) {\n        // @note Doesn't actually work\n        return shallowEqualExcluding(this.props, nextProps, ['onClick']);\n    }\n\n    render() {\n        const {icon} = this.props;\n\n        return (\n            <button onClick={this.onClick}>\n                {icon}\n                {/*React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})*/}\n            </button>\n        );\n    }\n}\n\nclass Icon extends Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        color: PropTypes.string\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return shallowEqual(this.props, nextProps);\n    }\n\n    render() {\n        const {name, color} = this.props;\n        return getSvgIcon(name, color);\n    }\n}\n\nconst nilClick = () => {};\nReactDOM.render(<Button onClick={() => alert('Clicked!')} icon={<Icon name='done'} />, document.querySelector('#container'));\nReactDOM.render(<Button onClick={nilClick} icon={<Icon name='done'} />, document.querySelector('#container')); // 2nd invovation\nReactDOM.render(<Button onClick={nilClick} icon={<Icon name='cancel'} />, document.querySelector('#container')); // 3rd invovation\n```\n\nGiven this sample; A `<Button />` component that expects an icon to be passed as an `icon` prop and a simple `<Icon />`. Both are pure components and Button is also coded to not re-render when`onClick` is changed. Pretend that Button actually has a heavy `render()` but its props and state don't change frequently.\n\nOn the second invocation, Icon should not require any prop change or render and Button should have its `onClick` prop changed but not require a render.\nOn the third invocation, Icon should require a render while Button itself does not need to render except for the change to Icon.\n\nHowever in practice Button will always re-render, including during the second invocation when nothing changes.\n\nThis is because `<Icon />` will always result in a new instance and will never be the same.\n\nNormally you could work around this within the component itself, without telling users they have to store `<Icon />` in a variable until they think they need to change its props; for functions you could pass a function that will use `this.props.*` itself and for objects you can do a deep comparison if you know the structure of the object. But for react elements, even though `shouldComponentUpdate` allows React to know if the current component has a render dependency on a sub-component, you do not have access to this information so Button cannot tell if Icon requires a render.\n\nIn practice this can turn out to be a problem when you're writing some libraries rather than an application. Notably [Material UI](http://www.material-ui.com/) suffers from this problem in production. `EnhancedSwitch`'s `render()` is not light; `EnhancedSwitch` is used by `RadioButton` and `Checkbox`; both use a `checkedIcon` and `uncheckedIcon` React element prop; you can reasonably have 100 checkboxes on one page; even if they were pure, they cannot identify whether an icon requires an update; as a result, a render of the component containing the checkboxes to check a single checkbox will result in the `render()` of all 100 `EnhancedSwitch` instances.\n\nI can think of a few ideas on\u00a0what type of API could be added to React to solve this issue.\n## shouldComponentUpdate helper\n\nThe most obvious API would be a top-level React function that given the instance context, old ReactElement, and new ReactElement would return the result of a Component's `shouldComponentUpdate`. Then heavy parent components can use that to implement a `shouldComponentUpdate` that is aware of render dependencies in its children.\n(As a bonus, theoretically you could temporarily remember this while you're walking the current tree; then instead of calling `shouldComponentUpdate` multiple times for every (potentially nested) component the result is simply that `shouldComponentUpdate` calls are raised up to the highest level where a component is render-dependent on them)\n\n`React.shouldComponentUpdate(this, this.props.icon, nextProps.icon)`\n\nHowever I expect the problem we have with this is that `shouldComponentUpdate` is also responsible for state dependent updates and `this` is supposed to be a rendered instance, not a ReactElement instance. While you know `context` from passing the current instance, you do not have a reference to the state from either of the props.\n## ref based shouldComponentUpdate helper\n\nThe second most obvious API would be a `shouldComponentUpdate` helper that instead uses a ref.\n\n`React.shouldComponentUpdate(this.iconRef, nextProps.icon)`\n\nThe downside to this is that to get a ref for a component you didn't create, you inevitably have to use `React.cloneElement`.\n## render passthrough\n\nThe next idea I had was a render passthrough. A way during the render process for a component to say \"I do not need a render()/update, but these children of mine may\" which would tell React to skip render() and then run `shouldComponentUpdate` on the instances deeper in the tree.\n\nHowever those components only know if they need updates if you pass them the new props; so a passthrough won't work. We'd instead need a way to tell react that it should not run `render()` but do pass on an update to a specific component instance\n\n`this.renderRef(this.iconRef, nextProps.icon);`\n\nThe advantage of this over using `shouldComponentUpdate` is that instead of only allowing medium components wrapping light components to only `render()` when a child requires it; we also allow heavy components to never `render()` unless they themselves require it, while still allowing them to permit their light children to update.\n# partial renders\n\nThat `shouldComponentUpdate` based `renderRef` only applying updates to a component child feels somewhat awkward and forced though. So a more robust idea might be a partial render lifecycle that optionally runs when `shouldComponentUpdate => false` and can call for the render of a sub-tree that belongs to the current component.\n\n``` js\nclass HeavyComponent extends Component {\n    shouldComponentUpdate(nextProps) {\n        // Ignore icon and children\n        return nextProps.text !== this.props.text;\n    }\n\n    render() {\n        const {text, icon, children} = this.props;\n\n        text = doSomethingAbsurdlyCpuIntensiveAndHardToFactorOutOfThisComponent(text);\n\n        return (\n            <div>\n                <h2>\n                    {React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})}\n                    {text}\n                </h2>\n                <Wrapper ref='subtree'>\n                    {children}\n                </Wrapper>\n        );\n    }\n\n    componentSkippedRender(nextProps/*, nextState*/) {\n        this.subRender(this.iconRef, React.cloneElement(icon, {ref: (icon) => this.iconRef = icon}));\n\n        this.subRender(\n            this.refs.subtree,\n            <Wrapper ref='subtree'>\n                {children}\n            </Wrapper>\n        );\n    }\n}\n```\n\nThough `this.subRender` probably has potential for conflicts, so I expect the most react-line way to name that would be something like `React.renderSubtreeIntoComponent(parentComponent, nextElement, component)` which would be invoked using `React.renderSubtreeIntoComponent(this, /* subtree */, this.refs.subtree);`.\n\nThe `<Wrapper>` I used would be a really light component that probably would just render its children. It's there because `React.renderSubtreeIntoComponent` should probably not accept dom refs; this should be part of React lifecycle/walker, not part of client side browser only react-dom like `ReactDOM.unstable_renderSubtreeIntoContainer`.\n",
        "title": "shouldComponentUpdate doesn't work well if component accepts children",
        "labels": "Type: Feature Request",
        "id": 45045
    },
    {
        "body": "At the moment, when the server-rendered markup doesn't match the client-rendered markup, a big red error is shown, but it can be difficult/impossible to locate the element where this occurred.\n\nWould something that logged the offending element to the console be considered as a pull request?\n\n![react-diff](https://cloud.githubusercontent.com/assets/4443482/16935229/07cc7b20-4da1-11e6-9e30-f5f584d33182.gif)\n\nhttps://github.com/facebook/react/compare/master...davidgilbertson:log-checksum-failed-element\n",
        "title": "Highlight element that failed checksum",
        "labels": "Type: Feature Request",
        "id": 45046
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nFeature\n**What is the current behavior?**\nCustom component's properties are always set as attribute.\n**What is the expected behavior?**\nMaybe React should watch at the static `observedAttributes` property  for custom elements (https://w3c.github.io/webcomponents/spec/custom/) and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid `<custom-element prop=\"[object Object]\"></custom-element>`.\n",
        "title": "Attributes and properties for Custom Components",
        "labels": "Type: Feature Request",
        "id": 45047
    },
    {
        "body": "This is the error message in question: \n\n```\nLabelButton(...): A valid React element (or null) must be returned. \nYou may have returned undefined, an array or some other invalid object.\n```\n\nNot very helpful. Is it technically possible to _show_ what was returned?\n",
        "title": "Is there a way to let users know which invalid type was returned?",
        "labels": "Type: Feature Request",
        "id": 45048
    },
    {
        "body": "ES6 style of creating components in React is clearly violating the [Uniform access principle](https://en.wikipedia.org/wiki/Uniform_access_principle). It's a general source of confusion (and bugs) to be able to set state in two different ways:\n- You MUST do `this.state = {}` if you're in the constructor\n- You MUST do `this.setState()` everywhere else.\n\nI believe it'd be much better to have just 1 way to set state in general, and it should be universal. If we're already accessing state through `this.state`, and setting state in the constructor with `this.state`, why not do it everywhere else? The behavior of `this.setState` could be easily replicated with [ES6 Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set).\n",
        "title": "Having this.state in the constructor and this.setState everywhere else is violating the \"Uniform access principle\"",
        "labels": "Type: Feature Request",
        "id": 45049
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nBug - maybe intended behaviour.\n\n**What is the current behavior?**\n\n_Background_\nI have an app that needs to be embedded by other apps (other customers). The idea being \"our\" react app has its javascript loaded in an iframe, but the \"main\" window hosts dom elements from the customers and our react app. That bit works fine. As time goes on \"our\" react UI is no longer needed, and then react root is removed, and the iframe destroyed. These apps are often long lived so there will be times when the react app needs to appear again, and the iframe is recreated and everything reloaded. This can and will happen many times.\n\n_Goal_\nWe would like to NOT keep the iframe around when its not actually needed, but rather re-create just in time when it is needed. This app is used by customers and they would like to embed our \"react\" app, without interference with their \"app\" and all its javascript, which is why we are doing the iframe thing.\n\n_Problem_\nIt is evident by watching the chrome dev tools \"timeline\" memory graph that memory always increases each time a new iframe is created and the react UI is init'd. Unmounting and destroying the iframe, never causes the memory to drop to \"near\" original before load value. Repeating this process multiple times slowly show an increase memory.\n\nThis also causes a more immediate problem, in that react is throwing exceptions on every event (click, type etc) because the window of the iframe is now null.\n\n_Proof: First symptom - Event exceptions (only happens in my app)_\nThese exceptions only happen in my (cant share) app, i cant repo them, but parts of this apply to all react apps. Please read thru - it will all make sense when you get to the end and if you examine my poc.\n\nDestroying the Iframe, leaves React and its event dispatching system in memory. I have a  mixture of x-tag, webcomponents which are used to \"create\" the iframe and load the react app. After the custom element is used (lets call it <EMBED-REACT>), the console starts showing exceptions all within react code. This is a side effect of the react dispatchEvent still being active and trying to do stuff.\n\n``` javascript\nUncaught TypeError: Cannot read property 'nodeName' of null\nshouldUseChangeEvent @ VM1068_embeddedApp.js:14296\nextractEvents @ VM1068_embeddedApp.js:14536\nextractEvents @ VM1068_embeddedApp.js:13000\nhandleTopLevel @ VM1068_embeddedApp.js:19816\nhandleTopLevelImpl @ VM1068_embeddedApp.js:23870\nperform @ VM1068_embeddedApp.js:15510\nbatchedUpdates @ VM1068_embeddedApp.js:23787\nbatchedUpdates @ VM1068_embeddedApp.js:14673\ndispatchEvent @ VM1068_embeddedApp.js:23946\n```\n\nI know about `ReactEventListener.dispatchEvent`(snip below) where i can disable react( i havent actually tried) to avoid the exceptions, but that would leave the memory leak.\n\nhttps://github.com/facebook/react/blob/master/src/renderers/dom/client/ReactEventListener.js#158\n\n``` javascript\n dispatchEvent: function(topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n```\n\nIts rather easy to prove that react remains in memory, simply goto the compiled app, find the `React dispatchEvent` and insert a console.log and watch as it continues to \"print\" stuff after unmounting the last component, even though there are no listeners. In my case the exception is caused because all `extractEvents` eventually default to \"window\" as the \"target\".\n\nThere are multiple copies of the same basic idea in various react functions, where it tries to get a target that it assumes will never be null. If one doesnt load react in an iframe, then window is always defined.\n\n``` javascript\nvar targetNode = targetInst ?\n      ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n```\n\nLater the `shouldUseChangeEvent` tries to read the nodeName of the now \"undefined\" window, because its iframe has been destroyed, but that now results in an exception (null pointer etc).\n\nhttps://github.com/facebook/react/blob/045f1a791c6e17253e9d927ffca70ae5d00b4fe5/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js#L72 ...\n\n``` javascript\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n```\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\n\n**What is the expected behavior?**\nThere are probably two possible solutions, that work in tandem.\n\n1) Firstly React should provide an API that will remove all its global event listeners. Naturally it could complain if there are any active components that remain mounted. This API may be internal/private (not public), if #2 was implemented. It might be called something like `React.shutdownAll` Because everything is gone, the next React render would setup all its globals again.\n\n2) React should dispose of all its global event handlers when the last or \"root\" component is unmounted. This would call the _new api_ mentioned in 1. \n\nEither option solves my problem, where i wish to either let react shutdown gracefully. With this in mind i could.\n- unmount iframe powered react ui component.\n- call React.disposeGlobals (mentioned above). If unmounting auto calls an internal `React.shutdownAll` then this step is skipped.\n- destroy iframe.\n\n_Proof #2_\nGoto your compiled out, locate the `dispatchEvent` and add a console.log, notice even after the last / root container is unmounted stuff will continue to be printed because the event listeners are still active.\n\nI did a very quick scan of the abstraction around adding listeners, and i couldnt see the remove function being stored and then called to cleanup.\n\n_Proof #3_\nLook at my last section below where i have a proof of concept form of the popular todomvc react example.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact 15.0.2\nReact-Dom 15.0.2\nReact-redux 4.4.5 (might be useful to know)\n\n**Reproducable use case**\n\nSorry i tried but decided that using the facebook jsfiddle wasnt really a smart thing for the following reasons.\n- the compile the \"jsx\" content means loading babel etc to compile (babel, jsfiddle etc too many moving parts)\n- its \"hard\" to get the \"root component\" that is inserted into the \"output\" box and \n- its even just too \"hard\" to put the jsx compiled output into somewhere for the iframe src= to \"load\".\n\nI have forked the popular todomvc app and added a few minor edits to recreate, reload, render+unmount x100, destroy everything about the app, and try again in a loop separated by a sleep.\n- https://todomvc.com (todomvc main site)\n- https://github.com/tastejs/todomvc (todomvc github)\n- https://github.com/mP1/todomvc/pull/2 (my fork - with comments and snapshots of chrome dev tools timeline memory graph)\n\nHopefully we can trust the todomvc guys are doing the right thing, no dumb memory leaks. If you examine it should be obvious the only thing im adding is support for my horrible create app, run app, render+unmount many times, render, unmount, sleep a bit and then loop again until counter exhausted.\n\nSorry if this is boring but as a convenience i will list the basic instructions to \"run\" the react version of my branch on your local machines...\n1. clone https://github.com/tastejs/todomvc.git\n2. in the root, run \"gulp\", to compile everything.\n3. run something like \"python -m SimpleHTTPServer\"\n   4A. navigate to http://localhost:8000/examples/react/index.html \n   4B. navigate to http://localhost:8000/examples/react/index3.html\n   // /examples/react corresponds to the dist/examples/react directory that gulp built into.\n\nMy poc supports 3 concepts.\n- re-run todomvc over and over again in \"same\" window.\n- create iframe, load todomvc js in the iframe but render to outer window, unmount, destroy iframe, try 20x\n- create custom element, webcontainer creates iframe and load todomvc js in the iframe but render to outer window, unmount, destroy custom element, try 20x\n\nIf you look at my p/r against todomvc you will see many helpful pictures with memory leak graphs from chrome dev tools for each of the 3 described scenarios and some commentary.\n",
        "title": "Clean up top-level event listeners after unmounting all roots",
        "labels": "Type: Feature Request",
        "id": 45050
    },
    {
        "body": "During mouse move event, 'e.buttons' returns 'undefined' in Safari.  Behaving correctly in Chrome.  While pressing the left mouse button and moving the mouse expect 'e.buttons' to return 1.  'e.nativeEvent.which' returns the correct result on Safari.\n\nSample Code:\n\n``` javascript\nimport React from 'react';\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mouseDown(e) {\n    console.log(\"mouse down\", e.buttons, e.nativeEvent.which);\n  }\n\n  mouseMove(e) {\n    console.log(\"mouse move\", e.buttons, e.nativeEvent.which);\n  }\n\n  mouseUp(e) {\n    console.log(\"mouse up\", e.buttons, e.nativeEvent.which);\n  }\n\n  render() {\n    var canvasStyle = {\n      backgroundColor: 'rgba(0, 0, 255, 0.5)',\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      width: '100%',\n      height: '100%'\n    }\n\n    return (\n      <div>\n        <canvas id=\"canvas\" style={canvasStyle}\n          onMouseDown={this.mouseDown.bind(this)}\n          onMouseMove={this.mouseMove.bind(this)}\n          onMouseUp={this.mouseUp.bind(this)}>\n        </canvas>\n      </div>\n    );\n  }\n}\n```\n\n**Versions**\nReact: 15.1.0\nSafari: 9.1.1 (11601.6.17)\n\n**OS**\nOS X El Capitan Version 10.11.5\n\n**Computer**\nModel Name: MacBook Air\nModel Identifier:   MacBookAir6,2\nProcessor Name: Intel Core i7\nProcessor Speed:    1.7 GHz\nNumber of Processors:   1\nTotal Number of Cores:  2\nL2 Cache (per Core):    256 KB\nL3 Cache:   4 MB\nMemory: 8 GB\n",
        "title": "Polyfill MouseEvent.buttons for Safari",
        "labels": "Type: Feature Request",
        "id": 45051
    },
    {
        "body": "@kittens has expressed concern that people will forget to set the NODE_ENV when building their React application, which will result in babel producing bloated builds, due to our new dev-mode transforms.  The `__source` and `__self` should never be set in production, and having them set on every element would introduce substantial bloat that you wouldn't want in a production environment.  We probably want to be able to warn when this happens.\n\nIn this case, I think we might want to expose `React.mode = __DEV__` or something, such that the transform could add runtime checks to verify that React is in dev mode, and warn if not.  I know we're thinking about switching to real build flags for the various features, and maybe we want to expose all those individual flags.\n\nAnyway, opening the issue so we have a place to discuss and track.\n",
        "title": "Expose React build mode/flags",
        "labels": "Type: Feature Request",
        "id": 45052
    },
    {
        "body": "Sebastian wants to warn when `owner !== __self`, because this is the hard case to find when codemodding from string refs to callback refs.\n",
        "title": "Warn for string refs where owner != __self",
        "labels": "Type: Feature Request",
        "id": 45053
    },
    {
        "body": "I think we should create a test suite that throws errors in different lifecycle methods, and make sure we have relatively sensible invariants as early as possible, preferably with component names.\n#6990 is an example of this, but we\u2019ll keep regressing until we actually test for something like this explicitly.\n\ncc @jingc @yungsters @facebook/react-core \n",
        "title": "Improve error messages for invalid states",
        "labels": "Type: Feature Request",
        "id": 45054
    },
    {
        "body": "**Note: This is my personal proposal.**\n**Please don\u2019t announce it anywhere as \u201cReact dropping refs!\u201d** \ud83d\ude04 \n\nHigher order components solve many problems of mixins, however they come with their own problems. The most painful one in my experience is that they hide the ref of the wrapped component, so they can\u2019t be treated as transparent wrappers. This is well described in #4213.\n\nAs we prepare for de-emphasizing `createClass` and mixins I think it\u2019s important that we **treat higher order components as first class pattern in React, and provide full support for it without clashes with existing features**. This means we need to fix refs to work well with higher order components.\n\nIn the community, I see that people embrace stateless functional components even though they don\u2019t have public instances and don\u2019t support refs pointed at them. I think that this is a good indication that refs are moving from being a commonly needed feature to an escape hatch, and so it can be further de-emphasized by becoming opt-in.\n### What Doesn\u2019t Change\n\n`<div ref={...} />` works like before and provides node in a callback.\n`<StatelessFunctionalComponent ref={...} />` works like before and provides `null` in a callback.\n### Classes Opt Into Exposing a Ref\n\nIn the spirit of https://github.com/facebook/react/issues/4213#issuecomment-115019321, I propose that **`this.ref` becomes an opt-in API on every class component.** If you want your components to be \u201creffable\u201d (that is, to expose their public instances as refs), you need to manually call it in your constructor:\n\n``` js\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.ref(this) // I'm exposing my public instance!\n  }\n\n  ...\n}\n\n// Will print MyComponent instance\n<MyComponent ref={instance => console.log(instance)} />\n```\n### By Default, Don\u2019t Expose Refs\n\nIf you don\u2019t call `this.ref(this)` during the constructor, React will automatically call it with `null`:\n\n``` js\nclass MyComponent extends Component {\n  ...\n}\n\n// Will print null\n<MyComponent ref={instance => console.log(instance)} />\n```\n\nThis means that by default, class components will act just like functional components. There is no access to the instance unless the class opts in.\n### Automatic Cleanup\n\nIf the class opts in, it only needs to call `this.ref` in the constructor. React will take care of automatically calling it with `null` when the component unmounts.\n### New! Forwarding a Ref to Another Component\n\n**This is the new feature here.**\nSince we opt into refs, we can cleanly support ref forwarding for higher order components:\n\n``` js\nfunction wrap(WrappedComponent) {\n  return class extends Component {\n    ...\n\n    render() {\n      return <WrappedComponent ref={this.ref} />\n    }\n  }\n}\n```\n\nBy passing `ref={this.ref}`, we let `WrappedComponent` supply its own instance, if available. This way the fact that it\u2019s wrapped with a higher order component becomes unobservable.\n\nThis also works fine if you conditionally switch between different components or delay rendering:\n\n``` js\nfunction wrap(WrappedComponent) {\n  return class extends Component {\n    ...\n\n    render() {\n      return this.state.isReady ? <Spinner /> : <WrappedComponent ref={this.ref} />\n    }\n  }\n}\n```\n\nLet\u2019s say `isReady` is `false` initially. React would take care of calling `this.ref(null)` after the constructor ran (since it knows the constructor never called `this.ref(this)`). So initially the parent receives `null`, as expected.\n\nWhen `WrappedComponent` mounts, it will call `this.ref(this)` with its instance, which make it available to the parent. When `WrappedComponent` unmounts, React will call `this.ref(null)` for its instance, cleaning it up again.\n\nThe same works if we alternate between `<WrappedComponent ref={this.ref} />` and `<SomeOtherComponent ref={this.ref} />`.\n### Upsides\n#### Higher Order Components are Unobservable\n\nThis removes a common pain point in that wrapping a component with a HOC changes its public API.\n#### Refs are Further Discouraged\n\nBy making them opt-in, we better signal that you shouldn\u2019t use them for data flow. The component can also be certain that changing or removing an imperative method is not a breaking change because by default it doesn\u2019t expose the ref. If it exposes the ref, this is done intentionally.\n#### Providing Explicit Imperative APIs\n\nThe component may also choose to provide a subset of methods as its public API:\n\n``` js\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props)\n    // I'm exposing just some stuff!\n    this.ref({\n      focus: this.focus.bind(this)\n    })\n  }\n\n  focus() { ... }\n  privateMethodIDontWantAnybodyToCall() { ... }\n}\n```\n\nThis lets the component choose _which_ methods it wants to expose imperatively, and which are still considered implementation details.\n### Downsides\n#### Migration Cost\n\nThis would be an easy enough codemod for most components (just add `this.ref(this)` to any class component). But it\u2019s still a cost considering some of those components are on npm and out of your control. Arguably most third party components don\u2019t provide imperative methods anyway, but this will cause some trouble.\n#### Potential for Misuse\n\nI can imagine people doing `this.ref(this)` and then `<WrappedComponent ref={this.ref} />` in the `render` method. This could get confusing but I don\u2019t see any easy way to prevent or warn about this.\n#### Too Much Freedom\n\nTechnically you\u2019d be able to pass `this.ref(42)`, `this.ref(findDOMNode(this))` or other weird things. Maybe we could limit possible values to React public instances and `null`. On the other hand, the ability to only provide a subset of methods as described in \u201cProviding Explicit Imperative APIs\u201d seems useful.\n### Other Considerations\n#### `this.props.ref`?\n\nWe could have provided `ref` inside `this.props` as `this.props.ref`. I would argue that we don\u2019t want to do this for two reasons:\n- We want React to still \u201cmanage\u201d it partially by calling `this.ref(null)` when component unmounts. Otherwise it\u2019s too easy to introduce memory leaks. Having magic behavior for one of the props would be unexpected.\n- We don\u2019t want `{...this.props}` to transfer the ref over to the child as that would be unexpected in most cases.\n\n---\n\nWhat do you think?\n\ncc @facebook/react-core \n",
        "title": "RFC: Make Refs Opt-in",
        "labels": "Type: Feature Request",
        "id": 45055
    },
    {
        "body": "There's no shortage of places in React where a dev will write something like\n\n```\nonClick={() => this.setBooksSubjects()}\n```\n\nor alternatively \n\n```\nonClick={this.setBooksSubjects.bind(this)}\n```\n\nIt's not ideal to re-create these functions on each render, so the alternative would be some form of auto-binding in the class's constructor, all of which re-create these functions once per instance, and require boilerplate. \n\nI'd love to see the React team add some way of opting in to having a handler `call`ed with the current component set as this.  By \"current component\" I mean the component whose `render` created the element.  I don't know what it should be called, but, for example, if it were called \"ownClick\" it would look like this\n\n```\n   <button ownClick={this.foo}>Click me</button>\n```\n\nAnd so when that button is clicked, `foo` would be called, with the object that owns the `render` method which rendered the button set as `this`.\n",
        "title": "Provide an opt-in way to easily manage `this` in event handlers",
        "labels": "Type: Feature Request",
        "id": 45056
    },
    {
        "body": "I've tested the new Perf tools on one of the screens in one app I'm working on and it works great :)\n\nOne thing I wanted also on the old one Perf tools was to be able to check whether the Perf tools are started or stopped, so basically exposing `ReactDebugTool`'s `isProfiling` variable. My use for that is that I have a keyboard shortcut (in development) bound to start/stop the Perf tools and currently I'm forced to maintain such a variable myself to know whether to start or stop (which gets out of sync if I start/stop the perf tools without the keyboard shortcut).\n\nIf you don't think it's worthwhile to expose `isProfiling` feel free to close this issue.\n",
        "title": "ReactPerf 15.1.0-alpha.1 expose isProfiling on the exported object?",
        "labels": "Type: Feature Request",
        "id": 45057
    },
    {
        "body": "If set an inline style attribute for a component, such as `backgroundColor: 'yellow'`, and then update the state with a bad value to make the inline style like this `backgroundColor: 'non-exist-color'`. This currently takes no effect on the component, and the backgroundColor will remain yellow. (live example: https://jsfiddle.net/d6me6fca/ )\n\nI suppose this is not the correct behavior, the old value should be override by new value, even the value is non-standard, so it can fallback to use the parent style just like plain HTML. If leave the previous style as is, the behavior of component will lose connection with component state, the style will become chaotic and unpredictable.\n",
        "title": "Warn on inline style update with a bad value",
        "labels": "Type: Feature Request",
        "id": 45058
    },
    {
        "body": "currently it seems synthetic events don't have those properties on mousemove\n",
        "title": "support for event.movementX/Y [feature-request]",
        "labels": "Type: Feature Request",
        "id": 45059
    },
    {
        "body": "Not a _ton_ of browser support for this right now, but it appears to be on the horizon for Webkit. \nhttps://bugs.webkit.org/show_bug.cgi?id=98934\n\nhttp://caniuse.com/#search=datalist\n\nRight now, I'm not getting any DOM events fired from it in Chrome. Wonder if SyntheticEvent could prollyfill. \nhttps://facebook.github.io/react/docs/events.html#form-events\n",
        "title": "<datalist> support",
        "labels": "Type: Feature Request",
        "id": 45060
    },
    {
        "body": "As discussed in #6015, we plan to add a new build configuration that does _not_ have the `__DEV__` overhead but that comes with the new `ReactPerf` enabled.\n\nThis means that developer warnings, etc, will need to be gated by `__DEV__`, but the component tree (#6549) and some other events (e.g. #6612) will need to be gated by `__PROFILE__`.\n\nI\u2019m curious how this could be implemented. Right now our system is simple:\n### Current System\n#### Variables\n- `__DEV__ = (process.env.NODE_ENV !== 'production')`\n#### Development Build (any `NODE_ENV` except `'production'`)\n- `__DEV__` is `true`\n#### Production Build (`NODE_ENV` is `'production'`)\n- `__DEV__` is `false`\n\nAs you can see, if `process.env.NODE_ENV` is omitted, we assume `__DEV__` mode. This is a sensible assumption, and not the one we want to change, as most projects today don\u2019t specify anything as `NODE_ENV` in development, and we don\u2019t want them to suddenly lose all developer warnings.\n\nTherefore, I propose the following new system:\n### Proposed System\n#### Variables\n- `__DEV__ = (process.env.NODE_ENV !== 'profile' && process.env.NODE_ENV !== 'production')`\n- `__PROFILE__ = (process.env.NODE_ENV === 'profile'`)\n#### Development Build (any `NODE_ENV` except `'profile'` or `'production'`)\n- `__DEV__` is `true`\n- `__PROFILE__` is `true`\n#### Profile Build (`NODE_ENV` is `'profile'`)\n- `__DEV__` is `false`\n- `__PROFILE__` is `true`\n#### Production Build (`NODE_ENV` is `'production'`)\n- `__DEV__` is `false`\n- `__PROFILE__` is `false`\n\nThis would let us have three separate build configurations. We can use the same pattern in other `fbjs` projects as well, if desired. I would say it\u2019s unlikely we\u2019d ever want to add a separate fourth configuration so this should cover all our needs.\n\nAny thoughts why this would be a bad idea? Should I implement this in `fbjs`?\n\ncc @facebook/react-core \n",
        "title": "Introduce __PROFILE__ build",
        "labels": "Type: Feature Request",
        "id": 45061
    },
    {
        "body": "As per my chat [here](https://twitter.com/nickdima/status/723904527083147264) with @gaearon I'm filing an issue to discuss this further.\n\nI would like to avoid a specific element that I rendered on the server from beeing further updated by react once it reaches the client.\nOne specific use case is rendering ad server tags that are kind of a pain in the ars, using things like `document.write`, etc. I render them using `dangerouslySetInnerHTML` but sometimes when React is doing the reconciliation client side they get re-render so they stop executing. Now I managed to track down some of these cases by fixing render differences between server and client which would trigger DOM patching but it still seems to happen.\nAny advice?\n",
        "title": "Have React ignore a specific DOM element",
        "labels": "Type: Feature Request",
        "id": 45062
    },
    {
        "body": "This has come up a couple times lately as being an issue (#6479, #6581, #6511), I think perhaps because we added the minification warning and people are ending up seeing they aren't getting prod code when they expected it. But there's also the argument that you want React to be production and still use NODE_ENV for other purposes.\n\nThere would be a few things to figure out to make sure envify works, and deciding what we do for other projects which currently also use the NODE_ENV pattern (eg, Relay, fbjs, third-party code, etc).\n\nThis might not be a good idea at all though and definitely isn't happening immediately, but wanted to start the discussion.\n",
        "title": "Proposal: Replace NODE_ENV with REACT_ENV for __DEV__ replacement",
        "labels": "Type: Feature Request",
        "id": 45063
    },
    {
        "body": "As per the discussion today...\n\nSometimes you are developing on a platform that doesn't have devtools (safari, etc).  The problem is that you are looking at a whole pile of markup, and can't tell which components rendered it.  Without devtools, the output markup is really hard to navigate.  It would be cool if we had comment nodes (or a `data-reactcomponent` attribute) that helps users navigate the output.\n\nThese nodes would be rendered only in dev mode or with some flag turned on or something.\n",
        "title": "Add comments/attribute indicating which component was rendered",
        "labels": "Type: Feature Request",
        "id": 45064
    },
    {
        "body": "At the moment, it is quite cumbersome to work with promises in React. Either you write a lot of code to update the state inside the `then()` callbacks or you use a library like [react-promise](https://www.npmjs.com/package/react-promise) which only works for children (not properties) because it is based on components.\n\nAnother option is to traverse the whole virtual dom and replace promises before they are passed to React. (I have read once a blog post about this but cannot find it any longer.) This is obviously not ideal for the rendering performance.\n\nSince promises are now a standard, I think there should be simpler way to use them directly in the view. One option would be to introduce an AsyncValue type with a Promise implementation. The AsyncValue type would then be supported for children as well as properties.\n\nPromises could then simply be used like this:\n\n``` javascript\n<div>{promise(this.state.myPromise)}</div>\n```\n\nOpposed to supporting promises everywhere (directly without the promise function), this should not have unexpected side effects. Moreover, other types of asynchronous values (for example Observables) could be added later easily just by creating another AsyncType implementation.\n\nAngular 2 takes a similar route with the [async pipe](https://angular.io/docs/ts/latest/guide/pipes.html#!#the-impure-asyncpipe-). There you can simply write \n\n``` javascript\n{{ myPromise | async }}\n```\n\nin attributes as well as normal content.\n\nThis feature would also be very convinient for libraries like Flux because it allows to fetch properties directly inside the view and avoids the reptition which you have with Relay:\n\n``` javascript\n<div>{promise(this.state.model.get('property'))}</div>\n```\n\nWhat do you think about this proposal?\nHas this been discussed before? I couldn't find a thread which covers this particular topic.\n",
        "title": "Support for asynchronous values (like Promises and Observables)",
        "labels": "Type: Feature Request",
        "id": 45065
    },
    {
        "body": "I've been using the \"string\" hack to override CSS values in React components.\n\nFor example, if you want to have `display` with different values, you do\n\n```\nstyleObj.display = '-webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex';\n```\n\nI have an npm module for poly-filling my styles in my React components.\nhttps://www.npmjs.com/package/poly-style\n\nAll of that worked perfectly in v0.14. No warnings no nothing.\nUpdated to v15.0 today, and everything is breaking.\na) Normally there are deprecation warnings. I didn't notice any warnings on that change.\nb) in the changelog I cannot see anything related to that, to understand what changed.\n\nAm I missing something?\n",
        "title": "Allow specifying multiple fallback values for inline styles (e.g. for vendor prefixing with SSR)",
        "labels": "Type: Feature Request",
        "id": 45066
    },
    {
        "body": "https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\nIt would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.\n\nSimilarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.\n\ncc @vjeux @ide\n",
        "title": "Support Passive Event Listeners",
        "labels": "Type: Feature Request",
        "id": 45067
    },
    {
        "body": "It would be great if it was possible to run some code after the component actually unmounted. This is useful where you consider the following:\n\n```\ncomponent Parent {\n    has service Service\n    has child Child\n\n    componentWillUnmount: {\n         destroys Service\n    }\n\n    render: {\n         Service gets passed to Child as prop\n    }\n}\n\ncomponent Child {\n    componentWillMount: {\n         starts listening to Service\n    }\n\n    componentWillUnmount: {\n         stops listening to Service\n    }\n}\n\n```\n\nThe above will throw exception during Child componentWillUnmount since Parent gets unmounted first so Service is already destroyed.\n\nIf there existed componentDidUnmount the Service can be destroyed after the children are unmounted, i.e.\n\n```\ncomponent Parent {\n    has service Service\n    has child Child\n\n    componentDidUnmount: {\n         destroys Service\n    }\n\n    render: {\n         Service gets passed to Child as prop\n    }\n}\n\ncomponent Child {\n    componentWillMount: {\n         starts listening to Service\n    }\n\n    componentWillUnmount: {\n         stops listening to Service\n    }\n}\n\n```\n",
        "title": "componentDidUnmount functionality (in addition to componentWillUnmount)",
        "labels": "Type: Feature Request",
        "id": 45068
    },
    {
        "body": "CSS variables is now supported in Chromium, which we use for rendering. They enable us to write cleaner, more flexible code. Sadly, I cannot seem to use them in React without resorting to various tricks. Ideally, I would like to be able to use them like `<div style={{\"--color\": \"hotpink\"}} />`, which would make the variable available inside the scope of the div.\n\nI am able to add them using the following syntax `<div style={{[\"--color\"]: \"hotpink\"}} />`, but then they aren't updated if I try assigning a new value\u2014which ruins much of the point of using a variable.\n\nI am able to add and remove them using ReactDOM and `ReactDOM.findDOMNode(this).style.setProperty(\"--color\", \"hotpink\")`, but that gets it out of sync with the DOM updates, in addition to not being pretty.\n\nIf there are any questions on the usefulness of CSS variables I'll be more than happy to explain.\n",
        "title": "Add support for CSS variables in style attributes",
        "labels": "Type: Feature Request",
        "id": 45069
    },
    {
        "body": "Like mouse enter/leave, these are almost always what you want, not the `onFocus` and `onBlur` events we currently expose. I run into this semi-frequently when actually doing product work. We should add them.\n",
        "title": "onFocusIn/onFocusOut events",
        "labels": "Type: Feature Request",
        "id": 45070
    },
    {
        "body": "The use case is for example, translation components rendering string content.\n\nThe HTML spec has some unfortunate attributes that behave kind of like content. It seems like they should be able to accept React elements. If I were to design a similar React component I would allow it to accept React elements.\n\nSince we normalize usage we could in theory have it built-in to React that certain attributes like `placeholder`, `aria-label`, etc. could accept React components that render into strings.\n\nThat would probably have to go in after we figure out a way to render strings at the root of a React composite component.\n",
        "title": "Consider Special Casing Certain DOM Attributes to Accept Elements",
        "labels": "Type: Feature Request",
        "id": 45071
    },
    {
        "body": "It would be nice to be able to do the equivalent of `<div>{document.createElement('div')}</div>`. It seems entirely doable now with our new fancy renderer I think? Obviously it wouldn't be supported for SSR though so you would have to provide your own fallback if necessary.\n",
        "title": "Support DOM nodes as children",
        "labels": "Type: Feature Request",
        "id": 45072
    },
    {
        "body": "I think many people agree that the `dangerouslySetInnerHTML={{ __html: ... }}` api is gross even though there is great reasoning behind it.\n\nI have a few issues with it beyond it's verbosity that I think could be added as static method on the react class.\n#### My Issues with `dangerouslySetInnerHTML`:\n\n1) Verbose and not always dangerous.\n2) Can't mix safe and unsafe html.\n3) Can't mix html with react elements.\n4) Have to manually concat html strings.\n\n---\n\nA better solution would be to provide a way to mark html as \"safe\".\n\n``` js\nvar React = require(\"react\");\n\n// Use #markSafe method to bypass reacts automatic html escaping.\nvar myReactEl = <div>{ React.markSafe(\"<br/>\") }</div>;\n```\n\nThis is still explicitly telling react that we trust the html but solves all of the problems above.\n\n``` js\n// Mixing safe and unsafe html.\n(\n    <div>\n        { React.markSafe(\"<br/>\") }\n        { \"<br/>\" }\n    </div>\n);\n\n// Mixing html with react elements.\n(\n    <div>\n        { React.markSafe(\"<br/>\") }\n        <span>Hello!</span>\n    </div>\n);\n\n// Multiple innerHTML sets.\n(\n    <div>\n        { React.markSafe(\"<br/>\") }\n        { React.markSafe(\"<hr/>\") }\n    </div>\n);\n```\n\nI think this api would be much friendlier than the current html api and probably wouldn't even require a major version bump.\n\nThoughts?\n",
        "title": "Feature Request: innerHTML alternative",
        "labels": "Type: Feature Request",
        "id": 45073
    },
    {
        "body": "After staring at the confusing mess that is the synthetic event system today and talking with @sebmarkbage, we're no longer confident that we need the pooling that the system currently uses. GCs have gotten pretty good so we may be experiencing diminishing returns at this point, or maybe losing out on some benefits. We do have to consider that we still support some older browsers who's GCs don't have the benefit of the last several years worth of innovations so it might be premature, but it's probably worth investigating.\n",
        "title": "Proposal: Get rid of pooling in synthetic event system",
        "labels": "Type: Feature Request",
        "id": 45074
    },
    {
        "body": "``` js\nconst Foo = ({ onAction }) => <div onClick={onAction} />;\nFoo.propTypes = {\n  onAction: PropTypes.function\n};\n\nconst Bar = () => <Foo onaction={() => console.log('action')} />; // This should warn\n```\n\nWe currently don't warn for properties that don't exist in the `propTypes` set. I.e. we don't catch typos. This is mostly a legacy artifact and there are many components out there that don't define their full set of props. E.g. when `...` spread is used. Few components also define the `children` prop even though they use it. Warning for all of these might be too much work initially.\n\nHowever, we can start small. We can find missing properties that have corresponding properties with a different case and suggest that the developer use that instead. This is essentially always a bug.\n\nWhile it is technically possible to have the same property name with two or more different case, it is considered bad practice to allow both. It causes overhead to test for both in the diffing/rendering. It causes style-guide issues where people have to pick which style to use. It also makes it worth for tooling where search/replace can easily miss less commonly used variants. That's why React only allows a single case, and ideally so should custom components.\n",
        "title": "Warn for PropTypes that don't exist but do exist with a different case",
        "labels": "Type: Feature Request",
        "id": 45075
    },
    {
        "body": "Unmounting can take significant and unbounded time when we traverse the tree and call the life-cycles. This is the smallest problem of incremental reconciliation (out of: mount at arbitrary location > update a boundary > mount a boundary > unmount).\n\nThe theory is that we can remove the node from the tree first and then call the life-cycles later on during idle time. This means that the refs won't have access to nodes that are in the document anymore so reading any such information would no longer work.\n\nThis problem space might also be related to animations. Exit animations want a component/node to exist in the tree for as long as it needs to finish its animation offscreen, asynchronously get deleted from the tree and eventually get cleaned up by calling the unmount life-cycles.\n",
        "title": "Defer Execution of Unmount Life Cycle Hooks",
        "labels": "Type: Feature Request",
        "id": 45076
    },
    {
        "body": "React should provide a way for us to register a last-chance exception handler for errors thrown in React event handlers. We have last-chance exception handlers registered for our other event-handling frameworks and this has proved extremely useful for making us aware of unexpected error conditions.\n",
        "title": "Provide a way to register a last-chance exception handler",
        "labels": "Type: Feature Request",
        "id": 45077
    },
    {
        "body": "we have tests that insure that prerendering = client rendering.\n\nRight now its a real cludge - we override console.warn, and watch to see if any checksum warnings are output.\n\nInstead how about adding data-checksum_invalid to the outer element?  \n",
        "title": "save flag someplace if checksum was invalid",
        "labels": "Type: Feature Request",
        "id": 45078
    },
    {
        "body": "Is it possible to use React inline styles with ReactCSSTransitionGroup? If so, how?\n\nI have tried, and this doesn't seem to work (React v. 0.14.6):\n\n```\nvar tstyle = {\n  'enter': {\n    visibility: 'hidden',\n    transform: 'translate3d(100%,0,0)'\n  },\n  'leave': {\n    visibility: 'visible',\n    transform: 'translate3d(0,0,0)'\n  },\n  'enterActive': {\n    visibility: 'visible',\n    transform: 'translate3d(0,0,0)',\n    transition: 'all 0.4s'\n  },\n  'leaveActive': {\n    visibility: 'hidden',\n    transform: 'translate3d(100%,0,0)',\n    transition: 'all 0.4s'\n  }\n}\n```\n\nIn render():\n\n```\n    <ReactCSSTransitionGroup\n      style={tstyle}\n      transitionName={ {\n        enter: 'enter',\n        enterActive: 'enterActive',\n        leave: 'leave',\n        leaveActive: 'leaveActive',\n        appear: 'appear',\n        appearActive: 'appearActive'\n      } }\n      transitionEnterTimeout={400}\n      transitionLeaveTimeout={400}>\n      {this.props.notifications.map((notification, index) => {\n        return <Notification\n                key={index}\n                type={notification.type}\n                message={notification.message}\n                timeout={10000}\n                remove={this.props.actions.removeNotification} />\n      })}\n    </ReactCSSTransitionGroup>\n```\n",
        "title": "ReactCSSTransitionGroup and Inline styles",
        "labels": "Type: Feature Request",
        "id": 45079
    },
    {
        "body": "Howdy ya'll,\n\n**tl dr: please provide a way to coordinate pseudo-random identifiers across the client and server**\n\nThis issue has been discussed a bit before (#1137, #4000) but I continually run into this issue, trying to build libraries that provide accessible components _by default_. The react component model generally speaking offers a big opportunity to raise the often low bar for accessibility in the library and widget world, see experiments like @ryanflorence's react-a11y. \n\nFor better or for worse the aria, and a11y API's in the browser are heavily based on using ID's to link components together. `aria-labelledby`, `aria-describedby`, `aria-owns`,`aria-activedescendent`, and so on all need's ID's. In a different world we would just generate ids where needed and move on, however server-side rendering makes that complicated, because any generated ID is going to cause a mismatch between client/server.\n\nWe've tried a few different approaches to address some of this, one is making id's required props on components that need them. That gets kinda ugly in components that need a few id's but moreso it annoys users. Its unfortunate because if we could generate deterministic id's we could just provide more accessible components by default.\n\nThe frustrating part is that the component generally has all the information it needs to just set the various aria info necessary to make the component usable with a screen reader, but are stymied by not having the user provide a bunch of globally unique ids'\n\nSo far only really reasonable approaches I've seen are @syranide's solution of a root ID store, and using `_rootID`. The latter obviously has problems. The former doesn't scale well for library authors. Everyones' root App component is already wrapped in a Router, Provider, etc, having every library use their own root level ID provider is probably not super feasible and annoying to users.\n\nIt seems like the best way to do this would be if React (or a React addon) could just provide a consistent first class way to get a unique identifier for a component, even if it is just a base64 of the node's _rootID.\n\nthanks for all the hard work everyone!\n",
        "title": "Generating unique ID's and SSR (for a11y and more)",
        "labels": "Type: Feature Request",
        "id": 45080
    },
    {
        "body": "The `onSelect` event does not fire while the user is dragging the mouse, only after they release. It would be nice to have an event that fired immediately whenever the selection changed, including while dragging the mouse. This is useful, for example, when syncing selections between multiple collaborators, ala google docs.\n\nThe native [selectionchange](https://developer.mozilla.org/en-US/docs/Web/Events/selectionchange) event is supported cross browser, way back in IE, Chrome, and Safari, and recently in Firefox 43. Is this something React could polyfill and expose to components?\n",
        "title": "`onSelectionChange` event",
        "labels": "Type: Feature Request",
        "id": 45081
    },
    {
        "body": "React components could use some way to dynamically add a handler to be called on unmount. Either some event handler like way (`this.addUnmountHandler`) or some other way to register a 'destructor'/destroy method for an object that a component is holding on to.\n\n`componentWillUnmount` exists but it does not scale well.\n- Every time you hold on to something you have to maintain two sections of code, with the cleanup code being separate from the rest of the code.\n- If you try to cleanup your code using helpers adding the cleanup code could be done in the very same function. But `componentWillUnmount` doesn't allow that.\n- Sometimes you end up adding a `this._fooSomethingProp` to a component you wouldn't normally need, just so that you can hold on to the destructor for use in `componentWillUnmount` because you can't add the cleanup code in the same closure you set it up in.\n\n---\n\nHere's one sample use case of mine for unmount handlers.\n\nReact is discouraging the use of mixins so I've been trying to move towards alternative patterns in new code. Some helpers only make sense on a component itself and wont work as a special component or a higher-order component.\n\nFor some of these needs I've come up with a pattern that involves passing the component to a helper function that will mutate the component and provide some sort of service which is linked to the component.\n\nTwo examples from my codebase:\n\n`ctxApi` provides a component with a version of my internal api which is 'scoped' to the component so that if the component is unmounted all of the api requests' HTTP requests are aborted.\n\n`setPending` adds a key to a pending state set and returns a `pending.cleanup` that will unset it, which is intended to be passed to a `.finally` handler. This pattern provides my buttons, etc... with pending text and spinners while waiting for HTTP requests.\n\n``` js\nresendConfirmation(email) {\n    var pending = setPending(this, `${email}:resendConfirmation`);\n\n    ctxApi(this)\n        .then((api) => api.post('/self/resendConfirmationEmail', {email}))\n        .then(() => alertifyjs.notify(\"Confirmation message sent\"))\n        .fin(pending.cleanup)\n        .catch(ignoreAbort)\n        .catch(notifyOnError)\n        .done();\n}\n```\n\nThe problem is that these helpers often need cleanup on unmount. `ctxApi` needs to abort requests on unmount. And `setPending` needs to break references so `setState` isn't called and it doesn't prevent gc. And while I can require that a call to a cleanup function be placed into `componentWillUnmount`. That is unnecessary boilerplate and easy to forget.\n\nIt would be much preferable for these helpers to be able to register an unmount handler on the component instance so they can implicitly clean themselves up.\n",
        "title": "Dynamically added unmount handlers",
        "labels": "Type: Feature Request",
        "id": 45082
    },
    {
        "body": "As per comments from @samwgoldman in the following issue, the flow built-in react type definitions are lagging behind and the recommendation is that the definitions be included and maintained in the react repo itself: \n\nhttps://github.com/facebook/flow/issues/1081\n\nThe flow maintainers are doing an excellent job of implementing new JS syntax/features. It would be great if they did not also need to maintain this file:\n\nhttps://github.com/facebook/flow/blob/master/lib/react.js\n\nOne could, of course, also relegate this definition to yet another repo.\n",
        "title": "Include flow type definitions",
        "labels": "Type: Feature Request",
        "id": 45083
    },
    {
        "body": "You have a warning in React if you call setState() from within a render method, with the check `ReactCurrentOwner.current == null`. I would like to add this check to other methods of my project because they also trigger rerender or are too expensive.\nThe issue I have is that ReactCurrentOwner is not exposed by React, so how can I achieve that? The current solution I have in mind is to check from the stack trace but that's a lot more expensive than your check so I would prefer if there was something equivalent to your code but from outside React.\n",
        "title": "Prevent a function to be called from within render",
        "labels": "Type: Feature Request",
        "id": 45084
    },
    {
        "body": "I'm aware of the [Iterable support for children](https://jsfiddle.net/aneo4nhk/), but is there any timetable for supporting [KeyedIterable](https://facebook.github.io/immutable-js/docs/#/KeyedIterable) from Immutable.js, specifically for [automatically providing keys to children](https://github.com/facebook/react/blob/ac5e5d789f022f0d13107e54653f13a8ede0330b/src/shared/utils/traverseAllChildren.js#L154-L159)?\n\nSample use case:\n\n``` js\nvar myItems = Immutable.Map({ // extends KeyedIterable\n  one: 111,\n  two: 222\n});\nvar renderedItems = (\n  <ul>{myItems.map(item => (\n    <li>{item}</li>\n  ))}</ul>\n);\n```\n\nThat is, the first item would end up the equivalent of `<li key=\"one\">111</li>`.\n\nIf such support isn't on the roadmap, can I somehow avoid having to use `React.cloneElement()` (which will have performance implications) if I write a helper function that does this?\n",
        "title": "Immutable.KeyedIterable as children",
        "labels": "Type: Feature Request",
        "id": 45085
    },
    {
        "body": "See this https://github.com/babel/babel/issues/2517 and the associated discussion around the PR https://github.com/babel/babel/pull/2518, which I don't expect to be merged due to loader issues.\n\nTo recap: \n\nThe `inlineElements` optimization requires brittle knowledge of internal React values, namely, `$$typeof`. This breaks on older browsers unless the developer globally polyfills `Symbol`, because `Symbol` will be polyfilled automatically by Babel in the user's code, but will not be polyfilled in the React library. This causes `ReactElement.isValidElement` to fail as `Symbol.for('react.element') !== 0xeac7`.\n\nWorse, this bug only occurs in older browsers that don't implement Symbol, meaning that many devs won't catch it right away as it will work fine in FF, Chrome, and (latest) Safari.\n\nThis is a hard issue to fix without globally polyfilling Symbol or giving up on the use of `Symbol` for `$$typeof`. Babel could automatically this as part of enabling the optimisation, but @loganfsmyth had a better idea - how about a `React.elementFromObject()` API?\n\nThis function would be nothing more than:\n\n``` js\nReact.elementFromObject = function(obj) {\n  invariant(obj && typeof obj === 'object', \"Supply an object to React.elementFromObject.\");\n  obj.$$typeof = REACT_ELEMENT_TYPE;\n  return obj;\n}\n```\n\nThis ensures that the `REACT_ELEMENT_TYPE` we are using is equal to the one used in `ReactElement.isValidElement`. It shouldn't be necessary to do any validation in `elementFromObject` because it will be caught by `isValidElement` later on.\n\nThoughts?\n",
        "title": "`inlineElements` optimization breaks on older browsers; discussion about Symbols and React.elementFromObject() API",
        "labels": "Type: Feature Request",
        "id": 45086
    },
    {
        "body": "Also, it should be possible to specify a component that sets the children attribute and the components child nodes independently.\n\nexample:\n\n```\n<my-web-component children=\"2\">\n    <div>myChild</div>\n    <div>myOtherChild</div>\n</my-web-component>\n```\n\nThis is related to (a superset of) https://github.com/facebook/react/issues/5088.  This might be another motivation to reconsider #4694, which I've wanted for a while.\n",
        "title": "Custom element can't render `children` and `childNodes` independently",
        "labels": "Type: Feature Request",
        "id": 45087
    },
    {
        "body": "Proposal: New life-cycle that fires after `componentDidMount` and after the event-loop has returned but before any other reconciliation has started.\n\nEffectively, this give you a `componentDidMount` that doesn't block the visual output. It could be a good place to set up timers, subscriptions etc.\n",
        "title": "componentWasMounted/componentWasUpdated (formerly componentDidDisplay)",
        "labels": "Type: Feature Request",
        "id": 45088
    },
    {
        "body": "I originally left a comment in #4936, but I felt this might be better as a separate issue.\n\n> I completely agree with the rationale behind no backing instances and no refs for stateless components. I want to use pure stateless components as much as possible.\n> \n> However, I'm running into instances where testing stateless components gets tricky. For the most part, using the shallow renderer to render a stateless component has been fine. I can then make assertions on expected props and children. To reduce the duplication, I abstract out the shallow renderer process to a helper function.\n> \n> When, I want to test events, though, I have to take a different route. If my component takes an `onClick` prop, then I wrap it in a class component, so I can access the DOM node to simulate my click event. Again, this isn't a huge deal because I can abstract out the wrap/render process into a helper function.\n> \n> I bring all this up because I feel that it would be nice to have better facilities in `TestUtils` for stateless components. I don't think the answer is allowing `ReactDOM.findDOMNode` to work on stateless components because that opens up it to abuse in normal application code. Are you open to allowing extra functions in `TestUtils` to simplify the process of testing stateless components? Or am I creating a code smell in my testing?\n> \n> I'd be happy to create a PR for `TestUtils` if you think some more helper functions for stateless components would be beneficial.\n",
        "title": "Better test facilities for stateless components",
        "labels": "Type: Feature Request",
        "id": 45089
    },
    {
        "body": "Currently I am implementing some `Dropdown` component and I have something like this.\n\n``` jsx\nreturn (\n  <div className={classnames(classes)} tabIndex=\"-1\">\n    {Children.map(children, this.render_child)}\n  </div>\n)\n\n...\n\n@autobind\nrender_child(element, index) {\n  return cloneElement(element, {\n    key: element.key || index,\n    selected: this.props.selected,\n    onClick: this.click_handler\n  })\n}\n```\n\nThe business requirement put me in this situation. I created the list of item of the `Dropdown` component.\n\n``` jsx\n// this is using map from some array so I will return an array.\nrender_menu_item(key) {\n  if(!key) { //whatever checking\n    return\n  }\n\n  return (\n    <MenuItem value={key}>{text}</MenuItem>\n  )\n}\n```\n\nNow, because I use `element.key` in some case `element` could be `null` so give me an error. I propose to remove the `null` or `undefined` from the `Children.map` because then I will be filtering all the time the `null` values whenever I have this situation. \n\nI understand I can `forEach` but I think is not the best implementation, in the end you change the `map` function alright so\n",
        "title": "[Children] filter null values in map function",
        "labels": "Type: Feature Request",
        "id": 45090
    },
    {
        "body": "well, react is very good, i like it,but i have some question, and it's time to fixed.\n1.why support style object\n\n``` javascript\nstyle={color: 'white',backgroundImage: 'url(' + imgUrl + ')'} \n```\n\nbut not support className, i think className should support string,array,object,there has a classname repertory.i just want to write code like this:\n\n``` javascript\n<div className={['button','icon-red']}></div>\n<div className={{opened:true,cloth:'red'}}></div>\n<div className={'button',{opened:true,cloth:'red'}}></div>\n//not\nvar className = react.addons.className;\nvar someVar = className({  //that is puzzled i think\nopened:true,\ncloth:'red'\n});\n<div className={someVar}>  \n```\n\nor will it be support in the feture?\n",
        "title": "it's time to merge className in react",
        "labels": "Type: Feature Request",
        "id": 45091
    },
    {
        "body": "We have a few use cases that we support which shouldn't rely on `document` or other DOM specific globals to be available.\n- Shallow Rendering\n- Worker Renderers (e.g. react-native like environments)\n- Server Rendering (setState etc shouldn't look for document)\n\nUnfortunately we often screw this up. Which leads to work arounds:\n- https://github.com/gaearon/library-boilerplate/pull/6\n- https://github.com/facebook/react-native/blob/master/Libraries/JavaScriptAppEngine/polyfills/document.js#L28\n- https://github.com/facebook/react/issues/3620\n\nPart of the problem is that jest comes with JSDOM always on. We need to have a test environment that allow us to execute in a DOM-less environment.\n\nWe also need to add separate unit tests for these three test cases that execute in a DOM-less environment.\n\nWe could potentially add a lint rule against using globals in files in the `shared` folder.\n\nWe should also get rid of all uses of `canUseDOM` since it varies by render tree, not environment.\n",
        "title": "Stop relying on document",
        "labels": "Type: Feature Request",
        "id": 45092
    },
    {
        "body": "Short:\n\n`propTypes` should accept `React.PropTypes.shape` object as valid declaration of `propTypes`.\n\n``` js\nimport React from 'react';\n\nexport default class extends React.Component {\n    static propTypes = React.PropTypes.shape({});\n\n    // ...\n```\n\nMore:\n\nI have a file called `shapes.js` that defines all shapes used in the project, e.g.\n\n``` js\nimport {\n    PropTypes\n} from 'react';\n\nexport let screeningShapeDefinition = {\n    id: PropTypes.number.isRequired,\n    timestamp: PropTypes.number.isRequired,\n    url: PropTypes.string.isRequired,\n    position: PropTypes.number.isRequired\n};\n\nexport let screeningListShapeDefinition = {\n    size: PropTypes.number.isRequired,\n    screenings: PropTypes.arrayOf(PropTypes.shape(screeningShapeDefinition)).isRequired\n};\n```\n\n, which I use in modules as such:\n\n``` js\nimport React from 'react';\nimport moment from 'moment';\n\nimport {\n    screeningShapeDefinition\n} from './../../shapes';\n\nexport default class extends React.Component {\n    static propTypes = screeningShapeDefinition;\n\n    // ...\n```\n\nThere is a slight leaking:\n- I have to cast my shape definition object to `React.PropTypes.shape` when defining relations in the shapes definition file.\n\nIf `propTypes` (component definition property) supported `React.PropTypes.shape` as a valid input, I could avoid the leaking:\n\n``` js\nimport React from 'react';\nimport moment from 'moment';\n\nimport {\n    screeningShape\n} from './../../shapes';\n\nexport default class extends React.Component {\n    static propTypes = screeningShape;\n\n    // ...\n```\n\n``` js\nimport {\n    PropTypes\n} from 'react';\n\nexport let screeningShape = PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    timestamp: PropTypes.number.isRequired,\n    url: PropTypes.string.isRequired,\n    position: PropTypes.number.isRequired\n});\n\nexport let screeningListShape = PropTypes.shape({\n    size: PropTypes.number.isRequired,\n    screenings: PropTypes.arrayOf(screeningShape).isRequired\n});\n```\n",
        "title": "Allow PropTypes.shape as a valid definition of propTypes",
        "labels": "Type: Feature Request",
        "id": 45093
    },
    {
        "body": "Although `node.style.WebkitTransform` (PascalCase) does work in Safari, the actual property is `node.style.webkitTransform` (camelCase) which React doesn't support properly. Can an alias be added to handle this case, since it doesn't seem obvious?\n\nIn fact, Safari's inspector autocomplete doesn't even work for `node.style.WebkitTransform` - seems like it's a hack that it works.\n",
        "title": "Support the camelCase version of webkitTransform as well",
        "labels": "Type: Feature Request",
        "id": 45094
    },
    {
        "body": "**Problem:** I have DOM Elements outside of main DOM Document, where I want to render my React components. When done, some of the original elements will be mounted into main DOM Document. I need to delay `componentDidMount` and schedule it after components are inside main DOM Document.\n\n**Reason:** Mainly because I have some logic inside `componentDidMount` that works with offsets of Element (e.g. controls lazy loading of images). When invoked in seperate DOM, component have wrong idea about where it is on screen.\n\nIs it possible with current version of React (or 0.14) to achieve behaviour, where componentDidMount transaction is invoked later, after I give a signal to root Component? Or will future refactoring allow this use case?\n",
        "title": "Deferred componentDidMount inside Component Tree",
        "labels": "Type: Feature Request",
        "id": 45095
    },
    {
        "body": "I'd like to configure my testsuite to fail if there are any react warnings triggered.\n\nI'm currently using a variant on this SO answer http://stackoverflow.com/questions/29651950/karma-and-react-have-warnings-to-cause-errors\n\n``` js\nconsole.warn = (function(warn) {\n  return function(msg) {\n\n    // Detect react warnings & error\n    if (/^Warning: /.test(msg)) {\n      throw new Error(\"React \" + msg);\n    }\n\n    return warn.apply(this, arguments);\n  };\n})(console.warn);\n```\n\nThis basically works, but has a problem because there's some global-state memoisation in the code which triggers warning to try not to trigger too often:\nhttps://github.com/facebook/react/blob/500d4c3f8779bce7c7dde129eb2fec9e901cf5ae/src/isomorphic/classic/element/ReactElementValidator.js#L46\n\nCould we provide a way to clear this state, or even better a supported API for opt-in erroring on warnings?\n",
        "title": "Add hooks into the warning output for unit tests and other use cases",
        "labels": "Type: Feature Request",
        "id": 45096
    },
    {
        "body": "Consider the following scenario (or [run it](https://github.com/d4goxn/iso-form-issue-repro)), in a simple isomorphic app that consists of a single-input form.\n1. A form is rendered on the server with existing data and sent to the browser, along with dehydrated state\n2. The user edits the form\n3. The browser loads the app, slowly, which rehydrates its state and bootstraps over the form\n4. The user hits a save button\n\nAt this point, React has found no reason to rerender the form or throw a warning, even though the values of the form elements have been updated by the user before the app was listening to them. As a result, app state is out of sync with form input values. The user has just re-saved their old data (app state), but sees their new data (form values). If they leave, they lose their changes even though it appears that they just successfully saved.\n\nI have decided to solve the problem by putting a ref on every form input, and copying their values into app state on `componentDidMount`. I can probably make the solution a little more DRY than that sounds at first.\n\nI'm thinking that a better solution might be to have React include input values in the checksums. Is there a technical reason why this is not how isomorphic rendering already works?\n",
        "title": "Apps that mount over isomorphically rendered forms aren't aware of early input",
        "labels": "Type: Feature Request",
        "id": 45097
    },
    {
        "body": "For 0.14 we'd like a feature that allows us to forward refs or define what the public instance of a component should be. That way we can make higher order components that are completely transparent.\n",
        "title": "Forward refs / Support getPublicInstance",
        "labels": "Type: Feature Request",
        "id": 45098
    },
    {
        "body": "Because React has repurposed `onChange` to behave like `onInput` there is no way to get actual `change` event behaviour without binding a non-delegated native event in lifecycle events.\n\n`change` event behaviour is sometimes important to have. `input`-like behaviour does make sense for what React uses `onChange` for (live updating of state associated with `value=\"\"` and anything derived from it). But other use cases, like triggering an ajax post once a user has finished with an input, require the standard behaviour of `change` for text inputs where it is only fired after a user is finished with the input.\n\nThese use cases are reasonable to support within React. If `onChange` is going to be changed to behave in a non-standard way. Then we should add another custom non-standard event name that lets React elements bind to behaviour that is closer to how `change` behaves (with React's event delegation handling).\n\nEvent name ideas:\n- onChangeCommit(ted)\n- onCommit(ted)Change\n- onValueCommit(ted)\n- onCommitValue\n- onCommit?\n\nThe idea of using \"commit\" in the name comes from the HTML spec.\n\n> The change event fires when the value is committed, _[...]_\n\n~ Section [4.10.5.5 Common event behaviours](https://html.spec.whatwg.org/multipage/forms.html#event-input-input)\n",
        "title": "Add event that behaves similar to the native `change` event",
        "labels": "Type: Feature Request",
        "id": 45099
    },
    {
        "body": "When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving.\n\nFor example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root.\n\n``` jsx\nrender() {\n    var blockA = <div>AAA</div>,\n        blockB = <div>BBB</div>;\n\n    if ( this.props.layoutA ) {\n        return <div>\n            <div className=\"something\">{blockB}</div>\n            <div className=\"something\">{blockA}</div>\n        </div>;\n    } else {\n        return <div>\n            {blockA}\n            {blockB}\n        </div>;\n    }\n}\n```\n\nBecause the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch.\n\nI understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this.\n\nBut I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels.\n\nNote that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping.\n\nI understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.\n",
        "title": "Support for reparenting",
        "labels": "Type: Feature Request",
        "id": 45100
    },
    {
        "body": "I have React DevTools downloaded and enabled as a Chrome extension, version 0.13.1. I am using the `react` npm package, version 0.12.2, in a Chrome extension that is browserified. \r\n\r\nEvery time I open my console, the console log: \"Download the React DevTools for a better development experience: http://fb.me/react-devtools\" is there. \r\n\r\nWhat can I do to remove this? \r\n\r\n### Update from maintainers: see solution in https://github.com/facebook/react/issues/3877#issuecomment-341857218.",
        "title": "Remove React DevTools Download console log on install",
        "labels": "Type: Feature Request",
        "id": 45101
    },
    {
        "body": "On the client, it's nice that development warnings are only triggered on the initial render. But, when rendering from the server with `renderToString` it's annoying to only have the warnings triggered the first render and then ignored on subsequent page loads. \n\nWhat if render methods accepted an additional options argument?\n\n``` js\nReact.render(<span>hi</span>, window.app, {alwaysWarn: false})\n\nReact.renderToString(React.createElement(El, data), {alwaysWarn: true})\n```\n\nCrazy ideas: This might be useful for other options too? Perhaps: `appendToBody` (auto-appends the second arg), or `ignoreDOMCalls` (automatically catches/ignores errors to for `window` and `document` APIs)?\n",
        "title": "request: enable triggering warnings on every render",
        "labels": "Type: Feature Request",
        "id": 45102
    },
    {
        "body": "For 300ms click delay problem, I need attach four events to a element (onClick onTouchStart onTouchMove onTouchEnd) .It makes a bit tedious that there are so many elements to be clickable.\n\nI can create a element, maybe named `<Tap />`, and receive property ontap and attache four events to the element to implement tap event. But I think it is bad for semantic, tap is a action.\n\nSo, the question is how I can extend HTML tag like div, a, em to support tap event, do you have any other ideas for this problem?\n\nThanks.\n",
        "title": "How do I extend HTML element",
        "labels": "Type: Feature Request",
        "id": 45103
    },
    {
        "body": "Hi,\n\nHere is my program ([jsfiddle](http://jsfiddle.net/w9dphLfc/2/)):\n\n``` jsx\nvar Input = React.createClass({\n    render: function() {\n        return (\n            <input \n                {...this.props}\n            />\n        );\n    }\n});\n\nvar TestUtils = React.addons.TestUtils;\nvar inputInstance = \n        TestUtils.renderIntoDocument(\n            <Input\n                value='abc'\n            />\n        );\n\nvar inputDOMNode = React.findDOMNode(inputInstance);\n\ninputDOMNode.focus();\n\n// Place cursor at the end.\ninputDOMNode.setSelectionRange(3, 3);\n\n// Should log 3 twice.\nconsole.log(inputDOMNode.selectionStart);\nconsole.log(inputDOMNode.selectionEnd);\n```\n\n**Problem**: `0` is logged twice in Chrome and Firefox.\n**What I expected**: `3` is logged twice. We see this in Safari.\n\nThe interesting part is if we use `React.render(..., document.body)` instead of `TestUtils.renderIntoDocument` the program works as expected. \n\nI am using:\n- Chrome 42.0.2311.135\n- Firefox 37.0.2\n- Safari  8.0.5 (10600.5.17)\n",
        "title": "TestUtils.renderIntoDocument doesn't function as expected in all browsers",
        "labels": "Type: Feature Request",
        "id": 45104
    },
    {
        "body": "I find myself for needing a before and after notification of any synthetic event e.g. onClick/onChange to any react component.\n\nThis helps to implement a Flux-like framework with more strict constraints on how the store change events propagate through the system. Ideally I need access to all the entry points into the application, being all a-sync server events, timer events, and all browser events.  For the latter, I would like a hook into the React event system.\n\nIs such a thing possible and/or feasible to implement?\n",
        "title": "Support for pre/post-event notification",
        "labels": "Type: Feature Request",
        "id": 45105
    },
    {
        "body": "In my opinion,\n- `render` should return a component instance\n- calling `render` second time should unmount the previously mounted component if type or key is different\n\nDoes this make sense?\n",
        "title": "Make ReactShallowRenderer.render act more similar to React",
        "labels": "Type: Feature Request",
        "id": 45106
    },
    {
        "body": "I'm doing some unit-testing on a module, to be used in an isomorphic app process. So, I write-up `server-side.js` and `client-side.js` for Mocha to consume.  Individually, they each run pretty good - so far.  However, after starting to use TestUtils in `client-side`, `server-side` starts failing on account of:\n\n```\nUncaught ReferenceError: document is not defined\n at getActiveElement (~p/node_modules/react/lib/getActiveElement.js:23:12)\n at ReactReconcileTransaction.ReactInputSelection.getSelectionInformation (~p/node_modules/react/lib/ReactInputSelection.js:40:23)\n at ReactReconcileTransaction.Mixin.initializeAll (~p/node_modules/react/lib/Transaction.js:168:30)\n at ReactReconcileTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:133:12)\n at ReactUpdatesFlushTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:134:20)\n at ReactUpdatesFlushTransaction.assign.perform (~p/node_modules/react/lib/ReactUpdates.js:95:38)\n at Object.flushBatchedUpdates (~p/node_modules/react/lib/ReactUpdates.js:175:19)\n at Object.wrapper [as flushBatchedUpdates] (~p/node_modules/react/lib/ReactPerf.js:70:21)\n at ReactDefaultBatchingStrategyTransaction.Mixin.closeAll (~p/node_modules/react/lib/Transaction.js:207:25)\n at ReactDefaultBatchingStrategyTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:148:16)\n at Object.ReactDefaultBatchingStrategy.batchedUpdates (~p/node_modules/react/lib/ReactDefaultBatchingStrategy.js:66:19)\n at Object.enqueueUpdate (~p/node_modules/react/lib/ReactUpdates.js:215:22)\n at enqueueUpdate (~p/node_modules/react/lib/ReactUpdateQueue.js:30:18)\n at Object.ReactUpdateQueue.enqueueSetState (~p/node_modules/react/lib/ReactUpdateQueue.js:208:5)\n at ReactComponent.setState (~p/node_modules/react/lib/ReactComponent.js:69:20)\n at cb (~p/node_modules/reflux/src/connect.js:17:85)\n at EventEmitter.eventHandler (~p/node_modules/reflux/src/PublisherMethods.js:40:22)\n at EventEmitter.emit (~p/node_modules/reflux/node_modules/eventemitter3/index.js:72:35)\n at Store.module.exports.trigger (~p/node_modules/reflux/src/PublisherMethods.js:110:26)\n at Store.Reflux.createStore.onLoadFailed (~p/test/fixtures/WikiApp.js:40:10)\n at Store.Reflux.createStore.onLoadCompleted (~p/test/fixtures/WikiApp.js:35:12)\n at EventEmitter.eventHandler (~p/node_modules/reflux/src/PublisherMethods.js:40:22)\n at EventEmitter.emit (~p/node_modules/reflux/node_modules/eventemitter3/index.js:72:35)\n at Function.module.exports.trigger (~p/node_modules/reflux/src/PublisherMethods.js:110:26)\n at null._onTimeout (~p/node_modules/reflux/src/PublisherMethods.js:120:24)\n at Timer.listOnTimeout (timers.js:110:15)\n```\n\nApparently, this line has kicked React into client-mode.\n\n``` js\nvar node = TestUtils.renderIntoDocument(element);\n```\n\nThat's not too bad, but I need way to kick React out of client-mode, so I can add it to my teardown method (aka `after`).\n",
        "title": "Teardown TestUtils method",
        "labels": "Type: Feature Request",
        "id": 45107
    },
    {
        "body": "I expected there to be an issue for this already, but couldn't find it. Apologies if this a dupe.\n\nOccasionally it is useful to put a few elements in an array within render, when conditionally building different bits of the view.\nReact will issue a warning whenever an array is used that doesn't have keys - even if the author knows that this array is literal, and therefore doesn't require keys.\n\n``` js\nvar label = \"Label\";\nif (this.props.important) {\n  label = [\"Label\", <Tag text=\"important\" />];\n}\nreturn <div>\n  <h3>{label}</h3>\n  <p>{this.props.body}</p>\n</div>\n```\n\nIn this example, React will warn about lack of keys, even though they're not needed.\n\nOne option would be to extend `React.addons.createFragment` to accept an array, and use the indexes as keys.\n\n``` jsx\nlabel = React.addons.createFragment([\"Label\", <Tag text=\"important\" />]);\n```\n",
        "title": "Allow marking an array as \"static\"",
        "labels": "Type: Feature Request",
        "id": 45108
    },
    {
        "body": "In order to make selectors more durable within selenium tests, I will generally add in `data-qa` attributes to any element that needs to be selected.  Developers are free to change classes and IDs as needed but know not to touch or move when refactoring `data-qa` attributes.  It would be nice to allow my unit tests to use the same `data-qa` attribute to select elements as my integration/selenium tests use.  The issue is that currently there is no way to do that with the ReactTestUtils.\n\nI have a test helper object that contains a bunch of things to help with testing my react code.  Two of the methods are as follows:\n\n``` javascript\nscryRenderedDOMComponentsWithProp: function scryRenderedDOMComponentsWithProp(root, propName, propValue) {\n    return reactTestUtils.findAllInRenderedTree(root, function(inst) {\n        var instancePropValue = inst.props[propName];\n\n        return (\n            reactTestUtils.isDOMComponent(inst)\n            && instancePropValue\n            && (' ' + instancePropValue + ' ').indexOf(' ' + propValue + ' ') !== -1\n        );\n    });\n},\n\nfindRenderedDOMComponentWithProp: function findRenderedDOMComponentWithProp(root, propName, propValue) {\n    var all = this.scryRenderedDOMComponentsWithProp(root, propName, propValue);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match (found: ' + all.length + ') for prop  ' + propName + ' : ' + propValue);\n    }\n\n    return all[0];\n}\n```\n\nThis seems like a useful feature to me and was wondering if there is enough interest into this type of functionality to create a PR to add it directly into the ReactTestUtils?\n",
        "title": "Add ability to find dom component by prop value in the ReactTestUtils?",
        "labels": "Type: Feature Request",
        "id": 45109
    },
    {
        "body": "If we claim to support IE8, and users are testing their code **locally** in IE8, they might get thrown into compatibility mode by default.  This will cause their webapp to blow up, and they will be confused because IE8 is a supported browser.  For background, check out this thread: https://github.com/facebook/react/issues/3301\n\nUsers can get out of compatibility mode by adding this tag:\n`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />` \n\nSince the current failure is cryptic, and it's easy to detect when IE8 is in compatibility mode (http://stackoverflow.com/questions/1208837/how-can-i-detect-if-ie8-is-running-in-compatibility-view), we should probably add a warning to give a hint to the user that even though they're using IE8, they're actually in compatibility mode (effectively IE7) and should add the meta tag or use one of the other various workarounds.\n",
        "title": "Detect IE8 Compatibility Mode",
        "labels": "Type: Feature Request",
        "id": 45110
    },
    {
        "body": "Seems like this is a common use case for `replaceState` which we would like to deprecate. #3236 \n\nNot quite sure how this would work with Records and mixins since they're fixed type.\n\ncc @leebyron \n",
        "title": "Add First Class Support for Immutable-js Records (or maybe Maps) in setState?",
        "labels": "Type: Feature Request",
        "id": 45111
    },
    {
        "body": "Hi,\n\nWhen trying to unmount my whole app, I got some error.\n\n> Uncaught TypeError: Cannot read property 'firstChild' of undefined \n> ReactMount.js:606ReactMount.findComponentRoot \n> ReactMount.js:606ReactMount.findReactNodeByID ReactMount.js:552getNode \n> ReactMount.js:128executeDispatch EventPluginUtils.js:109SimpleEventPlugin.executeDispatch \n> SimpleEventPlugin.js:305forEachEventDispatch EventPluginUtils.js:95executeDispatchesInOrder \n> EventPluginUtils.js:119executeDispatchesAndRelease EventPluginHub.js:46forEachAccumulated \n> forEachAccumulated.js:25EventPluginHub.processEventQueue \n> EventPluginHub.js:251runEventQueueInBatch \n> ReactEventEmitterMixin.js:18ReactEventEmitterMixin.handleTopLevel \n> ReactEventEmitterMixin.js:44handleTopLevelImpl ReactEventListener.js:80Mixin.perform \n> Transaction.js:134ReactDefaultBatchingStrategy.batchedUpdates \n> ReactDefaultBatchingStrategy.js:66batchedUpdates \n> ReactUpdates.js:109ReactEventListener.dispatchEvent ReactEventListener.js:175\n\nI think it's not a big deal.\n\nAccording to what I see with the debugger, it seems to be because a `SyntheticMouseEvent` is trying to get dispatched. And I guess the target has just been unmounted...\n\nNote that my use case looks like this:\n\n``` javascript\nvar Hello = React.createClass({\n    render: function() {\n        return <div onClick={unmount}>Hello {this.props.name}</div>;\n    }\n});\n```\n\nWhen using an `unmount` synchronous implementation, I get this error.\nWhen adding a setTimeout 0 in the unmount code, I got no error. \n\nI could not reproduce this in a jsfiddle, but I guess it's probably because I don't really know how batching work in React.\n",
        "title": "React fails to unmount component from within event handler",
        "labels": "Type: Feature Request",
        "id": 45112
    },
    {
        "body": "Hi!\n\n@spicyj said I should open an issue here. Disclaimer: I'm trying to do sort of sketchy things, and I know this isn't supported, but I think it would be nice.\n\nI'm writing a library that I want to support react output optionally. To do this, right now I'm trying to inline all my ReactElements, such as\n\n``` javascript\n    return {\n        type: 'hr',\n        key: state.key,\n        _isReactElement: true\n    };\n```\n\ninstead of\n\n``` javascript\n    React.createElement('hr', {\n        key: state.key\n    })\n```\n\nThis is almost completely functional, except for the `_store` validation in react dev mode. This is because right now these literals don't have a `_store` key with `.validated` or `.originalProps`, which are assumed by the validators in React **DEV**. I can work around this, but to do so without duplicating props will have to write a wrapper function to create the element, which is a little unideal and slower (and adds unnecessary keys in non-dev mode).\n\nWould it be reasonable to short circuit some of these checks so that they only happen if _store is actually present on the ReactElement? If so, I'd be happy to submit a pull request (no rush for react 0.13 though).\n\nCurious as to your thoughts. Thanks!\nAria\n",
        "title": "Could we make it less painful to inline ReactElement objects?",
        "labels": "Type: Feature Request",
        "id": 45113
    },
    {
        "body": "Currently React relies on a global `window` (and `document` and `navigator`).\nThis works in a browser and it works in other environments if one sets a global `window`.\nHowever, relying on globals prevents multiple independent React engines from running together.\n\nTesting, for example, benefits strongly from isolated environments. It would be nice if one could run separate tests with `jsdom` without manually cleaning up the `window` every time.\nAnother use case is for programatic behaviour inspection. It's interesting to load multiple windows with `jsdom` and compare the behavior of one's library with different calls. If React is involved, however, this is impossible.\n\nAvoiding relying on globals can be added in a backwards-compatible fashion. If there is a global `window` and `document`, keep the existing behavior. If there isn't, instead of exposing an API, expose a factory taking a `window` and returning an API. For example, see how [jQuery did it](https://github.com/jquery/jquery/blob/master/src/intro.js#L25).\n\nA decision to avoid globals means refactoring existing code base to pass `window` explicitly everywhere, and maintaining that attitude in the future. What is your opinion on such a feature?\n",
        "title": "Avoid global window",
        "labels": "Type: Feature Request",
        "id": 45114
    },
    {
        "body": "In React Native, these two styles are automatically composed:\n\n```\n<Text style={[styles.ratingValue, getStyleFromScore(criticsScore)]}>\n```\n\nCurrently, trying a similar technique in React DOM produces this:\n\n```\n<span style=\"0:[object Object];1:[object Object];\">\n```\n\nFollowing the principles of \"Learn Once, Write Everywhere\", the style prop should behave similarly across implementations.\n",
        "title": "Automatically Object.assign when `styles` receives an Array",
        "labels": "Type: Feature Request",
        "id": 45115
    },
    {
        "body": "We currently don't because we handle this specially during runtime, but for server-rendered content it would be good to make this actually work.\n\ncc @syranide \n",
        "title": "Make autofocus show up in rendered markup",
        "labels": "Type: Feature Request",
        "id": 45116
    },
    {
        "body": "High performance Map implementations are starting to appear in modern web browsers. By supporting the Map interface users can now instead supply props as an Immutable.js or ClojureScript Map instance. This change would not even require providing an equality hook for the first pass as users can memoize props themselves.\n\nFor users embracing immutable data this is a huge change, it means that styles can be defined in code, overridden and shared efficiently. React DOM elements with memoized immutable props can be skipped over, etc.\n",
        "title": "Support Map interface for props",
        "labels": "Type: Feature Request",
        "id": 45117
    },
    {
        "body": "`audio.muted` and `video.muted` can be affected by user interaction when `controls` is enabled. So it makes sense that `muted` should be controlled and an uncontrolled `defaultMuted` should be introduced.\n\n`ReactDOMAudio` and `ReactDOMVideo` needs to be introduced for this.\n\n@zpao Sounds good? Could be a good first bug...\n",
        "title": "Make <audio /> and <video /> controllable",
        "labels": "Type: Feature Request",
        "id": 45118
    },
    {
        "body": "My use case: wrapping all **non-empty** children into divs.\n\n``` js\n  render() {\n    return (\n      <div style={rootStyle} onWheel={this.handleWheel}>\n        {Children.map(this.props.children, this.wrapChild)}\n      </div>\n    );\n  },\n\n  wrapChild(child, index) {\n    if (!child) { // I know this is probably wrong kind of comparison; don't care\n      return (\n        <div style={this.getChildStyle(index)}>\n          {child}\n        </div>\n      );\n    }\n  },\n```\n\nThis is all nice but I also need to know **how many valid children I have wrapped**.\n`Children.count` will return the number of children including the \u201cempty\u201d children. I want to strip them out.\n\nCan we have `Children.filter`?\n",
        "title": "Can we have React.Children.filter?",
        "labels": "Type: Feature Request",
        "id": 45119
    },
    {
        "body": "I'm currently implementing drag-and-drop in a React application where different kinds of data is dragged and dropped. This means I want to check for certain types on the event.dataTransfer object to see if drop should be enabled or not. Basically it looks like this:\n\n``` javascript\nonDragOver: function (event) {\n    if (event.dataTransfer.types.indexOf('application/x-custom-type') > -1) {\n        event.preventDefault();\n    }\n}\n```\n\nThis works fine in Chrome, but less so in Firefox. It turns out that in Firefox the type of DataTransfer.types is DOMStringList, which does not have an `indexOf` method. According to the latest drafts of the HTML5 specification ([W3C](http://www.w3.org/html/wg/drafts/html/master/editing.html#the-datatransfer-interface), [WHATWG](https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-types)), returning an array like Webkit does is correct. Obviously, the fix is easy on my side (check which one of `indexOf` and `contains` is available and use that one), but I thought it might be useful to fix this in React instead, since it is at least related to the event system.\n\nI could probably take a stab at this, but I wanted to gauge the interest. Perhaps the DataTransfer object is deemed to be out of scope for the synthetic event handler.\n",
        "title": "Normalize event.dataTransfer for drag and drop events",
        "labels": "Type: Feature Request",
        "id": 45120
    },
    {
        "body": "I wanted to propose changing `shouldComponentUpdate` from a `DEFINE_ONCE` to a spec that might be termed `DEFINE_MANY_ALL`. \n\nThe rationale here is that sometimes you may know that it's more efficient to skip the `shouldComponentUpdate` for some reason in a component, or that a mixin may be able to define whether it should be able to skip updating based on it's own knowledge of props/state/context, but that might not hold true when combined with other components of an app.\n\nSo my thought is `shouldComponentUpdate` should be changed to a `DEFINE_MANY`, where `ALL` of the return values must return false for the update to skip. If any return true, it will have the same behavior as the default and update.\n",
        "title": "Changing shouldComponentUpdate SpecPolicy",
        "labels": "Type: Feature Request",
        "id": 45121
    },
    {
        "body": "_setState()_ currently accepts an optional second argument for callback and returns _undefined_.\n\nThis results in a callback hell for a very stateful component. Having it return a promise would make it much more managable.\n\nIt is somewhat of a convention in JS world to have API symmetric - if a method accepts a callback, it returns a promise. if it returns a promise, it can accept a callback.\n\nIn my case, I have an editable table. If user presses enter, he is moved to the next row (call setState). If the user is on a last row, I'd like to create a new row (call setState) and focus on this new row (call setState). Currently the only way is to achieve this is to have a nested callback hell.\n",
        "title": "Make setState return a promise",
        "labels": "Type: Feature Request",
        "id": 45122
    },
    {
        "body": "tl/dr: Add an empty bare object called 'x' as a new member of the React object so that 3rd party React tools have a global extension point.\n\nI have a couple of internal tools I use with React that I would like to open source.  Both tools use a singleton object that is referenced and/or modified by components.\n\nI know I could create the object in the root component and pass it down as a prop but the child components may modify the object and that violates the idea of props being read-only.  It also means that if another person open sources a component which uses either of my tools that the user of the component must create that root object in their app and then wire it up down the component tree.\n\nTo keep things clean I would love to have a 3rd party extension space hanging off the React object that I could attach my tool's \"globals\" to so that all the components would have access to it given that they all share the same React global.  My suggestion is just to name it \"x\" and make it a bare object.  The documentation would encourage users to then add their own namespace to the object.\n\nHere are is very simple example that adds a 3rd party global event bus to a blogging app using EventEmitter which could be used both on the server and on the client via Browserify.\n\nIn app.js (the root component):\n\n```\nrequire('react-x-event');\n\nReact.x.event.bus.on('createPost', ...)\n```\n\nIn react-x-event.js\n\n```\nvar events = require('events');\nReact.x.event = {\n  bus: new events.EventEmitter(),\n  handle: function (e, event, data) {\n    e.preventDefault();\n    React.x.event.bus.emit(event, data)\n  }\n}\n```\n\nIn new-post.js (a component view shown at some point by a sub-component of app.js)\n\n```\ncreatePost: function(e) {\n  React.x.event.handle(e, 'createPost', ...)\n}\n\nrender: function () {\n  return <form>\n    ...\n   <button onClick={this.createPost}>Create</button>\n  </form>;\n}\n```\n\nWithout getting lost in the weeds arguing if a global event bus is a good idea for React you can see in this example that I didn't need to wire up the component tree with the bus to allow the sub-component to send a message.  \n\nThere is nothing from stopping me or anyone else from just globally patching the React object to add the x member but I think it would be better to have it \"blessed\" and added to the React code so that there are no conflicts in the future over that member name.  I also think having a common name like 'x' will allow 3rd party module names to announce how they work, eg require('react-x-event').\n",
        "title": "Idea/Request: Add global 3rd party extension point to the React object",
        "labels": "Type: Feature Request",
        "id": 45123
    },
    {
        "body": "Since components start with null state, it would make sense that you could reset back to a null state.  Right now the best you can do is reset back to an empty object.\n\nhttp://jsfiddle.net/wqpzmg7b/1/\n\nIt's a minor issue but I think it deserves documenting if not changed.\n",
        "title": "replaceState(null) doesn't reset state",
        "labels": "Type: Feature Request",
        "id": 45124
    },
    {
        "body": "It's very convenient to have props in a nested structure. However...\n\nLet's assume I have some default props:\n\n```\ngetDefaultProps: function() {\n    return {\n        aaa: true,\n        bbb: true,\n        ccc: {\n            first: false,\n            second: false,\n            third: false\n        }\n    };\n}\n```\n\nNow, if I initialize the component giving it these props:\n\n```\n{\n    ccc: {\n        first: true\n    }\n}\n```\n\n...the component won't get ccc.second or ccc.third at all. The preferred result would of course be:\n\n```\n{\n    aaa: true,\n    bbb: true,\n    ccc: {\n        first: true,\n        second: false,\n        third: false\n    }\n}\n```\n\nOr perhaps make the behaviour selectable by adding a PropTypes option, like:\n\n```\n.isRequired.useDefault\n```\n",
        "title": "Extend nested default props instead of overwriting",
        "labels": "Type: Feature Request",
        "id": 45125
    },
    {
        "body": "It would be great to be able to have a custom checksum validator that can ignore certain branches of the DOM-tree when attempting to reuse markup.\n\nThe use case is for rendering static components. For static components that only need to be rendered once, we can just do the rendering on the server, and not have to render again on the client. Currently we have to pass down both the react markup AND the props used to generate the static markup. However, it is a waste to send those props down, if this component doesn't need to be rendered client-side.\n\nOne of the major performance concerns for using React is that apps not only have to send down markup but props as well, usually duplicating the data sent down to the client. \n\nBeing able to specify certain components as not needing a client side re-render, thus skipping check-sum, would save k-weight of the initial page load.\n",
        "title": "Provide a way to specify what parts of react server markup can be reused on client",
        "labels": "Type: Feature Request",
        "id": 45126
    },
    {
        "body": "There was a common pattern to unmount a component by its instance:\n\n`React.unmountComponentAtNode(component.getDOMNode().parentNode);`\n\nNow components can return `null` from `render()`, and in that case getDOMNode() also returns `null`, and the code above doesn't always work. React internally always knows to which node the component is mounted, so please make this information accessible or add a component method like `unmount()`.\n\nMy project is in process of transition from Backbone views to React and we have a helper function `universalUnmount()` which gets Backbone.View instance of mounted component and removes it from DOM. So there is no way for now to make it work with any React component.\n",
        "title": "Unable to unmount component using its instance only when it is rendered to null",
        "labels": "Type: Feature Request",
        "id": 45127
    },
    {
        "body": "Similar to #2296.\n\nI would love to tell a REACT component : \"I don't care in what order you render the elements, just minimize the DOM operations and maintain the elements by key\"\n\nIn effect: whenever a re-render happens React removes the elements that are no longer there. And new elements are appended to the end. The order is never accounted for.\n\nWhile ES6 Sets may not be available in many browsers, I would love a similar feature implemented with Objects now.\n\nExplanation:\n\nRight now, when passing an array of children with keys as property, their order is preserved. This is usually the correct behavior.\n\nHowever, I have projects where I'm using the trick from famo.us to render elements using `transform: translate` values instead. In this case, all elements have `position; absolute; top: 0; left: 0;` anyway and their actual order on the DOM does not matter.\n\nThe major benefit is that with this trick, it eliminates almost all DOM operations (except updating styles) and any page reflow or paints for great performance.\n\nThe problem is that with React maintaining the order of the children, React, reorders the DOM elements anyway.\n\nThere are ways where I have to keep track of every render and manually reorder the data to prevent re-renders, but there has got to be a better way.\n",
        "title": "Mixin to render in unordered mode (Like sets)",
        "labels": "Type: Feature Request",
        "id": 45128
    },
    {
        "body": "Hi, \n\nThe Flux architecture seems to recommend having React elements bind to change event listeners to Stores, and call `forceUpdate()` when changes occur. I do this, and generally find that deferring forceUpdate calls is more useful, as it prevents multiple calls to forceUpdate on the same tick (I think). \n\nThe idea comes from [react-mixin-manager](https://github.com/jhudson8/react-mixin-manager#deferupdate), which provides one implementation. \n\nPersonally, I have seen a performance boost (I think) from using the following simple mixin: \n\n``` coffee\nmodule.exports =\n  deferUpdate: ->\n    setTimeout =>\n      @forceUpdate()\n    , 0\n```\n\nI'm not sure if this is a good idea generally, or if it should be incorporated into React core, but I thought I'd throw it out there. \n(meta: are issues like this encouraged or frowned upon here? I know it's a large project with a lot of \"real\" issues the core devs need to be paying attention to.)\n",
        "title": "provide deferUpdate method (feature request)",
        "labels": "Type: Feature Request",
        "id": 45129
    },
    {
        "body": "I've just stumbled across some code written which touches this.state directly and then forces an update.  The danger in this pattern is that _appears_ to work, it still leaves the code vulnerable to other callers of setState doing the right thing, being queued up, and then overwriting the hand-touched state, if I'm understanding the red box on http://facebook.github.io/react/docs/component-api.html correctly.\n\nAny chance if, in (at least) the dev version, this.state could be guarded with a JS setter that would print a warning?\n",
        "title": "Feature request: warn when this.state is touched directly rather than with setState",
        "labels": "Type: Feature Request",
        "id": 45130
    },
    {
        "body": "I'm using flux and I need the 'react/lib/copyProperties'. This is easy with browserify `var copyProperties = require('react/lib/copyProperties');` but with require.js is not possible because it uses the bower version which doesn't contain the copyProperties fn (https://github.com/facebook/react/blob/aae31ae24c67216894ae42b8481a599206d18690/src/browser/ui/React.js). Would be nice to have them like this `React.lib.copyProperties()`\n\nMaybe include all the lib components.\n\nIs this possible?\nThanks\n",
        "title": "Allow internal components to be used in the browser version",
        "labels": "Type: Feature Request",
        "id": 45131
    },
    {
        "body": "We have a fairly advanced class system that is integrated with react. With 0.10 we managed to make it work using stock build, with 0.11 and its refactoring of descriptors it is no longer possible. I know that in 0.12, React will have `createFactory()` as part of its public API, so is there a chance we can have it in 0.11.x? Perhaps hidden in `__internals`? It's important for us to have an unwrapped version of it, just a reference to `ReactDescriptor. createFactory()` method.\n",
        "title": "Introduce createFactory in 0.11.3",
        "labels": "Type: Feature Request",
        "id": 45132
    },
    {
        "body": "It would be cool to be able to get warnings for typoed or otherwise extraneous props passed to a component, similar to how `React.DOM` warns if you pass `class` when you meant `className`.\n\nWith `PropTypes.shape` you could probably even ensure deep validity of the passed data. This would not only be useful for finding bugs, but also for optimizing hot components by making sure the shapes are aligned.\n\nObviously this would need some sort of opt-in, like propTypes.\n",
        "title": "Warn when a component is passed props that it doesn't need",
        "labels": "Type: Feature Request",
        "id": 45133
    },
    {
        "body": "If I need a component that doesn't have a DOM representation, I can use render function that returns `<noscript>`. However recently I had to have a component without DOM representation, but that also has children, that I want to be mounted (so that their lifecycle methods trigger correctly). Unfortunately `<noscript>` is not nestable, thus I had to return `<span>`, which is not an ideal solution.\n\nIs there a way to do such thing without using `<span>` or `<div>`? I know there are plans to replace `<noscript>` solution with some 'null component'. Are there plans for 'null component' that can mount its children?\n",
        "title": "Components with children without DOM representation",
        "labels": "Type: Feature Request",
        "id": 45134
    },
    {
        "body": "One really positive feature of React is the ability to do proper logic for layout, e.g. you can do grids that scale both ways, take into account screen size **and** content size and so on. However, the reusability of such solutions is not often quite optimal.\n\nThere are solutions such as [GSS](http://gridstylesheets.org/) that allow you to define things like this in a reusable manner, they're usually supported only in the most recent browsers (which would be easier to solve for React-based solutions, since virtual DOM doesn't depend on the browser) and also hooking them up to possible changes in the tree is tedious and hard to get right without sacrificing performance.\n\nAllowing user-code to pre-process the virtual DOM tree before the diffing would open the doors for a whole new world of styling engines to born into, where reading from the virtual DOM tree is fast, as well as making changes to it. The implications vary from styling languages being able to define custom values such as `aspect-ratio` to apply a CSS aspect ratio hack, or inject extra DOM elements to make things centered based on the `className` of the element, while keeping the user-code intent-oriented and clear, abstracting away the common pains of CSS.\n\nI realize that this is not a simple change of adding a hook somewhere, but instead means exposing a vast amount of API surface that's currently considered implementation details. This is also even more problematic in cases where `shouldComponentUpdate` is involved. However, I think this would have the potential to revolutionize how we deal with styling web pages, so I'd say it's worth thinking through at least.\n",
        "title": "Expose an API to preprocess the VDOM tree before diffing",
        "labels": "Type: Feature Request",
        "id": 45135
    },
    {
        "body": "It would be awesome if JSX parser errors wouldn't just end up in the terminal, but if it would actually output (valid) code that would throw the error on load on the client instead, it would make it virtually transparent that JSX is being used.\n\nA simple solution would be to simply (only) output the error message as-is with file+line baked in. I imagine that with some source map trickery we could even make it look as if the browser threw the error, with correct source and location.\n",
        "title": "Output JSX syntax errors to throw errors at load",
        "labels": "Type: Feature Request",
        "id": 45136
    },
    {
        "body": "Kind of related to #1978 (concerns polyfills)\n\nIt seems to me that we should really treat server-rendering as distinct from client-rendering, they have different requirements and priorities.\n1. Server-rendering should be able to generate optimal markup for SEO, markup must also be fully cross-browser compatible and small markup is preferable.\n2. Client-rendering sees SEO as largely irrelevant, full cross-browser compatibility is also irrelevant and rendering performance is of greater importance.\n\nSo I propose that we treat server-rendering as uniquely distinct from client-rendering, e.g. as a separate flag`React.serverSide = true` (which would default to true if document is not available). It's even imaginable that we could extend this with e.g. `React.targetClient = 'SEO' / 'legacyClient' / 'everGreenClient'`, which would optionally allow the markup to be tailored for a specific purpose.\n\nSo when reusing server-rendered markup client-side:\n1. The client should do an initial server-rendering pass being passed the exact same props (and time) as during the server-side rendering, but instances are actually allocated on the client.\n2. Immediately afterwards a client-rendering pass is done with any props (and current time) you like, instances/markup is efficiently reused and should not add significant costs as little DOM manipulation should be involved.\n\nI'm not really affected by this, but for those that do use server-rendering; this seems like the _correct_ way of approaching it (as opposed to just rendering everything exactly the same). However, I'm working on `img`\\- and `picture`-element polyfills, but without this they cannot be made to generate sensible server-side markup.\n\n**PS. I realize this can be done today using a global + mixin**, but without a standardized solution, it's unlikely that third-party (and polyfill) components could ever participate in this. But that doesn't mean that it needs to be shipped with React even (none of this requires core support I believe), as long as it's standardized.\n",
        "title": "Server-rendering should be distinct from client-rendering",
        "labels": "Type: Feature Request",
        "id": 45137
    },
    {
        "body": "We currently don't support `!important` as it has to be set using `style.setProperty(name, value, priority)`. This should be trivially easy to implement if it's something want to support, although I'm not sure about the performance implications (**EDIT:** #1886), although I can't imagine it would be measurable as we would be doing the string test ourselves and those are cheap.\n\nhttp://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration\n\n~~OK... apparently IE8 doesn't support this _at all_, it might still be worth implementing, for the future and for those who don't care about IE8.~~ ~~After further experimentation, apparently it is! `style.setAttribute(name, value)` (priority is part of the value).~~ But apparently that was wrong as well, the only way to set it seems to be with `cssText`, an acceptable work-around may be to just use `cssText` when we detect an `!important` style, which should be seldom enough that performance is a non-issue.\n\nAn important consideration is that we _already_ support this for the initial render, but subsequent updates will _fail_ as `!important` isn't recognized for properties.\n",
        "title": "Support !important for styles?",
        "labels": "Type: Feature Request",
        "id": 45138
    },
    {
        "body": "There should be a way do do `<input type=\"checkbox\" indeterminate={true} />` or similar \u2013 right now the attribute is ignored. Need to figure out how this interacts with `checked` though.\n",
        "title": "Add some way to specify indeterminate checkboxes",
        "labels": "Type: Feature Request",
        "id": 45139
    },
    {
        "body": "There are currently a couple of problems with focus management in React.\n## current problems\n- `this.getDOMElement().focus()`\n\ndoes not guarantee the node is on a document/visible. visibility can be hard to detect due to other components firing render().\n- `this.refs.x.getDOMElement().focus()`\n\ndoes not guarantee that x has finished any pending renders. if `x` renders, focus is lost.\n- `componentDidUpdate`\n\nthis fires on the child nodes before parents so in the case of:\n\n```\n<ul style=\"display:none\">\n  <li><button>can't focus</button></li>\n</ul>\n```\n\nif we want to show the `<ul/>` and focus the button.\n\nthe component of the `<button/>` focusing during componentDidUpdate has no affect because the `<ul/>` is still hidden.\n## discussion\n\nif looks like some of the PRs to react are using raf or timeouts to achieve fixes to the problems listed. This can cause race conditions, and can be fixed with a lifeCycle addition, or just a hidden lifeCycle purely for focus management.\n\nThe issue comes down to not having a lifecycle able to fire a function after _all_ rendering is done, not just an individual component.\n\nI would suggest we add a simple API of component.blur()/component.focus() that queues the requests and fires them after all rendering is done. The fix is fairly simple, but I wonder how people feel about this.\n",
        "title": "Add api for focus management",
        "labels": "Type: Feature Request",
        "id": 45140
    },
    {
        "body": "Sort of a stray thought, but what if className could pass an object to the `classSet` addon?\n\n``` javascript\nrender() {\n    return (\n        <div className={{ message: true, 'is-active': this.state.isActive }}>\n            { this.props.message }\n        </div>\n    )\n}\n```\n",
        "title": "Wouldn't it be cool if className could inject an object into classSet?",
        "labels": "Type: Feature Request",
        "id": 45141
    },
    {
        "body": "When using components with missing/invalid prop, then a warning is logged.\nSame when a child key was not provided.\n\nI would like an error to be thrown instead.\n\nThis has already been discussed on some issues like: https://github.com/facebook/react/issues/1587\n\nBy the way, I totally support this related issue, to ensure proper Proptype documentation of all components, but would require an error instead of a warning :)\n\nThe more we fail in dev, the better. It would be nice to be able to use React in a very strict way, by using some configuration attribute or something...\n\nOne other thing I would probably add is to enforce all components have a name.\nSee https://github.com/facebook/react/issues/1751\n",
        "title": "Add fail-fast mode to React",
        "labels": "Type: Feature Request",
        "id": 45142
    },
    {
        "body": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.\n",
        "title": "Support asynchronous server rendering (waiting for data before rendering)",
        "labels": "Type: Feature Request",
        "id": 45143
    },
    {
        "body": "I'm trying to implement a scrollable list of items that are tappable on mobile devices. It looks like there are two plugins that address the 'how to tap' problem - https://github.com/facebook/react/blob/master/src/browser/eventPlugins/MobileSafariClickEventPlugin.js & https://github.com/facebook/react/blob/master/src/browser/eventPlugins/TapEventPlugin.js .\n\nI'm confused about Plugins: they [aren't mentioned in the docs](http://facebook.github.io/react/docs/getting-started.html), and it's unclear if they're things that you can build in runtime, with `require('react')` or which [require recompilation with Grunt](https://github.com/facebook/react/issues/436). Is the plugin system itself in flux? I'd love to help out on [getting these merged](https://github.com/facebook/react/pull/1170) so that developing mobile apps is more straightforward.\n",
        "title": "Supported API for making new event types (i.e., event plugin injection)",
        "labels": "Type: Feature Request",
        "id": 45144
    },
    {
        "body": "This comes from my discussion with several people around animation, but I feel like it's important enough to warrant its own issue.\n\nWe already insist that `render` should be a pure function of `this.props` and `this.state`. How about taking this further and pass those in CompositeComponent? This way we can write:\n\n``` html\nrender: function(props, state) {\n  return <div>{props.something}</div>;\n}\n```\n\nWhile most of the time we'll still call `render(this.props, this.state)` internally, with this we will be able to do `render(somePrevProps, someTestState)` from React or even from the user. Being able to \"test the water\" would be very valuable in the future. For example:\n\n``` js\ncomponentWillReceiveProps: function(nextProps) {\n  var result1 = this.render(this.props, this.state);\n  var result2 = this.render(nextProps, this.state);\n  // Collection of changed stuff. Good for preparing mounting/unmounting animations or such logic.\n  React.reconciler.getDiff(result1, result2);\n  this.setState({...});\n}\n```\n\nI've heard this can also solve some problems with pendingState? Not too familiar with the issue.\n@jordwalke @sebmarkbage @petehunt \n",
        "title": "`render` as a function of props and state",
        "labels": "Type: Feature Request",
        "id": 45145
    },
    {
        "body": "I'm experimenting with building a new text editor component for Atom, and I've noticed that about ~1.4 ms per keystroke are being spent in restore selection functionality. What if I could add a property to my input like `.unsafeSkipSelectionRestoration` or something along those lines to prevent the DOM access this code requires?\n\nBelow is a flame graph showing where the access happens. It's a bit confusing due to the stack depth limit in Chromium's profiler, but I've highlighted the operations in question.\n\n![screenshot_2014-04-03_14_55_17](https://cloud.githubusercontent.com/assets/1789/2609142/b8cd10e2-bb72-11e3-8330-a69fefc1795c.png)\n",
        "title": "Allow components to opt-out of ReactInputSelection handling?",
        "labels": "Type: Feature Request",
        "id": 45146
    },
    {
        "body": "Not a huge deal, but a bit silly since this markup won't be mounted.\n",
        "title": "Don't give key warning when rendering to static markup",
        "labels": "Type: Feature Request",
        "id": 45147
    },
    {
        "body": "The DOM already exposes `data-*` as `dataset` but it's doing transformation from hyphenated to camelCase. [From MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset):\n\n```\n<div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe\n</div>\n\nvar el = document.querySelector('#user');\n\n// el.id == 'user'\n// el.dataset.id === '1234567890'\n// el.dataset.user === 'johndoe'\n// el.dataset.dateOfBirth === ''\n\nel.dataset.dateOfBirth = '1960-10-03'; // set the DOB.\n\n// 'someDataAttr' in el.dataset === false\n\nel.dataset.someDataAttr = 'mydata';\n// 'someDataAttr' in el.dataset === true\n```\n\nWe should just start supporting `dataSet` (because camelCase). This will allow a couple things:\n- easier reasoning about data attributes (`Object.keys(this.props.dataSet)`)\n- easier merging (`<div dataSet={merge(this.props.dataSet, {extra: 'value', override: 'value'})} />`)\n- easier (potentially faster?) updates (just modify `node.dataset`)\n\nWe'll want to do the reverse of what the DOM is doing. eg `<div dataSet={{dateOfBirth: 'val', foo: 'bar'}} />` becomes `<div data-date-of-birth=\"val\" data-foo=\"bar\"></div>`.\n\nTo the best of my knowledge, `aria-*` doesn't have a corresponding API, but we should make it work the same way. I think `ariaSet` makes sense.\n",
        "title": "Stop doing data-*, aria-*, start using dataSet",
        "labels": "Type: Feature Request",
        "id": 45148
    },
    {
        "body": "It would be really cool to allow view to be custom elements. http://coding.smashingmagazine.com/2014/03/04/introduction-to-custom-elements\n",
        "title": "Add support in the future for custom elements",
        "labels": "Type: Feature Request",
        "id": 45149
    },
    {
        "body": "What do you think of a \"mixed in\" callback for mixins which is called at the moment of applying a mixin to a component with component's spec as an argument?\n\n```\nvar SomeTrickeryMixin = {\n  mixin: function(spec) {\n    // redefine .render() or do some other dangerous things\n  },\n\n  ...\n};\n```\n\nBesides overriding `.render()` such callbacks can be used when you want to implement a \"custom policy\" for some methods (wrap method, call-before, call-after, ...).\n\nAs a downside that would make things a little less straightforward from a (mixin) user perspective.\n",
        "title": "\"Mixed in\" callback for mixins",
        "labels": "Type: Feature Request",
        "id": 45150
    },
    {
        "body": "Shadow roots have nodeType == DOCUMENT_FRAGMENT_NODE. When trying to render into one, react throws an error:\n\n```\nException caught during observer callback:\n  Error: Invariant Violation: _registerComponent(...):\n    Target container is not a DOM element.\n```\n\nThere is an explicit check to only allow rendering into ELEMENT_NODE_TYPE and DOC_NODE_TYPE. Is there any particular reason why document fragments are excluded there?\n",
        "title": "Allow rendering into a document fragment",
        "labels": "Type: Feature Request",
        "id": 45151
    },
    {
        "body": "What is your approach to IE10 touch events?\n\nHammer.js checks `window.navigator.pointerEnabled || window.navigator.msPointerEnabled` and then switches `touchstart`, `touchmove`, `touchend touchcancel` to `pointerdown MSPointerDown`, `pointermove MSPointerMove`, `pointerup pointercancel MSPointerUp MSPointerCancel`.\n",
        "title": "Support Pointer events specification",
        "labels": "Type: Feature Request",
        "id": 45152
    },
    {
        "body": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)\n",
        "title": "Declarative API for installing global DOM event handlers",
        "labels": "Type: Feature Request",
        "id": 45153
    },
    {
        "body": "I was just recording through the profiler in react-dev-tools. I started the recording and stopped it.\r\nI clicked on the arrow, select next commit and after 4-5 simultaneous clicks and got this issue. \r\nThe image is attached below for your reference. \r\n\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:20115:11)\r\n    at CommitRankedAutoSizer (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:34423:33)\r\n    at Hh (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:12807:7)\r\n    at qi (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:13457:7)\r\n    at mk (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:16074:86)\r\n    at lk (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:15459:11)\r\n    at kk (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:15451:23)\r\n    at ck (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:34406:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:36207:3)\r\n\r\n![image](https://user-images.githubusercontent.com/38343658/111901979-14c75280-8a61-11eb-8ec5-2e7f582ab5e0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/38343658/111902105-afc02c80-8a61-11eb-80ee-61437855da47.png)\r\n",
        "title": "Error: \"Commit tree already contains fiber 1. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45154
    },
    {
        "body": "I mostly use the \"dark\" theme which these badges looked good in. The \"light\" theme is broken though. No contrast.",
        "title": "Bug: DevTools built-in hook number badges are broken for \"light\" theme",
        "labels": "Type: Bug",
        "id": 45155
    },
    {
        "body": "I recently updated DevTools to use the new, experimental `getCacheForType` API (#20548) which works well for the browser and standalone extension versions, because they bundle their own version of React (the experimental release). This has left the `react-devtools-inline` package (used by e.g. Code Sandbox) in an unreleasable state though until the new Suspense APIs are released as stable.\r\n\r\nPerhaps I could go back to the last commit prior to #20548 and do one final release, but then I will be blocked.",
        "title": "react-devtools-inline package now has react@experimental dependency",
        "labels": "Type: Bug",
        "id": 45156
    },
    {
        "body": "The example below is extracted from the app with a spreadsheet-like UI, where cells become editable upon focus (can be achieved either by tabbing into the cells or clicking). The text in such cell immediately becomes selected.\r\n\r\nThe bug occurs only in IE11, as the user navigates from one such cell to another by clicking.\r\nLikely related to https://github.com/facebook/react/pull/19664.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone https://github.com/Dremora/react-i11-input-focus-bug\r\n2. Install dependencies (`yarn`) and start the app (`yarn start`)\r\n3. Open http://localhost:3000 in IE11\r\n4. Click on the text saying `hello`\r\n5. Click on the text saying `world`\r\n\r\nLink to code example: https://github.com/Dremora/react-i11-input-focus-bug/blob/master/src/App.js\r\n\r\n## The current behavior\r\n`Unspecified error` gets logged to the console, followed a few other errors, one of them being `Should not already be working` error. As this is a React internals error, application stops working. Nothing gets thrown in the user-land code.\r\n\r\n## The expected behavior\r\n`world` text gets selected.",
        "title": "Bug: performing input.select() in IE11 throws a React error",
        "labels": "Type: Bug",
        "id": 45157
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Record a profile\r\n2. Click on one of the stack frames\r\n3. The error came up\r\n\r\nI'll struggle to reproduce as the first time I did a profile against the same site this didn't happen and the code is not publishable\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19605:9)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n    at Uj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15142:118)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 7\"",
        "labels": "Type: Bug",
        "id": 45158
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.14.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a test file in a react project, and paste the following code.\r\n2. Run the test\r\n3. The test for onMouseLeave event fails.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n```javascript\r\nimport { act } from \"react-dom/test-utils\";\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Counter = () => {\r\n  const increaseCount = () => {\r\n    setCount((prev) => prev + 1);\r\n  };\r\n  const [count, setCount] = useState(0);\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button\r\n        disabled\r\n        onClick={increaseCount}\r\n        onMouseEnter={increaseCount}\r\n        onMouseLeave={increaseCount}\r\n      >\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\ndescribe(\"button with react test-utils\", () => {\r\n  let container;\r\n\r\n  beforeEach(() => {\r\n    container = document.createElement(\"div\");\r\n    document.body.appendChild(container);\r\n  });\r\n\r\n  afterEach(() => {\r\n    document.body.removeChild(container);\r\n    container = null;\r\n  });\r\n\r\n  it(\"should not trigger onClick when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n  it(\"should not trigger onMouseEnter when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"mouseover\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n  it(\"should not trigger onMouseLeave when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"mouseout\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n});\r\n\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n\r\n## The current behavior\r\n<img width=\"664\" alt=\"Screenshot 2021-03-09 at 21 45 13\" src=\"https://user-images.githubusercontent.com/2574511/110506309-c9d44380-8120-11eb-9164-ce2ae7316889.png\">\r\n\r\n\r\n## The expected behavior\r\nAll tests should pass",
        "title": "Bug: React test triggers mouseout event for disabled button",
        "labels": "Type: Bug",
        "id": 45159
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\nTL;DR: Fixed with `skipUnmountedBoundaries = true`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Throw in an effect cleanup \r\n2. Try to catch it when wrapped in `act()`\r\n\r\nLink to code example:\r\n[React 16](https://codesandbox.io/s/react-16-throw-in-effect-destory-kdeij)\r\n[React 17](https://codesandbox.io/s/react-17-throw-in-effect-destory-forked-5n864)\r\n\r\nI also tested it locally and jest and couldn't catch the error as well.\r\n\r\n## The current behavior\r\n\r\nThe error is uncatchable and does not include the component stack (\"The above error occurred\").\r\n\r\n## The expected behavior\r\n\r\nThe error is catchable and does include the component stack i.e. React 16 behavior.\r\n\r\n## Context\r\n\r\nI understand that the cleanup is now async but it's still flushed in `act()` so I would expect that an error thrown is catchable.\r\n\r\nOriginally reported in https://github.com/testing-library/react-testing-library/issues/874\r\n",
        "title": "Bug: error in effect cleanup function no longer catchable",
        "labels": "Type: Bug",
        "id": 45160
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. pressed record\r\n2. did action in my react app\r\n3. stopped recording\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19702:53)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45161
    },
    {
        "body": "https://codesandbox.io/s/nostalgic-frost-53gys?file=/src/App.js\r\n\r\n```js\r\nimport * as React from \"react\";\r\n\r\nfunction S(props) {\r\n  return <React.Suspense {...props} />;\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <React.unstable_SuspenseList revealOrder=\"forwards\">\r\n      <S fallback={null}>\r\n        <Bad />\r\n      </S>\r\n      <S fallback={null}>\r\n        <h1>wow</h1>\r\n      </S>\r\n    </React.unstable_SuspenseList>\r\n  );\r\n}\r\n\r\nfunction Bad() {\r\n  const [c, setC] = React.useState(0);\r\n  read(c);\r\n  const r = React.useRef(true);\r\n  React.useEffect(() => {\r\n    if (r.current) {\r\n      r.current = false;\r\n      setC((x) => x + 1);\r\n    }\r\n  }, [c]);\r\n  return <h2>wow</h2>;\r\n}\r\n\r\nconst cache = {};\r\nfunction read(i) {\r\n  if (cache[i]) {\r\n    if (cache[i].result) {\r\n      return cache[i].result;\r\n    } else {\r\n      throw cache[i].promise;\r\n    }\r\n  }\r\n  cache[i] = {\r\n    promise: new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        cache[i].result = \"foo\";\r\n        resolve();\r\n      }, 1000);\r\n    })\r\n  };\r\n  throw cache[i].promise;\r\n}\r\n```",
        "title": "Bug: SuspenseList crash",
        "labels": "Type: Bug",
        "id": 45162
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19702:53)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45163
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21226:35)\r\n    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21242:26)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28678:63\r\n    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22934:18)\r\n    at vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13515:76)\r\n    at ui (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13506:10)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16077:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22629:30)\r\n    at div\r\n    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3003:5)\r\n    at div\r\n    at div\r\n    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28429:47)\r\n    at div\r\n    at div\r\n    at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28921:3)\r\n    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27558:3)\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33383:52)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Cannot read property 'isCollapsed' of undefined\"",
        "labels": "Type: Bug",
        "id": 45164
    },
    {
        "body": "If you use CSS to set the height of the react app container to 100% (and the other containing containers as well), then you will get the error \"Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering\" outputted to your developer console after you continue from a breakpoint.\r\n\r\nI've got a very simple testcase. This is the create-react-app example, with only the following CSS added:\r\n\r\nhtml {\r\n  height: 100%;\r\n}\r\n\r\n#root {\r\n height: 100%;\r\n}\r\n\r\n.App {\r\n  height: 100%;\r\n}\r\n\r\nReact version: 17.0.1\r\nReact DOM version: 17.0.1\r\n\r\nRepros in Chrome (89.0.4389.72) and Edge (88.0.705.81)\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. download and unzip [hello-world.zip](https://github.com/facebook/react/files/6072375/hello-world.zip) (or create a new app from scratch and add the above CSS to index.css)\r\n2. in the folder created above, run \"npm install\"\r\n3. run \"npm start\"\r\n4. Open a web browser to the specified location serving the page.\r\n5. Open developer tools, and set a breakpoint somewhere inside of app.js (you can alternatively add a \"debugger\" statement inside of your app.js)\r\n![image](https://user-images.githubusercontent.com/1451620/109728370-0aade480-7b84-11eb-8f6c-ad7ca3c4a4bf.png)\r\n6. restart the browser, and after hitting the breakpoint, hit continue\r\n7. Check the console and observe the error output.\r\n![image](https://user-images.githubusercontent.com/1451620/109728430-24e7c280-7b84-11eb-92e7-97a170a575d9.png)\r\n\r\nThere are no dependencies other than react for this repro.\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n[hello-world.zip](https://github.com/facebook/react/files/6072375/hello-world.zip)\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nConsole outputs error whenever a breakpoint is hit, only when CSS has app container sized at 100%\r\n\r\n## The expected behavior\r\nConsole should not output error noise regardless of sizing of app container",
        "title": "Bug: \"Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering\" after hitting breakpoint if container height 100%",
        "labels": "Type: Bug",
        "id": 45165
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 1345. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45166
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\nReact DevTools version: 4.10.1-3a8c04e3b2\r\n\r\n## Steps To Reproduce\r\n\r\n1. `npx react-native init MyApp --template react-native-template-typescript`\r\n2. set `enableHermes: true` in `android/app/build.gradle`\r\n3. start Metro bundler via `yarn start`\r\n4. launch app in Android emulator via `yarn android`\r\n5. launch React DevTools\r\n6. reload Metro bundler\r\n7. click on any element in the React DevTools components view\r\n8. right React DevTools panel is stuck on \"Loading...\" and Metro bundler logs `ERROR [TypeError: undefined is not a function]`:\r\n<img width=\"297\" alt=\"Screen Shot 2021-02-25 at 5 56 13 PM\" src=\"https://user-images.githubusercontent.com/440230/109231116-f76dd400-7793-11eb-8b7c-4c40a7eaee3a.png\">\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://github.com/helixbass/HermesDevToolsIssueExample\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nReact DevTools fails to load element props, styles etc\r\n\r\n\r\n## The expected behavior\r\n\r\nReact DevTools should load element props, styles etc\r\n",
        "title": "Bug: React DevTools fails when using React Native + Hermes",
        "labels": "Type: Bug",
        "id": 45167
    },
    {
        "body": "This works fine in Chrome React DevTools, only an issue in the Firefox flavor.\r\n\r\nReact version: N/A\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use the React DevTools in Firefox\r\n2. With the Components inspector open, press e.g. CMD-+ or CMD-- to increase/decrease the UI font size\r\n\r\n## The current behavior\r\nThe rest of the debugger UI reacts (heh) to the change in font size, but the React DevTools font remains tiny. This is a critical accessibility issue -- I have a visual disability and this makes the DevTools extremely hard to use.\r\n\r\n![image](https://user-images.githubusercontent.com/10970257/109089753-9926ef80-76c6-11eb-9f1d-b308f4313abb.png)\r\n\r\n\r\n## The expected behavior\r\nThe React DevTools UI also changes font size.",
        "title": "Bug: React DevTools in Firefox doesn't respect UI font size",
        "labels": "Type: Bug",
        "id": 45168
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 30168. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45169
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Went to profiler tab\r\n2. Record profiler\r\n3. Stop record and got this error\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 158. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45170
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1.  Error occured when clicking on the bar graph that shows which process took how much time (flamegraph).\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 18485. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45171
    },
    {
        "body": "I have a `button` that triggers `scrollIntoView` for a node when clicked. It also updates some state which subsequently disables that button in certain cases. If the button becomes disabled, the `scrollIntoView` execution is exited.\r\n\r\nThis seems to only happen in Chrome/Brave.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\nSee steps to reproduce in sandbox.\r\n\r\nhttps://codesandbox.io/s/goofy-curie-yts68?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nDescribed above.\r\n\r\n## The expected behavior\r\n\r\nThe state update should not prevent `scrollIntoView`.\r\n",
        "title": "Bug: Disabled button state update prevents `scrollIntoView`",
        "labels": "Type: Bug",
        "id": 45172
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. On initializing dev tools for react components\r\n\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nComponent stack: List@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:22629:30\r\ndiv\r\nAutoSizer@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:3003:19\r\ndiv\r\ndiv\r\nTree_Tree@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28429:47\r\ndiv\r\ndiv\r\nInspectedElementContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28920:43\r\nOwnersListContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:27557:37\r\nSettingsModalContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28205:40\r\nComponents_Components@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:33383:52\r\nErrorBoundary_ErrorBoundary@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29219:5\r\nPortaledContent@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29336:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:32933:35\r\nTreeContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24321:31\r\nSettingsContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24810:35\r\nModalDialogContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29403:38\r\nDevTools_DevTools@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:36206:27",
        "title": "Error: \"can't access property \"isCollapsed\", child is undefined\"",
        "labels": "Type: Bug",
        "id": 45173
    },
    {
        "body": "Importing a profile recorded with Chrome Canary (v90) triggers this error check code:\r\nhttps://github.com/facebook/react/blob/6c526c5153bc350d2a62c7dcbc698be77d3f2439/packages/react-devtools-scheduling-profiler/src/import-worker/preprocessData.js#L371-L378\r\n\r\nHere's one such example event:\r\n```json\r\n{\r\n  \"args\": {},\r\n  \"cat\": \"blink.user_timing\",\r\n  \"name\": \"requestStart\",\r\n  \"ph\": \"I\",\r\n  \"pid\": 64032,\r\n  \"s\": \"t\",\r\n  \"tid\": 775,\r\n  \"ts\": 25788659448\r\n}\r\n```\r\n\r\nLooks like there's at least one new type, \"I\", which I assume will eventually affect Chrome stable (currently v88).",
        "title": "Scheduling profiler: Unrecognized event type from Chrome Canary",
        "labels": "Type: Bug",
        "id": 45174
    },
    {
        "body": "React version: 17.0.1\r\n\r\n### Steps To Reproduce\r\nSetup eslint with @typescript-eslint/parser as parser\r\nCast a function passed to `useEffect`\r\n\r\n```\r\nimport {useCallback, useEffect} from 'react';\r\n\r\ntype F = (...args: unknown[]) => void;\r\n\r\nfunction MyComp() {\r\n\tconst foo = useCallback(() => {}, []);\r\n\r\n\t// OK\r\n\tuseEffect(() => {\r\n\t\tfoo();\r\n\t}, [foo]);\r\n\r\n\t// WARNS?\r\n\tuseEffect((() => {\r\n\t\tfoo();\r\n\t}) as F, [foo]);\r\n\r\n\treturn 'Hello, world'\r\n}\r\n```\r\n\r\nLink to code example: https://github.com/0x24a537r9/exhaustive-deps-bug\r\n\r\n### The current behavior\r\nThe following error was reported\r\n\r\n```\r\n  14:2  warning  React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead  \r\n```\r\n\r\n### The expected behavior\r\nThe rule should interpret the function argument correctly and know that it is already inline.",
        "title": "Bug: react-hooks/exhaustive-deps false positive when function is casted with TypeScript",
        "labels": "Type: Bug",
        "id": 45175
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Recorded a profiling session\r\n2. Navigated forward between commits 3x\r\n3. Crash\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 14651. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45176
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Using profiler tool\r\n2. Code splitting\r\n3.  using useMemo\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 4221. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45177
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open profler tab and click record button, do some action in web app\r\n2. Stop the recording\r\n3. Select a bar from the bar chart showing commits\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 3098. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45178
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:v17.0.1\r\n\r\n## Steps To Reproduce\r\nThere maybe be a bug in following method\r\n```\r\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\r\n  const hook = updateWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  let destroy = undefined;\r\n\r\n  if (currentHook !== null) {\r\n    const prevEffect = currentHook.memoizedState;\r\n    destroy = prevEffect.destroy;\r\n    if (nextDeps !== null) {\r\n      const prevDeps = prevEffect.deps;\r\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\r\n        pushEffect(hookFlags, create, destroy, nextDeps);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  currentlyRenderingFiber.flags |= fiberFlags;\r\n\r\n  hook.memoizedState = pushEffect(\r\n    HookHasEffect | hookFlags,\r\n    create,\r\n    destroy,\r\n    nextDeps,\r\n  );\r\n}\r\n```\r\nLink to the source code: [https://github.com/facebook/react/blob/e316f785526e503eceed1ae33b7a06440084b9c9/packages/react-reconciler/src/ReactFiberHooks.new.js#L1320](https://github.com/facebook/react/blob/e316f785526e503eceed1ae33b7a06440084b9c9/packages/react-reconciler/src/ReactFiberHooks.new.js#L1320)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://codesandbox.io/s/reacthooks-fkihz?file=/src/MaybeABug.js](https://codesandbox.io/s/reacthooks-fkihz?file=/src/MaybeABug.js)\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe first time click the button, it will not print the \"effect\" \r\nBut the second click will print the \"effect\" \r\nthe third will not, the fourth will be and so on\r\n\r\n## The expected behavior\r\nMaybe should always print nothing!\r\n\r\n## Remarks\r\nThe reason for this phenomenon is when component entering re-render phase, the effect object is a big different in updateQueue and Hook object. But i think should be consistent\u3002\r\n\r\nIn fact, i am not sure if it is a bug, so I look forward to receiving a reply, thanks",
        "title": "Bug: FunctionComponent re-render phase cause a bug",
        "labels": "Type: Bug",
        "id": 45179
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Launched profiler\r\n2. Was walking through steps\r\n3. On the step a component should be rendered for the first time - this error\r\n\r\nThe problem seems to be with huge keys for components in a list (in my case a filename as a key was replaced by url by mistake)\r\nAlso got \"Uncaught Error: Commit tree does not contain fiber xxx. This is a bug in React DevTools.\" sometimes for the same reason.\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at utfDecodeString (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:352:17)\r\n    at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19646:64)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Maximum call stack size exceeded\"",
        "labels": "Type: Bug",
        "id": 45180
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 1. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45181
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 3419. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45182
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. clone repo: https://github.com/avkonst/react-devtools-crash-demo\r\n2. yarn start\r\n3. open the browser of the started app\r\n4. open devtools\r\n5. click Counter component in the components tab of the development tools\r\n6. Watch it not loading anything and unhandled exception dumped to the console log\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/avkonst/react-devtools-crash-demo\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nDevtools crash when I click on the following component in the development tools:\r\n\r\n```tsx\r\nimport React from 'react';\r\n\r\nfunction useState() {\r\n    React.useState(0);\r\n    React.useEffect(() => () => {});\r\n}\r\n\r\nfunction Counter() {\r\n\tuseState();\r\n\tReact.useState(0);\r\n\treturn <div>Open React Dev Tools Components panel,\r\n\t\tclick on Counter component and\r\n\t\tobserve the crash in the logging console.</div>;\r\n}\r\n\r\nexport default Counter;\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo crash and the development tools show hooks used.\r\n",
        "title": "Bug: devtools may crash when custom hook has the name \"useState\"",
        "labels": "Type: Bug",
        "id": 45183
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19605:9)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n    at Wj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15047:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 4\"",
        "labels": "Type: Bug",
        "id": 45184
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Started the profiler\r\n2. Navigated to a different page\r\n3. \"Maximum update depth exceeded\" (bug in my code)\r\n4. Stopped the profiler\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:34144:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:28205:40\r\nProfiler_Profiler@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:35772:50\r\nErrorBoundary_ErrorBoundary@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:29219:5\r\nPortaledContent@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:29336:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:32933:35\r\nTreeContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:24321:31\r\nSettingsContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:24810:35\r\nModalDialogContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:29403:38\r\nDevTools_DevTools@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:36206:27",
        "title": "Error: \"Commit tree does not contain fiber 2672. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45185
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Look at profiler\r\n2. click right once\r\n3. click left twice\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 432. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45186
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I was trying to stop re-renders of my react project.\r\n2. This error occurred when I was checking `Commit information` for a component.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 140. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45187
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 19196. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45188
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: v16/v17\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/empty-css-value-jmbfl?file=/src/App.js\r\n2. Notice the \"should be black border\" has a pink border\r\n3. Dangerously setting inner HTML works because it doesn't go through reacts `trim()` flow\r\n4. I've tracked the suspect code to here https://github.com/facebook/react/blob/6cbb9394d1474e3a728b49dc7f3a11d61a421ce3/packages/react-dom/src/shared/dangerousStyleValue.js#L44\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/empty-css-value-jmbfl?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nCSS variables have their value trimmed - resulting in `' '` become `''` which then removes the CSS variable from the browser.\r\n\r\n![image](https://user-images.githubusercontent.com/6801309/102850783-52bad780-446e-11eb-8cd3-222061febb48.png)\r\n\r\n## The expected behavior\r\n\r\nThe `' '` value should not be trimmed.\r\n\r\n![image](https://user-images.githubusercontent.com/6801309/102850909-944b8280-446e-11eb-9a88-9660469faf3e.png)\r\n\r\nOne potential option is to, for any custom properties that have a space value, don't trim.\r\n\r\n```js\r\nif (isCustomProperty && value === ' ') {\r\n   return value;\r\n}\r\n\r\nreturn ('' + value).trim();\r\n```\r\n\r\nI'm happy to do the bug fix. I would also love for this to get released on v16.\r\n\r\n---\r\n\r\nFound a work around:\r\n\r\nhttps://codesandbox.io/s/empty-css-value-forked-g5jud?file=/src/App.js\r\n\r\n```js\r\nstyle={{ \"--border-color\": \"var(--, )\" }}\r\n```",
        "title": "Bug: CSS variables can't be a space character",
        "labels": "Type: Bug",
        "id": 45189
    },
    {
        "body": "I created the simplest *Hello, World!* React application that I can think of. I used CRA. The source code is here:\r\n\r\nhttps://github.com/baharev/ie11bug.git\r\n\r\nThe deployed application is here:\r\n\r\nhttps://www.baharev.info/sandbox/ie11bug/index.html\r\n\r\nThe deployed application is what you see in the git repo with React 16.14.0, and that fails in IE11.\r\n\r\nYou see **Hello, World!** if the page is successfully loaded. It works fine in Firefox, Chrome, Edge, etc. but fails to load in IE11.\r\n\r\nReact fails to load, and in the dom explorer I see `<div id=\"root\"></div>`. In the Console I get:\r\n\r\n```\r\nSCRIPT5022: Minified React error #31; visit https://reactjs.org/docs/error-decoder.html?invariant=31&args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&args[]= for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n2.72241442.chunk.js (2,239441)\r\n```\r\nwhich is:\r\n\r\n> The full text of the error you just encountered is:\r\n> Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner}). If you meant to render a collection of children, use an array instead.\r\n\r\n**Note that the very same code works just fine in IE11 with React 16.13.1 and only breaks with 16.14.0 and above.** It also fails with 17.0.1.\r\n\r\nAny help is greatly appreciated.\r\n",
        "title": "Bug: The initial page load fails in IE11 with React 16.14 and above",
        "labels": "Type: Bug",
        "id": 45190
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 119. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45191
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Profiling [recharts library](https://recharts.org/en-US/api/LineChart)\r\n2. Filtered on commits greater than 3s \r\n3. Walking through the commits doing a next > next \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 5766. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45192
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 1719. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45193
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/react-refresh-webpack-plugin-rendered-more-hooks-than-during-the-previous-render-issue-ezcrz?file=/src/Comp.js\r\n2. Delete one of the hooks there\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/react-refresh-webpack-plugin-rendered-more-hooks-than-during-the-previous-render-issue-ezcrz?file=/src/Comp.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nYou get \"Rendered more hooks than during the previous render\" error\r\n\r\n\r\n## The expected behavior\r\nShould hot reload and re-mount the component.\r\n\r\nThe source of the issue have two parts:\r\n1. react-refresh and the bundler fails to inject signature to the component\r\n2. When no signature apparent, `react-refresh` consider the components as compatible, which is not always true, as in the repro https://github.com/facebook/react/blob/9aca239f11f31109dc1a229aa1571c2bf02f5524/packages/react-refresh/src/ReactFreshRuntime.js#L126-L132\r\n\r\nI've filed an issue also for the webpack plugin: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/266\r\nMobx related issue: https://github.com/mobxjs/mobx/issues/2668",
        "title": "Bug: MobX-like observer pattern doesn't work with Fast Refresh because Hooks don't get detected",
        "labels": "Type: Bug",
        "id": 45194
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1.  Use type generics in a useEffect.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCode example:\r\n```TypeScript\r\nfunction useBug<T>(): void {\r\n  useEffect(() => {\r\n    let bug: T;\r\n  }, []); // <-- ESLint error: React Hook useEffect has a missing dependency: 'T'.\r\n\r\n}\r\n```\r\n\r\n## The current behavior\r\nDependency array throws ESLint error.\r\n\r\n```\r\nReact Hook useEffect has a missing dependency: 'T'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\nNo missing dependencies reported.\r\n",
        "title": "Bug: react-hooks/exhaustive-deps false positive on TypeScript generic type variable",
        "labels": "Type: Bug",
        "id": 45195
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:9)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20104:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34150:33)\r\n    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)\r\n    at ni (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13448:7)\r\n    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16065:86)\r\n    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)\r\n    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)\r\n    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)\r\n    at Tj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15038:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 12\"",
        "labels": "Type: Bug",
        "id": 45196
    },
    {
        "body": "eslint-plugin-react-hooks version: 4.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nI know it shouldn't exist in production code, but it's annoying while editing some files.\r\n\r\n```js\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst App = () => {\r\n  useEffect(); // <-\r\n  return null;\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/polished-sun-3wr27?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nESLint crashed.\r\n\r\n```\r\nTypeError: Cannot read property 'type' of undefined\r\n```\r\n\r\n## The expected behavior\r\n\r\nESLint doesn't crash but reports an error instead.",
        "title": "[eslint-plugin-react-hooks] Bug: ESLint crashes if there's a `useEffect` / `useLayoutEffect` invocation without any arguments.",
        "labels": "Type: Bug",
        "id": 45197
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1.  Ran Profiler\r\n2.  Clicked on Rank\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20039:13\r\n    at Map.forEach (<anonymous>)\r\n    at RankedChartBuilder_getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20035:24)\r\n    at ProfilingCache_ProfilingCache.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20157:11)\r\n    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34416:32)\r\n    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)\r\n    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16003:11)\r\n    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)\r\n    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)\r\n    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34395:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"Could not find node with id \"7348\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45198
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:34133:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:28194:1\r\nProfiler_Profiler@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:35761:50\r\nErrorBoundary_ErrorBoundary@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:29208:5\r\nPortaledContent@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:29325:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:32922:1\r\nTreeContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:24310:1\r\nSettingsContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:24799:1\r\nModalDialogContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:29392:1\r\nDevTools_DevTools@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:36195:1",
        "title": "Error: \"Commit tree does not contain fiber 13861. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45199
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Navigate between my routes when the record is turned on\r\n2. Get this bug\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19718:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19563:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20104:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34150:33)\r\n    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)\r\n    at ni (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13448:7)\r\n    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16065:86)\r\n    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)\r\n    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)\r\n    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"Commit tree does not contain fiber 1069. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45200
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Monitoring page load with ReactDevTool Profiler\r\n2. Stopped the recording \r\n3. Selected a render phase in the FlameGraph\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19650:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19583:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"Commit tree already contains fiber 960. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45201
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nThere's currently a false positive for the `react-hooks/exhaustive-deps` rule as it does not accept `undefined` as dependency. \r\n\r\n```typescript\r\n// Below gives => React Hook useMemo has a missing dependency: 'byId'. Either include it or remove the dependency array.\r\nconst allIds = useMemo(() => Object.keys(byId), undefined)\r\n```\r\n\r\nThis is clearly noticeable together with TypeScript as it does not allow omitting the second `deps` parameter, with the following typings:\r\n```typescript\r\n// allow undefined, but don't make it optional as that is very likely a mistake\r\nfunction useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\r\n```\r\n\r\nNote here that `deps` must be either a `DependencyList` or `undefined`. It is not listed as optional.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install `\"eslint-plugin-react-hooks\": \"^4.1.0\"` and extend it with `'plugin:react-hooks/recommended'`\r\n2. Write a hook that required a dependency list, input `undefined`.\r\n\r\n## The current behavior\r\nGives false positive when given `undefined` for `deps`.\r\n\r\n## The expected behavior\r\nShould allow `deps` to be set to undefined.",
        "title": "Bug: react-hooks/exhaustive-deps false postive when given undefined as deps",
        "labels": "Type: Bug",
        "id": 45202
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nLint doesn't see wrong\r\n\r\n```javascript\r\nimport React, { useCallback } from \"react\";\r\n\r\nexport const Example = () => {\r\n  const oneFn = () => {\r\n    console.log(\"hi from oneFn\");\r\n  };\r\n  const item =\r\n    oneFn ??\r\n    useCallback(() => {\r\n      console.log(\"hi from useCallback\");\r\n    }, []);\r\n  return (\r\n    <div>\r\n      <button onClick={item}>click on me</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n![\u0421\u043d\u0438\u043c\u043e\u043a \u044d\u043a\u0440\u0430\u043d\u0430 2020-11-13 \u0432 09 59 03](https://user-images.githubusercontent.com/36443810/99030498-ff17bd00-2596-11eb-88f8-b24441465acb.png)\r\n\r\n\r\n\r\notherwise everything is fine\r\n\r\n```javascript\r\nimport React, { useCallback } from \"react\";\r\n\r\nexport const Example = () => {\r\n  const oneFn = () => {\r\n    console.log(\"hi from oneFn\");\r\n  };\r\n  const item =\r\n    oneFn ||\r\n    useCallback(() => {\r\n      console.log(\"hi from useCallback\");\r\n    }, []);\r\n  return (\r\n    <div>\r\n      <button onClick={item}>click on me</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n![\u0421\u043d\u0438\u043c\u043e\u043a \u044d\u043a\u0440\u0430\u043d\u0430 2020-11-13 \u0432 09 55 14](https://user-images.githubusercontent.com/36443810/99030426-caa40100-2596-11eb-932f-ec0edd6f46d6.png)\r\n\r\n\r\nReact version: 16.13, 17.0\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/flamboyant-sea-syg8x?file=/src/Example.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n",
        "title": "eslint-plugin-react-hooks: eslint doesn't see the conditional operator '??'",
        "labels": "Type: Bug",
        "id": 45203
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n```json\r\n\"react\": \"^16.14.0\"\r\n\"eslint-plugin-react-hooks\": \"^4.2.0\",\r\n```\r\n\r\n## Steps To Reproduce\r\n\r\n1. Lint file with contents below\r\n\r\n```js\r\n// useCustomHook.js\r\nimport { useEffect } from 'react';\r\n\r\nexport function useCustomHook(someObject) {\r\n  useEffect(() => {\r\n    }, [\r\n      someObject?.optionalField.method(),\r\n    ]);\r\n}\r\n```\r\n\r\n```js\r\n// .eslint.rc\r\nmodule.exports = {\r\n    root: true,\r\n    env: {\r\n        es6: true,\r\n    },\r\n    parserOptions: {\r\n        ecmaVersion: 2020,\r\n        sourceType: 'module',\r\n        ecmaFeatures: {\r\n            jsx: true,\r\n        },\r\n    },\r\n    settings: {\r\n        react: {\r\n            version: 'detect',\r\n        },\r\n    },\r\n    plugins: ['react-hooks'],\r\n    extends: [\r\n        'plugin:react-hooks/recommended',\r\n    ],\r\n};\r\n```\r\n\r\n## The current behavior\r\nESlint reports error: `Cannot read property 'type' of undefined Occurred while linting <file>`.\r\nhttps://github.com/facebook/react/blob/13a62feab8c39bc0292eb36d636af0bb4f3a78df/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1624-L1625\r\n\r\n## The expected behavior\r\nESlint rule should not crash. According to https://github.com/facebook/react/issues/18819#issuecomment-655151489 optional chaining should be supported.\r\n\r\n\r\nI was testing [an ESLint testing tool](https://github.com/AriPerkkio/eslint-remote-tester) I've been creating and ran into this issue. I can work on a fix for this later if needed. \r\n\r\nHere's the results and log.\r\n\r\n<details>\r\n  <summary>Error result</summary>\r\n\r\n  ## Rule: unable-to-parse-rule-id\r\n- Message: `Cannot read property 'type' of undefined\r\nOccurred while linting <text>:45`\r\n- Path: `elastic/kibana/x-pack/plugins/security_solution/public/detections/containers/detection_engine/rules/use_rules.tsx`\r\n- [Link](https://github.com/elastic/kibana/blob/HEAD/x-pack/plugins/security_solution/public/detections/containers/detection_engine/rules/use_rules.tsx#L45)\r\n```tsx\r\n  const reFetchRules = useRef<(refreshPrePackagedRule?: boolean) => void>(noop);\r\n  const [loading, setLoading] = useState(true);\r\n  const [, dispatchToaster] = useStateToaster();\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    const abortCtrl = new AbortController();\r\n\r\n    async function fetchData() {\r\n      try {\r\n```\r\n```\r\nTypeError: Cannot read property 'type' of undefined\r\nOccurred while linting <text>:45\r\n    at analyzePropertyChain (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:2235:12)\r\n    at analyzePropertyChain (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:2264:20)\r\n    at /<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1297:34\r\n    at Array.forEach (<anonymous>)\r\n    at visitFunctionWithDependencies (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1277:43)\r\n    at visitCallExpression (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1737:11)\r\n    at /<removed>/eslint-remote-tester/node_modules/eslint/lib/linter/safe-emitter.js:45:58\r\n    at Array.forEach (<anonymous>)\r\n    at Object.emit (/<removed>/eslint-remote-tester/node_modules/eslint/lib/linter/safe-emitter.js:45:38)\r\n    at NodeEventGenerator.applySelector (/<removed>/eslint-remote-tester/node_modules/eslint/lib/linter/node-event-generator.js:254:26)\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Log</summary>\r\n\r\n```\r\nFull log:\r\n[DONE] AriPerkkio/js-framework-playground 0 errors\r\n[DONE] oldboyxx/jira_clone 0 errors\r\n[WARN] Linting cities.ts took 7s at reach/reach-ui/packages/combobox/examples\r\n[WARN] Linting cities.js took 6s at reach/reach-ui/website/src/components\r\n[DONE] reach/reach-ui 0 errors\r\n[DONE] ant-design/ant-design 0 errors\r\n[DONE] StreakYC/react-smooth-collapse 0 errors\r\n[WARN] pmndrs/react-spring crashed: no-useless-constructor\r\n[DONE] pmndrs/react-spring 1 errors\r\n[DONE] AriPerkkio/scrpr 0 errors\r\n[DONE] react-bootstrap/react-bootstrap 0 errors\r\n[DONE] AriPerkkio/suspense-examples 0 errors\r\n[DONE] AriPerkkio/state-mgmt-examples 0 errors\r\n[WARN] withspectrum/spectrum crashed: no-useless-constructor\r\n[DONE] withspectrum/spectrum 1 errors\r\n[DONE] codesandbox/codesandbox-client 0 errors\r\n[WARN] Linting index.js took 40s at mui-org/material-ui/packages/material-ui-icons/src\r\n[WARN] mui-org/material-ui crashed: no-useless-constructor\r\n[DONE] mui-org/material-ui 2 errors\r\n[DONE] reactjs/reactjs.org 0 errors\r\n[DONE] zesty-io/accounts-ui 0 errors\r\n[DONE] zesty-io/design-system 0 errors\r\n[DONE] segmentio/evergreen 0 errors\r\n[DONE] segmentio/ui-box 0 errors\r\n[DONE] kentcdodds/kentcdodds.com 0 errors\r\n[DONE] kentcdodds/react-fundamentals 0 errors\r\n[DONE] kentcdodds/testing-react-apps 0 errors\r\n[DONE] kentcdodds/react-suspense 0 errors\r\n[DONE] kentcdodds/react-hooks 0 errors\r\n[DONE] artsy/force 0 errors\r\n[DONE] kentcdodds/react-performance 0 errors\r\n[DONE] kentcdodds/advanced-react-hooks 0 errors\r\n[DONE] kentcdodds/advanced-react-patterns 0 errors\r\n[DONE] kentcdodds/bookshelf 0 errors\r\n[DONE] kentcdodds/react-testing-library-examples 0 errors\r\n[DONE] kentcdodds/react-testing-library-course 0 errors\r\n[DONE] kentcdodds/learn-react 0 errors\r\n[DONE] kentcdodds/concurrent-react 0 errors\r\n[WARN] Linting material.min.js took 7s at project-bobon/bobonroastprofile/public\r\n[DONE] project-bobon/bobonroastprofile 0 errors\r\n[DONE] gothinkster/react-redux-realworld-example-app 0 errors\r\n[DONE] 1ven/do 0 errors\r\n[DONE] dockunit/platform 0 errors\r\n[DONE] afghl/dribbble-demo 0 errors\r\n[DONE] ismaelgt/english-accents-map 0 errors\r\n[DONE] DevAlien/dripr-ui 0 errors\r\n[DONE] rwieruch/favesound-mobx 0 errors\r\n[DONE] rwieruch/favesound-redux 0 errors\r\n[DONE] skidding/flatris 0 errors\r\n[DONE] feednext/feednext 0 errors\r\n[DONE] pearofducks/foodprocessor 0 errors\r\n[DONE] limichange/flex-editor 0 errors\r\n[DONE] HVF/franchise 0 errors\r\n[DONE] vercel/hyper 0 errors\r\n[DONE] getguesstimate/guesstimate-app 0 errors\r\n[DONE] stevenhauser/i-have-to-return-some-videotapes 0 errors\r\n[DONE] bebraw/invoice-frontend 0 errors\r\n[DONE] gpbl/isomorphic500 0 errors\r\n[DONE] WebbyLab/itsquiz-wall 0 errors\r\n[DONE] docker/kitematic 0 errors\r\n[DONE] KrateLabs/KrateLabs-App 0 errors\r\n[DONE] afghl/dribble-demo 0 errors\r\n[DONE] zeit/hyper 0 errors\r\n[DONE] koodilehto/invoice-frontend 0 errors\r\n[DONE] insin/lifequote 0 errors\r\n[DONE] paulhoughton/mortgage 0 errors\r\n[DONE] paulhoughton/mortgage-mobx 0 errors\r\n[DONE] browniefed/pdxlivebus 0 errors\r\n[WARN] Linting jquery.js took 9s at Khan/perseus/lib\r\n[WARN] skidding/illustrated-algorithms failed to pull\r\n[DONE] skidding/illustrated-algorithms 0 errors\r\n[WARN] Linting kas.js took 9s at Khan/perseus/lib\r\n[WARN] Linting katex.js took 8s at Khan/perseus/lib/katex\r\n[WARN] Linting less.js took 11s at Khan/perseus/lib\r\n[WARN] Linting mathquill-basic.js took 8s at Khan/perseus/lib/mathquill\r\n[WARN] Linting raphael.js took 7s at Khan/perseus/lib\r\n[DONE] guyellis/plant 0 errors\r\n[DONE] benoitvallon/react-native-nw-react-calculator 0 errors\r\n[WARN] Linting react-with-addons.js took 22s at Khan/perseus/lib\r\n[DONE] insin/react-hn 0 errors\r\n[DONE] LeoAJ/react-iTunes-search 0 errors\r\n[WARN] FormidableLabs/react-music crashed: no-useless-constructor\r\n[DONE] FormidableLabs/react-music 1 errors\r\n[DONE] echenley/react-news 0 errors\r\n[WARN] Linting vendors.min.js took 27s at lkazberova/react-photo-feed/static\r\n[DONE] lkazberova/react-photo-feed 0 errors\r\n[DONE] Khan/perseus 0 errors\r\n[DONE] pl12133/react-solitaire 0 errors\r\n[WARN] Linting bundle.js took 18s at afonsopacifer/react-pomodoro/app\r\n[DONE] afonsopacifer/react-pomodoro 0 errors\r\n[DONE] chvin/react-tetris 0 errors\r\n[DONE] web-pal/react-trello-board 0 errors\r\n[DONE] fcsonline/react-transmission 0 errors\r\n[DONE] SKempin/reactjs-tmdb-app 0 errors\r\n[DONE] fullstackreact/react-yelp-clone 0 errors\r\n[DONE] hoppula/refire-forum 0 errors\r\n[WARN] Linting bootstrap.min.js took 8s at antoinejaussoin/retro-board/retro-board-app/public/marketing/js\r\n[DONE] ritoplz/ritoplz 0 errors\r\n[DONE] andrewngu/sound-redux 0 errors\r\n[DONE] antoinejaussoin/retro-board 0 errors\r\n[DONE] FormidableLabs/spectacle 0 errors\r\n[DONE] torontojs/torontojs.com 0 errors\r\n[DONE] sprintly/sprintly-ui 0 errors\r\n[WARN] captbaritone/winamp2-js crashed: no-useless-constructor\r\n[DONE] captbaritone/winamp2-js 1 errors\r\n[DONE] Automattic/wp-calypso 0 errors\r\n[DONE] marmelab/react-admin 0 errors\r\n[DONE] reactstrap/reactstrap 0 errors\r\n[DONE] palantir/blueprint 0 errors\r\n[DONE] Semantic-Org/Semantic-UI-React 0 errors\r\n[DONE] grommet/grommet 0 errors\r\n[DONE] rebassjs/rebass 0 errors\r\n[DONE] FortAwesome/react-fontawesome 0 errors\r\n[WARN] microsoft/fluentui crashed: no-useless-constructor\r\n[DONE] chakra-ui/chakra-ui 0 errors\r\n[WARN] reakit/reakit crashed: no-useless-constructor\r\n[DONE] reakit/reakit 1 errors\r\n[DONE] rsuite/rsuite 0 errors\r\n[WARN] Linting Calendar.js took 26s at primefaces/primereact/src/components/calendar\r\n[DONE] uber/baseweb 0 errors\r\n[DONE] couds/react-bulma-components 0 errors\r\n[DONE] kulakowka/react-bulma 0 errors\r\n[DONE] dfee/rbx 0 errors\r\n[WARN] Linting index.ts took 13s at microsoft/fluentui/packages/react-icons-mdl2/src\r\n[DONE] primefaces/primereact 0 errors\r\n[DONE] fibo/trunx 0 errors\r\n[DONE] knipferrc/tails-ui 0 errors\r\n[DONE] emortlock/tailwind-react-ui 0 errors\r\n[DONE] geist-org/react 0 errors\r\n[WARN] Linting List.tsx took 8s at microsoft/fluentui/packages/react-internal/src/components/List\r\n[DONE] brillout/awesome-react-components 0 errors\r\n[WARN] Linting react-datepicker.js took 16s at elastic/eui/packages\r\n[DONE] JedWatson/react-select 0 errors\r\n[DONE] atlassian/react-beautiful-dnd 0 errors\r\n[DONE] react-dnd/react-dnd 0 errors\r\n[DONE] strml/react-grid-layout 0 errors\r\n[DONE] microsoft/fluentui 1 errors\r\n[DONE] adazzle/react-data-grid 0 errors\r\n[DONE] tannerlinsley/react-table 0 errors\r\n[WARN] elastic/eui crashed: no-useless-constructor\r\n[DONE] mzabriskie/react-draggable 0 errors\r\n[DONE] strml/react-resizable 0 errors\r\n[DONE] bokuweb/react-resizable-and-movable 0 errors\r\n[DONE] elastic/eui 1 errors\r\n[DONE] axmz/react-searchbox-awesome 0 errors\r\n[DONE] bokuweb/react-resizable-box 0 errors\r\n[DONE] bokuweb/react-sortable-pane 0 errors\r\n[DONE] aeagle/react-spaces 0 errors\r\n[DONE] Hacker0x01/react-datepicker 0 errors\r\n[WARN] Linting DayPickerRangeController_spec.jsx took 8s at airbnb/react-dates/test/components\r\n[DONE] orgsync/react-list 0 errors\r\n[DONE] airbnb/react-dates 0 errors\r\n[WARN] Linting bundle.js took 45s at intljusticemission/react-big-calendar/examples\r\n[DONE] intljusticemission/react-big-calendar 0 errors\r\n[DONE] i18next/react-i18next 0 errors\r\n[DONE] davidtheclark/react-aria-modal 0 errors\r\n[WARN] Linting test262-main.ts took 10s at yahoo/react-intl/packages/intl-listformat\r\n[WARN] Linting app.js took 18s at glortho/react-keydown/example/public/js\r\n[DONE] glortho/react-keydown 0 errors\r\n[WARN] Linting test262-main.ts took 7s at yahoo/react-intl/packages/intl-numberformat\r\n[DONE] gilbarbara/react-joyride 0 errors\r\n[DONE] greena13/react-hotkeys 0 errors\r\n[DONE] bvaughn/react-window 0 errors\r\n[WARN] text-mask/text-mask crashed: no-useless-constructor\r\n[WARN] Linting test262-main.ts took 41s at yahoo/react-intl/packages/intl-relativetimeformat\r\n[DONE] yahoo/react-intl 0 errors\r\n[DONE] bvaughn/react-virtualized 0 errors\r\n[DONE] dvtng/react-loading-skeleton 0 errors\r\n[DONE] KyleAMathews/react-spinkit 0 errors\r\n[DONE] zpao/qrcode.react 0 errors\r\n[DONE] airbnb/rheostat 0 errors\r\n[DONE] pierpo/react-archer 0 errors\r\n[WARN] Linting bundle.js took 23s at text-mask/text-mask/website/static\r\n[DONE] text-mask/text-mask 1 errors\r\n[DONE] mkosir/react-parallax-tilt 0 errors\r\n[DONE] rackt/react-autocomplete 0 errors\r\n[DONE] phuoc-ng/react-pdf-viewer 0 errors\r\n[DONE] eliseumds/react-autocomplete 0 errors\r\n[DONE] moroshko/react-autosuggest 0 errors\r\n[DONE] prometheusresearch/react-autocomplete 0 errors\r\n[DONE] gragland/instatype 0 errors\r\n[DONE] paypal/downshift 0 errors\r\n[DONE] ericgio/react-bootstrap-typeahead 0 errors\r\n[DONE] matteobruni/tsparticles 0 errors\r\n[DONE] facebook/react-art 0 errors\r\n[DONE] Flipboard/react-canvas 0 errors\r\n[DONE] pilwon/react-famous 0 errors\r\n[DONE] kmkzt/react-hooks-svgdrawing 0 errors\r\n[DONE] gorangajic/react-svg-morph 0 errors\r\n[WARN] Linting kinetic-v5.1.0.js took 14s at freiksenet/react-kinetic/vendor\r\n[DONE] freiksenet/react-kinetic 0 errors\r\n[DONE] chrvadala/react-svg-pan-zoom 0 errors\r\n[DONE] reduction-admin/react-reduction 0 errors\r\n[DONE] jeffersonRibeiro/react-shopping-cart 0 errors\r\n[DONE] clintonwoo/hackernews-react-graphql 0 errors\r\n[DONE] firefox-devtools/debugger 0 errors\r\n[DONE] gaearon/overreacted.io 0 errors\r\n[WARN] Linting admin_definition.jsx took 6s at mattermost/mattermost-webapp/components/admin_console\r\n[DONE] dnote/dnote 0 errors\r\n[WARN] elastic/kibana crashed: no-useless-constructor\r\n[DONE] mattermost/mattermost-webapp 0 errors\r\n[WARN] elastic/kibana crashed: unable-to-parse-rule-id\r\n[DONE] elastic/kibana 8 errors\r\n[DONE] Finished scan of 164 repositories\r\n\r\n\u2728  Done in 3720.16s.\r\n```\r\n</details>\r\n",
        "title": "Bug: eslint-plugin-react-hooks: Cannot read property 'type' of undefined at analyzePropertyChain",
        "labels": "Type: Bug",
        "id": 45204
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Go to profile tag\r\n2. Click to record\r\n3. After stop recording, click on any commits.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:33986:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:28047:1\r\nProfiler_Profiler@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:35614:50\r\nErrorBoundary_ErrorBoundary@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:29061:5\r\nPortaledContent@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:29178:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:32775:1\r\nTreeContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:24163:1\r\nSettingsContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:24652:1\r\nModalDialogContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:29245:1\r\nDevTools_DevTools@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:36048:1",
        "title": "Error: \"Commit tree does not contain fiber 1527. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45205
    },
    {
        "body": "**React plugin version:** \r\neslint-plugin-react: \"^7.19.0\"\r\ntypescript: 4.0+ (must include ?. operator)\r\n\r\n## Steps To Reproduce\r\n\r\n```tsx\r\n// Just a demonstration example, obviously this is not ideal use of classes\r\nclass Dog {\r\n\tpublic useDogWoof() {\r\n\t\tuseEffect(() => {\r\n\t\t\tconsole.log(\"woof\")\r\n\t\t}])\r\n\t}\r\n}\r\n\r\nconst DogWoof = ({dog}: {dog?: Dog) => {\r\n\tdog?.useDogWoof() // Should print conditional hook error\r\n\treturn (\r\n\t\t//\r\n\t)\r\n}\r\n```\r\n\r\n## The current behavior\r\n\r\nTypescript has the new 4.0 operator `?.` in case an object is undefined. But, this doesn't quite work along with hooks, as when the object is undefined, the hook is not called, thus the React Renderer complains that the amount of hooks is not the same or even worse untraceable type errors that I had. `eslint-plugin-react-hooks` is expected to be able to guard against that as well to prevent nasty errors with this new typescript operator.\r\n\r\n## The expected behavior\r\n\r\nCurrently, `eslint-plugin-react-hooks` doesn't take care of the typescript operator and thinks that nothing's wrong with using along one with a react hook.",
        "title": "Bug: eslint-plugin-react-hooks doesn't report conditional typescript \"?.\" hooks",
        "labels": "Type: Bug",
        "id": 45206
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a Switch with state in react native and toggle the switch by opening devtools and using the checkbox provided for the state.\r\n2. Now toggle the switch using UI. the state object gets updated but not the expanded one.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nAllergies state is true on the top but on expanded state it is false.\r\n![Screenshot from 2020-11-06 16-48-37](https://user-images.githubusercontent.com/16081083/98360786-7bb71280-2050-11eb-8a52-0944a6b70c26.png)\r\n\r\n\r\n## The expected behavior\r\nBoth must be in sync",
        "title": "Bug: devtools the expanded state and the state object are out of sync",
        "labels": "Type: Bug",
        "id": 45207
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Using the profiler I get this error. Can't figure out what to do. Tried clearing my browser data. \r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19767:32)\r\n    at ProfilingCache_ProfilingCache.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19992:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34007:32)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)\r\n    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)\r\n    at Xj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15129:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Cannot read property 'length' of undefined\"",
        "labels": "Type: Bug",
        "id": 45208
    },
    {
        "body": "A recent update to the React Developer Tools Chrome Extension looks like it has a build issue. \r\n\r\n## The current behaviour\r\n\r\nChrome console is reporting\r\n\r\n> DevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/injectGlobalHook.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\n\r\nLooking at the map file it contains a lot of references to local paths on @bvaughn's computer.\r\n\r\n```json\r\n{\"version\":3,\"sources\":[\"webpack:///webpack/bootstrap\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/index.js\",\"webpack:///../react-devtools-shared/src/types.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/index.js\",\"webpack:///../react-devtools-shared/src/hook.js\",\"webpack:///./src/injectGlobalHook.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/clipboard-js/clipboard.js\",\"webpack:///../shared/ReactSymbols.js\",\"webpack:///../react-devtools-shared/src/utils.js\",\"webpack:///../react-devtools-shared/node_modules/semver/semver.js\",\"webpack:///../react-devtools-shared/src/constants.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/object-assign/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/index.js\",\"webpack:///../shared/ConsolePatchingDev.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js\",\"webpack:///../react-devtools-shared/src/backend/console.js\",\"webpack:///../react-devtools-shared/src/backend/utils.js\",\"webpack:///../react-devtools-shared/src/backend/renderer.js\",\"webpack:///../react-devtools-shared/src/backend/ReactSymbols.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/process/browser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/yallist.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/iterator.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/cjs/react-is.production.min.js\",\"webpack:///../react-devtools-shared/src/devtools/views/root.css\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/cjs/react.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/cjs/react-debug-tools.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/error-stack-parser/error-stack-parser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/stackframe/stackframe.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/nullthrows/nullthrows.js\",\"webpack:///../react-devtools-shared/src/storage.js\",\"webpack:///../react-devtools-shared/src/hydration.js\"],\"names\":[\"process\",\"module\",\"exports\",\"require\",\"ElementTypeClass\",\"ElementTypeContext\",\"ElementTypeFunction\",\"ElementTypeForwardRef\",\"ElementTypeHostComponent\",\"ElementTypeMemo\",\"ElementTypeOtherOrUnknown\",\"ElementTypeProfiler\",\"ElementTypeRoot\",\"ElementTypeSu\r\n\r\n```\r\n\r\n\r\n## The expected behaviour\r\n- No Chrome message complaining about the SourceMap",
        "title": "Bug: React Developer Tools Chrome Extension build error",
        "labels": "Type: Bug",
        "id": 45209
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. fetching data from gh api\r\n2. trying to append pictures to a slider ;p\r\n3. happily hacking\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21068:35)\r\n    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21084:26)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28520:63\r\n    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22776:18)\r\n    at wi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13590:76)\r\n    at vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13581:10)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16165:86)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)\r\n    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)\r\n\r\nComponent stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22471:30)\r\n    at div\r\n    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3006:5)\r\n    at div\r\n    at div\r\n    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28271:47)\r\n    at div\r\n    at div\r\n    at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28763:3)\r\n    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27400:3)\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33225:52)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Cannot read property 'isCollapsed' of undefined\"",
        "labels": "Type: Bug",
        "id": 45210
    },
    {
        "body": "I have an input with type password with minLength 8, and i have a toggle to change the type to text (password toggle).\r\nwhen i type with length < 8 and press submit, it prevent to submit. but, when i toggle the password so it change the type to text and submit the form, it can submitted. btw i using useRef()\r\n\r\nReact version:\r\nreact: ^17.0.1\r\nreact-dom: ^17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. type character < minLength\r\n2. submit form\r\n3. toggle form type\r\n4. submit form\r\n\r\nLink to code example: [DEMO](https://codesandbox.io/s/young-shape-4tciw)\r\n\r\n## The current behavior\r\nThe form get submitted even when it under minLength\r\n\r\n## The expected behavior\r\nThe form not get submitted when it under minLength\r\n",
        "title": "Bug: Input minLength not working after type changed",
        "labels": "Type: Bug",
        "id": 45211
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19503:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19436:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19429:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19429:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19429:32)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19957:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34003:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Commit tree already contains fiber 11324. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45212
    },
    {
        "body": "In the old reconciler fork, after mutation, we clear child, alternate, and return pointers:\r\nhttps://github.com/facebook/react/blob/343d7a4a7eb621a31ba946309b557e0988be3a63/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L1054-L1081\r\n\r\nWe wait to clear sibling pointers until passive effects have been processed. If we commit a root that has no passive effects\u2013 we immediately detach sibling pointers:\r\nhttps://github.com/facebook/react/blob/343d7a4a7eb621a31ba946309b557e0988be3a63/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2135-L2155\r\n\r\nIn the new reconciler fork, we only clear alternate and return pointers after mutation, because we need child and sibling pointers to traverse the tree for passive effects:\r\nhttps://github.com/facebook/react/blob/343d7a4a7eb621a31ba946309b557e0988be3a63/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L2274-L2293\r\n\r\nHowever, if we commit a root that has no passive effects, we don't clear those pointers (so the pointers stay around until another render eventually replaces them).\r\n\r\nSeems like an oversight.",
        "title": "Bug: New reconciler fork should detach child/sibling pointers if no passive effects",
        "labels": "Type: Bug",
        "id": 45213
    },
    {
        "body": "Hi, I used react-sortable-tree package im my react project in component named Tree:\r\n\r\n```\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport axios_config from \"./axios_config\";\r\nimport \"react-sortable-tree/style.css\";\r\nimport SortableTree, {\r\n} from \"react-sortable-tree\";\r\nclass Tree extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      treeData: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    (async () => {\r\n      axios_config.url = this.props.treeLink;\r\n      axios_config.data = {};\r\n\r\n      try {\r\n        let result = await axios(axios_config);\r\n        console.log(\"response from server gotttt...\");\r\n        console.log(result);\r\n        if (result.data.done === true) {\r\n          this.setState({\r\n            treeData: result.data.tree,\r\n            selectedNode: result.data.tree[0],\r\n          });\r\n          this.props.disableLoading();\r\n        } else {\r\n          console.log(result.err);\r\n          this.props.disableLoading();\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    })();\r\n  }\r\n  render() {\r\n    return (\r\n      <SortableTree\r\n        style={{ height: \"300px\" }}\r\n        treeData={this.state.treeData}\r\n        onChange={(treeData) => this.setState({ treeData })}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\nwhen I use Tree component in my code it works pretty well in react 16.13.1, but fails and get this error is react 17.0.1:\r\n\r\n`\u2190\u21921 of 2 errors on the page\r\nError: Unable to find node on an unmounted component.\r\n\u25b6 21 stack frames were collapsed.\r\n(anonymous function)\r\nsrc/components/utility/Tree.js:114\r\n  111 | console.log(result);\r\n  112 | if (result.data.done === true) {\r\n  113 |   //console.log(result.data.tree);\r\n> 114 |   this.setState({\r\n      | ^  115 |     treeData: result.data.tree,\r\n  116 |     selectedNode: result.data.tree[0],\r\n  117 |   });\r\n`\r\n`react-dom.development.js:24281 Uncaught Error: Unable to find node on an unmounted component.\r\n    at findHostInstanceWithWarning (react-dom.development.js:24281)\r\n    at findDOMNode (react-dom.development.js:24804)\r\n    at ScrollingComponent.componentDidMount (index.js:181)\r\n    at commitLifeCycles (react-dom.development.js:20663)\r\n    at commitLayoutEffects (react-dom.development.js:23426)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:3945)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:3994)\r\n    at invokeGuardedCallback (react-dom.development.js:4056)\r\n    at commitRootImpl (react-dom.development.js:23151)\r\n    at unstable_runWithPriority (scheduler.development.js:646)\r\n    at runWithPriority$1 (react-dom.development.js:11276)\r\n    at commitRoot (react-dom.development.js:22990)\r\n    at performSyncWorkOnRoot (react-dom.development.js:22329)\r\n    at react-dom.development.js:11327\r\n    at unstable_runWithPriority (scheduler.development.js:646)\r\n    at runWithPriority$1 (react-dom.development.js:11276)\r\n    at flushSyncCallbackQueueImpl (react-dom.development.js:11322)\r\n    at flushSyncCallbackQueue (react-dom.development.js:11309)\r\n    at scheduleUpdateOnFiber (react-dom.development.js:21893)\r\n    at Object.enqueueSetState (react-dom.development.js:12467)\r\n    at Tree.push../node_modules/react/cjs/react.development.js.Component.setState (react.development.js:365)\r\n    at Tree.js:114`",
        "title": "Bug: Uncaught Error: Unable to find node on an unmounted component in react 17.0.1",
        "labels": "Type: Bug",
        "id": 45214
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: experimental\r\n\r\nI found this bug while trying out `useOpaqueIdentifier` on a component that uses `aria-activedescendant`. It works great on a CRA app, but it breaks on server rendered apps.\r\n\r\nThe way it's implemented is that each item registers its id into a state up in the tree so the container element can get the active id and render it on the `aria-activedescendant` prop.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a simple server rendered app (for example, using Next.js).\r\n2. Create a component that uses `React.unstable_useOpaqueIdentifier` and passes the generated object to a component up in the tree through callbacks.\r\n3. Try to render the generated ID to a prop in the ancestor component. \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/react-useopaqueidentifier-aria-activedescendant-bug-geutb?file=/pages/index.js:0-412\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIt throws an error:\r\n\r\n```\r\nUnhandled Runtime Error\r\nError: The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.\r\n\r\nCall Stack\r\nObject.readValue\r\nnode_modules/react-dom/cjs/react-dom.development.js (16555:0)\r\ndiffProperties\r\nnode_modules/react-dom/cjs/react-dom.development.js (9475:0)\r\nprepareUpdate\r\nnode_modules/react-dom/cjs/react-dom.development.js (10352:0)\r\nupdateHostComponent$1\r\nnode_modules/react-dom/cjs/react-dom.development.js (20070:0)\r\ncompleteWork\r\nnode_modules/react-dom/cjs/react-dom.development.js (20236:0)\r\ncompleteUnitOfWork\r\nnode_modules/react-dom/cjs/react-dom.development.js (23738:0)\r\nperformUnitOfWork\r\nnode_modules/react-dom/cjs/react-dom.development.js (23710:0)\r\nworkLoopSync\r\nnode_modules/react-dom/cjs/react-dom.development.js (23618:0)\r\nrenderRootSync\r\nnode_modules/react-dom/cjs/react-dom.development.js (23577:0)\r\nperformConcurrentWorkOnRoot\r\nnode_modules/react-dom/cjs/react-dom.development.js (22968:0)\r\nworkLoop\r\nnode_modules/scheduler/cjs/scheduler.development.js (590:0)\r\nflushWork\r\nnode_modules/scheduler/cjs/scheduler.development.js (545:0)\r\nMessagePort.performWorkUntilDeadline\r\nnode_modules/scheduler/cjs/scheduler.development.js (157:0)\r\n```\r\n\r\nI believe it's triggered here: https://github.com/facebook/react/blob/993ca533b42756811731f6b7791ae06a35ee6b4d/packages/react-dom/src/client/ReactDOMComponent.js#L786-L789\r\n\r\n## The expected behavior\r\n\r\nIt works well when not using SSR:\r\n\r\nhttps://codesandbox.io/s/react-useopaqueidentifier-aria-activedescendant-y3f22",
        "title": "Bug: Can't hydrate useOpaqueIdentifier generated object in another component",
        "labels": "Type: Bug",
        "id": 45215
    },
    {
        "body": "Hello\r\nHave such warning in chrome console\r\n![image](https://user-images.githubusercontent.com/1410608/97543950-9bf02d00-19d1-11eb-94df-8de57530e2b4.png)\r\n\r\nWhen open url from warning, get this (configs with local paths from laptop of @bvaughn ;) )\r\n```\r\n{\"version\":3,\"sources\":[\"webpack:///webpack/bootstrap\",\"webpack:///../shared/ReactSymbols.js\",\"webpack:///../react-devtools-shared/src/utils.js\",\"webpack:///../react-devtools-shared/src/types.js\",\"webpack:///../react-devtools-shared/src/backend/ReactSymbols.js\",\"webpack:///../react-devtools-shared/src/constants.js\",\"webpack:///../react-devtools-shared/src/storage.js\",\"webpack:///../react-devtools-shared/src/backend/utils.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/object-assign/index.js\",\"webpack:///../react-devtools-shared/src/hydration.js\",\"webpack:///../shared/ConsolePatchingDev.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js\",\"webpack:///../react-devtools-shared/src/backend/console.js\",\"webpack:///../react-devtools-shared/src/events.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lodash.throttle/index.js\",\"webpack:///../react-devtools-shared/src/backend/renderer.js\",\"webpack:///../react-devtools-shared/node_modules/semver/semver.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/memoize-one/esm/index.js\",\"webpack:///../react-devtools-shared/src/backend/views/utils.js\",\"webpack:///../react-devtools-shared/src/backend/views/Highlighter/Overlay.js\",\"webpack:///../react-devtools-shared/src/backend/views/Highlighter/Highlighter.js\",\"webpack:///../react-devtools-shared/src/backend/views/Highlighter/index.js\",\"webpack:///../react-devtools-shared/src/backend/views/TraceUpdates/canvas.js\",\"webpack:///../react-devtools-shared/src/backend/views/TraceUpdates/index.js\",\"webpack:///../react-devtools-shared/src/backend/agent.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/clipboard-js/clipboard.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/index.js\",\"webpack:///./src/backend.js\",\"webpack:///(webpack)/buildin/global.js\",\"webpack:///../react-devtools-shared/src/devtools/views/root.css\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/process/browser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/yallist.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/iterator.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/cjs/react-is.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/cjs/react-debug-tools.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/error-stack-parser/error-stack-parser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/stackframe/stackframe.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/cjs/react.production.min.js\",\"webpack:///../react-devtools-shared/src/bridge.js\",\"webpack:///../react-devtools-shared/src/backend/legacy/utils.js\",\"webpack:///../react-devtools-shared/src/backend/legacy/renderer.js\",\"webpack:///../react-devtools-shared/src/backend/index.js\",\"webpack:///../react-devtools-shared/src/backend/NativeStyleEditor/resolveBoxStyle.js\",\"webpack:///../react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor.js\"],\"names\":\r\n```\r\n\r\nDevTools info:\r\n`Adds React debugging tools to the Chrome Developer Tools. Created from revision 75726fadfd on 10/19/2020.`",
        "title": "Bug: React DevTools chrome warning",
        "labels": "Type: Bug",
        "id": 45216
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n![image](https://user-images.githubusercontent.com/48934944/97427495-981bc680-194f-11eb-9120-c039fcd39725.png)\r\n",
        "title": "Bug: \u901a\u8fc7\u811a\u624b\u67b6\u521b\u5efa\u7684\u9879\u76ee \u7f16\u8bd1\u4e0d\u62a5\u9519 \u8fd0\u884c\u65f6\u4f9d\u8d56\u62a5\u9519",
        "labels": "Type: Bug",
        "id": 45217
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nComponent stack: CommitRankedAutoSizer@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:34248:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:28047:1\r\nProfiler_Profiler@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:35614:50\r\nErrorBoundary_ErrorBoundary@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:29061:5\r\nPortaledContent@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:29178:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:32775:1\r\nTreeContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:24163:1\r\nSettingsContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:24652:1\r\nModalDialogContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:29245:1\r\nDevTools_DevTools@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:36048:1",
        "title": "Error: \"Commit tree already contains fiber 601. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45218
    },
    {
        "body": "When I use DevTools to select an element on the page, it can't jump/find it.\r\nIt also doesn't show it in the Components page.\r\n    This was checked by finding its parent and checking the children, non of the newly generated ones are there.\r\nAs a probably related bug Profiler doesn't show/record the changes.\r\n\r\nReact version: 16.13.1\r\nReact-dom version: 16.13.1\r\nParcel: 2.0.0-beta.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a parent element\r\n2. Have a child element (A)\r\n3. Using conditional rendering (`condition ? A : B`) \"hide\" A\r\n4. B now shows\r\n5. Try and select B using Chrome Dev Tools's \"Select an element in the page to inspect it\"\r\n6. Jumps nowhere/Can't find it manually in the list.\r\n\r\n## Example\r\n\r\n![2020-10-26_12-38-43](https://user-images.githubusercontent.com/24227350/97173781-06faf300-1789-11eb-9f66-4c6146d1dc8b.gif)\r\nIn this example, I demonstrate that it works on the Search Bar (light grey bar) which is the TextField=>InputBase tree, and the Container that contains the search & images and how hovering over the image doesn't do anything.\r\nI then click on the image and nothing happens & the state panel on the right of Dev Tools empties itself.\r\n\r\n## The current behaviour\r\n\r\nCan't find newly rendered components in React Dev Tools Components panel\r\n\r\n## The expected behavior\r\n\r\nBeing able to find the newly rendered components in React Dev Tools Components panel",
        "title": "Bug: DevTools not finding/showing React components",
        "labels": "Type: Bug",
        "id": 45219
    },
    {
        "body": "React DevTools version: 4.9.0-75726fadfd\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install React DevTools into Chrome 86\r\n2. Observe Chrome errors loading source maps for React DevTools.\r\n\r\nLink to code example:\r\n\r\n`None`\r\n\r\n## The current behavior\r\n\r\n```log\r\nDevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/injectGlobalHook.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\nDevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\nDevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/contentScript.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\n```\r\n\r\n## The expected behavior\r\n\r\nShow no errors.\r\n\r\n## Workaround\r\n\r\n- Disable JavaScript source maps in Chrome DevTools (Open Chrome DevTools, click three dots menu in upper right corner, find Settings under More Tools. Uncheck \"Enable JavaScript source maps\".)\r\n\r\nWorkarounds that don't work:\r\n\r\n- Remove all `.map` files in `~/.config/google-chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0/build/`.\r\n- Remove all `.map` files from `~/.config/google-chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0/`\r\n- Edit each `.js` file in `~/.config/google-chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0/build/` to remove the line with `//# sourceMappingURL=`. This changes the hash of each file and Chrome will refuse to load the extension.\r\n\r\n## Other Notes\r\n\r\n- OS: Manjaro Linux\r\n\r\n",
        "title": "Bug: Chrome DevTools failed to load SourceMap after upgrade to Chrome 86.0.4240.111",
        "labels": "Type: Bug",
        "id": 45220
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Upgrade React & reactDom version to 17.0.0\r\n2. Reloading specific page via profiler\r\n3. Click a chart inside flamegraph chart\r\n3. The page is working just fine but the profiler has stopped working\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19503:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19436:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19957:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34003:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)\r\n    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Commit tree already contains fiber 1. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45221
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.x.x\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have latest React devtools installed in Chrome\r\n2. Open console and see warning about failure to load source maps.\r\n\r\n<img width=\"1161\" alt=\"Screen Shot 2020-10-22 at 12 12 23 AM\" src=\"https://user-images.githubusercontent.com/4588318/96823803-4d53f900-13fb-11eb-9f3d-e26d519fabbc.png\">\r\n\r\n<img width=\"422\" alt=\"Screen Shot 2020-10-22 at 12 12 53 AM\" src=\"https://user-images.githubusercontent.com/4588318/96823829-59d85180-13fb-11eb-8113-974ea7231f5c.png\">\r\n\r\nLooks to be related to https://github.com/facebook/react/pull/19773 \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nConsole logs about failure to load source maps\r\n\r\n## The expected behavior\r\nNo console logs because of the extension \r\n",
        "title": "Bug: Error loading source maps for devtools extension",
        "labels": "Type: Bug",
        "id": 45222
    },
    {
        "body": "This is a weird one. Basically, if you add an event listener to the document in an effect that was triggered by an event. e.g. `click` toggles some state, which triggers an effect, which adds a `click` handler to the document. In the normal case the new event handler will \"miss\" the triggering event, e.g. the added click handler won't respond to the click event that triggered it being added (omg). \r\n\r\nHOWEVER, if you render a portal first, the timing changes slightly and the added event handler will see the current event.\r\n\r\nReact version: 17\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/react-playground-forked-cyt0f?file=/index.js\r\n\r\n1. Click the \"show Message\" button to see a message toggle in and out\r\n2. Click the \"Render Portal\" button (see a portal rendered into the body)\r\n3. Click the \"show Message\" button again and notice nothing happens\r\n\r\nThe reason for the final behavior is the click event both opens and closes the message, (calls set state twice)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/react-playground-forked-cyt0f?file=/index.js\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n\r\nThat they be consistent",
        "title": "Bug: useEffect Timing changes depending on if Portal was rendered",
        "labels": "Type: Bug",
        "id": 45223
    },
    {
        "body": "After updating react-dom to version 17 the build now includes Array.fill() which isn't supported by ie11 without polyfilling. Coming from this line. Tested with just the default cra production build to make sure it wasn't a problem with my webpack config and the same issue.\r\n\r\nhttps://github.com/facebook/react/blob/96ac799eace5d989de3b4f80e6414e94a08ff77a/packages/react-reconciler/src/ReactFiberLane.js#L671\r\n\r\nTested using CRA on version 16.9.8 of react and react-dom which works with the production build for ie11. \r\n\r\n",
        "title": "react-dom 17 breaks on internet explorer",
        "labels": "Type: Bug",
        "id": 45224
    },
    {
        "body": "Is the correct word \"Escape\" ?\r\n\r\nhttps://github.com/facebook/react/blob/dfb6a403357d5ac2c0ea87aa6e5a4f947de342f8/packages/react-interactions/events/src/dom/create-event-handle/Focus.js#L72",
        "title": "Misspelled \"Escape\" event type in Focus.js",
        "labels": "Type: Bug",
        "id": 45225
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17854:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree does not contain fiber 13258. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45226
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\nI couldn't reproduce it.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18061:32)\r\n    at ProfilingCache.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18301:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31722:32)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n    at Mj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13351:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Cannot read property 'length' of undefined\"",
        "labels": "Type: Bug",
        "id": 45227
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n\r\n1. Open React Devtools Profiler\r\n2. Select Hide components where type equals suspense (I retried multiple times and I didn't need this step).\r\n3. Click on Start profiling\r\n4. Click on a commit bar\r\n\r\nI think it's a regression.\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17854:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree does not contain fiber 329. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45228
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open React Devtools Profiler\r\n2. Select Hide components where type equals suspense (I retried multiple times and I didn't need this step) \r\n3. Click on Reload and start profiling\r\n4. Click on a commit bar\r\n\r\nI think it's a regression.\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17827:53)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31980:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31963:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45229
    },
    {
        "body": "React version: 17.0.0.rc2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install in dev mode\r\n2. all events, click, onBlur all of them are too slowly every time you click in a input or something freeze the browser\r\n\r\nAnd even more if you open the chrome dev tools or others becomes more slow\r\n",
        "title": "Bug: v17 DEV mode slowness during effect traversal",
        "labels": "Type: Bug",
        "id": 45230
    },
    {
        "body": "React version: 0.0.0-experimental-94c0244ba\r\n\r\n## Steps To Reproduce\r\n\r\nMutating the external source during the initial render before subscribe throws error. \r\n\r\nhttps://codesandbox.io/s/usemutablesource-7nbs6?file=/src/App.js\r\n\r\n![image](https://user-images.githubusercontent.com/8140606/94963407-f7033280-04ac-11eb-9cf7-e00c6630f55e.png)\r\n\r\n1. Navigate to the above code sandbox\r\n2. Click on the Mutate button. Final Value is rendered without any error. (Success Mode)\r\n3. Toggle to Error Mode and click on the Mutate button again.\r\n4. Error thrown (and the UI is rendered with the Final Value when run from vscode)\r\n\r\n> Note: In our actual codebase (private), we are seeing this error at different instances e.g. component getting updated due to `setState` call in `useLayoutEffect` etc.\r\n\r\n## The current behavior\r\n\r\nSeeing errors in development build.\r\n\r\n![image](https://user-images.githubusercontent.com/8140606/94962796-e3a39780-04ab-11eb-82d9-b24e4eaa5cc1.png)\r\n\r\n## The expected behavior\r\n\r\nThese errors thrown by useMutableSource should not showup on the UI and not passed to the error boundary as the component is eventually re-rendered with the latest state without any error.",
        "title": "Bug: unstable_useMutableSource throws error when mutated before subscribe",
        "labels": "Type: Bug",
        "id": 45231
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Start polling.\r\n2. Toggle sort direction in application.\r\n3. Stop polling.\r\n4. Click flamegraph bar.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 5823. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45232
    },
    {
        "body": "We noticed that our app would behave differently during profiling runs and trigger errors. I'm not totally sure what the underlying issue is but I was able to put together a example app to reproduce. As far as I can tell it has to do with how devtools is overriding `console.warn` and `console.error`. In that case `describeNativeComponentFrame()` will call a function component with no args. This works fine as the error is caught in `describeNativeComponentFrame()` but in it looks like a `useEffect()` that accesses those `props` is still triggered and it does not expect `props` to be undefined. \r\n\r\nI realize that having `props` in the dependencies array of the `useEffect` doesn't really make sense but I still think it probably shouldn't error.\r\n\r\nReact version: 16.13.1\r\nReact devtools version: 4.8.2 \r\n\r\n## Steps To Reproduce\r\n\r\n1. Open link to code example below\r\n2. Click \"Open In New Window\" from the \"Browser\" tab\r\n3. Observe a simple app with only `<h1>Hello World</h1>`\r\n3. Open the React devtools Profiler tab\r\n4. Click \"Reload and start profiling\"\r\n5. Observe an error `Uncaught TypeError: Cannot read property 'foo' of undefined`\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/cool-sun-wdrry\r\n\r\n## The current behavior\r\n\r\n![wdrry csb app_](https://user-images.githubusercontent.com/682132/94301311-5b1b7900-ff38-11ea-9c5d-335e2e6f35b9.png)\r\n\r\n## The expected behavior\r\n\r\nThe app should work as it while not profile. It should render a `<h1>Hello World</h1>`\r\n",
        "title": "Bug: devtools Profiler causes unexpected errors",
        "labels": "Type: Bug",
        "id": 45233
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. click record in profiler\r\n2. click on a link to go to another page (gatsbyjs)\r\n3. click stop recording in profiler\r\n4. click on any commit in profiler and profiler crashed\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:31701:48\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:26139:18\r\nProfiler_Profiler@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:33363:48\r\nErrorBoundary@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:27172:33\r\nPortaledContent@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:27303:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:30463:18\r\nTreeContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:22538:18\r\nSettingsContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:23040:22\r\nModalDialogContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:28328:18\r\nDevTools_DevTools@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:33797:16",
        "title": "Error: \"Commit tree does not contain fiber 5402. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45234
    },
    {
        "body": "Hi! I was developing a next.js app, then I open the dev tools to see the state of some component, and the react dev tools give this error, after a page refresh all when back to normal, I don't know if this is a bug caused by me or is something related to the dev tools itself, so I prefer to report it, if this my fault I'm very sorry for the trouble!\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nComponent stack: List@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:20924:30\r\ndiv\r\nAutoSizer@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:2786:19\r\ndiv\r\ndiv\r\nTree_Tree@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26368:45\r\ndiv\r\ndiv\r\nInspectedElementContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26848:18\r\nOwnersListContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:25520:18\r\nSettingsModalContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26139:18\r\nComponents_Components@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:30926:50\r\nErrorBoundary@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:27172:33\r\nPortaledContent@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:27303:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:30463:18\r\nTreeContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:22538:18\r\nSettingsContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:23040:22\r\nModalDialogContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:28328:18\r\nDevTools_DevTools@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:33797:16",
        "title": "Error: \"child is undefined\"",
        "labels": "Type: Bug",
        "id": 45235
    },
    {
        "body": "React version: 16.3.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click the button in this Code Sandbox https://codesandbox.io/s/blissful-sun-e0lle?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe wrong error is generated\r\n\r\n## The expected behavior\r\n\r\nAn error should still be generated but the error message should be correct. The problem is that if you do `[Symbol('...')].join(',')` JavaScript will freak out which is what happens if you put symbols incorrectly in the deps to hooks.",
        "title": "Bug: Handling of symbols when used as deps incorrectly to create error message results in an unrelated TypeError: Cannot convert a Symbol value to a string",
        "labels": "Type: Bug",
        "id": 45236
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0-rc.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open https://9sf7d.csb.app/. The issue seems most easily reproducible in iOS Safari, although we were also able to reproduce in Firefox on macOS.\r\n2. Quickly tap or click one checkbox or radio followed by another one.\r\n3. Notice that sometimes the first checkbox is unchecked rather than the second checkbox you tapped on becoming checked. For radios, the first radio stays selected rather than switching to the radio you tapped on.\r\n\r\nLink to code example: https://codesandbox.io/s/optimistic-sound-9sf7d?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThere appears to be some sort of race condition where tapping or clicking on a controlled `<input type=\"checkbox\">` or `<input type=\"radio\">` quickly after clicking on a previous input does not fire `onChange` on the correct element.  As far as I can tell, `onChange` is being fired on the second checkbox rather than the first. It appears to be a timing issue - if you wait long enough between taps, the events are fired on the correct elements. This also appears to only reproduce in React 17.0.0-rc.1, not 17.0.0-rc.0 or React 16 (you can verify by changing the versions in Code Sandbox).\r\n\r\n## The expected behavior\r\n\r\nThe `onChange` event should fire on the correct element, and state should update to check or uncheck the checkbox or radio you tapped, not some other element.\r\n",
        "title": "Bug: React 17.0.0-rc.1 checkboxes and radio groups sometimes fire onChange incorrectly",
        "labels": "Type: Bug",
        "id": 45237
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Clicking back to go back through the frames following a profile session. I think I got to zero and then clicked it again and then it errored\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17661:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31963:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Maximum call stack size exceeded\"",
        "labels": "Type: Bug",
        "id": 45238
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n\r\nI have a large form with multiple checkboxes. I am trying to see the performance of my value change for the checkboxes. When I record my interaction that works but when I click on the performance timeline commits in the extension it fails with the bellow stack\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 13006. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45239
    },
    {
        "body": "This seems to happen when\r\n1. I take a component as a prop\r\n2. I use that component as a JSX constructor in a hook\r\n\r\nMinimal repro:\r\n```jsx\r\nexport const Foo = ({ Component }) => {\r\n  React.useEffect(() => {\r\n    console.log(<Component />);\r\n  }, []);\r\n};\r\n```\r\n\r\n```\r\n    \"eslint-plugin-react-hooks\": \"^4.1.1\",\r\n```\r\n\r\n\r\n---\r\n\r\nInterestingly, this does NOT cause the error:\r\n```jsx\r\nexport const Foo = ({ component }) => {\r\n  React.useEffect(() => {\r\n    const Component = component;\r\n    console.log(<Component />);\r\n  }, []);\r\n};\r\n```",
        "title": "Bug: eslint-plugin-react-hooks \"Cannot read property parent of null\"",
        "labels": "Type: Bug",
        "id": 45240
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a state with a symbol as a key\r\n2. Open React DevTools to view the state\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/awesome-wu-w08px?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nCannot view the symbol in the state\r\n\r\n## The expected behavior\r\nSymbols should be visible in the state from DevTools\r\n",
        "title": "Bug: React DevTools not showing symbols used in state",
        "labels": "Type: Bug",
        "id": 45241
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0-rc.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create elements out of `lazy` components, use them conditionally.\r\n2. Check if the `lazy` components are dynamically imported.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: --\r\n\r\n`main.jsx`:\r\n```jsx\r\nimport React, { lazy, Suspense, useState } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nconst Checked = lazy(() => import('./Checked'));\r\nconst Checked2 = lazy(() => import('./Checked2'));\r\nconst Unchecked = lazy(() => import('./Unchecked'));\r\nconst Unchecked2 = lazy(() => import('./Unchecked2'));\r\n\r\nfunction App() {\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const checkedElement = <Checked />;\r\n  const uncheckedElement = <Unchecked />;\r\n\r\n  return (\r\n    <>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          onChange={e => setChecked(e.target.checked)}\r\n        />\r\n        Toggle me\r\n      </label>\r\n\r\n      <hr />\r\n\r\n      <Suspense fallback=\"loading...\">\r\n        Checked? {checked ? checkedElement : uncheckedElement}\r\n      </Suspense>\r\n\r\n      <hr />\r\n\r\n      <Suspense fallback=\"loading...\">\r\n        Checked? {checked ? <Checked2 /> : <Unchecked2 />}\r\n      </Suspense>\r\n    </>\r\n  );\r\n}\r\n\r\nrender(<App />, document.getElementById('app'));\r\n```\r\n`Checked.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Checked';\r\n}\r\n```\r\n`Checked2.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Checked 2';\r\n}\r\n```\r\n`Unchecked.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Unchecked';\r\n}\r\n```\r\n`Unchecked2.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Unchecked 2';\r\n}\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe `Checked.jsx` chunk is imported eagerly, even though the component isn't immediately rendered.\r\n![image](https://user-images.githubusercontent.com/567105/91972475-b039e580-ed12-11ea-96a4-8c7dc6ee5388.png)\r\n\r\nThis doesn't happen in prod mode, or with React 16, or with components that are not `createElement`-ed eagerly.\r\n\r\nThis affects react-router, as it uses this pattern:\r\n```jsx\r\n<Router>\r\n  <Suspense fallback={<Loading />}>\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Home />\r\n      </Route>\r\n      <Route exact path=\"/demo\">\r\n        <Demo />\r\n      </Route>\r\n      <Route>\r\n        <NotFound />\r\n      </Route>\r\n    </Switch>\r\n  </Suspense>\r\n</Router>\r\n```\r\n\r\nAFAICT it doesn't break anything, but it is unexpected/confusing.\r\n\r\n## The expected behavior\r\n`lazy` components that are not rendered should not be dynamically imported.",
        "title": "Bug: (17.0.0-rc.1) lazy is eager in dev mode",
        "labels": "Type: Bug",
        "id": 45242
    },
    {
        "body": "```js\r\nfunction foo*() {\r\n  yield 1;\r\n  yield 2;\r\n}\r\n\r\nlet gen = foo()\r\n```\r\n\r\nCurrently if you put `gen` into state or props and then open this component in DevTools, it will consume that generator while trying to format it. So `gen.next()` will give you `{ done: true }` next time you call it.\r\n\r\nThis happens here:\r\n\r\nhttps://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L616-L623\r\n\r\nI think that maybe we should treat iterables differently if they *return themselves* as an iterator. Since that means they're likely stateful and it's not ok to iterate over them.\r\n\r\nWe detect iterables here (DevTools terminology is wrong btw, it should be `iterable` rather than `iterator`):\r\n\r\nhttps://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L438-L439\r\n\r\nI think maybe we could split this into `iterable` and `opaque_iterable`, and make sure none of the codepaths attempt to traverse `opaque_iterable` or pass it to something that would consume it (e.g. `Array.from`).\r\n\r\nWe could detect it based on `data[Symbol.iterator]() === data` \u2014 that clearly signals the iterable is its own iterator (which is the case for generators), and therefore it's not OK for DevTools to consume it.\r\n\r\nMaybe some other heuristic could work. But overall, the goal is that `Map` and friends is still being iterated over, but an arbitrary generator is not.",
        "title": "Bug: DevTools calls arbitrary generators which may be stateful",
        "labels": "Type: Bug",
        "id": 45243
    },
    {
        "body": "A `<Context.Consumer>` callback inside a suspended `<Suspense>` boundary does not receive updates when context value changes.\r\n\r\nThis issue was originally found with React Router (https://github.com/ReactTraining/react-router/issues/7137) but can be reproduced with React alone.\r\n\r\nReact version: 16.13.1 or 17.0.0-rc.0 (and at least *some* earlier versions too)\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/suspense-context-test-case-6jlsq\r\n\r\n## The current behavior\r\n\r\nIn the example above, clicking on the \"About\" button puts the `<Suspense>` boundary into a suspended state. Clicking \"Home\" updates the context value, but the `<Context.Consumer>` callback is not called with this updated value. Therefore the page never navigates back to \"Home\".\r\n\r\nPlease note that `Received context: home` is not logged after the \"Home\" button is pressed.\r\n\r\n## The expected behavior\r\n\r\nThe `<Context.Consumer>` callback should be called with value `'home'` when the value of the context is updated.\r\n\r\nPlease note that the problem does not occur if any of:\r\n\r\n1. the Suspense boundary is never suspended (uncomment the first line of `About` function to verify).\r\n2. `useContext()` is used in place of `<Context.Consumer>` (substitute `<SwitchWithUseContext />` for `<Switch />`).\r\n3. the contents of `Switch` function is inlined within the `<Suspense>` rather than in a separate component.\r\n\r\nThe last of these leads me to suspect that the problem may be related to https://github.com/facebook/react/issues/17356. In the example, `<Context.Consumer>` is within a `Switch` component. But the `<Switch>` element inside `<Suspense>` never changes - so it's effectively memoized. I wonder if this is why it doesn't receive context updates?",
        "title": "Bug: `Context.Consumer` inside `Suspense` does not receive context updates while suspended",
        "labels": "Type: Bug",
        "id": 45244
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 1152. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45245
    },
    {
        "body": "https://github.com/facebook/react/blob/49af88991c3a3e79e663e495458fad12d3162894/packages/react-devtools-shared/src/utils.js#L491\r\n\r\nWe have SuspenseList for the tree view but not when printing JSX.\r\n\r\nWhen we fallthrough here we call getDisplayName with a symbol, because we assume that if it's not a string, then it's a function. We should be checking whether it is a function before calling getDisplayName.\r\n\r\nSubsequently if we call getDisplayName with a symbol we get the error `invalid value used as weak map key` which messes up things after that. I think that's the actual cause of https://github.com/facebook/react/pull/19364",
        "title": "Add SuspenseList to DevTools Element Names",
        "labels": "Type: Bug",
        "id": 45246
    },
    {
        "body": "**Packages**\r\n* `\"react\": \"^16.13.1\"`\r\n* `\"eslint-plugin-react-hooks\": \"^4.0.8\"`\r\n\r\nThe issue #18819 still happens with `eslint-plugin-react-hooks@4.0.8`.\r\n\r\nUsing the example code from the other issue gives the following errors:\r\n\r\n![image](https://user-images.githubusercontent.com/37122343/90794940-59d9a980-e305-11ea-9ec0-98f69b41c280.png)\r\n\r\n![image](https://user-images.githubusercontent.com/37122343/90795019-770e7800-e305-11ea-92b8-b64407b0b22c.png)\r\n\r\n",
        "title": "Bug: eslint-plugin-react-hooks optional chaining in deps",
        "labels": "Type: Bug",
        "id": 45247
    },
    {
        "body": "React version: Any\r\nReact Developer Tools: 4.8.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. create and render a Component which contains infinite iterator\r\n\r\n```js\r\nfunction* makeCounter() {\r\n  let c = 0;\r\n  while (true) {\r\n    yield c++;\r\n  }\r\n}\r\nconst counter = makeCounter();\r\n\r\nconst Sample = () => <Component counter={counter} />;\r\n```\r\n\r\n2. open chrome devtools and select this component with React Dev Tools (Components tab)\r\n\r\n3. crashes after few seconds\r\n\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/happy-lake-c1vyf?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe page crashes due to devtools crash.\r\n\r\n## The expected behavior\r\n\r\ndevtools doesn't crash.\r\n\r\nThis is because ReactDevTools is trying to display elements inside iterator object with transforming it into array here: https://github.com/facebook/react/blob/b6e1d086043a801682ff01b00c7a623d529b46c0/packages/react-devtools-shared/src/utils.js#L606\r\n\r\nIterators could be generally infinite (and also have side effect, like counter in the example). So I think it should not be extracted to array here.\r\n",
        "title": "Bug: Infinite iterator in props causes crash in react-dev-tools",
        "labels": "Type: Bug",
        "id": 45248
    },
    {
        "body": "It looks like the property inspector inside React DevTools is not rendering repeating spaces properly.\r\n\r\nI imagine this can result in some fairly frustrating debugging sessions when doing something like string matching \ud83d\ude04 \r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component that takes a string as a property.\r\n2. Pass multiple spaces in a row to that property `name={'Testing[3 spaces]One Two'}` (I would type the actual spaces, but it appears Github truncates the extra spaces even inside the code snippet!)\r\n3. Inspect that element inside React DevTools.\r\n\r\n## The current behavior\r\n\r\nThe value of the prop `name` is rendered as `Testing One Two`\r\n\r\n## The expected behavior\r\n\r\nThe value of the prop `name` should be rendered as `Testing[3 spaces]One Two`\r\n\r\n---\r\n\r\nBelow are some screenshots of the behavior I'm seeing in production. Here's how the property value is rendered in inspector when it is output directly to the HTML:\r\n\r\n![image](https://user-images.githubusercontent.com/424093/90543915-57841d80-e154-11ea-9151-6b9bd79b4c93.png)\r\n\r\nAnd here is how that same value is rendered inside DevTools:\r\n\r\n![image](https://user-images.githubusercontent.com/424093/90543947-636fdf80-e154-11ea-849b-77fea6cd0c5a.png)\r\n",
        "title": "Bug: Property list does not render repeated spaces properly.",
        "labels": "Type: Bug",
        "id": 45249
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. recorded profiling results\r\n2. browsing results by paging to the right\r\n3. crash\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17854:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree does not contain fiber 2094. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45250
    },
    {
        "body": "<!--\r\nIn the react devtools window, clicking the troubleshooting instructions link opens 2 tabs of the troubleshooting page, instead of once\r\n-->\r\n\r\nReact version: Devtools 4.8.2\r\nFirefox version: 79.0 64-bit\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to a non-react page\r\n2. Open the devtools box\r\n3. Click troubleshooting instructions\r\n\r\n## The current behavior\r\nOpens 2 tabs of the github page\r\n## The expected behavior\r\nShould open 1 tab of the github page",
        "title": "Bug: Clicking the troubleshooting instructions button on the devtools opens 2 tabs",
        "labels": "Type: Bug",
        "id": 45251
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0-rc.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the codesandbox demo link below.\r\n2. Click on the `root` and `portal` divs, check the logs.\r\n3. Uncomment the `portal` div's `onClickCapture` noop handler, check the logs again.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/determined-montalcini-vjrgc?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nClicking on the `portal` div logs `\"portal click\"` only.\r\nAdding an `onClickCapture` noop handler on the `portal` div \"fixes\" the root's `onClickCapture` handler.\r\nYou might have to refresh the page between edits, otherwise the root's `onClickCapture` handler might keep working even after removing the portal's `onClickCapture` handler.\r\n\r\n## The expected behavior\r\nClicking on the `portal` div should trigger the root's `onClickCapture` handler, whether the portal div has an `onClickCapture` handler or not.",
        "title": "Bug: (17.0.0-rc.0) Event propagation through portals is inconsistent",
        "labels": "Type: Bug",
        "id": 45252
    },
    {
        "body": "I was just recording through the profiler in react-dev-tools. I started the recording and stopped it.\r\nI clicked on the arrow, select next commit and after 4-5 simultaneous clicks and got this issue. \r\nThe image is attached below for your reference. \r\n\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:20115:11)\r\n    at CommitRankedAutoSizer (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:34423:33)\r\n    at Hh (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:12807:7)\r\n    at qi (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:13457:7)\r\n    at mk (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:16074:86)\r\n    at lk (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:15459:11)\r\n    at kk (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:15451:23)\r\n    at ck (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:34406:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://gpphkfbcpidddadnkolkpfckpihlkkil/build/main.js:36207:3)\r\n\r\n![image](https://user-images.githubusercontent.com/38343658/111901979-14c75280-8a61-11eb-8ec5-2e7f582ab5e0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/38343658/111902105-afc02c80-8a61-11eb-80ee-61437855da47.png)\r\n",
        "title": "Error: \"Commit tree already contains fiber 1. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45253
    },
    {
        "body": "I mostly use the \"dark\" theme which these badges looked good in. The \"light\" theme is broken though. No contrast.",
        "title": "Bug: DevTools built-in hook number badges are broken for \"light\" theme",
        "labels": "Type: Bug",
        "id": 45254
    },
    {
        "body": "I recently updated DevTools to use the new, experimental `getCacheForType` API (#20548) which works well for the browser and standalone extension versions, because they bundle their own version of React (the experimental release). This has left the `react-devtools-inline` package (used by e.g. Code Sandbox) in an unreleasable state though until the new Suspense APIs are released as stable.\r\n\r\nPerhaps I could go back to the last commit prior to #20548 and do one final release, but then I will be blocked.",
        "title": "react-devtools-inline package now has react@experimental dependency",
        "labels": "Type: Bug",
        "id": 45255
    },
    {
        "body": "The example below is extracted from the app with a spreadsheet-like UI, where cells become editable upon focus (can be achieved either by tabbing into the cells or clicking). The text in such cell immediately becomes selected.\r\n\r\nThe bug occurs only in IE11, as the user navigates from one such cell to another by clicking.\r\nLikely related to https://github.com/facebook/react/pull/19664.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Clone https://github.com/Dremora/react-i11-input-focus-bug\r\n2. Install dependencies (`yarn`) and start the app (`yarn start`)\r\n3. Open http://localhost:3000 in IE11\r\n4. Click on the text saying `hello`\r\n5. Click on the text saying `world`\r\n\r\nLink to code example: https://github.com/Dremora/react-i11-input-focus-bug/blob/master/src/App.js\r\n\r\n## The current behavior\r\n`Unspecified error` gets logged to the console, followed a few other errors, one of them being `Should not already be working` error. As this is a React internals error, application stops working. Nothing gets thrown in the user-land code.\r\n\r\n## The expected behavior\r\n`world` text gets selected.",
        "title": "Bug: performing input.select() in IE11 throws a React error",
        "labels": "Type: Bug",
        "id": 45256
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Record a profile\r\n2. Click on one of the stack frames\r\n3. The error came up\r\n\r\nI'll struggle to reproduce as the first time I did a profile against the same site this didn't happen and the code is not publishable\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19605:9)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n    at Uj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15142:118)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 7\"",
        "labels": "Type: Bug",
        "id": 45257
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.14.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a test file in a react project, and paste the following code.\r\n2. Run the test\r\n3. The test for onMouseLeave event fails.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n```javascript\r\nimport { act } from \"react-dom/test-utils\";\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Counter = () => {\r\n  const increaseCount = () => {\r\n    setCount((prev) => prev + 1);\r\n  };\r\n  const [count, setCount] = useState(0);\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button\r\n        disabled\r\n        onClick={increaseCount}\r\n        onMouseEnter={increaseCount}\r\n        onMouseLeave={increaseCount}\r\n      >\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\ndescribe(\"button with react test-utils\", () => {\r\n  let container;\r\n\r\n  beforeEach(() => {\r\n    container = document.createElement(\"div\");\r\n    document.body.appendChild(container);\r\n  });\r\n\r\n  afterEach(() => {\r\n    document.body.removeChild(container);\r\n    container = null;\r\n  });\r\n\r\n  it(\"should not trigger onClick when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n  it(\"should not trigger onMouseEnter when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"mouseover\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n  it(\"should not trigger onMouseLeave when button is disabled\", () => {\r\n    act(() => {\r\n      ReactDOM.render(<Counter />, container);\r\n    });\r\n    const button = container.querySelector(\"button\");\r\n    const label = container.querySelector(\"p\");\r\n\r\n    act(() => {\r\n      button.dispatchEvent(new MouseEvent(\"mouseout\", { bubbles: true }));\r\n    });\r\n\r\n    expect(label.textContent).toBe(\"You clicked 0 times\");\r\n  });\r\n});\r\n\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n\r\n## The current behavior\r\n<img width=\"664\" alt=\"Screenshot 2021-03-09 at 21 45 13\" src=\"https://user-images.githubusercontent.com/2574511/110506309-c9d44380-8120-11eb-9164-ce2ae7316889.png\">\r\n\r\n\r\n## The expected behavior\r\nAll tests should pass",
        "title": "Bug: React test triggers mouseout event for disabled button",
        "labels": "Type: Bug",
        "id": 45258
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\nTL;DR: Fixed with `skipUnmountedBoundaries = true`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Throw in an effect cleanup \r\n2. Try to catch it when wrapped in `act()`\r\n\r\nLink to code example:\r\n[React 16](https://codesandbox.io/s/react-16-throw-in-effect-destory-kdeij)\r\n[React 17](https://codesandbox.io/s/react-17-throw-in-effect-destory-forked-5n864)\r\n\r\nI also tested it locally and jest and couldn't catch the error as well.\r\n\r\n## The current behavior\r\n\r\nThe error is uncatchable and does not include the component stack (\"The above error occurred\").\r\n\r\n## The expected behavior\r\n\r\nThe error is catchable and does include the component stack i.e. React 16 behavior.\r\n\r\n## Context\r\n\r\nI understand that the cleanup is now async but it's still flushed in `act()` so I would expect that an error thrown is catchable.\r\n\r\nOriginally reported in https://github.com/testing-library/react-testing-library/issues/874\r\n",
        "title": "Bug: error in effect cleanup function no longer catchable",
        "labels": "Type: Bug",
        "id": 45259
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. pressed record\r\n2. did action in my react app\r\n3. stopped recording\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19702:53)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45260
    },
    {
        "body": "https://codesandbox.io/s/nostalgic-frost-53gys?file=/src/App.js\r\n\r\n```js\r\nimport * as React from \"react\";\r\n\r\nfunction S(props) {\r\n  return <React.Suspense {...props} />;\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <React.unstable_SuspenseList revealOrder=\"forwards\">\r\n      <S fallback={null}>\r\n        <Bad />\r\n      </S>\r\n      <S fallback={null}>\r\n        <h1>wow</h1>\r\n      </S>\r\n    </React.unstable_SuspenseList>\r\n  );\r\n}\r\n\r\nfunction Bad() {\r\n  const [c, setC] = React.useState(0);\r\n  read(c);\r\n  const r = React.useRef(true);\r\n  React.useEffect(() => {\r\n    if (r.current) {\r\n      r.current = false;\r\n      setC((x) => x + 1);\r\n    }\r\n  }, [c]);\r\n  return <h2>wow</h2>;\r\n}\r\n\r\nconst cache = {};\r\nfunction read(i) {\r\n  if (cache[i]) {\r\n    if (cache[i].result) {\r\n      return cache[i].result;\r\n    } else {\r\n      throw cache[i].promise;\r\n    }\r\n  }\r\n  cache[i] = {\r\n    promise: new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        cache[i].result = \"foo\";\r\n        resolve();\r\n      }, 1000);\r\n    })\r\n  };\r\n  throw cache[i].promise;\r\n}\r\n```",
        "title": "Bug: SuspenseList crash",
        "labels": "Type: Bug",
        "id": 45261
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19702:53)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45262
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21226:35)\r\n    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21242:26)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28678:63\r\n    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22934:18)\r\n    at vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13515:76)\r\n    at ui (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13506:10)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16077:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22629:30)\r\n    at div\r\n    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3003:5)\r\n    at div\r\n    at div\r\n    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28429:47)\r\n    at div\r\n    at div\r\n    at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28921:3)\r\n    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27558:3)\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33383:52)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Cannot read property 'isCollapsed' of undefined\"",
        "labels": "Type: Bug",
        "id": 45263
    },
    {
        "body": "If you use CSS to set the height of the react app container to 100% (and the other containing containers as well), then you will get the error \"Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering\" outputted to your developer console after you continue from a breakpoint.\r\n\r\nI've got a very simple testcase. This is the create-react-app example, with only the following CSS added:\r\n\r\nhtml {\r\n  height: 100%;\r\n}\r\n\r\n#root {\r\n height: 100%;\r\n}\r\n\r\n.App {\r\n  height: 100%;\r\n}\r\n\r\nReact version: 17.0.1\r\nReact DOM version: 17.0.1\r\n\r\nRepros in Chrome (89.0.4389.72) and Edge (88.0.705.81)\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. download and unzip [hello-world.zip](https://github.com/facebook/react/files/6072375/hello-world.zip) (or create a new app from scratch and add the above CSS to index.css)\r\n2. in the folder created above, run \"npm install\"\r\n3. run \"npm start\"\r\n4. Open a web browser to the specified location serving the page.\r\n5. Open developer tools, and set a breakpoint somewhere inside of app.js (you can alternatively add a \"debugger\" statement inside of your app.js)\r\n![image](https://user-images.githubusercontent.com/1451620/109728370-0aade480-7b84-11eb-8f6c-ad7ca3c4a4bf.png)\r\n6. restart the browser, and after hitting the breakpoint, hit continue\r\n7. Check the console and observe the error output.\r\n![image](https://user-images.githubusercontent.com/1451620/109728430-24e7c280-7b84-11eb-92e7-97a170a575d9.png)\r\n\r\nThere are no dependencies other than react for this repro.\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n[hello-world.zip](https://github.com/facebook/react/files/6072375/hello-world.zip)\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nConsole outputs error whenever a breakpoint is hit, only when CSS has app container sized at 100%\r\n\r\n## The expected behavior\r\nConsole should not output error noise regardless of sizing of app container",
        "title": "Bug: \"Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering\" after hitting breakpoint if container height 100%",
        "labels": "Type: Bug",
        "id": 45264
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 1345. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45265
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\nReact DevTools version: 4.10.1-3a8c04e3b2\r\n\r\n## Steps To Reproduce\r\n\r\n1. `npx react-native init MyApp --template react-native-template-typescript`\r\n2. set `enableHermes: true` in `android/app/build.gradle`\r\n3. start Metro bundler via `yarn start`\r\n4. launch app in Android emulator via `yarn android`\r\n5. launch React DevTools\r\n6. reload Metro bundler\r\n7. click on any element in the React DevTools components view\r\n8. right React DevTools panel is stuck on \"Loading...\" and Metro bundler logs `ERROR [TypeError: undefined is not a function]`:\r\n<img width=\"297\" alt=\"Screen Shot 2021-02-25 at 5 56 13 PM\" src=\"https://user-images.githubusercontent.com/440230/109231116-f76dd400-7793-11eb-8b7c-4c40a7eaee3a.png\">\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://github.com/helixbass/HermesDevToolsIssueExample\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nReact DevTools fails to load element props, styles etc\r\n\r\n\r\n## The expected behavior\r\n\r\nReact DevTools should load element props, styles etc\r\n",
        "title": "Bug: React DevTools fails when using React Native + Hermes",
        "labels": "Type: Bug",
        "id": 45266
    },
    {
        "body": "This works fine in Chrome React DevTools, only an issue in the Firefox flavor.\r\n\r\nReact version: N/A\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use the React DevTools in Firefox\r\n2. With the Components inspector open, press e.g. CMD-+ or CMD-- to increase/decrease the UI font size\r\n\r\n## The current behavior\r\nThe rest of the debugger UI reacts (heh) to the change in font size, but the React DevTools font remains tiny. This is a critical accessibility issue -- I have a visual disability and this makes the DevTools extremely hard to use.\r\n\r\n![image](https://user-images.githubusercontent.com/10970257/109089753-9926ef80-76c6-11eb-9f1d-b308f4313abb.png)\r\n\r\n\r\n## The expected behavior\r\nThe React DevTools UI also changes font size.",
        "title": "Bug: React DevTools in Firefox doesn't respect UI font size",
        "labels": "Type: Bug",
        "id": 45267
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 30168. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45268
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Went to profiler tab\r\n2. Record profiler\r\n3. Stop record and got this error\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 158. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45269
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1.  Error occured when clicking on the bar graph that shows which process took how much time (flamegraph).\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 18485. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45270
    },
    {
        "body": "I have a `button` that triggers `scrollIntoView` for a node when clicked. It also updates some state which subsequently disables that button in certain cases. If the button becomes disabled, the `scrollIntoView` execution is exited.\r\n\r\nThis seems to only happen in Chrome/Brave.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\nSee steps to reproduce in sandbox.\r\n\r\nhttps://codesandbox.io/s/goofy-curie-yts68?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nDescribed above.\r\n\r\n## The expected behavior\r\n\r\nThe state update should not prevent `scrollIntoView`.\r\n",
        "title": "Bug: Disabled button state update prevents `scrollIntoView`",
        "labels": "Type: Bug",
        "id": 45271
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. On initializing dev tools for react components\r\n\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nComponent stack: List@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:22629:30\r\ndiv\r\nAutoSizer@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:3003:19\r\ndiv\r\ndiv\r\nTree_Tree@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28429:47\r\ndiv\r\ndiv\r\nInspectedElementContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28920:43\r\nOwnersListContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:27557:37\r\nSettingsModalContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28205:40\r\nComponents_Components@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:33383:52\r\nErrorBoundary_ErrorBoundary@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29219:5\r\nPortaledContent@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29336:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:32933:35\r\nTreeContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24321:31\r\nSettingsContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24810:35\r\nModalDialogContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29403:38\r\nDevTools_DevTools@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:36206:27",
        "title": "Error: \"can't access property \"isCollapsed\", child is undefined\"",
        "labels": "Type: Bug",
        "id": 45272
    },
    {
        "body": "Importing a profile recorded with Chrome Canary (v90) triggers this error check code:\r\nhttps://github.com/facebook/react/blob/6c526c5153bc350d2a62c7dcbc698be77d3f2439/packages/react-devtools-scheduling-profiler/src/import-worker/preprocessData.js#L371-L378\r\n\r\nHere's one such example event:\r\n```json\r\n{\r\n  \"args\": {},\r\n  \"cat\": \"blink.user_timing\",\r\n  \"name\": \"requestStart\",\r\n  \"ph\": \"I\",\r\n  \"pid\": 64032,\r\n  \"s\": \"t\",\r\n  \"tid\": 775,\r\n  \"ts\": 25788659448\r\n}\r\n```\r\n\r\nLooks like there's at least one new type, \"I\", which I assume will eventually affect Chrome stable (currently v88).",
        "title": "Scheduling profiler: Unrecognized event type from Chrome Canary",
        "labels": "Type: Bug",
        "id": 45273
    },
    {
        "body": "React version: 17.0.1\r\n\r\n### Steps To Reproduce\r\nSetup eslint with @typescript-eslint/parser as parser\r\nCast a function passed to `useEffect`\r\n\r\n```\r\nimport {useCallback, useEffect} from 'react';\r\n\r\ntype F = (...args: unknown[]) => void;\r\n\r\nfunction MyComp() {\r\n\tconst foo = useCallback(() => {}, []);\r\n\r\n\t// OK\r\n\tuseEffect(() => {\r\n\t\tfoo();\r\n\t}, [foo]);\r\n\r\n\t// WARNS?\r\n\tuseEffect((() => {\r\n\t\tfoo();\r\n\t}) as F, [foo]);\r\n\r\n\treturn 'Hello, world'\r\n}\r\n```\r\n\r\nLink to code example: https://github.com/0x24a537r9/exhaustive-deps-bug\r\n\r\n### The current behavior\r\nThe following error was reported\r\n\r\n```\r\n  14:2  warning  React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead  \r\n```\r\n\r\n### The expected behavior\r\nThe rule should interpret the function argument correctly and know that it is already inline.",
        "title": "Bug: react-hooks/exhaustive-deps false positive when function is casted with TypeScript",
        "labels": "Type: Bug",
        "id": 45274
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Recorded a profiling session\r\n2. Navigated forward between commits 3x\r\n3. Crash\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 14651. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45275
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Using profiler tool\r\n2. Code splitting\r\n3.  using useMemo\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 4221. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45276
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open profler tab and click record button, do some action in web app\r\n2. Stop the recording\r\n3. Select a bar from the bar chart showing commits\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 3098. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45277
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:v17.0.1\r\n\r\n## Steps To Reproduce\r\nThere maybe be a bug in following method\r\n```\r\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\r\n  const hook = updateWorkInProgressHook();\r\n  const nextDeps = deps === undefined ? null : deps;\r\n  let destroy = undefined;\r\n\r\n  if (currentHook !== null) {\r\n    const prevEffect = currentHook.memoizedState;\r\n    destroy = prevEffect.destroy;\r\n    if (nextDeps !== null) {\r\n      const prevDeps = prevEffect.deps;\r\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\r\n        pushEffect(hookFlags, create, destroy, nextDeps);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  currentlyRenderingFiber.flags |= fiberFlags;\r\n\r\n  hook.memoizedState = pushEffect(\r\n    HookHasEffect | hookFlags,\r\n    create,\r\n    destroy,\r\n    nextDeps,\r\n  );\r\n}\r\n```\r\nLink to the source code: [https://github.com/facebook/react/blob/e316f785526e503eceed1ae33b7a06440084b9c9/packages/react-reconciler/src/ReactFiberHooks.new.js#L1320](https://github.com/facebook/react/blob/e316f785526e503eceed1ae33b7a06440084b9c9/packages/react-reconciler/src/ReactFiberHooks.new.js#L1320)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://codesandbox.io/s/reacthooks-fkihz?file=/src/MaybeABug.js](https://codesandbox.io/s/reacthooks-fkihz?file=/src/MaybeABug.js)\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe first time click the button, it will not print the \"effect\" \r\nBut the second click will print the \"effect\" \r\nthe third will not, the fourth will be and so on\r\n\r\n## The expected behavior\r\nMaybe should always print nothing!\r\n\r\n## Remarks\r\nThe reason for this phenomenon is when component entering re-render phase, the effect object is a big different in updateQueue and Hook object. But i think should be consistent\u3002\r\n\r\nIn fact, i am not sure if it is a bug, so I look forward to receiving a reply, thanks",
        "title": "Bug: FunctionComponent re-render phase cause a bug",
        "labels": "Type: Bug",
        "id": 45278
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Launched profiler\r\n2. Was walking through steps\r\n3. On the step a component should be rendered for the first time - this error\r\n\r\nThe problem seems to be with huge keys for components in a list (in my case a filename as a key was replaced by url by mistake)\r\nAlso got \"Uncaught Error: Commit tree does not contain fiber xxx. This is a bug in React DevTools.\" sometimes for the same reason.\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at utfDecodeString (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:352:17)\r\n    at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19646:64)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Maximum call stack size exceeded\"",
        "labels": "Type: Bug",
        "id": 45279
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 1. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45280
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 3419. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45281
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. clone repo: https://github.com/avkonst/react-devtools-crash-demo\r\n2. yarn start\r\n3. open the browser of the started app\r\n4. open devtools\r\n5. click Counter component in the components tab of the development tools\r\n6. Watch it not loading anything and unhandled exception dumped to the console log\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/avkonst/react-devtools-crash-demo\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nDevtools crash when I click on the following component in the development tools:\r\n\r\n```tsx\r\nimport React from 'react';\r\n\r\nfunction useState() {\r\n    React.useState(0);\r\n    React.useEffect(() => () => {});\r\n}\r\n\r\nfunction Counter() {\r\n\tuseState();\r\n\tReact.useState(0);\r\n\treturn <div>Open React Dev Tools Components panel,\r\n\t\tclick on Counter component and\r\n\t\tobserve the crash in the logging console.</div>;\r\n}\r\n\r\nexport default Counter;\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo crash and the development tools show hooks used.\r\n",
        "title": "Bug: devtools may crash when custom hook has the name \"useState\"",
        "labels": "Type: Bug",
        "id": 45282
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19605:9)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n    at Wj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15047:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 4\"",
        "labels": "Type: Bug",
        "id": 45283
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Started the profiler\r\n2. Navigated to a different page\r\n3. \"Maximum update depth exceeded\" (bug in my code)\r\n4. Stopped the profiler\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:34144:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:28205:40\r\nProfiler_Profiler@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:35772:50\r\nErrorBoundary_ErrorBoundary@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:29219:5\r\nPortaledContent@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:29336:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:32933:35\r\nTreeContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:24321:31\r\nSettingsContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:24810:35\r\nModalDialogContextController@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:29403:38\r\nDevTools_DevTools@moz-extension://fec50d2c-deab-43b0-a284-f3b1ab9cc94f/build/main.js:36206:27",
        "title": "Error: \"Commit tree does not contain fiber 2672. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45284
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Look at profiler\r\n2. click right once\r\n3. click left twice\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 432. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45285
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I was trying to stop re-renders of my react project.\r\n2. This error occurred when I was checking `Commit information` for a component.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 140. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45286
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 19196. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45287
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: v16/v17\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/empty-css-value-jmbfl?file=/src/App.js\r\n2. Notice the \"should be black border\" has a pink border\r\n3. Dangerously setting inner HTML works because it doesn't go through reacts `trim()` flow\r\n4. I've tracked the suspect code to here https://github.com/facebook/react/blob/6cbb9394d1474e3a728b49dc7f3a11d61a421ce3/packages/react-dom/src/shared/dangerousStyleValue.js#L44\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/empty-css-value-jmbfl?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nCSS variables have their value trimmed - resulting in `' '` become `''` which then removes the CSS variable from the browser.\r\n\r\n![image](https://user-images.githubusercontent.com/6801309/102850783-52bad780-446e-11eb-8cd3-222061febb48.png)\r\n\r\n## The expected behavior\r\n\r\nThe `' '` value should not be trimmed.\r\n\r\n![image](https://user-images.githubusercontent.com/6801309/102850909-944b8280-446e-11eb-9a88-9660469faf3e.png)\r\n\r\nOne potential option is to, for any custom properties that have a space value, don't trim.\r\n\r\n```js\r\nif (isCustomProperty && value === ' ') {\r\n   return value;\r\n}\r\n\r\nreturn ('' + value).trim();\r\n```\r\n\r\nI'm happy to do the bug fix. I would also love for this to get released on v16.\r\n\r\n---\r\n\r\nFound a work around:\r\n\r\nhttps://codesandbox.io/s/empty-css-value-forked-g5jud?file=/src/App.js\r\n\r\n```js\r\nstyle={{ \"--border-color\": \"var(--, )\" }}\r\n```",
        "title": "Bug: CSS variables can't be a space character",
        "labels": "Type: Bug",
        "id": 45288
    },
    {
        "body": "I created the simplest *Hello, World!* React application that I can think of. I used CRA. The source code is here:\r\n\r\nhttps://github.com/baharev/ie11bug.git\r\n\r\nThe deployed application is here:\r\n\r\nhttps://www.baharev.info/sandbox/ie11bug/index.html\r\n\r\nThe deployed application is what you see in the git repo with React 16.14.0, and that fails in IE11.\r\n\r\nYou see **Hello, World!** if the page is successfully loaded. It works fine in Firefox, Chrome, Edge, etc. but fails to load in IE11.\r\n\r\nReact fails to load, and in the dom explorer I see `<div id=\"root\"></div>`. In the Console I get:\r\n\r\n```\r\nSCRIPT5022: Minified React error #31; visit https://reactjs.org/docs/error-decoder.html?invariant=31&args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%2C%20_owner%7D&args[]= for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\r\n2.72241442.chunk.js (2,239441)\r\n```\r\nwhich is:\r\n\r\n> The full text of the error you just encountered is:\r\n> Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner}). If you meant to render a collection of children, use an array instead.\r\n\r\n**Note that the very same code works just fine in IE11 with React 16.13.1 and only breaks with 16.14.0 and above.** It also fails with 17.0.1.\r\n\r\nAny help is greatly appreciated.\r\n",
        "title": "Bug: The initial page load fails in IE11 with React 16.14 and above",
        "labels": "Type: Bug",
        "id": 45289
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 119. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45290
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Profiling [recharts library](https://recharts.org/en-US/api/LineChart)\r\n2. Filtered on commits greater than 3s \r\n3. Walking through the commits doing a next > next \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)\r\n    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree does not contain fiber 5766. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45291
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.1-f160547f47\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",
        "title": "Error: \"Commit tree already contains fiber 1719. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45292
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. https://codesandbox.io/s/react-refresh-webpack-plugin-rendered-more-hooks-than-during-the-previous-render-issue-ezcrz?file=/src/Comp.js\r\n2. Delete one of the hooks there\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/react-refresh-webpack-plugin-rendered-more-hooks-than-during-the-previous-render-issue-ezcrz?file=/src/Comp.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nYou get \"Rendered more hooks than during the previous render\" error\r\n\r\n\r\n## The expected behavior\r\nShould hot reload and re-mount the component.\r\n\r\nThe source of the issue have two parts:\r\n1. react-refresh and the bundler fails to inject signature to the component\r\n2. When no signature apparent, `react-refresh` consider the components as compatible, which is not always true, as in the repro https://github.com/facebook/react/blob/9aca239f11f31109dc1a229aa1571c2bf02f5524/packages/react-refresh/src/ReactFreshRuntime.js#L126-L132\r\n\r\nI've filed an issue also for the webpack plugin: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/266\r\nMobx related issue: https://github.com/mobxjs/mobx/issues/2668",
        "title": "Bug: MobX-like observer pattern doesn't work with Fast Refresh because Hooks don't get detected",
        "labels": "Type: Bug",
        "id": 45293
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1.  Use type generics in a useEffect.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCode example:\r\n```TypeScript\r\nfunction useBug<T>(): void {\r\n  useEffect(() => {\r\n    let bug: T;\r\n  }, []); // <-- ESLint error: React Hook useEffect has a missing dependency: 'T'.\r\n\r\n}\r\n```\r\n\r\n## The current behavior\r\nDependency array throws ESLint error.\r\n\r\n```\r\nReact Hook useEffect has a missing dependency: 'T'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\nNo missing dependencies reported.\r\n",
        "title": "Bug: react-hooks/exhaustive-deps false positive on TypeScript generic type variable",
        "labels": "Type: Bug",
        "id": 45294
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:9)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20104:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34150:33)\r\n    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)\r\n    at ni (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13448:7)\r\n    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16065:86)\r\n    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)\r\n    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)\r\n    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)\r\n    at Tj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15038:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 12\"",
        "labels": "Type: Bug",
        "id": 45295
    },
    {
        "body": "eslint-plugin-react-hooks version: 4.2.0\r\n\r\n## Steps To Reproduce\r\n\r\nI know it shouldn't exist in production code, but it's annoying while editing some files.\r\n\r\n```js\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst App = () => {\r\n  useEffect(); // <-\r\n  return null;\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/polished-sun-3wr27?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nESLint crashed.\r\n\r\n```\r\nTypeError: Cannot read property 'type' of undefined\r\n```\r\n\r\n## The expected behavior\r\n\r\nESLint doesn't crash but reports an error instead.",
        "title": "[eslint-plugin-react-hooks] Bug: ESLint crashes if there's a `useEffect` / `useLayoutEffect` invocation without any arguments.",
        "labels": "Type: Bug",
        "id": 45296
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1.  Ran Profiler\r\n2.  Clicked on Rank\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20039:13\r\n    at Map.forEach (<anonymous>)\r\n    at RankedChartBuilder_getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20035:24)\r\n    at ProfilingCache_ProfilingCache.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20157:11)\r\n    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34416:32)\r\n    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)\r\n    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16003:11)\r\n    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)\r\n    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)\r\n    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34395:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"Could not find node with id \"7348\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45297
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:34133:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:28194:1\r\nProfiler_Profiler@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:35761:50\r\nErrorBoundary_ErrorBoundary@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:29208:5\r\nPortaledContent@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:29325:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:32922:1\r\nTreeContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:24310:1\r\nSettingsContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:24799:1\r\nModalDialogContextController@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:29392:1\r\nDevTools_DevTools@moz-extension://6d279fb6-5484-4bfe-af1b-7776429d75f6/build/main.js:36195:1",
        "title": "Error: \"Commit tree does not contain fiber 13861. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45298
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Navigate between my routes when the record is turned on\r\n2. Get this bug\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19718:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19563:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20104:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34150:33)\r\n    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)\r\n    at ni (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13448:7)\r\n    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16065:86)\r\n    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)\r\n    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)\r\n    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"Commit tree does not contain fiber 1069. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45299
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Monitoring page load with ReactDevTool Profiler\r\n2. Stopped the recording \r\n3. Selected a render phase in the FlameGraph\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.10.0-11a2ae3a0d\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19650:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19583:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19576:32)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",
        "title": "Error: \"Commit tree already contains fiber 960. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45300
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nThere's currently a false positive for the `react-hooks/exhaustive-deps` rule as it does not accept `undefined` as dependency. \r\n\r\n```typescript\r\n// Below gives => React Hook useMemo has a missing dependency: 'byId'. Either include it or remove the dependency array.\r\nconst allIds = useMemo(() => Object.keys(byId), undefined)\r\n```\r\n\r\nThis is clearly noticeable together with TypeScript as it does not allow omitting the second `deps` parameter, with the following typings:\r\n```typescript\r\n// allow undefined, but don't make it optional as that is very likely a mistake\r\nfunction useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\r\n```\r\n\r\nNote here that `deps` must be either a `DependencyList` or `undefined`. It is not listed as optional.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install `\"eslint-plugin-react-hooks\": \"^4.1.0\"` and extend it with `'plugin:react-hooks/recommended'`\r\n2. Write a hook that required a dependency list, input `undefined`.\r\n\r\n## The current behavior\r\nGives false positive when given `undefined` for `deps`.\r\n\r\n## The expected behavior\r\nShould allow `deps` to be set to undefined.",
        "title": "Bug: react-hooks/exhaustive-deps false postive when given undefined as deps",
        "labels": "Type: Bug",
        "id": 45301
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nLint doesn't see wrong\r\n\r\n```javascript\r\nimport React, { useCallback } from \"react\";\r\n\r\nexport const Example = () => {\r\n  const oneFn = () => {\r\n    console.log(\"hi from oneFn\");\r\n  };\r\n  const item =\r\n    oneFn ??\r\n    useCallback(() => {\r\n      console.log(\"hi from useCallback\");\r\n    }, []);\r\n  return (\r\n    <div>\r\n      <button onClick={item}>click on me</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n![\u0421\u043d\u0438\u043c\u043e\u043a \u044d\u043a\u0440\u0430\u043d\u0430 2020-11-13 \u0432 09 59 03](https://user-images.githubusercontent.com/36443810/99030498-ff17bd00-2596-11eb-88f8-b24441465acb.png)\r\n\r\n\r\n\r\notherwise everything is fine\r\n\r\n```javascript\r\nimport React, { useCallback } from \"react\";\r\n\r\nexport const Example = () => {\r\n  const oneFn = () => {\r\n    console.log(\"hi from oneFn\");\r\n  };\r\n  const item =\r\n    oneFn ||\r\n    useCallback(() => {\r\n      console.log(\"hi from useCallback\");\r\n    }, []);\r\n  return (\r\n    <div>\r\n      <button onClick={item}>click on me</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n![\u0421\u043d\u0438\u043c\u043e\u043a \u044d\u043a\u0440\u0430\u043d\u0430 2020-11-13 \u0432 09 55 14](https://user-images.githubusercontent.com/36443810/99030426-caa40100-2596-11eb-932f-ec0edd6f46d6.png)\r\n\r\n\r\nReact version: 16.13, 17.0\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/flamboyant-sea-syg8x?file=/src/Example.tsx\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n",
        "title": "eslint-plugin-react-hooks: eslint doesn't see the conditional operator '??'",
        "labels": "Type: Bug",
        "id": 45302
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n```json\r\n\"react\": \"^16.14.0\"\r\n\"eslint-plugin-react-hooks\": \"^4.2.0\",\r\n```\r\n\r\n## Steps To Reproduce\r\n\r\n1. Lint file with contents below\r\n\r\n```js\r\n// useCustomHook.js\r\nimport { useEffect } from 'react';\r\n\r\nexport function useCustomHook(someObject) {\r\n  useEffect(() => {\r\n    }, [\r\n      someObject?.optionalField.method(),\r\n    ]);\r\n}\r\n```\r\n\r\n```js\r\n// .eslint.rc\r\nmodule.exports = {\r\n    root: true,\r\n    env: {\r\n        es6: true,\r\n    },\r\n    parserOptions: {\r\n        ecmaVersion: 2020,\r\n        sourceType: 'module',\r\n        ecmaFeatures: {\r\n            jsx: true,\r\n        },\r\n    },\r\n    settings: {\r\n        react: {\r\n            version: 'detect',\r\n        },\r\n    },\r\n    plugins: ['react-hooks'],\r\n    extends: [\r\n        'plugin:react-hooks/recommended',\r\n    ],\r\n};\r\n```\r\n\r\n## The current behavior\r\nESlint reports error: `Cannot read property 'type' of undefined Occurred while linting <file>`.\r\nhttps://github.com/facebook/react/blob/13a62feab8c39bc0292eb36d636af0bb4f3a78df/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1624-L1625\r\n\r\n## The expected behavior\r\nESlint rule should not crash. According to https://github.com/facebook/react/issues/18819#issuecomment-655151489 optional chaining should be supported.\r\n\r\n\r\nI was testing [an ESLint testing tool](https://github.com/AriPerkkio/eslint-remote-tester) I've been creating and ran into this issue. I can work on a fix for this later if needed. \r\n\r\nHere's the results and log.\r\n\r\n<details>\r\n  <summary>Error result</summary>\r\n\r\n  ## Rule: unable-to-parse-rule-id\r\n- Message: `Cannot read property 'type' of undefined\r\nOccurred while linting <text>:45`\r\n- Path: `elastic/kibana/x-pack/plugins/security_solution/public/detections/containers/detection_engine/rules/use_rules.tsx`\r\n- [Link](https://github.com/elastic/kibana/blob/HEAD/x-pack/plugins/security_solution/public/detections/containers/detection_engine/rules/use_rules.tsx#L45)\r\n```tsx\r\n  const reFetchRules = useRef<(refreshPrePackagedRule?: boolean) => void>(noop);\r\n  const [loading, setLoading] = useState(true);\r\n  const [, dispatchToaster] = useStateToaster();\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n    const abortCtrl = new AbortController();\r\n\r\n    async function fetchData() {\r\n      try {\r\n```\r\n```\r\nTypeError: Cannot read property 'type' of undefined\r\nOccurred while linting <text>:45\r\n    at analyzePropertyChain (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:2235:12)\r\n    at analyzePropertyChain (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:2264:20)\r\n    at /<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1297:34\r\n    at Array.forEach (<anonymous>)\r\n    at visitFunctionWithDependencies (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1277:43)\r\n    at visitCallExpression (/<removed>/eslint-remote-tester/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1737:11)\r\n    at /<removed>/eslint-remote-tester/node_modules/eslint/lib/linter/safe-emitter.js:45:58\r\n    at Array.forEach (<anonymous>)\r\n    at Object.emit (/<removed>/eslint-remote-tester/node_modules/eslint/lib/linter/safe-emitter.js:45:38)\r\n    at NodeEventGenerator.applySelector (/<removed>/eslint-remote-tester/node_modules/eslint/lib/linter/node-event-generator.js:254:26)\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Log</summary>\r\n\r\n```\r\nFull log:\r\n[DONE] AriPerkkio/js-framework-playground 0 errors\r\n[DONE] oldboyxx/jira_clone 0 errors\r\n[WARN] Linting cities.ts took 7s at reach/reach-ui/packages/combobox/examples\r\n[WARN] Linting cities.js took 6s at reach/reach-ui/website/src/components\r\n[DONE] reach/reach-ui 0 errors\r\n[DONE] ant-design/ant-design 0 errors\r\n[DONE] StreakYC/react-smooth-collapse 0 errors\r\n[WARN] pmndrs/react-spring crashed: no-useless-constructor\r\n[DONE] pmndrs/react-spring 1 errors\r\n[DONE] AriPerkkio/scrpr 0 errors\r\n[DONE] react-bootstrap/react-bootstrap 0 errors\r\n[DONE] AriPerkkio/suspense-examples 0 errors\r\n[DONE] AriPerkkio/state-mgmt-examples 0 errors\r\n[WARN] withspectrum/spectrum crashed: no-useless-constructor\r\n[DONE] withspectrum/spectrum 1 errors\r\n[DONE] codesandbox/codesandbox-client 0 errors\r\n[WARN] Linting index.js took 40s at mui-org/material-ui/packages/material-ui-icons/src\r\n[WARN] mui-org/material-ui crashed: no-useless-constructor\r\n[DONE] mui-org/material-ui 2 errors\r\n[DONE] reactjs/reactjs.org 0 errors\r\n[DONE] zesty-io/accounts-ui 0 errors\r\n[DONE] zesty-io/design-system 0 errors\r\n[DONE] segmentio/evergreen 0 errors\r\n[DONE] segmentio/ui-box 0 errors\r\n[DONE] kentcdodds/kentcdodds.com 0 errors\r\n[DONE] kentcdodds/react-fundamentals 0 errors\r\n[DONE] kentcdodds/testing-react-apps 0 errors\r\n[DONE] kentcdodds/react-suspense 0 errors\r\n[DONE] kentcdodds/react-hooks 0 errors\r\n[DONE] artsy/force 0 errors\r\n[DONE] kentcdodds/react-performance 0 errors\r\n[DONE] kentcdodds/advanced-react-hooks 0 errors\r\n[DONE] kentcdodds/advanced-react-patterns 0 errors\r\n[DONE] kentcdodds/bookshelf 0 errors\r\n[DONE] kentcdodds/react-testing-library-examples 0 errors\r\n[DONE] kentcdodds/react-testing-library-course 0 errors\r\n[DONE] kentcdodds/learn-react 0 errors\r\n[DONE] kentcdodds/concurrent-react 0 errors\r\n[WARN] Linting material.min.js took 7s at project-bobon/bobonroastprofile/public\r\n[DONE] project-bobon/bobonroastprofile 0 errors\r\n[DONE] gothinkster/react-redux-realworld-example-app 0 errors\r\n[DONE] 1ven/do 0 errors\r\n[DONE] dockunit/platform 0 errors\r\n[DONE] afghl/dribbble-demo 0 errors\r\n[DONE] ismaelgt/english-accents-map 0 errors\r\n[DONE] DevAlien/dripr-ui 0 errors\r\n[DONE] rwieruch/favesound-mobx 0 errors\r\n[DONE] rwieruch/favesound-redux 0 errors\r\n[DONE] skidding/flatris 0 errors\r\n[DONE] feednext/feednext 0 errors\r\n[DONE] pearofducks/foodprocessor 0 errors\r\n[DONE] limichange/flex-editor 0 errors\r\n[DONE] HVF/franchise 0 errors\r\n[DONE] vercel/hyper 0 errors\r\n[DONE] getguesstimate/guesstimate-app 0 errors\r\n[DONE] stevenhauser/i-have-to-return-some-videotapes 0 errors\r\n[DONE] bebraw/invoice-frontend 0 errors\r\n[DONE] gpbl/isomorphic500 0 errors\r\n[DONE] WebbyLab/itsquiz-wall 0 errors\r\n[DONE] docker/kitematic 0 errors\r\n[DONE] KrateLabs/KrateLabs-App 0 errors\r\n[DONE] afghl/dribble-demo 0 errors\r\n[DONE] zeit/hyper 0 errors\r\n[DONE] koodilehto/invoice-frontend 0 errors\r\n[DONE] insin/lifequote 0 errors\r\n[DONE] paulhoughton/mortgage 0 errors\r\n[DONE] paulhoughton/mortgage-mobx 0 errors\r\n[DONE] browniefed/pdxlivebus 0 errors\r\n[WARN] Linting jquery.js took 9s at Khan/perseus/lib\r\n[WARN] skidding/illustrated-algorithms failed to pull\r\n[DONE] skidding/illustrated-algorithms 0 errors\r\n[WARN] Linting kas.js took 9s at Khan/perseus/lib\r\n[WARN] Linting katex.js took 8s at Khan/perseus/lib/katex\r\n[WARN] Linting less.js took 11s at Khan/perseus/lib\r\n[WARN] Linting mathquill-basic.js took 8s at Khan/perseus/lib/mathquill\r\n[WARN] Linting raphael.js took 7s at Khan/perseus/lib\r\n[DONE] guyellis/plant 0 errors\r\n[DONE] benoitvallon/react-native-nw-react-calculator 0 errors\r\n[WARN] Linting react-with-addons.js took 22s at Khan/perseus/lib\r\n[DONE] insin/react-hn 0 errors\r\n[DONE] LeoAJ/react-iTunes-search 0 errors\r\n[WARN] FormidableLabs/react-music crashed: no-useless-constructor\r\n[DONE] FormidableLabs/react-music 1 errors\r\n[DONE] echenley/react-news 0 errors\r\n[WARN] Linting vendors.min.js took 27s at lkazberova/react-photo-feed/static\r\n[DONE] lkazberova/react-photo-feed 0 errors\r\n[DONE] Khan/perseus 0 errors\r\n[DONE] pl12133/react-solitaire 0 errors\r\n[WARN] Linting bundle.js took 18s at afonsopacifer/react-pomodoro/app\r\n[DONE] afonsopacifer/react-pomodoro 0 errors\r\n[DONE] chvin/react-tetris 0 errors\r\n[DONE] web-pal/react-trello-board 0 errors\r\n[DONE] fcsonline/react-transmission 0 errors\r\n[DONE] SKempin/reactjs-tmdb-app 0 errors\r\n[DONE] fullstackreact/react-yelp-clone 0 errors\r\n[DONE] hoppula/refire-forum 0 errors\r\n[WARN] Linting bootstrap.min.js took 8s at antoinejaussoin/retro-board/retro-board-app/public/marketing/js\r\n[DONE] ritoplz/ritoplz 0 errors\r\n[DONE] andrewngu/sound-redux 0 errors\r\n[DONE] antoinejaussoin/retro-board 0 errors\r\n[DONE] FormidableLabs/spectacle 0 errors\r\n[DONE] torontojs/torontojs.com 0 errors\r\n[DONE] sprintly/sprintly-ui 0 errors\r\n[WARN] captbaritone/winamp2-js crashed: no-useless-constructor\r\n[DONE] captbaritone/winamp2-js 1 errors\r\n[DONE] Automattic/wp-calypso 0 errors\r\n[DONE] marmelab/react-admin 0 errors\r\n[DONE] reactstrap/reactstrap 0 errors\r\n[DONE] palantir/blueprint 0 errors\r\n[DONE] Semantic-Org/Semantic-UI-React 0 errors\r\n[DONE] grommet/grommet 0 errors\r\n[DONE] rebassjs/rebass 0 errors\r\n[DONE] FortAwesome/react-fontawesome 0 errors\r\n[WARN] microsoft/fluentui crashed: no-useless-constructor\r\n[DONE] chakra-ui/chakra-ui 0 errors\r\n[WARN] reakit/reakit crashed: no-useless-constructor\r\n[DONE] reakit/reakit 1 errors\r\n[DONE] rsuite/rsuite 0 errors\r\n[WARN] Linting Calendar.js took 26s at primefaces/primereact/src/components/calendar\r\n[DONE] uber/baseweb 0 errors\r\n[DONE] couds/react-bulma-components 0 errors\r\n[DONE] kulakowka/react-bulma 0 errors\r\n[DONE] dfee/rbx 0 errors\r\n[WARN] Linting index.ts took 13s at microsoft/fluentui/packages/react-icons-mdl2/src\r\n[DONE] primefaces/primereact 0 errors\r\n[DONE] fibo/trunx 0 errors\r\n[DONE] knipferrc/tails-ui 0 errors\r\n[DONE] emortlock/tailwind-react-ui 0 errors\r\n[DONE] geist-org/react 0 errors\r\n[WARN] Linting List.tsx took 8s at microsoft/fluentui/packages/react-internal/src/components/List\r\n[DONE] brillout/awesome-react-components 0 errors\r\n[WARN] Linting react-datepicker.js took 16s at elastic/eui/packages\r\n[DONE] JedWatson/react-select 0 errors\r\n[DONE] atlassian/react-beautiful-dnd 0 errors\r\n[DONE] react-dnd/react-dnd 0 errors\r\n[DONE] strml/react-grid-layout 0 errors\r\n[DONE] microsoft/fluentui 1 errors\r\n[DONE] adazzle/react-data-grid 0 errors\r\n[DONE] tannerlinsley/react-table 0 errors\r\n[WARN] elastic/eui crashed: no-useless-constructor\r\n[DONE] mzabriskie/react-draggable 0 errors\r\n[DONE] strml/react-resizable 0 errors\r\n[DONE] bokuweb/react-resizable-and-movable 0 errors\r\n[DONE] elastic/eui 1 errors\r\n[DONE] axmz/react-searchbox-awesome 0 errors\r\n[DONE] bokuweb/react-resizable-box 0 errors\r\n[DONE] bokuweb/react-sortable-pane 0 errors\r\n[DONE] aeagle/react-spaces 0 errors\r\n[DONE] Hacker0x01/react-datepicker 0 errors\r\n[WARN] Linting DayPickerRangeController_spec.jsx took 8s at airbnb/react-dates/test/components\r\n[DONE] orgsync/react-list 0 errors\r\n[DONE] airbnb/react-dates 0 errors\r\n[WARN] Linting bundle.js took 45s at intljusticemission/react-big-calendar/examples\r\n[DONE] intljusticemission/react-big-calendar 0 errors\r\n[DONE] i18next/react-i18next 0 errors\r\n[DONE] davidtheclark/react-aria-modal 0 errors\r\n[WARN] Linting test262-main.ts took 10s at yahoo/react-intl/packages/intl-listformat\r\n[WARN] Linting app.js took 18s at glortho/react-keydown/example/public/js\r\n[DONE] glortho/react-keydown 0 errors\r\n[WARN] Linting test262-main.ts took 7s at yahoo/react-intl/packages/intl-numberformat\r\n[DONE] gilbarbara/react-joyride 0 errors\r\n[DONE] greena13/react-hotkeys 0 errors\r\n[DONE] bvaughn/react-window 0 errors\r\n[WARN] text-mask/text-mask crashed: no-useless-constructor\r\n[WARN] Linting test262-main.ts took 41s at yahoo/react-intl/packages/intl-relativetimeformat\r\n[DONE] yahoo/react-intl 0 errors\r\n[DONE] bvaughn/react-virtualized 0 errors\r\n[DONE] dvtng/react-loading-skeleton 0 errors\r\n[DONE] KyleAMathews/react-spinkit 0 errors\r\n[DONE] zpao/qrcode.react 0 errors\r\n[DONE] airbnb/rheostat 0 errors\r\n[DONE] pierpo/react-archer 0 errors\r\n[WARN] Linting bundle.js took 23s at text-mask/text-mask/website/static\r\n[DONE] text-mask/text-mask 1 errors\r\n[DONE] mkosir/react-parallax-tilt 0 errors\r\n[DONE] rackt/react-autocomplete 0 errors\r\n[DONE] phuoc-ng/react-pdf-viewer 0 errors\r\n[DONE] eliseumds/react-autocomplete 0 errors\r\n[DONE] moroshko/react-autosuggest 0 errors\r\n[DONE] prometheusresearch/react-autocomplete 0 errors\r\n[DONE] gragland/instatype 0 errors\r\n[DONE] paypal/downshift 0 errors\r\n[DONE] ericgio/react-bootstrap-typeahead 0 errors\r\n[DONE] matteobruni/tsparticles 0 errors\r\n[DONE] facebook/react-art 0 errors\r\n[DONE] Flipboard/react-canvas 0 errors\r\n[DONE] pilwon/react-famous 0 errors\r\n[DONE] kmkzt/react-hooks-svgdrawing 0 errors\r\n[DONE] gorangajic/react-svg-morph 0 errors\r\n[WARN] Linting kinetic-v5.1.0.js took 14s at freiksenet/react-kinetic/vendor\r\n[DONE] freiksenet/react-kinetic 0 errors\r\n[DONE] chrvadala/react-svg-pan-zoom 0 errors\r\n[DONE] reduction-admin/react-reduction 0 errors\r\n[DONE] jeffersonRibeiro/react-shopping-cart 0 errors\r\n[DONE] clintonwoo/hackernews-react-graphql 0 errors\r\n[DONE] firefox-devtools/debugger 0 errors\r\n[DONE] gaearon/overreacted.io 0 errors\r\n[WARN] Linting admin_definition.jsx took 6s at mattermost/mattermost-webapp/components/admin_console\r\n[DONE] dnote/dnote 0 errors\r\n[WARN] elastic/kibana crashed: no-useless-constructor\r\n[DONE] mattermost/mattermost-webapp 0 errors\r\n[WARN] elastic/kibana crashed: unable-to-parse-rule-id\r\n[DONE] elastic/kibana 8 errors\r\n[DONE] Finished scan of 164 repositories\r\n\r\n\u2728  Done in 3720.16s.\r\n```\r\n</details>\r\n",
        "title": "Bug: eslint-plugin-react-hooks: Cannot read property 'type' of undefined at analyzePropertyChain",
        "labels": "Type: Bug",
        "id": 45303
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Go to profile tag\r\n2. Click to record\r\n3. After stop recording, click on any commits.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:33986:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:28047:1\r\nProfiler_Profiler@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:35614:50\r\nErrorBoundary_ErrorBoundary@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:29061:5\r\nPortaledContent@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:29178:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:32775:1\r\nTreeContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:24163:1\r\nSettingsContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:24652:1\r\nModalDialogContextController@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:29245:1\r\nDevTools_DevTools@moz-extension://7ef91e4d-0a91-434a-b6fa-c2646d78406c/build/main.js:36048:1",
        "title": "Error: \"Commit tree does not contain fiber 1527. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45304
    },
    {
        "body": "**React plugin version:** \r\neslint-plugin-react: \"^7.19.0\"\r\ntypescript: 4.0+ (must include ?. operator)\r\n\r\n## Steps To Reproduce\r\n\r\n```tsx\r\n// Just a demonstration example, obviously this is not ideal use of classes\r\nclass Dog {\r\n\tpublic useDogWoof() {\r\n\t\tuseEffect(() => {\r\n\t\t\tconsole.log(\"woof\")\r\n\t\t}])\r\n\t}\r\n}\r\n\r\nconst DogWoof = ({dog}: {dog?: Dog) => {\r\n\tdog?.useDogWoof() // Should print conditional hook error\r\n\treturn (\r\n\t\t//\r\n\t)\r\n}\r\n```\r\n\r\n## The current behavior\r\n\r\nTypescript has the new 4.0 operator `?.` in case an object is undefined. But, this doesn't quite work along with hooks, as when the object is undefined, the hook is not called, thus the React Renderer complains that the amount of hooks is not the same or even worse untraceable type errors that I had. `eslint-plugin-react-hooks` is expected to be able to guard against that as well to prevent nasty errors with this new typescript operator.\r\n\r\n## The expected behavior\r\n\r\nCurrently, `eslint-plugin-react-hooks` doesn't take care of the typescript operator and thinks that nothing's wrong with using along one with a react hook.",
        "title": "Bug: eslint-plugin-react-hooks doesn't report conditional typescript \"?.\" hooks",
        "labels": "Type: Bug",
        "id": 45305
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a Switch with state in react native and toggle the switch by opening devtools and using the checkbox provided for the state.\r\n2. Now toggle the switch using UI. the state object gets updated but not the expanded one.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nAllergies state is true on the top but on expanded state it is false.\r\n![Screenshot from 2020-11-06 16-48-37](https://user-images.githubusercontent.com/16081083/98360786-7bb71280-2050-11eb-8a52-0944a6b70c26.png)\r\n\r\n\r\n## The expected behavior\r\nBoth must be in sync",
        "title": "Bug: devtools the expanded state and the state object are out of sync",
        "labels": "Type: Bug",
        "id": 45306
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Using the profiler I get this error. Can't figure out what to do. Tried clearing my browser data. \r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19767:32)\r\n    at ProfilingCache_ProfilingCache.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19992:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34007:32)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)\r\n    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)\r\n    at Xj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15129:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Cannot read property 'length' of undefined\"",
        "labels": "Type: Bug",
        "id": 45307
    },
    {
        "body": "A recent update to the React Developer Tools Chrome Extension looks like it has a build issue. \r\n\r\n## The current behaviour\r\n\r\nChrome console is reporting\r\n\r\n> DevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/injectGlobalHook.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\n\r\nLooking at the map file it contains a lot of references to local paths on @bvaughn's computer.\r\n\r\n```json\r\n{\"version\":3,\"sources\":[\"webpack:///webpack/bootstrap\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/index.js\",\"webpack:///../react-devtools-shared/src/types.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/index.js\",\"webpack:///../react-devtools-shared/src/hook.js\",\"webpack:///./src/injectGlobalHook.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/clipboard-js/clipboard.js\",\"webpack:///../shared/ReactSymbols.js\",\"webpack:///../react-devtools-shared/src/utils.js\",\"webpack:///../react-devtools-shared/node_modules/semver/semver.js\",\"webpack:///../react-devtools-shared/src/constants.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/object-assign/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/index.js\",\"webpack:///../shared/ConsolePatchingDev.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js\",\"webpack:///../react-devtools-shared/src/backend/console.js\",\"webpack:///../react-devtools-shared/src/backend/utils.js\",\"webpack:///../react-devtools-shared/src/backend/renderer.js\",\"webpack:///../react-devtools-shared/src/backend/ReactSymbols.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/process/browser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/yallist.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/iterator.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/cjs/react-is.production.min.js\",\"webpack:///../react-devtools-shared/src/devtools/views/root.css\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/cjs/react.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/cjs/react-debug-tools.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/error-stack-parser/error-stack-parser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/stackframe/stackframe.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/nullthrows/nullthrows.js\",\"webpack:///../react-devtools-shared/src/storage.js\",\"webpack:///../react-devtools-shared/src/hydration.js\"],\"names\":[\"process\",\"module\",\"exports\",\"require\",\"ElementTypeClass\",\"ElementTypeContext\",\"ElementTypeFunction\",\"ElementTypeForwardRef\",\"ElementTypeHostComponent\",\"ElementTypeMemo\",\"ElementTypeOtherOrUnknown\",\"ElementTypeProfiler\",\"ElementTypeRoot\",\"ElementTypeSu\r\n\r\n```\r\n\r\n\r\n## The expected behaviour\r\n- No Chrome message complaining about the SourceMap",
        "title": "Bug: React Developer Tools Chrome Extension build error",
        "labels": "Type: Bug",
        "id": 45308
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. fetching data from gh api\r\n2. trying to append pictures to a slider ;p\r\n3. happily hacking\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21068:35)\r\n    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21084:26)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28520:63\r\n    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22776:18)\r\n    at wi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13590:76)\r\n    at vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13581:10)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16165:86)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)\r\n    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)\r\n\r\nComponent stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22471:30)\r\n    at div\r\n    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3006:5)\r\n    at div\r\n    at div\r\n    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28271:47)\r\n    at div\r\n    at div\r\n    at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28763:3)\r\n    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27400:3)\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33225:52)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Cannot read property 'isCollapsed' of undefined\"",
        "labels": "Type: Bug",
        "id": 45309
    },
    {
        "body": "I have an input with type password with minLength 8, and i have a toggle to change the type to text (password toggle).\r\nwhen i type with length < 8 and press submit, it prevent to submit. but, when i toggle the password so it change the type to text and submit the form, it can submitted. btw i using useRef()\r\n\r\nReact version:\r\nreact: ^17.0.1\r\nreact-dom: ^17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. type character < minLength\r\n2. submit form\r\n3. toggle form type\r\n4. submit form\r\n\r\nLink to code example: [DEMO](https://codesandbox.io/s/young-shape-4tciw)\r\n\r\n## The current behavior\r\nThe form get submitted even when it under minLength\r\n\r\n## The expected behavior\r\nThe form not get submitted when it under minLength\r\n",
        "title": "Bug: Input minLength not working after type changed",
        "labels": "Type: Bug",
        "id": 45310
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19503:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19436:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19429:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19429:32)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19429:32)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19957:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34003:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Commit tree already contains fiber 11324. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45311
    },
    {
        "body": "In the old reconciler fork, after mutation, we clear child, alternate, and return pointers:\r\nhttps://github.com/facebook/react/blob/343d7a4a7eb621a31ba946309b557e0988be3a63/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L1054-L1081\r\n\r\nWe wait to clear sibling pointers until passive effects have been processed. If we commit a root that has no passive effects\u2013 we immediately detach sibling pointers:\r\nhttps://github.com/facebook/react/blob/343d7a4a7eb621a31ba946309b557e0988be3a63/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2135-L2155\r\n\r\nIn the new reconciler fork, we only clear alternate and return pointers after mutation, because we need child and sibling pointers to traverse the tree for passive effects:\r\nhttps://github.com/facebook/react/blob/343d7a4a7eb621a31ba946309b557e0988be3a63/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L2274-L2293\r\n\r\nHowever, if we commit a root that has no passive effects, we don't clear those pointers (so the pointers stay around until another render eventually replaces them).\r\n\r\nSeems like an oversight.",
        "title": "Bug: New reconciler fork should detach child/sibling pointers if no passive effects",
        "labels": "Type: Bug",
        "id": 45312
    },
    {
        "body": "Hi, I used react-sortable-tree package im my react project in component named Tree:\r\n\r\n```\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport axios_config from \"./axios_config\";\r\nimport \"react-sortable-tree/style.css\";\r\nimport SortableTree, {\r\n} from \"react-sortable-tree\";\r\nclass Tree extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      treeData: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    (async () => {\r\n      axios_config.url = this.props.treeLink;\r\n      axios_config.data = {};\r\n\r\n      try {\r\n        let result = await axios(axios_config);\r\n        console.log(\"response from server gotttt...\");\r\n        console.log(result);\r\n        if (result.data.done === true) {\r\n          this.setState({\r\n            treeData: result.data.tree,\r\n            selectedNode: result.data.tree[0],\r\n          });\r\n          this.props.disableLoading();\r\n        } else {\r\n          console.log(result.err);\r\n          this.props.disableLoading();\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    })();\r\n  }\r\n  render() {\r\n    return (\r\n      <SortableTree\r\n        style={{ height: \"300px\" }}\r\n        treeData={this.state.treeData}\r\n        onChange={(treeData) => this.setState({ treeData })}\r\n      />\r\n    );\r\n  }\r\n}\r\n```\r\nwhen I use Tree component in my code it works pretty well in react 16.13.1, but fails and get this error is react 17.0.1:\r\n\r\n`\u2190\u21921 of 2 errors on the page\r\nError: Unable to find node on an unmounted component.\r\n\u25b6 21 stack frames were collapsed.\r\n(anonymous function)\r\nsrc/components/utility/Tree.js:114\r\n  111 | console.log(result);\r\n  112 | if (result.data.done === true) {\r\n  113 |   //console.log(result.data.tree);\r\n> 114 |   this.setState({\r\n      | ^  115 |     treeData: result.data.tree,\r\n  116 |     selectedNode: result.data.tree[0],\r\n  117 |   });\r\n`\r\n`react-dom.development.js:24281 Uncaught Error: Unable to find node on an unmounted component.\r\n    at findHostInstanceWithWarning (react-dom.development.js:24281)\r\n    at findDOMNode (react-dom.development.js:24804)\r\n    at ScrollingComponent.componentDidMount (index.js:181)\r\n    at commitLifeCycles (react-dom.development.js:20663)\r\n    at commitLayoutEffects (react-dom.development.js:23426)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:3945)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:3994)\r\n    at invokeGuardedCallback (react-dom.development.js:4056)\r\n    at commitRootImpl (react-dom.development.js:23151)\r\n    at unstable_runWithPriority (scheduler.development.js:646)\r\n    at runWithPriority$1 (react-dom.development.js:11276)\r\n    at commitRoot (react-dom.development.js:22990)\r\n    at performSyncWorkOnRoot (react-dom.development.js:22329)\r\n    at react-dom.development.js:11327\r\n    at unstable_runWithPriority (scheduler.development.js:646)\r\n    at runWithPriority$1 (react-dom.development.js:11276)\r\n    at flushSyncCallbackQueueImpl (react-dom.development.js:11322)\r\n    at flushSyncCallbackQueue (react-dom.development.js:11309)\r\n    at scheduleUpdateOnFiber (react-dom.development.js:21893)\r\n    at Object.enqueueSetState (react-dom.development.js:12467)\r\n    at Tree.push../node_modules/react/cjs/react.development.js.Component.setState (react.development.js:365)\r\n    at Tree.js:114`",
        "title": "Bug: Uncaught Error: Unable to find node on an unmounted component in react 17.0.1",
        "labels": "Type: Bug",
        "id": 45313
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: experimental\r\n\r\nI found this bug while trying out `useOpaqueIdentifier` on a component that uses `aria-activedescendant`. It works great on a CRA app, but it breaks on server rendered apps.\r\n\r\nThe way it's implemented is that each item registers its id into a state up in the tree so the container element can get the active id and render it on the `aria-activedescendant` prop.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a simple server rendered app (for example, using Next.js).\r\n2. Create a component that uses `React.unstable_useOpaqueIdentifier` and passes the generated object to a component up in the tree through callbacks.\r\n3. Try to render the generated ID to a prop in the ancestor component. \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/react-useopaqueidentifier-aria-activedescendant-bug-geutb?file=/pages/index.js:0-412\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIt throws an error:\r\n\r\n```\r\nUnhandled Runtime Error\r\nError: The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.\r\n\r\nCall Stack\r\nObject.readValue\r\nnode_modules/react-dom/cjs/react-dom.development.js (16555:0)\r\ndiffProperties\r\nnode_modules/react-dom/cjs/react-dom.development.js (9475:0)\r\nprepareUpdate\r\nnode_modules/react-dom/cjs/react-dom.development.js (10352:0)\r\nupdateHostComponent$1\r\nnode_modules/react-dom/cjs/react-dom.development.js (20070:0)\r\ncompleteWork\r\nnode_modules/react-dom/cjs/react-dom.development.js (20236:0)\r\ncompleteUnitOfWork\r\nnode_modules/react-dom/cjs/react-dom.development.js (23738:0)\r\nperformUnitOfWork\r\nnode_modules/react-dom/cjs/react-dom.development.js (23710:0)\r\nworkLoopSync\r\nnode_modules/react-dom/cjs/react-dom.development.js (23618:0)\r\nrenderRootSync\r\nnode_modules/react-dom/cjs/react-dom.development.js (23577:0)\r\nperformConcurrentWorkOnRoot\r\nnode_modules/react-dom/cjs/react-dom.development.js (22968:0)\r\nworkLoop\r\nnode_modules/scheduler/cjs/scheduler.development.js (590:0)\r\nflushWork\r\nnode_modules/scheduler/cjs/scheduler.development.js (545:0)\r\nMessagePort.performWorkUntilDeadline\r\nnode_modules/scheduler/cjs/scheduler.development.js (157:0)\r\n```\r\n\r\nI believe it's triggered here: https://github.com/facebook/react/blob/993ca533b42756811731f6b7791ae06a35ee6b4d/packages/react-dom/src/client/ReactDOMComponent.js#L786-L789\r\n\r\n## The expected behavior\r\n\r\nIt works well when not using SSR:\r\n\r\nhttps://codesandbox.io/s/react-useopaqueidentifier-aria-activedescendant-y3f22",
        "title": "Bug: Can't hydrate useOpaqueIdentifier generated object in another component",
        "labels": "Type: Bug",
        "id": 45314
    },
    {
        "body": "Hello\r\nHave such warning in chrome console\r\n![image](https://user-images.githubusercontent.com/1410608/97543950-9bf02d00-19d1-11eb-94df-8de57530e2b4.png)\r\n\r\nWhen open url from warning, get this (configs with local paths from laptop of @bvaughn ;) )\r\n```\r\n{\"version\":3,\"sources\":[\"webpack:///webpack/bootstrap\",\"webpack:///../shared/ReactSymbols.js\",\"webpack:///../react-devtools-shared/src/utils.js\",\"webpack:///../react-devtools-shared/src/types.js\",\"webpack:///../react-devtools-shared/src/backend/ReactSymbols.js\",\"webpack:///../react-devtools-shared/src/constants.js\",\"webpack:///../react-devtools-shared/src/storage.js\",\"webpack:///../react-devtools-shared/src/backend/utils.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/object-assign/index.js\",\"webpack:///../react-devtools-shared/src/hydration.js\",\"webpack:///../shared/ConsolePatchingDev.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsComponentStackFrame.js\",\"webpack:///../react-devtools-shared/src/backend/DevToolsFiberComponentStack.js\",\"webpack:///../react-devtools-shared/src/backend/console.js\",\"webpack:///../react-devtools-shared/src/events.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lodash.throttle/index.js\",\"webpack:///../react-devtools-shared/src/backend/renderer.js\",\"webpack:///../react-devtools-shared/node_modules/semver/semver.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/memoize-one/esm/index.js\",\"webpack:///../react-devtools-shared/src/backend/views/utils.js\",\"webpack:///../react-devtools-shared/src/backend/views/Highlighter/Overlay.js\",\"webpack:///../react-devtools-shared/src/backend/views/Highlighter/Highlighter.js\",\"webpack:///../react-devtools-shared/src/backend/views/Highlighter/index.js\",\"webpack:///../react-devtools-shared/src/backend/views/TraceUpdates/canvas.js\",\"webpack:///../react-devtools-shared/src/backend/views/TraceUpdates/index.js\",\"webpack:///../react-devtools-shared/src/backend/agent.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/clipboard-js/clipboard.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/index.js\",\"webpack:///./src/backend.js\",\"webpack:///(webpack)/buildin/global.js\",\"webpack:///../react-devtools-shared/src/devtools/views/root.css\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/process/browser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/yallist.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/lru-cache/node_modules/yallist/iterator.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-is/cjs/react-is.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react-debug-tools/cjs/react-debug-tools.production.min.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/error-stack-parser/error-stack-parser.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/node_modules/stackframe/stackframe.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/index.js\",\"webpack:////Users/bvaughn/Documents/git/react.alt2/build/node_modules/react/cjs/react.production.min.js\",\"webpack:///../react-devtools-shared/src/bridge.js\",\"webpack:///../react-devtools-shared/src/backend/legacy/utils.js\",\"webpack:///../react-devtools-shared/src/backend/legacy/renderer.js\",\"webpack:///../react-devtools-shared/src/backend/index.js\",\"webpack:///../react-devtools-shared/src/backend/NativeStyleEditor/resolveBoxStyle.js\",\"webpack:///../react-devtools-shared/src/backend/NativeStyleEditor/setupNativeStyleEditor.js\"],\"names\":\r\n```\r\n\r\nDevTools info:\r\n`Adds React debugging tools to the Chrome Developer Tools. Created from revision 75726fadfd on 10/19/2020.`",
        "title": "Bug: React DevTools chrome warning",
        "labels": "Type: Bug",
        "id": 45315
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\n1.\r\n2.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n![image](https://user-images.githubusercontent.com/48934944/97427495-981bc680-194f-11eb-9120-c039fcd39725.png)\r\n",
        "title": "Bug: \u901a\u8fc7\u811a\u624b\u67b6\u521b\u5efa\u7684\u9879\u76ee \u7f16\u8bd1\u4e0d\u62a5\u9519 \u8fd0\u884c\u65f6\u4f9d\u8d56\u62a5\u9519",
        "labels": "Type: Bug",
        "id": 45316
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nComponent stack: CommitRankedAutoSizer@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:34248:50\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:28047:1\r\nProfiler_Profiler@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:35614:50\r\nErrorBoundary_ErrorBoundary@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:29061:5\r\nPortaledContent@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:29178:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:32775:1\r\nTreeContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:24163:1\r\nSettingsContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:24652:1\r\nModalDialogContextController@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:29245:1\r\nDevTools_DevTools@moz-extension://f4c154e8-040d-4fe9-b83a-727bf9edeb34/build/main.js:36048:1",
        "title": "Error: \"Commit tree already contains fiber 601. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45317
    },
    {
        "body": "When I use DevTools to select an element on the page, it can't jump/find it.\r\nIt also doesn't show it in the Components page.\r\n    This was checked by finding its parent and checking the children, non of the newly generated ones are there.\r\nAs a probably related bug Profiler doesn't show/record the changes.\r\n\r\nReact version: 16.13.1\r\nReact-dom version: 16.13.1\r\nParcel: 2.0.0-beta.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a parent element\r\n2. Have a child element (A)\r\n3. Using conditional rendering (`condition ? A : B`) \"hide\" A\r\n4. B now shows\r\n5. Try and select B using Chrome Dev Tools's \"Select an element in the page to inspect it\"\r\n6. Jumps nowhere/Can't find it manually in the list.\r\n\r\n## Example\r\n\r\n![2020-10-26_12-38-43](https://user-images.githubusercontent.com/24227350/97173781-06faf300-1789-11eb-9f66-4c6146d1dc8b.gif)\r\nIn this example, I demonstrate that it works on the Search Bar (light grey bar) which is the TextField=>InputBase tree, and the Container that contains the search & images and how hovering over the image doesn't do anything.\r\nI then click on the image and nothing happens & the state panel on the right of Dev Tools empties itself.\r\n\r\n## The current behaviour\r\n\r\nCan't find newly rendered components in React Dev Tools Components panel\r\n\r\n## The expected behavior\r\n\r\nBeing able to find the newly rendered components in React Dev Tools Components panel",
        "title": "Bug: DevTools not finding/showing React components",
        "labels": "Type: Bug",
        "id": 45318
    },
    {
        "body": "React DevTools version: 4.9.0-75726fadfd\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install React DevTools into Chrome 86\r\n2. Observe Chrome errors loading source maps for React DevTools.\r\n\r\nLink to code example:\r\n\r\n`None`\r\n\r\n## The current behavior\r\n\r\n```log\r\nDevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/injectGlobalHook.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\nDevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\nDevTools failed to load SourceMap: Could not load content for chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/contentScript.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME\r\n```\r\n\r\n## The expected behavior\r\n\r\nShow no errors.\r\n\r\n## Workaround\r\n\r\n- Disable JavaScript source maps in Chrome DevTools (Open Chrome DevTools, click three dots menu in upper right corner, find Settings under More Tools. Uncheck \"Enable JavaScript source maps\".)\r\n\r\nWorkarounds that don't work:\r\n\r\n- Remove all `.map` files in `~/.config/google-chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0/build/`.\r\n- Remove all `.map` files from `~/.config/google-chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0/`\r\n- Edit each `.js` file in `~/.config/google-chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0/build/` to remove the line with `//# sourceMappingURL=`. This changes the hash of each file and Chrome will refuse to load the extension.\r\n\r\n## Other Notes\r\n\r\n- OS: Manjaro Linux\r\n\r\n",
        "title": "Bug: Chrome DevTools failed to load SourceMap after upgrade to Chrome 86.0.4240.111",
        "labels": "Type: Bug",
        "id": 45319
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Upgrade React & reactDom version to 17.0.0\r\n2. Reloading specific page via profiler\r\n3. Click a chart inside flamegraph chart\r\n3. The page is working just fine but the profiler has stopped working\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.9.0-75726fadfd\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19503:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19436:26)\r\n    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19957:11)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34003:33)\r\n    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)\r\n    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)\r\n    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)\r\n    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)\r\n    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)\r\n    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",
        "title": "Error: \"Commit tree already contains fiber 1. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45320
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.x.x\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have latest React devtools installed in Chrome\r\n2. Open console and see warning about failure to load source maps.\r\n\r\n<img width=\"1161\" alt=\"Screen Shot 2020-10-22 at 12 12 23 AM\" src=\"https://user-images.githubusercontent.com/4588318/96823803-4d53f900-13fb-11eb-9f3d-e26d519fabbc.png\">\r\n\r\n<img width=\"422\" alt=\"Screen Shot 2020-10-22 at 12 12 53 AM\" src=\"https://user-images.githubusercontent.com/4588318/96823829-59d85180-13fb-11eb-8113-974ea7231f5c.png\">\r\n\r\nLooks to be related to https://github.com/facebook/react/pull/19773 \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nConsole logs about failure to load source maps\r\n\r\n## The expected behavior\r\nNo console logs because of the extension \r\n",
        "title": "Bug: Error loading source maps for devtools extension",
        "labels": "Type: Bug",
        "id": 45321
    },
    {
        "body": "This is a weird one. Basically, if you add an event listener to the document in an effect that was triggered by an event. e.g. `click` toggles some state, which triggers an effect, which adds a `click` handler to the document. In the normal case the new event handler will \"miss\" the triggering event, e.g. the added click handler won't respond to the click event that triggered it being added (omg). \r\n\r\nHOWEVER, if you render a portal first, the timing changes slightly and the added event handler will see the current event.\r\n\r\nReact version: 17\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/react-playground-forked-cyt0f?file=/index.js\r\n\r\n1. Click the \"show Message\" button to see a message toggle in and out\r\n2. Click the \"Render Portal\" button (see a portal rendered into the body)\r\n3. Click the \"show Message\" button again and notice nothing happens\r\n\r\nThe reason for the final behavior is the click event both opens and closes the message, (calls set state twice)\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/react-playground-forked-cyt0f?file=/index.js\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n\r\nThat they be consistent",
        "title": "Bug: useEffect Timing changes depending on if Portal was rendered",
        "labels": "Type: Bug",
        "id": 45322
    },
    {
        "body": "After updating react-dom to version 17 the build now includes Array.fill() which isn't supported by ie11 without polyfilling. Coming from this line. Tested with just the default cra production build to make sure it wasn't a problem with my webpack config and the same issue.\r\n\r\nhttps://github.com/facebook/react/blob/96ac799eace5d989de3b4f80e6414e94a08ff77a/packages/react-reconciler/src/ReactFiberLane.js#L671\r\n\r\nTested using CRA on version 16.9.8 of react and react-dom which works with the production build for ie11. \r\n\r\n",
        "title": "react-dom 17 breaks on internet explorer",
        "labels": "Type: Bug",
        "id": 45323
    },
    {
        "body": "Is the correct word \"Escape\" ?\r\n\r\nhttps://github.com/facebook/react/blob/dfb6a403357d5ac2c0ea87aa6e5a4f947de342f8/packages/react-interactions/events/src/dom/create-event-handle/Focus.js#L72",
        "title": "Misspelled \"Escape\" event type in Focus.js",
        "labels": "Type: Bug",
        "id": 45324
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17854:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree does not contain fiber 13258. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45325
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\nI couldn't reproduce it.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18061:32)\r\n    at ProfilingCache.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18301:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31722:32)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n    at Mj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13351:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Cannot read property 'length' of undefined\"",
        "labels": "Type: Bug",
        "id": 45326
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n\r\n1. Open React Devtools Profiler\r\n2. Select Hide components where type equals suspense (I retried multiple times and I didn't need this step).\r\n3. Click on Start profiling\r\n4. Click on a commit bar\r\n\r\nI think it's a regression.\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17854:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree does not contain fiber 329. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45327
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open React Devtools Profiler\r\n2. Select Hide components where type equals suspense (I retried multiple times and I didn't need this step) \r\n3. Click on Reload and start profiling\r\n4. Click on a commit bar\r\n\r\nI think it's a regression.\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17827:53)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31980:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31963:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45328
    },
    {
        "body": "React version: 17.0.0.rc2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install in dev mode\r\n2. all events, click, onBlur all of them are too slowly every time you click in a input or something freeze the browser\r\n\r\nAnd even more if you open the chrome dev tools or others becomes more slow\r\n",
        "title": "Bug: v17 DEV mode slowness during effect traversal",
        "labels": "Type: Bug",
        "id": 45329
    },
    {
        "body": "React version: 0.0.0-experimental-94c0244ba\r\n\r\n## Steps To Reproduce\r\n\r\nMutating the external source during the initial render before subscribe throws error. \r\n\r\nhttps://codesandbox.io/s/usemutablesource-7nbs6?file=/src/App.js\r\n\r\n![image](https://user-images.githubusercontent.com/8140606/94963407-f7033280-04ac-11eb-9cf7-e00c6630f55e.png)\r\n\r\n1. Navigate to the above code sandbox\r\n2. Click on the Mutate button. Final Value is rendered without any error. (Success Mode)\r\n3. Toggle to Error Mode and click on the Mutate button again.\r\n4. Error thrown (and the UI is rendered with the Final Value when run from vscode)\r\n\r\n> Note: In our actual codebase (private), we are seeing this error at different instances e.g. component getting updated due to `setState` call in `useLayoutEffect` etc.\r\n\r\n## The current behavior\r\n\r\nSeeing errors in development build.\r\n\r\n![image](https://user-images.githubusercontent.com/8140606/94962796-e3a39780-04ab-11eb-82d9-b24e4eaa5cc1.png)\r\n\r\n## The expected behavior\r\n\r\nThese errors thrown by useMutableSource should not showup on the UI and not passed to the error boundary as the component is eventually re-rendered with the latest state without any error.",
        "title": "Bug: unstable_useMutableSource throws error when mutated before subscribe",
        "labels": "Type: Bug",
        "id": 45330
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Start polling.\r\n2. Toggle sort direction in application.\r\n3. Stop polling.\r\n4. Click flamegraph bar.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 5823. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45331
    },
    {
        "body": "We noticed that our app would behave differently during profiling runs and trigger errors. I'm not totally sure what the underlying issue is but I was able to put together a example app to reproduce. As far as I can tell it has to do with how devtools is overriding `console.warn` and `console.error`. In that case `describeNativeComponentFrame()` will call a function component with no args. This works fine as the error is caught in `describeNativeComponentFrame()` but in it looks like a `useEffect()` that accesses those `props` is still triggered and it does not expect `props` to be undefined. \r\n\r\nI realize that having `props` in the dependencies array of the `useEffect` doesn't really make sense but I still think it probably shouldn't error.\r\n\r\nReact version: 16.13.1\r\nReact devtools version: 4.8.2 \r\n\r\n## Steps To Reproduce\r\n\r\n1. Open link to code example below\r\n2. Click \"Open In New Window\" from the \"Browser\" tab\r\n3. Observe a simple app with only `<h1>Hello World</h1>`\r\n3. Open the React devtools Profiler tab\r\n4. Click \"Reload and start profiling\"\r\n5. Observe an error `Uncaught TypeError: Cannot read property 'foo' of undefined`\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/cool-sun-wdrry\r\n\r\n## The current behavior\r\n\r\n![wdrry csb app_](https://user-images.githubusercontent.com/682132/94301311-5b1b7900-ff38-11ea-9c5d-335e2e6f35b9.png)\r\n\r\n## The expected behavior\r\n\r\nThe app should work as it while not profile. It should render a `<h1>Hello World</h1>`\r\n",
        "title": "Bug: devtools Profiler causes unexpected errors",
        "labels": "Type: Bug",
        "id": 45332
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. click record in profiler\r\n2. click on a link to go to another page (gatsbyjs)\r\n3. click stop recording in profiler\r\n4. click on any commit in profiler and profiler crashed\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nComponent stack: CommitFlamegraphAutoSizer@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:31701:48\r\ndiv\r\ndiv\r\ndiv\r\nSettingsModalContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:26139:18\r\nProfiler_Profiler@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:33363:48\r\nErrorBoundary@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:27172:33\r\nPortaledContent@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:27303:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:30463:18\r\nTreeContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:22538:18\r\nSettingsContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:23040:22\r\nModalDialogContextController@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:28328:18\r\nDevTools_DevTools@moz-extension://27fbeacf-1df3-cb4e-82f6-1ac8ce92baa3/build/main.js:33797:16",
        "title": "Error: \"Commit tree does not contain fiber 5402. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45333
    },
    {
        "body": "Hi! I was developing a next.js app, then I open the dev tools to see the state of some component, and the react dev tools give this error, after a page refresh all when back to normal, I don't know if this is a bug caused by me or is something related to the dev tools itself, so I prefer to report it, if this my fault I'm very sorry for the trouble!\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nComponent stack: List@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:20924:30\r\ndiv\r\nAutoSizer@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:2786:19\r\ndiv\r\ndiv\r\nTree_Tree@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26368:45\r\ndiv\r\ndiv\r\nInspectedElementContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26848:18\r\nOwnersListContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:25520:18\r\nSettingsModalContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26139:18\r\nComponents_Components@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:30926:50\r\nErrorBoundary@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:27172:33\r\nPortaledContent@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:27303:27\r\ndiv\r\ndiv\r\nProfilerContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:30463:18\r\nTreeContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:22538:18\r\nSettingsContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:23040:22\r\nModalDialogContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:28328:18\r\nDevTools_DevTools@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:33797:16",
        "title": "Error: \"child is undefined\"",
        "labels": "Type: Bug",
        "id": 45334
    },
    {
        "body": "React version: 16.3.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click the button in this Code Sandbox https://codesandbox.io/s/blissful-sun-e0lle?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe wrong error is generated\r\n\r\n## The expected behavior\r\n\r\nAn error should still be generated but the error message should be correct. The problem is that if you do `[Symbol('...')].join(',')` JavaScript will freak out which is what happens if you put symbols incorrectly in the deps to hooks.",
        "title": "Bug: Handling of symbols when used as deps incorrectly to create error message results in an unrelated TypeError: Cannot convert a Symbol value to a string",
        "labels": "Type: Bug",
        "id": 45335
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0-rc.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open https://9sf7d.csb.app/. The issue seems most easily reproducible in iOS Safari, although we were also able to reproduce in Firefox on macOS.\r\n2. Quickly tap or click one checkbox or radio followed by another one.\r\n3. Notice that sometimes the first checkbox is unchecked rather than the second checkbox you tapped on becoming checked. For radios, the first radio stays selected rather than switching to the radio you tapped on.\r\n\r\nLink to code example: https://codesandbox.io/s/optimistic-sound-9sf7d?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThere appears to be some sort of race condition where tapping or clicking on a controlled `<input type=\"checkbox\">` or `<input type=\"radio\">` quickly after clicking on a previous input does not fire `onChange` on the correct element.  As far as I can tell, `onChange` is being fired on the second checkbox rather than the first. It appears to be a timing issue - if you wait long enough between taps, the events are fired on the correct elements. This also appears to only reproduce in React 17.0.0-rc.1, not 17.0.0-rc.0 or React 16 (you can verify by changing the versions in Code Sandbox).\r\n\r\n## The expected behavior\r\n\r\nThe `onChange` event should fire on the correct element, and state should update to check or uncheck the checkbox or radio you tapped, not some other element.\r\n",
        "title": "Bug: React 17.0.0-rc.1 checkboxes and radio groups sometimes fire onChange incorrectly",
        "labels": "Type: Bug",
        "id": 45336
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Clicking back to go back through the frames following a profile session. I think I got to zero and then clicked it again and then it errored\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17661:26)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n\r\nComponent stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31963:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Maximum call stack size exceeded\"",
        "labels": "Type: Bug",
        "id": 45337
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n\r\nI have a large form with multiple checkboxes. I am trying to see the performance of my value change for the checkboxes. When I record my interaction that works but when I click on the performance timeline commits in the extension it fails with the bellow stack\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 13006. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45338
    },
    {
        "body": "This seems to happen when\r\n1. I take a component as a prop\r\n2. I use that component as a JSX constructor in a hook\r\n\r\nMinimal repro:\r\n```jsx\r\nexport const Foo = ({ Component }) => {\r\n  React.useEffect(() => {\r\n    console.log(<Component />);\r\n  }, []);\r\n};\r\n```\r\n\r\n```\r\n    \"eslint-plugin-react-hooks\": \"^4.1.1\",\r\n```\r\n\r\n\r\n---\r\n\r\nInterestingly, this does NOT cause the error:\r\n```jsx\r\nexport const Foo = ({ component }) => {\r\n  React.useEffect(() => {\r\n    const Component = component;\r\n    console.log(<Component />);\r\n  }, []);\r\n};\r\n```",
        "title": "Bug: eslint-plugin-react-hooks \"Cannot read property parent of null\"",
        "labels": "Type: Bug",
        "id": 45339
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a state with a symbol as a key\r\n2. Open React DevTools to view the state\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/awesome-wu-w08px?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nCannot view the symbol in the state\r\n\r\n## The expected behavior\r\nSymbols should be visible in the state from DevTools\r\n",
        "title": "Bug: React DevTools not showing symbols used in state",
        "labels": "Type: Bug",
        "id": 45340
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0-rc.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create elements out of `lazy` components, use them conditionally.\r\n2. Check if the `lazy` components are dynamically imported.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: --\r\n\r\n`main.jsx`:\r\n```jsx\r\nimport React, { lazy, Suspense, useState } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nconst Checked = lazy(() => import('./Checked'));\r\nconst Checked2 = lazy(() => import('./Checked2'));\r\nconst Unchecked = lazy(() => import('./Unchecked'));\r\nconst Unchecked2 = lazy(() => import('./Unchecked2'));\r\n\r\nfunction App() {\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const checkedElement = <Checked />;\r\n  const uncheckedElement = <Unchecked />;\r\n\r\n  return (\r\n    <>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          onChange={e => setChecked(e.target.checked)}\r\n        />\r\n        Toggle me\r\n      </label>\r\n\r\n      <hr />\r\n\r\n      <Suspense fallback=\"loading...\">\r\n        Checked? {checked ? checkedElement : uncheckedElement}\r\n      </Suspense>\r\n\r\n      <hr />\r\n\r\n      <Suspense fallback=\"loading...\">\r\n        Checked? {checked ? <Checked2 /> : <Unchecked2 />}\r\n      </Suspense>\r\n    </>\r\n  );\r\n}\r\n\r\nrender(<App />, document.getElementById('app'));\r\n```\r\n`Checked.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Checked';\r\n}\r\n```\r\n`Checked2.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Checked 2';\r\n}\r\n```\r\n`Unchecked.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Unchecked';\r\n}\r\n```\r\n`Unchecked2.jsx`:\r\n```jsx\r\nexport default function() {\r\n  return 'Unchecked 2';\r\n}\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe `Checked.jsx` chunk is imported eagerly, even though the component isn't immediately rendered.\r\n![image](https://user-images.githubusercontent.com/567105/91972475-b039e580-ed12-11ea-96a4-8c7dc6ee5388.png)\r\n\r\nThis doesn't happen in prod mode, or with React 16, or with components that are not `createElement`-ed eagerly.\r\n\r\nThis affects react-router, as it uses this pattern:\r\n```jsx\r\n<Router>\r\n  <Suspense fallback={<Loading />}>\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Home />\r\n      </Route>\r\n      <Route exact path=\"/demo\">\r\n        <Demo />\r\n      </Route>\r\n      <Route>\r\n        <NotFound />\r\n      </Route>\r\n    </Switch>\r\n  </Suspense>\r\n</Router>\r\n```\r\n\r\nAFAICT it doesn't break anything, but it is unexpected/confusing.\r\n\r\n## The expected behavior\r\n`lazy` components that are not rendered should not be dynamically imported.",
        "title": "Bug: (17.0.0-rc.1) lazy is eager in dev mode",
        "labels": "Type: Bug",
        "id": 45341
    },
    {
        "body": "```js\r\nfunction foo*() {\r\n  yield 1;\r\n  yield 2;\r\n}\r\n\r\nlet gen = foo()\r\n```\r\n\r\nCurrently if you put `gen` into state or props and then open this component in DevTools, it will consume that generator while trying to format it. So `gen.next()` will give you `{ done: true }` next time you call it.\r\n\r\nThis happens here:\r\n\r\nhttps://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L616-L623\r\n\r\nI think that maybe we should treat iterables differently if they *return themselves* as an iterator. Since that means they're likely stateful and it's not ok to iterate over them.\r\n\r\nWe detect iterables here (DevTools terminology is wrong btw, it should be `iterable` rather than `iterator`):\r\n\r\nhttps://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L438-L439\r\n\r\nI think maybe we could split this into `iterable` and `opaque_iterable`, and make sure none of the codepaths attempt to traverse `opaque_iterable` or pass it to something that would consume it (e.g. `Array.from`).\r\n\r\nWe could detect it based on `data[Symbol.iterator]() === data` \u2014 that clearly signals the iterable is its own iterator (which is the case for generators), and therefore it's not OK for DevTools to consume it.\r\n\r\nMaybe some other heuristic could work. But overall, the goal is that `Map` and friends is still being iterated over, but an arbitrary generator is not.",
        "title": "Bug: DevTools calls arbitrary generators which may be stateful",
        "labels": "Type: Bug",
        "id": 45342
    },
    {
        "body": "A `<Context.Consumer>` callback inside a suspended `<Suspense>` boundary does not receive updates when context value changes.\r\n\r\nThis issue was originally found with React Router (https://github.com/ReactTraining/react-router/issues/7137) but can be reproduced with React alone.\r\n\r\nReact version: 16.13.1 or 17.0.0-rc.0 (and at least *some* earlier versions too)\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/suspense-context-test-case-6jlsq\r\n\r\n## The current behavior\r\n\r\nIn the example above, clicking on the \"About\" button puts the `<Suspense>` boundary into a suspended state. Clicking \"Home\" updates the context value, but the `<Context.Consumer>` callback is not called with this updated value. Therefore the page never navigates back to \"Home\".\r\n\r\nPlease note that `Received context: home` is not logged after the \"Home\" button is pressed.\r\n\r\n## The expected behavior\r\n\r\nThe `<Context.Consumer>` callback should be called with value `'home'` when the value of the context is updated.\r\n\r\nPlease note that the problem does not occur if any of:\r\n\r\n1. the Suspense boundary is never suspended (uncomment the first line of `About` function to verify).\r\n2. `useContext()` is used in place of `<Context.Consumer>` (substitute `<SwitchWithUseContext />` for `<Switch />`).\r\n3. the contents of `Switch` function is inlined within the `<Suspense>` rather than in a separate component.\r\n\r\nThe last of these leads me to suspect that the problem may be related to https://github.com/facebook/react/issues/17356. In the example, `<Context.Consumer>` is within a `Switch` component. But the `<Switch>` element inside `<Suspense>` never changes - so it's effectively memoized. I wonder if this is why it doesn't receive context updates?",
        "title": "Bug: `Context.Consumer` inside `Suspense` does not receive context updates while suspended",
        "labels": "Type: Bug",
        "id": 45343
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 1152. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45344
    },
    {
        "body": "https://github.com/facebook/react/blob/49af88991c3a3e79e663e495458fad12d3162894/packages/react-devtools-shared/src/utils.js#L491\r\n\r\nWe have SuspenseList for the tree view but not when printing JSX.\r\n\r\nWhen we fallthrough here we call getDisplayName with a symbol, because we assume that if it's not a string, then it's a function. We should be checking whether it is a function before calling getDisplayName.\r\n\r\nSubsequently if we call getDisplayName with a symbol we get the error `invalid value used as weak map key` which messes up things after that. I think that's the actual cause of https://github.com/facebook/react/pull/19364",
        "title": "Add SuspenseList to DevTools Element Names",
        "labels": "Type: Bug",
        "id": 45345
    },
    {
        "body": "**Packages**\r\n* `\"react\": \"^16.13.1\"`\r\n* `\"eslint-plugin-react-hooks\": \"^4.0.8\"`\r\n\r\nThe issue #18819 still happens with `eslint-plugin-react-hooks@4.0.8`.\r\n\r\nUsing the example code from the other issue gives the following errors:\r\n\r\n![image](https://user-images.githubusercontent.com/37122343/90794940-59d9a980-e305-11ea-9ec0-98f69b41c280.png)\r\n\r\n![image](https://user-images.githubusercontent.com/37122343/90795019-770e7800-e305-11ea-92b8-b64407b0b22c.png)\r\n\r\n",
        "title": "Bug: eslint-plugin-react-hooks optional chaining in deps",
        "labels": "Type: Bug",
        "id": 45346
    },
    {
        "body": "React version: Any\r\nReact Developer Tools: 4.8.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. create and render a Component which contains infinite iterator\r\n\r\n```js\r\nfunction* makeCounter() {\r\n  let c = 0;\r\n  while (true) {\r\n    yield c++;\r\n  }\r\n}\r\nconst counter = makeCounter();\r\n\r\nconst Sample = () => <Component counter={counter} />;\r\n```\r\n\r\n2. open chrome devtools and select this component with React Dev Tools (Components tab)\r\n\r\n3. crashes after few seconds\r\n\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/happy-lake-c1vyf?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe page crashes due to devtools crash.\r\n\r\n## The expected behavior\r\n\r\ndevtools doesn't crash.\r\n\r\nThis is because ReactDevTools is trying to display elements inside iterator object with transforming it into array here: https://github.com/facebook/react/blob/b6e1d086043a801682ff01b00c7a623d529b46c0/packages/react-devtools-shared/src/utils.js#L606\r\n\r\nIterators could be generally infinite (and also have side effect, like counter in the example). So I think it should not be extracted to array here.\r\n",
        "title": "Bug: Infinite iterator in props causes crash in react-dev-tools",
        "labels": "Type: Bug",
        "id": 45347
    },
    {
        "body": "It looks like the property inspector inside React DevTools is not rendering repeating spaces properly.\r\n\r\nI imagine this can result in some fairly frustrating debugging sessions when doing something like string matching \ud83d\ude04 \r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component that takes a string as a property.\r\n2. Pass multiple spaces in a row to that property `name={'Testing[3 spaces]One Two'}` (I would type the actual spaces, but it appears Github truncates the extra spaces even inside the code snippet!)\r\n3. Inspect that element inside React DevTools.\r\n\r\n## The current behavior\r\n\r\nThe value of the prop `name` is rendered as `Testing One Two`\r\n\r\n## The expected behavior\r\n\r\nThe value of the prop `name` should be rendered as `Testing[3 spaces]One Two`\r\n\r\n---\r\n\r\nBelow are some screenshots of the behavior I'm seeing in production. Here's how the property value is rendered in inspector when it is output directly to the HTML:\r\n\r\n![image](https://user-images.githubusercontent.com/424093/90543915-57841d80-e154-11ea-9151-6b9bd79b4c93.png)\r\n\r\nAnd here is how that same value is rendered inside DevTools:\r\n\r\n![image](https://user-images.githubusercontent.com/424093/90543947-636fdf80-e154-11ea-849b-77fea6cd0c5a.png)\r\n",
        "title": "Bug: Property list does not render repeated spaces properly.",
        "labels": "Type: Bug",
        "id": 45348
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. recorded profiling results\r\n2. browsing results by paging to the right\r\n3. crash\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17854:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree does not contain fiber 2094. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45349
    },
    {
        "body": "<!--\r\nIn the react devtools window, clicking the troubleshooting instructions link opens 2 tabs of the troubleshooting page, instead of once\r\n-->\r\n\r\nReact version: Devtools 4.8.2\r\nFirefox version: 79.0 64-bit\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go to a non-react page\r\n2. Open the devtools box\r\n3. Click troubleshooting instructions\r\n\r\n## The current behavior\r\nOpens 2 tabs of the github page\r\n## The expected behavior\r\nShould open 1 tab of the github page",
        "title": "Bug: Clicking the troubleshooting instructions button on the devtools opens 2 tabs",
        "labels": "Type: Bug",
        "id": 45350
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.0-rc.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the codesandbox demo link below.\r\n2. Click on the `root` and `portal` divs, check the logs.\r\n3. Uncomment the `portal` div's `onClickCapture` noop handler, check the logs again.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/determined-montalcini-vjrgc?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nClicking on the `portal` div logs `\"portal click\"` only.\r\nAdding an `onClickCapture` noop handler on the `portal` div \"fixes\" the root's `onClickCapture` handler.\r\nYou might have to refresh the page between edits, otherwise the root's `onClickCapture` handler might keep working even after removing the portal's `onClickCapture` handler.\r\n\r\n## The expected behavior\r\nClicking on the `portal` div should trigger the root's `onClickCapture` handler, whether the portal div has an `onClickCapture` handler or not.",
        "title": "Bug: (17.0.0-rc.0) Event propagation through portals is inconsistent",
        "labels": "Type: Bug",
        "id": 45351
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I was going through the profiler result to check each render and what triggered each render\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17728:9)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n    at Mj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13351:105)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 21\"",
        "labels": "Type: Bug",
        "id": 45352
    },
    {
        "body": "React version: 16.13.1\r\n\r\nEven though React's code (and other packages like ReactDOM) are wrapped in a IIFE, the code applies an **entire script** strict mode by placing a **'use strict' before any other statement**:\r\nhttps://cdnjs.cloudflare.com/ajax/libs/react/16.13.1/umd/react.production.min.js\r\nhttps://cdnjs.cloudflare.com/ajax/libs/react/16.13.1/umd/react.development.js\r\nhttps://cdnjs.cloudflare.com/ajax/libs/react-dom/16.13.1/umd/react-dom.production.min.js\r\nhttps://cdnjs.cloudflare.com/ajax/libs/react-dom/16.13.1/umd/react-dom.development.min.js\r\n\r\nMDN mentions the \"trap\" of concatenating conflicting scripts strict mode when using the entire script strict mode, see [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#Strict_mode_for_scripts).\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a file with React's code **at the top** and concat an expression that causes a 'use strict' violation\r\n2. Load this file as a script tag\r\n\r\nLink to code example: https://stackblitz.com/edit/use-strict-react?file=index.js\r\n(Scroll to bottom of file to see the concatenated expressions)\r\n\r\n## The current behavior\r\n'use strict' mode is enforced on all the concatenated code, even if it was not defined as 'strict'.\r\nAs a result, 'strict' violations at the other concatenated libraries will now **throw** errors (instead of silencing them), causing the script to stop execution.\r\n\r\n## The expected behavior\r\nGlobal 'use strict' should not be used and should be replaced with function scope strict mode (which already exist in some cases of React IIFE bundles code wrappers, like `react-dom.development`).\r\n\r\n## Misc info\r\n* https://github.com/facebook/react/pull/10933 - Always wrap UMD bundles in IIFEs\r\n* https://github.com/facebook/react/blob/master/scripts/rollup/build.js#L104 - `closure` options for the build script stating `language_out: 'ECMASCRIPT5_STRICT'`\r\n* https://developers.google.com/closure/compiler/docs/api-ref - `ECMASCRIPT5_STRICT` explained (vs `ECMASCRIPT5`)\r\n",
        "title": "Bug: 'use strict' at global level causes issues with scripts concatenation.",
        "labels": "Type: Bug",
        "id": 45353
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\nUser Agent: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Hover over the red circle in the codesandbox. Notice that the Popover comes up above the circle\r\n2. Now, use `CMD/Ctrl` + `+` to zoom the sandbox. Notice how the Popover is displaced\r\n3. Find the red circle in the browser devtools and the React devtools and notice the difference in the position of the red circle. Interestingly enough, the Popover seems to render at the position that the React devtools show it\r\n\r\nNote: Refreshing the page after zooming does not solve the problem.\r\nNote: The problem is reproducible without the `antd` Popover as well, but it's hard to notice visually as nothing looks misplaced\r\n\r\n### Browser devtools\r\n\r\n![Browser devtools](https://i.stack.imgur.com/yFLqS.png)\r\n\r\n### React devtools\r\n\r\n![React devtools](https://i.stack.imgur.com/Pvl2z.png)\r\n\r\nI found this problem when trying to add a popover to a [custom node](https://danielcaldas.github.io/react-d3-graph/docs/#node-view-generator) in [react-d3-graph](https://danielcaldas.github.io/react-d3-graph/). I've removed all other dependencies in order to create this minimal reproducible example.\r\n\r\nI asked this on [SO](https://stackoverflow.com/q/62622105/2950032) and after receiving no response and no success in solving it myself, decided to report it here.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [Sandbox](https://codesandbox.io/s/nameless-sunset-ld78l) and [running app](https://ld78l.csb.app/) from the sandbox\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nThe `foreignObject` is misplaced on zoom\r\n\r\n## The expected behavior\r\n\r\nI would expect that the `foreignObject` gets a proper position, in sync with the DOM's position\r\n",
        "title": "Bug: SVG foreignObject misplaced on browser zoom in React app",
        "labels": "Type: Bug",
        "id": 45354
    },
    {
        "body": "At least 2 words needs to be typed. Then after deleting first one from the end cursor jumps to the beginning of input. It happens only for input of type email so it's supposed to be one word(email) but let's say that user typed second word by mistake and then trying to delete cursor jumps to the end. It happens on Chrome, Opera, Microsoft Edge however on Firefox bug does not occure on Firefox\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\nCreate controlled input of type email and type firstWord secondWord. Try to delete secondWord and then firstWord\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/react-cursor-jumps-to-end-for-input-type-email-9knfi?file=/src/App.js\r\n\r\n\r\n## The expected behavior\r\nCursor does not jump to beginning of input while deleting\r\n",
        "title": "Bug: Cursor of controlled input of type email jumps to the beginning of input while deleting",
        "labels": "Type: Bug",
        "id": 45355
    },
    {
        "body": "React version: 0.0.0-f77c7b9d7\r\nBrowser: Chrome Version 84.0.4147.105 (Official Build) (64-bit)\r\nOS: Ubuntu 18.04.4 LTS\r\n\r\n## Steps To Reproduce\r\n\r\n1. move mouse over button\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/mouseenter-in-reactnext-ibld3?file=/src/Demo.js\r\n\r\n## The current behavior\r\n\r\n`onMouseEnter` fires twice (sometimes it doesn't).\r\n\r\n![video capture of repro steps](https://i.ibb.co/XzdQF68/react-next-mouseenter-twice.gif)\r\n\r\n## The expected behavior\r\n\r\nIt fires only once. Same repro with `react@16.13.1`: https://codesandbox.io/s/mouseenter-in-react16131-9sr7b?file=/src/Demo.js\r\n",
        "title": "Bug: mouseEnter fires twice in react@next",
        "labels": "Type: Bug",
        "id": 45356
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 0.0.0-f77c7b9d7\r\n\r\n## Steps To Reproduce\r\n\r\n1. listen to `onFocus`\r\n2. read `event.type`\r\n\r\n\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/eventtype-in-reactnext-gt71n?file=/src/Demo.js\r\n\r\n## The current behavior\r\n\r\n`event.type === 'focusin'` for `focus` and `focusout` for `blur`. \r\n\r\n## The expected behavior\r\n\r\n`event.type` is unaffected by changes to the native event React listens to. At least `onMouseEnter` works that way where you (sometimes?) have a `mouseover` native event but event.type will still read `mouseover`.",
        "title": "Bug: event.type no longer matches the listener name for onFocus and onBlur",
        "labels": "Type: Bug",
        "id": 45357
    },
    {
        "body": "React version: 0.0.0-f77c7b9d7\r\n\r\n## Steps To Reproduce\r\n\r\n1. Mount a component with even listeners in a `ShadowRoot`\r\n\r\nLink to code example:\r\n\r\n- [codesandbox with `react@next`](https://codesandbox.io/s/next-shadowroot-as-root-element-pkktc) (crashes)\r\n- [codesandbox with `react@16.13.1`](https://codesandbox.io/s/16-shadowroot-as-root-element-m74ob) (mounts  without errors/warnings)\r\n\r\n\r\n## The current behavior\r\n\r\nThrows with \r\n> ensureListeningTo(): received a container that was not an element node. This is likely a bug in React.\r\n\r\n## The expected behavior\r\n\r\n1. throw with a descriptive error that ShadowRoot is no longer supported as a root element\r\n\r\nor\r\n\r\n2. continue to allow ShadowRoot as a root element\r\n\r\nNo preference here. This was just from an old regression test we had. \r\n\r\nWill be fixed by https://github.com/facebook/react/pull/15894",
        "title": "Bug: In react@next ShadowRoot as rootElement in ReactDOM.render crashes",
        "labels": "Type: Bug",
        "id": 45358
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18061:32)\r\n    at ProfilingCache.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18301:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31722:32)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n    at Jj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13448:118)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Cannot read property 'length' of undefined\"",
        "labels": "Type: Bug",
        "id": 45359
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create an app with a `Proxy` function that has a `get` method that returns a function stored in Context\r\n2. Attempt to look at Provider component in devtools\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/stoic-jepsen-7jjfn?file=/src/App.js\r\nhttps://7jjfn.csb.app/\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nWhen using the devtools to inspect the `Context.Provider`, devtools throw an error:\r\n```\r\nUncaught DOMException: Failed to execute 'postMessage' on 'Window': function () {\r\n        return null;\r\n      } could not be cloned.\r\n```\r\nComponents using the context do not show info in devtools and show \"Loading...\" instead.\r\n\r\n## The expected behavior\r\nNo error is thrown.\r\n\r\n## Possibly Related\r\n#16691",
        "title": "Bug: Proxy on Context throws an error in DevTools",
        "labels": "Type: Bug",
        "id": 45360
    },
    {
        "body": "React version: 16.12\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open http://cygnetuat.sterlingdatarooms.com/PDFTronClientTest/ in IE11\r\n2. Wait for the application to load in the iframe\r\n\r\n## The current behavior\r\nSometimes an \"Unspecified error\" will appear in the console and the viewer in the iframe won't load\r\n\r\n![image](https://user-images.githubusercontent.com/15879431/89355081-60162780-d66f-11ea-829a-fbbf2e8e1f32.png)\r\n\r\nUnfortunately it is not 100% reproducible. Sometimes the error won't occur. I'm also having trouble creating a minimal sample to reproduce this.\r\n\r\n## The expected behavior\r\nThere is no error.\r\n\r\n## Investigation\r\n\r\nThe relevant line in the callstack where the error is occurring is here https://github.com/facebook/react/blob/03de849af03996b7477420c97de7741ce1214149/packages/react-dom/src/client/ReactDOMInput.js#L415\r\n\r\nI suspect it might be the same issue discussed here https://github.com/Availity/react-block-ui/issues/18\r\n>This was a real pain to track down, but apparently IE 11 will just throw Unspecified error. when accessing document.activeElement from an <iframe>, sometimes.\r\n\r\nThe solution they used to fix the error was to use this function instead of accessing document.activeElement directly https://gist.github.com/Alex1990/046a6553dc83e22dd6f4\r\n\r\nIdeally this function could be used inside React as well. I am also happy to use a workaround if there is one.",
        "title": "Bug: \"Unspecified error\" some of the time in IE11 in iframe",
        "labels": "Type: Bug",
        "id": 45361
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n\r\nI was profiling unmounting of 30k+ records and this error occurred in dev tools\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17854:21)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17697:24)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14430:86)\r\n    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)\r\n    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)\r\n    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree does not contain fiber 118764. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45362
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Turn on Profiler\r\n2. The app sens a lot of small requests to BE\r\n3. To make sure that all requests fulfilled, I went to Network TAB. When it was finished and stop profiling.\r\n4. The profiler showed some results and then crashed.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 8440. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45363
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)\r\n    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)\r\n    at vh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11067:7)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11733:7)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 4194. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45364
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.2-fed4ae024\r\n\r\nCall stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)\r\n\r\nComponent stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)\r\n    at div\r\n    at div\r\n    at div\r\n    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)\r\n    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)\r\n    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)\r\n    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)\r\n    at div\r\n    at div\r\n    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)\r\n    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)\r\n    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)\r\n    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)\r\n    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",
        "title": "Error: \"Commit tree already contains fiber 2099. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45365
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/eager-euler-c72fw?file=/src/App.js\r\n\r\n1. move from a disabled element to an element with a `mouseenter` listener.\r\n2. `mouseenter` does not fire\r\n\r\nLink to code example: https://codesandbox.io/s/eager-euler-c72fw?file=/src/App.js\r\n\r\n\r\n## The current behavior\r\n\r\n`mouseenter` does not fire because React calculates mouseenter/leave based on the relative element of the opposing event.\r\ne.g. `mouseenter` calculated from the `mouseout` on the button. Browsers do not fire pointer events on disabled elements\r\n\r\n\r\n## The expected behavior\r\n\r\n`mouseenter` should fire\r\n\r\n\r\nPrevious issue: https://github.com/facebook/react/issues/4251",
        "title": "Bug: MouseEnter does not fire when coming _from_ disabled elements",
        "labels": "Type: Bug",
        "id": 45366
    },
    {
        "body": "i was creating new react app and was integrating with mobx while coding the following error arise which is wrong with respect to hook rules stated below\r\n\r\n![Screen Shot 2020-07-18 at 10 17 08 AM](https://user-images.githubusercontent.com/1241338/87842851-4be9d080-c8e2-11ea-925e-9b86ae595af6.png)\r\n\r\nReact version:\"react\": \"^16.13.1\"\r\n\r\nwhere as the code is correct with respect to given rules\r\n![Screen Shot 2020-07-18 at 10 35 08 AM](https://user-images.githubusercontent.com/1241338/87842869-6fad1680-c8e2-11ea-9c69-1db23e335f7d.png)\r\n\r\n[hook rules](https://reactjs.org/warnings/invalid-hook-call-warning.html#breaking-the-rules-of-hooks)\r\n## The current behavior\r\n\r\nReact Hook \"useContext\" is called in function \"login\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks\r\n\r\n## The expected behavior\r\nNo error",
        "title": "Bug: React Hook \"useContext\" is called in function \"login\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks",
        "labels": "Type: Bug",
        "id": 45367
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: `0.0.0-experimental-4c8c98ab9` with concurrent mode. \r\n\r\n## Steps To Reproduce\r\n\r\n1. In the provided code sandbox, click on a `Todo` component\r\n2. Tab back and forth between the two \r\n3. At inconsistent times, there will be a frame where the focus hasn't left, but the outline isn't rendered. The outline is only drawn when focus is in. Because there is a brief frame without the border, the todo visibly flickers. \r\n\r\nLink to code example: \r\n\r\nhttps://codesandbox.io/s/samc-focus-demo-9jyso?file=/package.json:201-229\r\n\r\nVideo; https://drive.google.com/file/d/18PW8M_VvE3Nau7NkdQq4X8En_Vcen_xQ/view?usp=sharing\r\nFocus shifts multiple times at the beginning, without a flicker. \r\nAround the 6 seconds mark, there is a flicker.\r\n\r\n\r\nPhoto of the frame; \r\n![image](https://user-images.githubusercontent.com/787007/87840493-3e811600-c8e3-11ea-8323-076faaabc8c7.png)\r\n\r\n\r\n## The current behavior\r\n\r\nAt times there is an 'impossible' frame, where the focus has been set to false, despite the focus just having shifted from one element to another within the same div. \r\n\r\n## The expected behavior\r\nI'm not sure if this pattern is something that is concurrent mode incompatible or something... \r\n\r\nBut regardless, I'd expect the behaviour to be consistent - eg for `focus` and `blur` events to be combined into a single frame.\r\n\r\nThis codepen shows the expected outcome with vanila JS https://codepen.io/samcooke98/pen/OJMaXvx\r\n\r\n\r\n## Related?\r\nhttps://github.com/facebook/react/issues/19385\r\n\r\n",
        "title": "Bug: onFocus and onBlur has inconsistent batching",
        "labels": "Type: Bug",
        "id": 45368
    },
    {
        "body": "Using concurrent mode on `0.0.0-experimental-7f28234f8` makes `<Checkbox/>` from Baseweb stop firing `onChange` events.\r\n\r\nBaseweb is a popular set of React components that reflects real world usage patterns such that maybe it should work right off the bat with Concurrent mode. Feel free to close if you're confident this is a userland problem and not a framework problem, but I think this may indicate an incompatibility between Concurrent Mode and Legacy mode that isn't documented or warned about it if so, because `<Checkbox/>` isn't doing anything too fancy and doesn't use deprecated APIs or warn when rendered in Strict mode or Concurrent mode. I feel like that means it's supposed to just work, right? \r\n\r\nReact version: `0.0.0-experimental-7f28234f8`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click a `<Checkbox/>` rendered using Legacy mode and note that it checks\r\n2. Click a `<Checkbox/>` rendered using Concurrent mode and note that it does not check \r\n\r\nSee issue here: https://baseweb-react-concurrent-checkbox.stackblitz.io (edit here: https://stackblitz.com/edit/baseweb-react-concurrent-checkbox?file=src/index.js)\r\n\r\nI've been trying to debug and haven't found any smoking guns yet, but there are some interesting tidbits I can share that might allude to if this is a React bug or a Baseweb bug:\r\n - `onFocus` and `onBlur` handlers fire just fine on both modes \r\n - `<Checkbox/>` doesn't use `findDOMNode` or other deprecated APIs in Concurrent mode as best I can tell. No warnings are fired when rendering it in Strict mode or Concurrent + Strict mode\r\n - focusing the `Checkbox` by tabbing and pressing space checks and fires the `onChange` handler on both Legacy and Concurrent mode\r\n - Wide swaths of the rest of baseweb work just fine in Concurrent mode\r\n\r\nSee https://github.com/uber/baseweb/issues/3476 for the `baseweb` issue.",
        "title": "Bug: setState in onFocus breaks onChange event in Concurrent Mode ",
        "labels": "Type: Bug",
        "id": 45369
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open React Dev Tools\r\n2. Click \"Start profiling\" on Profiler tab\r\n3. Expand MUI Expandable component\r\n4. Click \"Stop profiling\"\r\n5. Have this error\r\n\r\n<img width=\"831\" alt=\"Screenshot 2020-07-16 at 11 26 03\" src=\"https://user-images.githubusercontent.com/2836281/87646315-56c42a00-c757-11ea-97f0-d5fb1dd7b776.png\">\r\n\r\nThank you guys for helping with this!\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.1-d4eadea6c\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:167176)\r\n    at T (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:165979)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:168938)\r\n    at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:346620)\r\n    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:60964)\r\n    at Ui (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:70944)\r\n    at Bl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:117704)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103070)\r\n    at Oc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102998)\r\n    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102861)\r\n\r\nComponent stack: at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:346391)\r\n    at div\r\n    at div\r\n    at div\r\n    at Eo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:266560)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:370969\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:279481)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:282269\r\n    at div\r\n    at div\r\n    at Ji (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:329374)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:209300)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:218616)\r\n    at Wa (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:297360)\r\n    at ps (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:376211)",
        "title": "Error: \"Commit tree does not contain fiber 3716. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45370
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I was recording profile and then I was trying to navigate to the other route on my website. Then I have stopped profiler and I have seen this error in the profiler.\r\n2. I am lazy loading the page here.\r\n\r\nHere is my react version:\r\n ```\r\n \"react\": \"16.8.6\",\r\n   \"react-dom\": \"16.8.6\",\r\n```\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.8.1-d4eadea6c\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:167176)\r\n    at T (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:165979)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:168938)\r\n    at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:346620)\r\n    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:60964)\r\n    at Ui (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:70944)\r\n    at Bl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:117704)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103070)\r\n    at Oc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102998)\r\n    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102861)\r\n\r\nComponent stack: at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:346391)\r\n    at div\r\n    at div\r\n    at div\r\n    at Eo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:266560)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:370969\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:279481)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:282269\r\n    at div\r\n    at div\r\n    at Ji (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:329374)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:209300)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:218616)\r\n    at Wa (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:297360)\r\n    at ps (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:376211)",
        "title": "Error: \"Commit tree does not contain fiber 9869. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45371
    },
    {
        "body": "1. The components tab will be completely broken until restarting the chrome extension and closing and reopening the tab.\r\n\r\nOn page reload from code change -> \r\n(broken)\r\n![image](https://user-images.githubusercontent.com/17414704/87494885-aedd2c80-c682-11ea-9c5a-db7a2d5a271c.png)\r\n\r\n\r\n\r\n\r\nAfter closing the tab and turning the extension on and off \r\n\r\n(normal)\r\n\r\n![image](https://user-images.githubusercontent.com/17414704/87494896-b56ba400-c682-11ea-8ff3-c10827568d5b.png)\r\n\r\n\r\n2. Page doesn't update. If I'm on domain.com/PROFILE and then move to domain.com/HOME - the dev tools still shows the components tab for PROFILE and the data doesn't update. \r\n\r\n3. Suspense components break everything below them. If suspense is included in any component it seems to have trouble loading whats below those components randomly. \r\n\r\n4. Occasionally getting the error about cannot find node id# in console. \r\n\r\n\r\n\r\nReact version: 4.8.0\r\n\r\n## Steps To Reproduce\r\n\r\nNot sure. My codebase has pretty much remained the same and this started happening with the newest updates to the dev tool. \r\n\r\nSometimes a reload works fine - sometimes when reloading the component tab doesn't work and shows the image above. \r\n\r\n\r\nLink to code example:\r\n\r\nSorry production build. No code to link. \r\n\r\nBut I can't be the only one having this issue. \r\n\r\n",
        "title": "Bug:  4.8.0 released a ton of bugs - Component Tree broken ",
        "labels": "Type: Bug",
        "id": 45372
    },
    {
        "body": "SSL is not usable because key and cert options are added to an uninitialized options object.\r\n\r\nLine 149 of react-devtools/app.html reads 'let options;'\r\nLine 154 and 155 begin with 'options.cert = \u2026'\r\n\r\nIn every case, this throws an error and enters the catch block.\r\n\r\nReact version: 16.5.2\r\nreact-devtools version: 4.8.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. on command line, execute\r\nKEY=react-devtools-ssl-key.pem CERT=react-devtools-ssl-cert.pem ./node_modules/react-devtools/bin.js\r\n\r\nRegardless of whether the key and cert are valid, the error \"Cannot set property 'key' of undefined\" is thrown.",
        "title": "Bug: react-devtools error when KEY and CERT are provided, SSL not usable",
        "labels": "Type: Bug",
        "id": 45373
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1 (also tested with versions down to 16.9.0)\r\nDevTools extension version: 4.8.1 (Firefox), 4.8.0 (Chrome)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a new app using `create-react-app`\r\n2. Replace the contents of `App.js` with this:\r\n\r\n```jsx\r\nimport React, { Suspense } from \"react\";\r\n\r\nfunction App() {\r\n  return <Suspense></Suspense>;\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n## The current behavior\r\nThe component tree renders up until the empty `<Suspense>` element, and an error is printed to the console.\r\n\r\nExample from a production app:\r\n\r\n![image](https://user-images.githubusercontent.com/1078076/87224862-15afcc80-c389-11ea-95da-aa102333befe.png)\r\n\r\nError stack trace (more or less same as in Chrome):\r\n```\r\nUncaught TypeError: e.child is null\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1029\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1029\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1029\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    Me moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1020\r\n    flushInitialOperations moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1262\r\n    flushInitialOperations moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1257\r\n    o moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:2068\r\n    emit http://localhost:8080/4301/superreports/1359398:1\r\n    emit http://localhost:8080/4301/superreports/1359398:1\r\n    i moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:2075\r\n    y moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:2076\r\n    y moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:2076\r\n    e moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1776\r\n    e moz-extension://3b85dd64-f11d-4480-a0a9-2f6ad211ca37/build/react_devtools_backend.js:1779\r\n```\r\n\r\nThe line in question is this:\r\n```javascript\r\n// Special case: if Suspense mounts in a timed-out state,\r\n// get the fallback child from the inner fragment and mount\r\n// it as if it was our own child. Updates handle this too.\r\nvar u=e.child,c=u?u.sibling:null,s=c?c.child:null;null!==s&&Me(s,a?e:t,!0,r)}else{var f=-1===$?e.child:e.child.child;null!==f&&Me(f,a?e:t,!0,r)}else null!==e.child&&Me(e.child,a?e:t,!0,r);\r\n```\r\nWhich points to this location in the source code:\r\nhttps://github.com/facebook/react/blob/30b47103d4354d9187dc0f1fb804855a5208ca9f/packages/react-devtools-shared/src/backend/renderer.js#L1221\r\n\r\n## The expected behavior\r\nI can view the component tree in React DevTools with no error.",
        "title": "Bug: DevTools extension component tree view crashes on empty Suspense element",
        "labels": "Type: Bug",
        "id": 45374
    },
    {
        "body": "Example:\r\n\r\n```js\r\n        function Example(props) {\r\n          useEffect(() => {\r\n            let topHeight = 0;\r\n            topHeight = props.upperViewHeight;\r\n          }, [props.upperViewHeight]);\r\n        }\r\n```\r\n\r\nThis is **not** supposed to violate because `props.upperViewHeight` is in the deps.",
        "title": "Bug: Exhaustive deps lint rule mistakingly flags an assignment",
        "labels": "Type: Bug",
        "id": 45375
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nLooks like you forgot about the debugger inside the react_devtools_backend.js. \r\n\r\nReact dev tools version: 4.8.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Update (or install) the latest version of devtools\r\n2. Open devtools\r\n3. The code will be stopped on the debugger inside react_devtools_backend.js\r\n\r\n![IMAGE 2020-07-10 13:43:52](https://user-images.githubusercontent.com/20472264/87146286-6523c900-c2b3-11ea-892f-92c01d0a2412.jpg)\r\n\r\n\r\n## The current behavior\r\nIf I open devtools with react dev tools extension it will stop every time on debugger inside react_devtools_backend.js\r\n\r\n## The expected behavior\r\nIt doesn't seem like it should be happening \ud83d\ude03",
        "title": "Bug: Unexpected debugger statement in DevTools (solved)",
        "labels": "Type: Bug",
        "id": 45376
    },
    {
        "body": "```sh\r\nyarn test --build --project devtools\r\n```\r\n\r\nThis doesn't actually run any DevTools tests. It runs the main React tests.\r\n\r\nConsole output shows that it's choosing the wrong config:\r\n```sh\r\n$ yarn test --build --project devtools\r\n$ node ./scripts/jest/jest-cli.js --build --project devtools\r\n$ NODE_ENV=development RELEASE_CHANNEL=experimental node ./scripts/jest/jest.js --config ./scripts/jest/config.build.js\r\n```\r\n\r\nI wonder if this is also happening for other targets?",
        "title": "DevTools test script runs the wrong tests",
        "labels": "Type: Bug",
        "id": 45377
    },
    {
        "body": "Hi, I use Input controlled mode and subscribe  to `onKeyDown` and `onChange` event. It will trigger an effect when user enter space. However, the space don't display on screen. Is this a bug on React or is there something wrong with the way I'm using it. But subscribe to `onKeyUp` is normal. This is confused.\r\n\r\nReact version: 16.13.1 and old\r\n\r\n## Steps To Reproduce\r\n\r\n1. enter space\r\n2. input element don't show space on the screen\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n```js\r\nimport React, { useState,useEffect } from 'react'\r\n\r\nconst App = () => {\r\n  const [count, setCount] = useState(0)\r\n  const [value, setValue] = useState('')\r\n  const [code, setCode] = useState('add')\r\n\r\n  useEffect(() => {\r\n    if (code === 'add') {\r\n      setCount(c => c + 1)\r\n    } else {\r\n      setCount(c => c - 1)\r\n    }\r\n  }, [code, setCount])\r\n\r\n  const keyDown = e => {\r\n    if (e.keyCode === 32) {\r\n      console.log('space~')\r\n      if (code === 'add') {\r\n        setCode('minus')\r\n      } else {\r\n        setCode('add')\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleChange = e => {\r\n    setValue(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>{count}</div>\r\n      <br />\r\n      <input onKeyDown={keyDown} value={value} onChange={handleChange} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n```\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\ninput element can't receive the space\r\n\r\n## The expected behavior\r\n\r\ninput element can receive the space\r\n",
        "title": "Bug: Unrelated state update in onKeyDown blocks onChange and breaks controlled component",
        "labels": "Type: Bug",
        "id": 45378
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nCertain code patterns using optional chaining syntax causes eslint-plugin-react-hooks to throw an error.\r\n\r\nReact version: 16.10.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install eslint-plugin-react-hooks v4.0.5\r\n2. Put this code in a file:\r\n\r\n```tsx\r\nimport React, { useEffect } from 'react';\r\n\r\nexport const Repro = (props) => {\r\n  const foo = {};\r\n\r\n  const bar = () => ({\r\n    pizza: foo.pizza,\r\n    pasta: foo?.pasta,\r\n  });\r\n\r\n  useEffect(bar, []);\r\n\r\n  return <div />;\r\n};\r\n\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nESLint throws the following error:\r\n\r\n```\r\nTypeError: Cannot read property 'references' of undefined\r\nOccurred while linting /path/to/repo/file.ts:102\r\n    at /path/to/repo/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1681:23\r\n    at Set.forEach (<anonymous>)\r\n    at visitFunctionWithDependencies (/path/to/repo/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1672:29)\r\n    at visitCallExpression (/path/to/repo/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:886:19)\r\n    at /path/to/repo/node_modules/eslint/lib/linter/safe-emitter.js:45:58\r\n    at Array.forEach (<anonymous>)\r\n    at Object.emit (/path/to/repo/node_modules/eslint/lib/linter/safe-emitter.js:45:38)\r\n    at NodeEventGenerator.applySelector (/path/to/repo/node_modules/eslint/lib/linter/node-event-generator.js:254:26)\r\n    at NodeEventGenerator.applySelectors (/path/to/repo/node_modules/eslint/lib/linter/node-event-generator.js:283:22)\r\n    at NodeEventGenerator.enterNode (/path/to/repo/node_modules/eslint/lib/linter/node-event-generator.js:297:14)\r\n```\r\n\r\n\r\n## The expected behavior\r\n\r\nESLint does not throw an error.\r\n\r\nThis looks related to https://github.com/facebook/react/issues/19043 and https://github.com/facebook/react/pull/19062.\r\n\r\nI've noticed that it does not throw if a number of slight variations are made to the code. The following do not throw:\r\n\r\n```tsx\r\nimport React, { useEffect } from 'react';\r\n\r\nexport const Repro = (props) => {\r\n  const foo = {};\r\n\r\n  const bar = {\r\n    pizza: foo.pizza,\r\n    pasta: foo?.pasta,\r\n  };\r\n\r\n  useEffect(bar, []);\r\n\r\n  return <div />;\r\n};\r\n```\r\n\r\n```tsx\r\nimport React, { useEffect } from 'react';\r\n\r\nexport const Repro = (props) => {\r\n  const foo = {};\r\n\r\n  const bar = () => ({\r\n    pizza: foo?.pizza,\r\n    pasta: foo?.pasta,\r\n  });\r\n\r\n  useEffect(bar, []);\r\n\r\n  return <div />;\r\n};\r\n```\r\n\r\n```tsx\r\nimport React, { useEffect } from 'react';\r\n\r\nexport const Repro = (props) => {\r\n  const foo = {};\r\n\r\n  const bar = () => ({\r\n    pizza: something.pizza,\r\n    pasta: foo?.pasta,\r\n  });\r\n\r\n  useEffect(bar, []);\r\n\r\n  return <div />;\r\n};\r\n```\r\n\r\ncc @krailler",
        "title": "Bug: Cannot read property 'references' of undefined in eslint-plugin-react-hooks v4.0.5",
        "labels": "Type: Bug",
        "id": 45379
    },
    {
        "body": "PR #19222 recently landed with no CI failures, but `ReactDOMServerSelectiveHydration` was definitely broken as a result of this PR (and was subsequently fixed in #19227). This is just a reminder for one of us to dig into why CI didn't catch this failure.",
        "title": "CI missing failing tests?",
        "labels": "Type: Bug",
        "id": 45380
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Clicked record before firing off the onClick function\r\n2. When I clicked stop recording this error was thrown.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.7.0-23309eb38\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164298)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163705)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:166664)\r\n    at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342328)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:62450)\r\n    at tl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:71793)\r\n    at zl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:113765)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104502)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104430)\r\n    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104298)\r\n\r\nComponent stack: at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342099)\r\n    at div\r\n    at div\r\n    at div\r\n    at Co (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:263571)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:366677\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:276314)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278724\r\n    at div\r\n    at div\r\n    at Xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:325177)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:207026)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:216342)\r\n    at Va (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:293773)\r\n    at us (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:371869)",
        "title": "Error: \"Commit tree already contains fiber 1. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45381
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.7.0-23309eb38\r\n\r\nCall stack: at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163895)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n\r\nComponent stack: at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342099)\r\n    at div\r\n    at div\r\n    at div\r\n    at Co (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:263571)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:366677\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:276314)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278724\r\n    at div\r\n    at div\r\n    at Xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:325177)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:207026)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:216342)\r\n    at Va (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:293773)\r\n    at us (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:371869)",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 450\"",
        "labels": "Type: Bug",
        "id": 45382
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\nBy this video link\r\nhttps://share.getcloudapp.com/xQuDgBXA\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.7.0-23309eb38\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164715)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163849)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163773)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:166664)\r\n    at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342328)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:62450)\r\n    at tl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:71793)\r\n    at zl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:113765)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104502)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104430)\r\n\r\nComponent stack: at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342099)\r\n    at div\r\n    at div\r\n    at div\r\n    at Co (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:263571)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:366677\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:276314)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278724\r\n    at div\r\n    at div\r\n    at Xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:325177)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:207026)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:216342)\r\n    at Va (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:293773)\r\n    at us (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:371869)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45383
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nFrom the docs:\r\n\r\n> React guarantees that setState function identity is stable and won\u2019t change on re-renders. This is why it\u2019s safe to omit from the useEffect or useCallback dependency list.\r\n\r\nWhen React Devtools is opened, new `setState` is created on each rendering, which could lead to inconsistencies.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open the [codesandbox](https://codesandbox.io/s/react-devtools-suspense-bug-hqwuq?file=/src/App.js).\r\n2. Click the \"Open in new window\" button beside the codesandbox browser url.\r\n3. On the new page which is running the code, open the React Devtools `Component` tab.\r\n4. Click on the `App` Component.\r\n5. Refresh the page and click the button \"Component updates xx times\".\r\n6. Nothing is updated.\r\n7. Close devtools, refresh, click the button again, update works fine.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n```jsx\r\n// This component is created solely for\r\n// pointing out the bug\r\nfunction App() {\r\n  const updateCountRef = useRef(0)\r\n  updateCountRef.current++\r\n\r\n  const [state, setState] = useState('A');\r\n\r\n  const cbRef = useRef()\r\n  cbRef.current = () => {\r\n    setState(c => String.fromCharCode(c.charCodeAt(0) + 1))\r\n  }\r\n\r\n  const handler = () => cbRef.current()\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={handler}>\r\n        Component updates {updateCountRef.current} times\r\n      </button>\r\n      <p>Current state value: {state}</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nLink to code example:\r\n\r\n<https://codesandbox.io/s/react-devtools-suspense-bug-hqwuq?file=/src/App.js>\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n- Component does not update when React Devtools is opened.\r\n- New `setState` is created on each rendering.\r\n\r\n## The expected behavior\r\n\r\n- Component should update on each click.\r\n- There should be only one `setState`.",
        "title": "Bug: React Devtools incorrectly updates the setter function of useState hooks",
        "labels": "Type: Bug",
        "id": 45384
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.7.0-23309eb38\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164902)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163705)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:166664)\r\n    at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342328)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:62450)\r\n    at tl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:71793)\r\n    at zl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:113765)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104502)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104430)\r\n    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104298)\r\n\r\nComponent stack: at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342099)\r\n    at div\r\n    at div\r\n    at div\r\n    at Co (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:263571)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:366677\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:276314)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278724\r\n    at div\r\n    at div\r\n    at Xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:325177)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:207026)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:216342)\r\n    at Va (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:293773)\r\n    at us (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:371869)",
        "title": "Error: \"Commit tree does not contain fiber 35. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45385
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.7.0-23309eb38\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164715)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163849)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:166664)\r\n    at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342328)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:62450)\r\n    at tl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:71793)\r\n    at zl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:113765)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104502)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104430)\r\n    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104298)\r\n\r\nComponent stack: at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342099)\r\n    at div\r\n    at div\r\n    at div\r\n    at Co (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:263571)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:366677\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:276314)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278724\r\n    at div\r\n    at div\r\n    at Xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:325177)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:207026)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:216342)\r\n    at Va (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:293773)\r\n    at us (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:371869)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45386
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 0.0.0-experimental-33c3af284\r\n\r\n![image](https://user-images.githubusercontent.com/5390719/84034123-7b94e700-a9cc-11ea-9668-def995e2a09b.png)\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/shared/ConsolePatchingDev.js#L45\r\n\r\n>       // $FlowFixMe Flow thinks console is immutable.\r\n\r\nYes it _is_ immutable in some enviroment. Please add a try catch on it.",
        "title": "Bug: TypeError: \"log\" is read-only.",
        "labels": "Type: Bug",
        "id": 45387
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.7.0-23309eb38\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164715)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163849)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:166664)\r\n    at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342328)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:62450)\r\n    at tl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:71793)\r\n    at zl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:113765)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104502)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104430)\r\n    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104298)\r\n\r\nComponent stack: at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342099)\r\n    at div\r\n    at div\r\n    at div\r\n    at Co (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:263571)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:366677\r\n    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:276314)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278724\r\n    at div\r\n    at div\r\n    at Xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:325177)\r\n    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:207026)\r\n    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:216342)\r\n    at Va (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:293773)\r\n    at us (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:371869)",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45388
    },
    {
        "body": "This issue is very similar to #18985 but it happens with `useCallback` instead of `useEffect`, and the error message is different.\r\n\r\neslint-plugin-react-hooks version: 4.0.4\r\n\r\n## Steps To Reproduce\r\n\r\nThe order of reference matters, if you flip the two calls to `console.log` no error is reported. And as in #18985 replacing `?.` with `.` won't result in an error.\r\n\r\n```js\r\nfunction MyComponent(props) {\r\n  useCallback(() => {\r\n    console.log(props?.foo);\r\n    console.log(props);\r\n  }, [props]);\r\n};\r\n```\r\n\r\n<details>\r\n<summary>package.json</summary>\r\n\r\n```js\r\n{\r\n  \"name\": \"bug-react-hooks\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"scripts\": {\r\n    \"test\": \"eslint test.js\"\r\n  },\r\n  \"dependencies\": {\r\n    \"babel-eslint\": \"^10.1.0\",\r\n    \"eslint\": \"^7.1.0\",\r\n    \"eslint-plugin-react-hooks\": \"^4.0.4\"\r\n  },\r\n  \"eslintConfig\": {\r\n    \"parser\": \"babel-eslint\",\r\n    \"parserOptions\": {\r\n      \"sourceType\": \"module\"\r\n    },\r\n    \"plugins\": [\r\n      \"react-hooks\"\r\n    ],\r\n    \"rules\": {\r\n      \"react-hooks/exhaustive-deps\": \"warn\"\r\n    }\r\n  }\r\n}\r\n```\r\n</details>\r\n\r\n## The current behavior\r\n\r\nThe following warning is reported:\r\n\r\n```text\r\n5:6  warning  React Hook useCallback has an unnecessary dependency: 'props'. Either exclude it or remove the dependency array  react-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo warning should be reported.",
        "title": "Unexpected warning in react-hooks/exhaustive-deps using optional chaining operator",
        "labels": "Type: Bug",
        "id": 45389
    },
    {
        "body": "Hi, I use checkbox uncontrolled mode, onChange in form reset after, lose onChange.\r\n```js\r\n<input type=\"checkbox\" onChange={onChange} />\r\n```\r\n\r\nbut use add ref.addEventListener('change', onChange) is ok\r\n```js\r\nconst checkRef = useRef<HTMLInputElement>();\r\nuseEffect(() => {\r\n        if (checkboxRef) {\r\n            checkboxRef.current.addEventListener('change', onChange);\r\n        }\r\n    }, []);\r\n\r\n<input type=\"checkbox\" ref=\"checkboxRef\" onChange={onChange} />\r\n```\r\n\r\n\r\nReact version: 16.13 and old \r\n\r\n## Steps To Reproduce\r\n\r\n1. checkbox => checked\r\n2. form reset\r\n3. checked  => checked\r\n\r\nLink to code example:\r\n[not react is ok](https://codepen.io/imagine10255/pen/ExPaLOJ?editors=1111)\r\n[reset is lose target onChange](https://codesandbox.io/s/affectionate-brook-96dw9?file=/src/App.js)\r\n\r\n## The current behavior\r\n1. checkbox => checked (target onChange)\r\n2. form reset\r\n3. checked  => checked (lose target onChange)\r\n\r\n## The expected behavior\r\n1. checkbox => checked (target onChange)\r\n2. form reset\r\n3. checked  => checked (target onChange)\r\n",
        "title": "Bug: Form reset lost checkbox onChange event",
        "labels": "Type: Bug",
        "id": 45390
    },
    {
        "body": "# Note this issue is due to [CR bug 1085215](https://bugs.chromium.org/p/chromium/issues/detail?id=1085215)\r\n**It is impacting several other popular extensions as well- including React, Redux, Relay, and Vue devtools.**\r\n\r\n-----\r\n\r\nReact version: 16.13.1\r\nDevTools version: 4.7.0 (5/18/2020)\r\nmacOS version: 10.15.4 (19E287)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a new profile in Google Chrome\r\n2. Install the [React Developer Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)\r\n3. Go to https://reactjs.org\r\n4. Open the browser Dev Tools\r\n\r\n## Screenshots\r\nNot sure this helps, but this is basically what I get after following the aforementioned steps:\r\n![image](https://user-images.githubusercontent.com/260431/82867560-c70eb600-9f33-11ea-9e95-d59ce4e3e548.png)\r\n\r\nWhen using Opera the tabs do show up:\r\n![image](https://user-images.githubusercontent.com/260431/82867684-f4f3fa80-9f33-11ea-9b1d-2a54f8a9101e.png)\r\n\r\n## The current behavior\r\nSometimes the Components and Profiler (i.e. React devtools tabs) don't show up.\r\n\r\n## The expected behavior\r\nThese tabs should show for any site using React.\r\n\r\n## More details\r\n\r\nI've tried a few browsers, including:\r\n1. Google Chrome (83.0.4103.61)\r\n2. Microsoft Edge (83.0.478.37)\r\n3. Opera (68.0.3618.125)\r\n\r\nAll of them should be working, since they're all Chromium based.\r\n\r\nThe most reliable was Opera, which always shows the dev tools tabs. Chrome and Edge behaved the same way, sometimes showing them and other times not.\r\n\r\nI've also taken a look at the background pages of the React Dev Tools extension and they don't show any errors, only these performance metrics in the `devtools_app.html` page:\r\n![image](https://user-images.githubusercontent.com/260431/82867862-413f3a80-9f34-11ea-9b7c-ccd0c8225b01.png)\r\n\r\nThe main background page shows nothing in the console at all times.",
        "title": "Bug: DevTools tabs don't show up sometimes in latest release",
        "labels": "Type: Bug",
        "id": 45391
    },
    {
        "body": "When the optional chaining operator (`?.`) is used inside a hook **and the variable is already listed in the dependencies** `eslint-plugin-react-hooks` reports an unexpected \"missing dependency\" warning. Replacing `?.` with `.` produces the expected behaviour: the warning is no longer reported.\r\n\r\nI would expect that the optional chaining operator (`?.`) be handled as normal property access (`.`) **in the context of this validation**.\r\n\r\nReact version: 16.13.1\r\neslint-plugin-react-hooks version: 4.0.2\r\n\r\n## Steps To Reproduce\r\n\r\nNotice that `foo` is both referenced inside the code in `useEffect` and is listed as a dependency.\r\n\r\n```js\r\nimport React, {useEffect} from 'react';\r\n\r\nconst getFoo = () => undefined;\r\nconst doSomethingWith = (foo) => {};\r\n\r\nexport default () => {\r\n  const foo = getFoo();\r\n\r\n  useEffect(() => {\r\n    if (foo?.bar) {\r\n      doSomethingWith(foo);\r\n    }\r\n  }, [foo]);\r\n\r\n  return null;\r\n};\r\n```\r\n\r\n<details>\r\n<summary>package.json</summary>\r\n\r\n```js\r\n{\r\n  \"name\": \"react-hooks-bug\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"scripts\": {\r\n    \"test\": \"eslint test.js\"\r\n  },\r\n  \"dependencies\": {\r\n    \"babel-eslint\": \"^10.1.0\",\r\n    \"eslint\": \"^7.1.0\",\r\n    \"eslint-plugin-react-hooks\": \"^4.0.2\"\r\n  },\r\n  \"eslintConfig\": {\r\n    \"parser\": \"babel-eslint\",\r\n    \"parserOptions\": {\r\n      \"sourceType\": \"module\"\r\n    },\r\n    \"plugins\": [\r\n      \"react-hooks\"\r\n    ],\r\n    \"rules\": {\r\n      \"react-hooks/exhaustive-deps\": \"warn\"\r\n    }\r\n  }\r\n}\r\n```\r\n</details>\r\n\r\n## The current behavior\r\n\r\nThe following warning is reported:\r\n```\r\nwarning React Hook useEffect has a missing dependency: 'foo?.bar'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo warning should be reported.\r\n\r\n## Additional notes\r\n\r\nWith the following code, which only replaces `?.` with `.`, `eslint-plugin-react-hooks` behaves as expected, that is no warning is reported. (Of course this fails at runtime when `foo` is undefined).\r\n\r\n```js\r\nimport React, {useEffect} from 'react';\r\n\r\nconst getFoo = () => undefined;\r\nconst doSomethingWith = (foo) => {};\r\n\r\nexport default () => {\r\n  const foo = getFoo();\r\n\r\n  useEffect(() => {\r\n    if (foo.bar) {\r\n      doSomethingWith(foo);\r\n    }\r\n  }, [foo]);\r\n\r\n  return null;\r\n};\r\n```",
        "title": "Bug: Unexpected warning in react-hooks/exhaustive-deps using optional chaining operator",
        "labels": "Type: Bug",
        "id": 45392
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Started profiling the application\r\n2. Tried to stop it after couple of navigation and actions on spa, but failed to stop.\r\n3. Finally clicking multiple times on Stop has stopped profiling, and got his issue in graph option\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:167472\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:167418)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:167941)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342270)\r\n    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)\r\n    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:109960)\r\n    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)\r\n    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)\r\n    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)\r\n\r\nComponent stack: in lc\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Could not find node with id \"4557\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45393
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open the Profiler after playing a while with some React Application\r\n2. Try to reach some snap with the player\r\n3. This happens\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162825)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161772)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164582)\r\n    at ec (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:339280)\r\n    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)\r\n    at nl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:69923)\r\n    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:110996)\r\n    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)\r\n    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)\r\n    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)\r\n\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Commit tree does not contain fiber 97. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45394
    },
    {
        "body": "With `eslint-plugin-react-hooks@4.0.1` I observe an unexpected warning\r\non `useWithoutEffectSuffix` hook call.\r\n\r\n## Steps To Reproduce\r\n\r\n1. yarn create react-app hooks-bug\r\n2. cd hooks-bug\r\n3. npm run eject\r\n4. npm i eslint-plugin-react-hooks@4.0.1\r\n5. place code from the examples below into `src/App.js`\r\n6. run `npx eslint src/App.js`\r\n7. check output for warnings mentioned below\r\n\r\n\r\nCode example:\r\n\r\n```\r\nfunction App(props) {\r\n  useWithoutEffectSuffix(props, {});\r\n  return null;\r\n}\r\n\r\nfunction useWithoutEffectSuffix() {}\r\n\r\nexport default App;\r\n```\r\n\r\nnpx eslint src/App.js\r\n\r\n./src/App.js\r\n  2:3  warning  React Hook useWithoutEffectSuffix has a missing dependency: 'props'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\r\n\r\n\u2716 1 problem (0 errors, 1 warning)\r\n\r\n\r\n## The current behavior\r\n\r\n`react-hooks/exhaustive-deps` warning triggered on a custom hook which contains\r\n`-Effect-` in the middle of it's name (but does NOT contain it as a suffix).\r\n\r\n\r\n## The expected behavior\r\n\r\nI would expect `react-hooks/exhaustive-deps` to succeed without warning on\r\na custom hook which contains `-Effect-` in the middle of it's name (but does NOT\r\ncontain it as a suffix).\r\n\r\nI was under impression that only `-Effect` suffix should be reserved because of\r\nthe following quotes:\r\n\r\n> I think ideally we'd reserve Effect suffix for things that mirror the dependency API\r\n\r\n@gaearon's reply on [another issue](https://github.com/facebook/react/issues/18888#issuecomment-626910546)\r\n\r\n> **New Violations:** Check dependencies for all Hooks ending with `Effect`.\r\n\r\n[changelog entry](https://github.com/facebook/react/commit/14e554b3103cc009c86f48ed927f2552649600a6)\r\n\r\nIn case I got something wrong and the plan is to reserve `Effect` word\r\ncompletely (anywhere in custom hook's name), then we at least need to correct\r\nChangelog accordingly.\r\n",
        "title": "[eslint-plugin-react-hooks] Bug: warning on `useWithoutEffectSuffix`",
        "labels": "Type: Bug",
        "id": 45395
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\nsimple running profiler and popout this error\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162221)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161772)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)\r\n\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Commit tree already contains fiber 10819. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45396
    },
    {
        "body": "### Describe what you were doing when the bug occurred:\r\n1. I did profiling on a list, that gets updated on each pagination api call.\r\n2. Once the profiling was done, I moved around in the Profiler to view the Flamegraph\r\n3. Moving to second capture, the Profiler crashed.\r\n\r\n\r\n**DevTools version**: 4.6.0-6cceaeb67\r\n\r\n```\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s\r\n```",
        "title": "Error: \"Commit tree already contains fiber 19587. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45397
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n A component that suspends as a result of a context update is never rendered to DOM after suspension is finished.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/react-suspense-context-bug-rklls?file=/package.json:163-170\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIf a component suspends as a result of a context update, the component's render is called after suspension is finished but the result of the render is not reflected in the DOM (and effects aren't called). \r\n\r\n## The expected behavior\r\n\r\nIf a component suspends as a result of a context update, the component's render should be called and flushed to the DOM and effects called. \r\n\r\n## Related Issues: \r\n\r\nhttps://github.com/facebook/react/issues/17356 - seems related to memoization but this does not use any memoization",
        "title": "Bug: Render after suspense is thrown away leaving DOM unmatched with state",
        "labels": "Type: Bug",
        "id": 45398
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Profiling a slow component\r\nIn a component that rendered 5000 pre tags with single lines of text in them, that has an unrelated controlled text box is the same component that was typed into while profiling. App hung a while and, when it rendered again the error was in the profiler.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162825)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161628)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164582)\r\n    at ec (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:339280)\r\n    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)\r\n    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:109960)\r\n    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)\r\n    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)\r\n    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:98781)\r\n\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Commit tree does not contain fiber 256. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45399
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:173658)\r\n    at p (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:359968)\r\n    at Zc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:360183)\r\n    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)\r\n    at nl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:69923)\r\n    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:110996)\r\n    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)\r\n    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)\r\n    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:98781)\r\n\r\nComponent stack: in Zc\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Could not find commit data for root \"98\" and commit 8\"",
        "labels": "Type: Bug",
        "id": 45400
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:173658)\r\n    at p (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:359968)\r\n    at Zc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:360183)\r\n    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)\r\n    at nl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:69923)\r\n    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:110996)\r\n    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)\r\n    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)\r\n    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:98781)\r\n\r\nComponent stack: in Zc\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Could not find commit data for root \"957\" and commit 2\"",
        "labels": "Type: Bug",
        "id": 45401
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Add interaction tracing with unstable_trace\r\n2. Record a profile, navigate to Profiler > Profiled Interactions\r\n3. Error appears when scrolling view or immediately\r\n\r\n![Kapture 2020-05-01 at 8 37 44](https://user-images.githubusercontent.com/131928/80805899-3688c400-8b87-11ea-88ca-3a7ae7de3589.gif)\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:344360\r\n    at Array.map (<anonymous>)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:344166\r\n    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)\r\n    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:109960)\r\n    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)\r\n    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)\r\n    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:98781)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46014\r\n\r\nComponent stack: in Unknown\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in n\r\n    in div\r\n    in bc\r\n    in div\r\n    in n\r\n    in div\r\n    in vc\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Cannot read property 'duration' of undefined\"",
        "labels": "Type: Bug",
        "id": 45402
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n\r\nProfiled the new FB. Scrolled down to tail loads.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-a2fb84beb\r\n\r\nCall stack: at chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:345591\r\n    at Array.map (<anonymous>)\r\n    at chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:345397\r\n    at Ai (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:32:62580)\r\n    at zl (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:32:112694)\r\n    at jc (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:32:104789)\r\n    at Oc (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:32:104717)\r\n    at Tc (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:32:104585)\r\n    at gc (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:32:101042)\r\n    at chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:32:47376\r\n\r\nComponent stack: at chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:344679\r\n    at div\r\n    at div\r\n    at n (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:194307)\r\n    at div\r\n    at Cc (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:346311)\r\n    at div\r\n    at n (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:3:8163)\r\n    at div\r\n    at bc\r\n    at div\r\n    at div\r\n    at div\r\n    at Do (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:262081)\r\n    at chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:364048\r\n    at n (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:274563)\r\n    at chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:277138\r\n    at div\r\n    at div\r\n    at ol (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:323458)\r\n    at Ze (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:205764)\r\n    at pn (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:215038)\r\n    at $a (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:292153)\r\n    at ws (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/main.js:40:369231)",
        "title": "Error: \"Cannot read property 'duration' of undefined\"",
        "labels": "Type: Bug",
        "id": 45403
    },
    {
        "body": "React version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nimport React, { Suspense, lazy } from \"react\";\r\n\r\nconst Async = lazy(() => {}); // <------\r\n\r\nlet App = () => {\r\n\treturn (\r\n\t\t<Suspense fallback={\"Loading\"}>\r\n\t\t\t<Async />\r\n\t\t</Suspense>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/elegant-fermi-bxwtb\r\n\r\nMight be related to https://github.com/facebook/react/issues/15019, https://github.com/facebook/react/pull/15222\r\n\r\n## Context\r\n\r\nI know that this is incorrect code, but `lazy(() => {import(...)})` is a rather easy typo to make.\r\nThe main reason why I'm bringing this is up is that other tools (like JSDOM and Codesandbox with the link above) expect an `Error` object to be thrown. \r\n\r\n## The current behavior\r\n\r\n\r\n**Input**: `const Async = lazy(async () => ({}));`\r\n**Error**: (this is correct)\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: [object Object]\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```\r\n\r\n**Input**: `const Async = lazy(() => ({}));`\r\n**Error**: (the exception is not an `Error` object)\r\n```\r\nUncaught {}\r\n```\r\n\r\n**Input**: `const Async = lazy(() => {});`\r\n**Error**:  (the exception is not an `Error` object)\r\n```\r\nUncaught undefined\r\n```\r\n\r\n\r\n## The expected behavior\r\n\r\n**Input**: `const Async = lazy(async () => ({}));`\r\n**Error**:\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: [object Object]\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```\r\n\r\n**Input**: `const Async = lazy(() => ({}));`\r\n**Error**:\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: undefined\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```\r\n\r\n**Input**: `const Async = lazy(() => {});`\r\n**Error**:\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: [object Object]\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```",
        "title": "Bug: `React.lazy` throws undefined instead of an `Error` object",
        "labels": "Type: Bug",
        "id": 45404
    },
    {
        "body": "When I try to navigate in commits React Dev Tools Profiler I get this error:\r\n\"Commit tree does not contain fiber 8562.\"\r\n![Screen Shot 2020-04-27 at 12 00 23](https://user-images.githubusercontent.com/8399579/80387189-bad50180-887e-11ea-860a-3821b2d9603c.png)\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Commit tree does not contain fiber 3204. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45405
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Profiled my session, then selected to show commits over 10ms\r\n2. Went through commits in profiler \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.6.0-6cceaeb67\r\n\r\nCall stack: at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162825)\r\n    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161772)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164582)\r\n    at ec (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:339280)\r\n    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)\r\n    at nl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:69923)\r\n    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:110996)\r\n    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)\r\n    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)\r\n    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)\r\n\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Commit tree does not contain fiber 55875. This is a bug in React DevTools.\"",
        "labels": "Type: Bug",
        "id": 45406
    },
    {
        "body": "Repro case with a master build: https://codesandbox.io/s/stoic-mcnulty-dhygf?file=/src/App.js:668-703\r\n\r\nExpected: we see content after a second.\r\nActual: fallback never resolves.\r\n\r\nThis happens in a sequence of:\r\n\r\n1. Normal update\r\n   - which suspends\r\n2. Idle update\r\n   - which also suspends\r\n3. An unrelated normal update immediately followed by a ping (so they're batched)\r\n   - here, we decide to stay on fallback, but should've shown the content\r\n\r\nIf you remove `_setVersion(v => v + 1);` on line 44 then the issue goes away.",
        "title": "Bug: Normal update between Idle render and a Ping causes Fallback to get stuck",
        "labels": "Type: Bug",
        "id": 45407
    },
    {
        "body": "This repro is quite convoluted but it's the best I could extract. It seems like numerous things need to happen to trigger this bug. To reproduce:\r\n\r\n1. Open https://codesandbox.io/s/great-wildflower-mv89b and wait a second\r\n3. Observe that there is only one \"Hello\" (for UB). Normal update got stuck.\r\n4. Also notice how clicking \"wake up\" (which schedules a dummy update) will let the other updates \"come through\".\r\n\r\nYou may need to tweak the timing of CPUSpin component if this doesn't repro for you.",
        "title": "Bug: Idle updates may cause normal priority updates to get \"stuck\"",
        "labels": "Type: Bug",
        "id": 45408
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: I think any experimental version. \r\nTested using:\r\n* `0.0.0-experimental-5faf377df` and\r\n* `0.0.0-experimental-e5d06e34b` at least.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open CodeSandbox: https://codesandbox.io/s/createroot-broken-focus-onchange-ysrut?file=/src/App.js\r\n2. Attempt to click on the label text for the checkbox in the createRoot section\r\n3. Notice that the checkbox **won't** check - `onChange` isn't called\r\n2. Attempt to click on the label text for the checkbox in the render section\r\n3. Notice that the checkbox **will** check - `onChange` is called\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/createroot-broken-focus-onchange-ysrut?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nWhen rendering using `createRoot`:\r\n\r\n* `onFocus` is called\r\n* `onChange` **is not** called\r\n\r\nWhen rendering using `render`:\r\n\r\n* `onFocus` is called\r\n* `onChange` **is** called\r\n\r\nMy coworker and I spent a bit of time debugging this, if we at all schedule the `onFocus` setState handler (using `setTimeout`, or `requestAnimationFrame` for example), then `onChange` is always called from the input.\r\n\r\ne.g.\r\n\r\n```jsx\r\nhandleFocus = () => {\r\n  setTimeout(() => this.setState({ isHovered: true }), 0)\r\n  // or\r\n  requestAnimationFrame(() => this.setState({ isHovered: true }))\r\n}\r\n```\r\n\r\nAdditionally, if the label is a sibling to the input:\r\n\r\n```jsx\r\nreturn (\r\n  <>\r\n    <input id=\"id\" onChange={} type=\"checkbox\" checked={} />\r\n    <label htmlFor=\"id\" onFocus={}>\r\n      label text\r\n    </label>\r\n  </>\r\n)\r\n```\r\n\r\nthen the `onChange` handler **will** be called as well (Note: `onFocus` **won't** be called in this case because there isn't a focusable element within it).\r\n\r\nAlso worth noting, re-implementing the checkbox component using hooks will still run into the same bug - no differences between using classes vs hooks.\r\n\r\n## The expected behavior\r\n\r\nCalling `setState` in `onFocus` **shouldn't** prevent `onChange` on a nested input element to be called. Both `onFocus` and `onChange` should be called.",
        "title": "Bug: Bubbled onFocus handler that triggers an update prevents onChange handler in createRoot",
        "labels": "Type: Bug",
        "id": 45409
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nVersion:\r\n- React @ `16.13.1`\r\n- Firefox @ `75.0` (version for Manjaro Linux)\r\n- DevTools version `4.6.0-6cceaeb67`\r\n\r\n**IMPORTANT:** I have the same React DevTools version `4.6.0-6cceaeb67` installed in Google Chrome Beta 81 and it's working as expected.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open React DevTools Components tab\r\n2. Select a component with props/state\r\n3. Try to add props or edit props, state or hooks.\r\n\r\nHere's a screen grab of the issue:\r\n\r\n![react_devtools_issue](https://user-images.githubusercontent.com/16565602/78829763-516b7c80-79bd-11ea-9e24-62b6e16a8ecf.gif)\r\nBetween the clicks, I'm typing on my keyboard, but nothing happens.\r\n\r\n## The current behavior\r\n\r\nAll keys typed in this tab are ignored.\r\n\r\n## The expected behavior\r\n\r\nI should be able to add props or alter props, state, hooks, etc.",
        "title": "Bug: Devtools in Firefox does not allow adding props or editing props/state/hooks",
        "labels": "Type: Bug",
        "id": 45410
    },
    {
        "body": "Compare two screenshots closely. The space after \"from\" disappears when the next word is selected. \r\n<img width=\"574\" alt=\"Screenshot 2020-04-07 at 13 26 40\" src=\"https://user-images.githubusercontent.com/810438/78668988-7b487480-78d3-11ea-8836-7c75fb907e4f.png\">\r\n\r\n\r\n<img width=\"776\" alt=\"Screenshot 2020-04-07 at 13 26 35\" src=\"https://user-images.githubusercontent.com/810438/78668983-7a174780-78d3-11ea-967e-31d3f68aef64.png\">\r\n",
        "title": "Bug: DevTools search filtering removes a space",
        "labels": "Type: Bug",
        "id": 45411
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n## Steps To Reproduce\r\n\r\nRepro steps using confidential internal fb tool provided separately (https://fb.workplace.com/groups/2299331103613797/permalink/2605716262975278/)\r\n\r\nGist of the repro:\r\n1) open app\r\n2) open react dev tools to profiling tab\r\n3) turn on \"Record why each component rendered while profiling\"\r\n4) interact with app\r\n5) following error occurs: \"TypeError: Cannot read property 'memoizedState' of null\"\r\n6) inspecting the flamegraph now shows incomplete information\r\n\r\nBased on the stack trace, it looks like the issue occurs specifically on this line:\r\nhttps://github.com/facebook/react/blob/3e94bce765d355d74f6a60feb4addb6d196e3482/packages/react-devtools-shared/src/backend/console.js#L135",
        "title": "Bug: Dev Tools: TypeError: Cannot read property 'memoizedState' of null",
        "labels": "Type: Bug",
        "id": 45412
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nWhen hydrating from the server, whenever there's a mismatch in the initially checked input in a radio button group and the inputs use `defaultChecked` (uncontrolled), there is no warning of that mismatch and the component behaves in a buggy way for the input that was initially selected in the server payload (the `onChange` callback prop is not fired for the input that was marked as selected in the initial html, when selecting it).\r\n\r\nWorth noting that using a controlled input (using `checked`) makes the bug go away.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. In the example provided below, make sure you refresh the browser within Code Sandbox.\r\n2. Check the first radio button. Verify that the radio is checked, but the text next to it still shows as \"not checked\" (which means the onChange prop was not triggered)\r\n3. Attempt to select any other option (works fine), and then back the first one (works fine too).\r\n4. Refreshing the page again, choosing any other option other than the first works fine.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/affectionate-stonebraker-3wj68\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nI know that using hydrate doesn't guarantee fixing the mismatches, but it says that it should warn about them in development (https://reactjs.org/docs/react-dom.html#hydrate). In this case, React doesn't warn about the mismatch, and the behavior is buggy, as shown in the example and steps to repro.\r\n\r\n## The expected behavior\r\n\r\nReact should ideally work without the issue, but given that it's not guaranteed to be fixed according to the documentation, it should at least warn about the mismatch.",
        "title": "Bug: Server hydration mistmatch and radio group with defaultChecked",
        "labels": "Type: Bug",
        "id": 45413
    },
    {
        "body": "Sandbox: https://codesandbox.io/s/cranky-kapitsa-op3jh\r\n\r\nRepro: type \"a\" and then after a second \"b\"\r\n\r\nExpected: Eventually you'll see \"ab\" in all fields. Pending \"...\" indicator goes away.\r\n\r\nActual: You'll keep seeing \"a\" in low pri field. Pending \"...\" indicator is stuck.",
        "title": "Bug: Dropped update when render phase update happens before suspending",
        "labels": "Type: Bug",
        "id": 45414
    },
    {
        "body": "See https://github.com/facebook/react/pull/16632. I haven't verified but it seems plausible.",
        "title": "Bug: Suspense fallbacks potentially never showing due to a race",
        "labels": "Type: Bug",
        "id": 45415
    },
    {
        "body": "\r\nReact version: 0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. Wrap and error boundary around a suspense boundary inside a `<SuspenseList revealOrder=\"together\" />`\r\n2. Crash with `Cannot read property 'shared' of null`\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/quirky-cannon-e4t1c is forked from https://codesandbox.io/s/black-wind-byilt\r\n\r\n## The current behavior\r\n\r\nThe following code causes the described crash:\r\n\r\n```jsx\r\n<SuspenseList revealOrder=\"together\">\r\n  <ErrorBoundary fallback={null}>\r\n    <Suspense fallback={<h2>Loading posts...</h2>}>\r\n      <ProfileTimeline resource={resource} />\r\n    </Suspense>\r\n  </ErrorBoundary>\r\n  <Suspense fallback={<h2>Loading fun facts...</h2>}>\r\n    <ProfileTrivia resource={resource} />\r\n  </Suspense>\r\n</SuspenseList>\r\n```\r\n\r\n`revealOrder=\"forwards\"` does not crash as well as placing the error boundary inside the suspense boundary like so: \r\n```jsx\r\n<SuspenseList revealOrder=\"together\">\r\n  <Suspense fallback={<h2>Loading posts...</h2>}>\r\n    <ErrorBoundary fallback={null}>\r\n      <ProfileTimeline resource={resource} />\r\n    </ErrorBoundary>\r\n  </Suspense>\r\n  <Suspense fallback={<h2>Loading fun facts...</h2>}>\r\n    <ProfileTrivia resource={resource} />\r\n  </Suspense>\r\n</SuspenseList>\r\n```\r\n\r\n## The expected behavior\r\n\r\nThe position of the ErrorBoundary is likely wrong in the first place (since I can move it around to not cause a crash while preserving the semantics I expect). Maybe this needs a descriptive warning/error why this is happening and how I should resolve it?\r\n",
        "title": "Bug: SuspenseList revealOrder=\"together\" and error boundaries",
        "labels": "Type: Bug",
        "id": 45416
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n\r\n1. Changing root of Flamegraph from a React one to https://github.com/michalochman/react-pixi-fiber\r\n\r\n![image](https://user-images.githubusercontent.com/3090066/77679090-03e91b80-6f8a-11ea-8637-dd162f96a675.png)\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.5.0-355970aa4\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:171903)\r\n    at p (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:358164)\r\n    at Zc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:358379)\r\n    at ti (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58696)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67715)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108833)\r\n    at jc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:100072)\r\n    at Oc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99997)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99862)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96528)\r\n\r\nComponent stack: in Zc\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Could not find commit data for root \"220\" and commit 65\"",
        "labels": "Type: Bug",
        "id": 45417
    },
    {
        "body": "Repro: https://codesandbox.io/s/fast-water-4i4jb\r\n\r\nNotice the flash. I'd expect `suspended` to be `true` during the high pri render.",
        "title": "Bug: High-pri setState causes primary tree to get unhidden",
        "labels": "Type: Bug",
        "id": 45418
    },
    {
        "body": "https://codesandbox.io/s/upbeat-frost-3tt25\r\n\r\n1. Press Suspend, see \"Loading...\"\r\n2. Wait five seconds, you'll see \"Happy birthday\" at some point \r\n3. You won't see it again no matter how long you wait\r\n\r\nExpected: you'll see it every five seconds.",
        "title": "Bug: Updates in the primary tree only unsuspend once",
        "labels": "Type: Bug",
        "id": 45419
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I was using the devtools to investigate some performance issues w/ an app I help maintain\r\n2. I had just turned on the \"Record why each component rendered while profiling\" checkbox\r\n3. I ran a profile while navigating on the underlying page\r\n\r\nThe react profiler tab in the devtools gave this error, I think as I clicked the record icon to stop recording the profile.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.5.0-355970aa4\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160881)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160015)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n    at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159939)\r\n\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s",
        "title": "Error: \"Cannot read property 'concat' of undefined\"",
        "labels": "Type: Bug",
        "id": 45420
    },
    {
        "body": "Since the latest plugin version (2.5.0) there should be a recommended config for `eslint-plugin-react-hooks`.\r\n\r\nSee: https://github.com/facebook/react/tree/master/packages/eslint-plugin-react-hooks\r\nPR: #14762\r\n\r\nUnfortunately this config did not work. I'am pretty sure the bundled `index.js` did not include the expected code.\r\n\r\neslint version: 6.8.0\r\neslint-plugin-react-hooks version: 2.5.0\r\n\r\n## Steps To Reproduce\r\n\r\nLink to code example:\r\n\r\nhttps://github.com/bobaaaaa/eslint-plugin-react-hooks-err\r\n\r\n## The current behavior\r\n\r\n```\r\nOops! Something went wrong! :(\r\n\r\nESLint: 6.8.0.\r\n\r\nESLint couldn't find the config \"plugin:react-hooks/recommended\" to extend from. Please check that the name of the config is correct.\r\n\r\nThe config \"plugin:react-hooks/recommended\" was referenced from the config file in \"${projectDir}/eslint-plugin-react-hooks-err/.eslintrc.json\".\r\n\r\nIf you still have problems, please stop by https://gitter.im/eslint/eslint to chat with the team.\r\n\r\nerror Command failed with exit code 2.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\n## The expected behavior\r\n\r\n```\r\nyarn exit code 0\r\n```",
        "title": "Bug: [eslint-plugin-react-hooks] recommended config rules did not work",
        "labels": "Type: Bug",
        "id": 45421
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact-dom version: 16.9.0 to 16.12.0 (latest)\r\n\r\nThis bug was not present in 16.8.6\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a controlled input element\r\n2. Add an `onKeyDown` event handler that will change a state.\r\n3. Add a `useEffect` hook that depends on the state from (2.), and changes another state\r\n4. Try to type in something in the input\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/nostalgic-lake-zzynt\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe input updates with the key the user has pressed\r\n\r\n## The expected behavior\r\nThe input doesn't update. The handler for `onKeyDown` was called, but the handler for `onChange` wasn't.\r\n",
        "title": "Bug: input won't trigger onChange after a chain of setStates",
        "labels": "Type: Bug",
        "id": 45422
    },
    {
        "body": "React version: 16.12\r\n\r\nIf one component throws, and one of its siblings logs something else to the console, that sibling's logs appear in between the throwing component and the extra React information about that throw.\r\n\r\nThis is hard to explain in words but easy to explain in code and pictures, so look:\r\n\r\nRepro: https://codesandbox.io/s/boring-firefly-bu79e\r\n\r\n![image](https://user-images.githubusercontent.com/6820/75078940-d822d380-54bb-11ea-99d2-c77fbc0c9a5b.png)\r\n\r\nThe third log line (\"The above\u2026\") refers to the first (\"Uncaught\u2026\") but looks like it refers to the second (\"Please don't\u2026\"). This is confusing when debugging.\r\n\r\nInstead, I would expect \"The above error\u2026\" to be right below the uncaught window-level exception we raise. (Maybe this isn't possible without diverging dev vs. prod behavior? Not sure but thought I'd file\u2026)",
        "title": "Arbitrary log lines may appear in between an error and the subsequent \"The above error\u2026\" message",
        "labels": "Type: Bug",
        "id": 45423
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nhttps://stackoverflow.com/questions/60345064/react-hooks-rendering-cause\r\n\r\nI'm playing with simple React components to understand when rendering occurs.\r\n\r\n\r\n## The current behavior\r\n\r\n[Sample 1][1] - Initially renders once. Regardless of the number of times the button is clicked, it doesn't render. This is expected.\r\n\r\n    import React, { useState } from \"react\";\r\n    import \"./styles.css\";\r\n    \r\n    export default function App() {\r\n      const [state, setState] = useState([\r\n        { id: 1, name: \"test1\" },\r\n        { id: 2, name: \"test2\" }\r\n      ]);\r\n      const onClick = () => setState(data => data);\r\n      console.log(\"App rendered\");\r\n      return (\r\n        <div className=\"App\">\r\n          <h1>Test if setting same data causes re-rendering</h1>\r\n          <button onClick={onClick}>Call setState with same data</button>\r\n          {state.map(({ id, name }) => (\r\n            <p key={id}>{name}</p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n[Sample 2][2] - Initially renders twice since `useEffect` updates `setMessages` with a value. This is expected. However, if the button is click 1+ times, it renders once. It shouldn't even re-render since the same value is being set. **Why is it rendering if no new value / reference is being updated?**\r\n\r\n    import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\n    import axios from \"axios\";\r\n    import \"./styles.css\";\r\n    \r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    export default function App() {\r\n      const [messages, setMessages] = useState([]);\r\n      useEffect(() => {\r\n        axios\r\n          .get(`https://api.myjson.com/bins/10xva4`)\r\n          .then(({ data: { messages } }) => setMessages(messages));\r\n      }, []);\r\n      const Display = useMemo(\r\n        () =>\r\n          messages.map(({ content, senderUuid, sentAt }, index) => {\r\n            let d = new Date(sentAt);\r\n            return (\r\n              <div className=\"container\" key={index}>\r\n                <p>Content: {content}</p>\r\n                <p>SenderUuid: {senderUuid}</p>\r\n                <p>DayOfTheWeek: {d.getDate()}</p>\r\n                <p>Month: {d.getMonth()}</p>\r\n                <p>Day: {days[d.getDay()]}</p>\r\n                <p>Year: {d.getFullYear()}</p>\r\n              </div>\r\n            );\r\n          }),\r\n        [messages]\r\n      );\r\n      const onClick = useCallback(() => setMessages(messages => messages), []);\r\n      console.log(\"App rendered\");\r\n      // console.log({ messages });\r\n      return useMemo(\r\n        () => (\r\n          <div className=\"App\">\r\n            <button onClick={onClick}>Call setMessages with same data</button>\r\n            {Display}\r\n          </div>\r\n        ),\r\n        [Display, onClick]\r\n      );\r\n    }\r\n\r\n\r\n  [1]: https://codesandbox.io/s/testing-rendering-bo9bp\r\n  [2]: https://codesandbox.io/s/call-api-with-useeffect-vlo34\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## The expected behavior\r\n\r\nShould not re-render if no new value or reference is updated.\r\n",
        "title": "Bug: Unexpected render",
        "labels": "Type: Bug",
        "id": 45424
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\neslint-plugin-react-hook@v2.4.0\r\n\r\nAt `cjs/eslint-plugin-react-hooks.development.js` and `cjs/eslint-plugin-react-hooks.production.min.js`, the version notation in the comment is broken.\r\n\r\nv2.3.0 is ok.\r\n\r\nNot fatal, but could be a bug.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n```js\r\n/** @license React vundefined\r\n```\r\n\r\n## The expected behavior\r\n\r\n```js\r\n/** @license React v2.4.0\r\n```",
        "title": "Bug: [eslint-plugin-react-hooks] In comment, the version notation is broken.",
        "labels": "Type: Bug",
        "id": 45425
    },
    {
        "body": "## Steps to reproduce\r\n\r\n1. create a memoized value using `useMemo`\r\n2. a React component is used in the creation of this value, in a JSX expression\r\n3. specify the React component in the dependency array\r\n\r\nLink to code example: https://github.com/zeorin/eslint-plugin-react-hooks-repro\r\n\r\n## The current behavior\r\n\r\n```\r\nReact Hook useMemo has an unnecessary dependency: 'Component'. Either exclude it or remove the dependency array react-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo lint errors.\r\n\r\n## More details\r\n\r\nA simple repro (taken from the link above) is:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component: Component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: () => <Component />\r\n\t}), [Component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\n## Workarounds\r\n\r\nIf one changes the component to lowercase, the lint error goes away. It does also mean that we need to change the way we render the component:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: component\r\n\t}), [component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\nAlternatively we can decide not to use JSX, in which case the lint rule functions correctly, too:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component: Component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: () => React.createElement(Component)\r\n\t}), [Component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\n## Impact\r\n\r\nCurrently it is hard to use props that are components in a JSX expression if one is using the `exhaustive-deps` rule.\r\n\r\nThis is also compounded by the fact that this rule has a ESLint fix that removes the dependency, thus changing the behaviour of the code and leading to bugs. See https://github.com/facebook/react/issues/16313 for that bug report.",
        "title": "Bug: [eslint-plugin-react-hooks] exhaustive-deps false positive on \"unnecessary\" dependency if its a React component",
        "labels": "Type: Bug",
        "id": 45426
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.4.0-f749045a5\r\n\r\nCall stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154255)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157019)\r\n    at yl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:320890)\r\n    at ei (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58864)\r\n    at Mi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67500)\r\n    at yl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108161)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99474)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99399)\r\n    at fc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96173)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45937\r\n\r\nComponent stack: in yl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "DevTools Profiler: \"getCommitTree(): Unable to reconstruct tree for root \"\u2026\" and commit \u2026\"",
        "labels": "Type: Bug",
        "id": 45427
    },
    {
        "body": "If you create a component via `React.memo` and then explicitly provide it with a `displayName`, DevTools ignore this display name.\r\n\r\nReact version: 16.12.0\r\nDevTools version: 4.4.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component like:\r\n```tsx\r\nconst FancyMemoComponent = React.memo(() => 'Check my name in DevTools')\r\n```\r\n2. Provide it with a `displayName`\r\n```tsx\r\nFancyMemoComponent.displayName = 'FancyMemoComponent'\r\n```\r\n3. Check its name in DevTools.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/react-memo-display-name-vk7gv\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nDevTools do not display the given `displayName`.\r\n\r\n## The expected behavior\r\n\r\nDevTools should display the given `displayName`.\r\n\r\n## Comments\r\n\r\nI am aware that the name can be picked from the function inside `React.memo`, but I prefer using anonymous functions.\r\n\r\nI am using this workaround:\r\n```tsx\r\nFancyMemoComponent.type.displayName = 'FancyMemoComponent'\r\n```\r\n",
        "title": "`displayName` from memoized components should be taken into account in DevTools",
        "labels": "Type: Bug",
        "id": 45428
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 241c446\r\n\r\n## Steps To Reproduce\r\n\r\nhttps://codesandbox.io/s/romantic-gates-2hrjp\r\n\r\n1. Click \"Show A\" to render the lazy component.  \r\n2. Type into the input whose placeholder says it works. startTransition will call, inline loading will show for 2 seconds, then the Suspense boundary will trigger.\r\n3. Click the \"update\" button - same as above - everything works\r\n4. Now type into the input whose placeholder says it *doesn't* work. Note that the inline placeholder stays up for the entire time; the Suspense boundary never shows.\r\n5. Now note that steps 2 or 3 will likely immediately show the suspense boundary. The bypassed rendering of the Suspense boundary from step 4 seems to be backed up, stuck somewhere, and is now unleashed.\r\n\r\nNote that steps 2 and 3 are optional. No matter what, the preventDefault that's called in step 4 causes this incorrect behavior no matter whether steps 2 or 3 have been exercised. \r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:  see above\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nstartTransition should suspend after the timeout even if event.preventDefault is called.\r\n\r\n## The expected behavior\r\n\r\nit does not ",
        "title": "Bug: event.preventDefault is wrecking havoc with startTransition",
        "labels": "Type: Bug",
        "id": 45429
    },
    {
        "body": "The DevTools Profiler occasionally encounters the error:\r\n> Could not find commit data for root \"...\" and commit ...\r\n\r\nThis issue is intermittent and we do not currently know hot to reproduce it. **If you can reproduce it** we would love to get any of the following information from you:\r\n* Info about how you reproduce it. (Share your code or site with us?)\r\n* An exported Profiler JSON that contains the bug. (This may be less useful, since the bug likely happens pre-export- but may still be helpful.)",
        "title": "DevTools Profiler: \"Could not find commit data for root \u2026\"",
        "labels": "Type: Bug",
        "id": 45430
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.8.0\r\n\r\n## Steps To Reproduce\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/usereducer-wfcmq Link to codesandbox.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nInitially step is 0. So for every step react does not rerender due to this https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L1347. But state updates are queued. So when `step` changes all the state updates are done and hence creates a bug by adding the new step prop.\r\n\r\nhttps://overreacted.io/a-complete-guide-to-useeffect/#why-usereducer-is-the-cheat-mode-of-hooks",
        "title": "Bug: useReducer runs the queued updates with new props",
        "labels": "Type: Bug",
        "id": 45431
    },
    {
        "body": "We currently run all passive destroy functions for an individual Fiber before running passive create functions. What we *should* be doing is running all passive destroy functions for *all* fibers before running *any* passive create functions (like we do for layout effects).\r\n\r\nThe reason this is important is that interleaving destroy/create effects between sibling components might cause components to interfere with each other (e.g. a destroy function in one component may unintentionally override a ref value set by a create function in another component).\r\n\r\nWe handle this for layout effects by invoking *all* destroy functions during the \"mutation\" phase and *all* create functions during the \"layout\" phase, but for passive effects we call both in a single traversal:\r\nhttps://github.com/facebook/react/blob/38cd75861f44a40e686a39403bff39bf16fd796d/packages/react-reconciler/src/ReactFiberCommitWork.js#L394-L409\r\n\r\nFixing this probably means splitting our passive effects loop into two passes:\r\nhttps://github.com/facebook/react/blob/38cd75861f44a40e686a39403bff39bf16fd796d/packages/react-reconciler/src/ReactFiberWorkLoop.js#L2179-L2222\r\n\r\nHowever this could be a breaking change (since it would affect timing) so we should probably do it behind a feature flag for now.\r\n\r\nAlso note that splitting this into two passes could have another unintended effect: an error thrown in a passive destroy function would no longer prevent subsequent create functions from being run on that Fiber (as is currently the case) unless we added code to handle that specific case. We should decide what the expected behavior is here.",
        "title": "Passive effect destroy and create functions are interleaved",
        "labels": "Type: Bug",
        "id": 45432
    },
    {
        "body": "When option \"Highlight updates when components render\" is activated the whole page repaints in rapid succession after the components state has been changed. It causes 100% CPU usage by the browser and unpleasant DX due low fps.\r\n\r\nReact version: 16.12.0\r\nDevTools version 4.4.0-f749045a5\r\n\r\nThe sequance of actions is important:\r\n1. Open react application\r\n2. Open react-devtools\r\n3. Check option \"Highlight updates when components render\" in react-devtools settings\r\n4. Change the internal state of a component\r\n5. In activity monitor there will be 100% cpu usage of the page, or check option \"Paint flashing\" in rendering pane of chrome devtools\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n![image](https://user-images.githubusercontent.com/2382567/73440472-ec275980-4383-11ea-94c3-33ede22df01c.png)\r\n![image](https://user-images.githubusercontent.com/2382567/73440513-f8abb200-4383-11ea-824f-3d38b3cec4f6.png)\r\n\r\nThe code example (to trigger the issue: 1) check the option \"Highlight updates when components render\" and 2) click on the button:\r\n\r\n```\r\nimport React, {useState} from 'react';\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <button onClick={() => setCount(count + 1)}>\r\n      click #{count}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n## The current behavior\r\nExcessive cpu usage of the page\r\n\r\n## The expected behavior\r\nNormal cpu usage of the page",
        "title": "Bug: Excessive cpu usage of the page when react-devtools is active",
        "labels": "Type: Bug",
        "id": 45433
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nTo be honest, I am not 100% sure it's a bug. Perhaps my code is badly written but I don't know why it's not working or how to rewrite it in the proper way. \r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n```\r\nfunction Hello() {\r\n    const [s, setS] = React.useState(1);\r\n    const print = () => {\r\n      setS(s + 1);\r\n      setTimeout(() => {\r\n      \twindow.print();\r\n      }, 600);\r\n      window.onafterprint = () => {\r\n      \tsetS(s - 1);\r\n      }\r\n    }\r\n    return <div>{s}<button onClick={print}>print</button></div>;\r\n}\r\n\r\n```\r\n\r\n1. Open this jsfiddle https://jsfiddle.net/z4ku39t2/2 or try the code above\r\n2. Click Print button and cancel the print dialog\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://jsfiddle.net/z4ku39t2/2\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nWhen the setS is called in the onafterprint handler, the app enters an infinite loop with 100% cpu usage so you won't be able to do anything on the page. The profiler shows that it happens inside React.\r\n\r\n## The expected behavior\r\n\r\nThe setS successfully modifies the state and the component re-renders.\r\n\r\nBrowser: Version 79.0.3945.130 (Official Build) (64-bit)",
        "title": "Bug: infinite loop when a set state hook is called in a global handler",
        "labels": "Type: Bug",
        "id": 45434
    },
    {
        "body": "The closest related issue I could, is somewhat of the inverse of this one: #7711\r\n\r\nReact version: 16.12 (older versions as well)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component\r\n2. Add state indicating whether it is enabled or disabled (advised to start as enabled)\r\n3. On render, let the component return a `<fieldset>` with: a `<legend>` containing an `<input>` (checkbox) element, and another form element (`<select>`, `<input>`, `<textarea>`).\r\n4. Add the `disabled` attribute that follows the aforementioned state to the `<fieldset>`.\r\n5. Make the `onChange` event of the `<input>` in the `<fieldset>` responsible for modifying the state of the component (enabled/disabled). \r\n6. Run an app that uses the described component.\r\n7. Disable the `<fieldset>` using the `<input>` in its `<legend>`.\r\n8. (Try to) enable the `<fieldset>`.\r\n\r\nLink to code example: [Sandbox](https://codesandbox.io/s/wizardly-ellis-45sel?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\n```jsx\r\nimport React from \"react\";\r\n\r\nexport default function App() {\r\n  const [enabled, setEnabled] = React.useState(true);\r\n  return <React.Fragment>\r\n    <fieldset disabled={!enabled}>\r\n      <legend>\r\n        <input \r\n          type=\"checkbox\"\r\n          checked={enabled}\r\n          onChange={(evt)=>{setEnabled(evt.target.checked);}}/>\r\n      </legend>\r\n      <textarea></textarea>\r\n    </fieldset>\r\n    <p>\r\n      Disable the above fieldset by unchecking the checkbox. Checking the box once again does not re-enable the fieldset however.\r\n    </p>\r\n  </React.Fragment>;\r\n}\r\n\r\n```\r\n\r\n## The current behavior\r\nEnabling the `<fieldset>` using the `<input>` in its `<legend>` changes the state of the `<input>` in unchecked fashion; it does not fire its `onChange` event and its value does thus no longer match the state of the component.\r\n\r\n## The expected behavior\r\nBased on the [W3C](https://www.w3.org/html/wiki/Elements/fieldset) and [WHATWG](https://html.spec.whatwg.org/multipage/form-elements.html#the-fieldset-element) spec, the contents of the first `<legend>` of a `<fieldset>` should not be disabled when that fieldset is disabled. \r\n\r\nOne would expect that if an element does not appear disabled, its events will be triggered. ",
        "title": "Bug: Events from an <input> in the <legend> of a disabled <fieldset> get supressed",
        "labels": "Type: Bug",
        "id": 45435
    },
    {
        "body": "This is a continuation of an previous issue to add support for the BigInt data type in React DevTools.\r\n\r\nOriginal PR https://github.com/facebook/react/pull/17233 (merged)\r\n\r\nThis happens when you try to copy a BigInt value to clipboard via React DevTools.\r\n\r\n![](https://image.prntscr.com/image/c4SnNIPXR1GlSXIt49FOlw.png)\r\n\r\nWould @nutboltu mind taking a look?\r\n\r\n```\r\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\r\n    at JSON.stringify (<anonymous>)\r\n    at c (backend.js:1)\r\n    at Object.copyElementPath (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\nc @ backend.js:1\r\ncopyElementPath @ backend.js:6\r\n(anonymous) @ backend.js:6\r\nr.emit @ backend.js:6\r\n(anonymous) @ backend.js:32\r\nt @ backend.js:8\r\npostMessage (async)\r\n(anonymous) @ contentScript.js:1\r\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null\r\n    at trackError (<./app-insights/app-insights>:50)\r\n    at eval (<./app-insights/app-insights>:22)\r\ntrackError @ <./app-insights/app-insights>:50\r\neval @ <./app-insights/app-insights>:22\r\nsetTimeout (async)\r\neval @ <./app-insights/app-insights>:21\r\nerror (async)\r\ninitAppInsights @ <./app-insights/app-insights>:17\r\nmain @ VM70658 client>:101\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31\r\nasync function (async)\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27\r\n(anonymous) @ 219:3435\r\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\r\n    at JSON.stringify (<anonymous>)\r\n    at c (backend.js:1)\r\n    at Object.copyElementPath (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\nc @ backend.js:1\r\ncopyElementPath @ backend.js:6\r\n(anonymous) @ backend.js:6\r\nr.emit @ backend.js:6\r\n(anonymous) @ backend.js:32\r\nt @ backend.js:8\r\npostMessage (async)\r\n(anonymous) @ contentScript.js:1\r\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null\r\n    at trackError (<./app-insights/app-insights>:50)\r\n    at eval (<./app-insights/app-insights>:22)\r\ntrackError @ <./app-insights/app-insights>:50\r\neval @ <./app-insights/app-insights>:22\r\nsetTimeout (async)\r\neval @ <./app-insights/app-insights>:21\r\nerror (async)\r\ninitAppInsights @ <./app-insights/app-insights>:17\r\nmain @ VM70658 client>:101\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31\r\nasync function (async)\r\nmain @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27\r\n(anonymous) @ 219:3435\r\nbackend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt\r\n    at JSON.stringify (<anonymous>)\r\n    at c (backend.js:1)\r\n    at Object.copyElementPath (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\nc @ backend.js:1\r\ncopyElementPath @ backend.js:6\r\n(anonymous) @ backend.js:6\r\nr.emit @ backend.js:6\r\n(anonymous) @ backend.js:32\r\nt @ backend.js:8\r\npostMessage (async)\r\n(anonymous) @ contentScript.js:1\r\n<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null\r\n    at trackError (<./app-insights/app-insights>:50)\r\n    at eval (<./app-insights/app-insights>:22)\r\n```",
        "title": "Bug: fix BigInt in copyElementPath in react-devtools",
        "labels": "Type: Bug",
        "id": 45436
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.4.0-f749045a5\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159909\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159855)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160378)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:323092)\r\n    at ei (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58864)\r\n    at yl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:106932)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99474)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99399)\r\n    at fc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96173)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"2153\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45437
    },
    {
        "body": "## Steps To Reproduce\r\n\r\n1. Hover a component in DevTools\r\n2. *Keep hovering it for a second or so*\r\n3. Quickly move the cursor out of the DevTools without hovering anything else\r\n\r\nExpected: DOM highlighting goes away.\r\nActual: DOM highlighting gets stuck.\r\n\r\n![](https://d1sz9tkli0lfjq.cloudfront.net/items/2o2r240l0o3i1B0d1n3J/Screen%20Recording%202020-01-16%20at%2005.14%20PM.gif?v=e1a91e13)",
        "title": "Bug: DevTools DOM highlighting gets stuck after a prolonged hover",
        "labels": "Type: Bug",
        "id": 45438
    },
    {
        "body": "I am using [react-rehype](https://github.com/rehypejs/rehype-react) (latest version) to parse and format Markdown content that is continuously updating based on user input. On certain changes, particularly the creation of list items, I get an error message `Uncaught TypeError: Cannot read property 'nextSibling' of null`.\r\n\r\nBefore I see the error message in the console, I see an unclosed comment tag when I inspect the element that is rendering the formatted text:\r\n![Screenshot 2020-01-13 at 9 59 45 AM](https://user-images.githubusercontent.com/46464143/72378704-c54ffe80-36c6-11ea-8a7f-ffa0918146d4.png)\r\n\r\nThe stack trace is all within React code:\r\n![Screenshot 2020-01-13 at 9 57 33 AM](https://user-images.githubusercontent.com/46464143/72378741-d7ca3800-36c6-11ea-9aac-50d9ca13e0ea.png)\r\n\r\nReact version: 15.6.0\r\n\r\n## Steps To Reproduce \r\n\r\nSmall repo with repro steps is at: https://github.com/bethanyaconnor/rehype-react-bug\r\n\r\n## The current behavior\r\nEventually, the component crashes in React code that updates the component on state change.\r\n\r\n## The expected behavior\r\nThere is no JS errors/crashes.\r\n",
        "title": "Bug: Uncaught TypeError: Cannot read property 'nextSibling' of null",
        "labels": "Type: Bug",
        "id": 45439
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact Developer Tools: 4.4.0 f749045a5 (1/3/2020) from chrome webstore\r\nChromium: 81.0.4024.0 snapshot\r\nUbuntu: 18.04\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open chrome with React Developer Tools installed\r\n2. Open developer console\r\n3. In console settings (cogwheel in console's top right corner)  check \"Preserve log\" checkbox (to make sure that the log is not overwritten on navigation)\r\n4. Navigate to a React-enabled website, e.g. `https://reactjs.org`\r\n5. Navigate to a plain-text page, such as `https://reactjs.org/robots.txt`\r\n\r\n## The current behavior\r\n\r\nError is printed in console:\r\n\r\n```\r\nbackend.js:32 Uncaught TypeError: Cannot read property 'sub' of undefined\r\n    at g (backend.js:32)\r\n    at e (backend.js:8)\r\ng @ backend.js:32\r\ne @ backend.js:8\r\npostMessage (async)\r\na @ contentScript.js:1\r\n117 @ contentScript.js:1\r\nn @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\n\r\n```\r\nwhere `backend.js` is a link to `chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js`\r\n\r\n`fmkadmapgofadopljbjfkapdkoienihi` is an ID of React Developer Tools: I verified by opening `chrome://extensions/` and performing page search for this ID.\r\n\r\n\r\n## The expected behavior\r\n\r\nNo errors\r\n\r\n## Notes\r\n\r\nIt's a convoluted usecase, but I thought it may help to catch bugs for more important ones. \r\n\r\nI am not sure whether it's plain-text-ness of the page that is important, but that's how you can reproduce it.\r\n\r\nThe hypothesis is that dev tools do not expect HTML tree to disappear on navigation, or either extension enters a state where it cannot digest the plain text pages (and it probably shouldn't try).\r\n\r\n\r\n<sup>\r\nP.S. Thanks for the refreshed extension, it makes dev experience so wonderful! \u2764\ufe0f \r\n</sup>",
        "title": "[react-devtools-extensions] Bug: Uncaught TypeError: Cannot read property 'sub' of undefined when navigating to plain-text pages",
        "labels": "Type: Bug",
        "id": 45440
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"32\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45441
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"350\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45442
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Opened components tree\r\n2. Clicked Context.Provider\r\n3. Clicked \"SomeProvider\" component right above that Context.Provider\r\n\r\nThis issue does not happen if I click \"SomeProvider\" first. only after clicking Context.Provider within this \"SomeProvider\" wrapper component.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:268899)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46436\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3676)\r\n    at $o (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46146)\r\n    at na (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46382)\r\n\r\nComponent stack: in ha\r\n    in div\r\n    in ya\r\n    in Ea\r\n    in div\r\n    in div\r\n    in ya\r\n    in Ea\r\n    in div\r\n    in Unknown\r\n    in div\r\n    in bi\r\n    in div\r\n    in Ai\r\n    in Suspense\r\n    in ei\r\n    in div\r\n    in div\r\n    in la\r\n    in Ur\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"f.hasOwnProperty is not a function\"",
        "labels": "Type: Bug",
        "id": 45443
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug report.\r\n\r\n**What is the current behavior?**\r\nThe component inspector works fine on most components, but on ones that are particularly large with many large props it is stuck on \"Loading...\".\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nYou should be able to reproduce the issue on: https://data.world/jonloyens/an-intro-to-dataworld-dataset\r\n\r\nNavigate to the component with the key: \"jonloyens/an-intro-to-dataworld-dataset\". Other components above and below that one will load, but that one specifically will not.\r\n\r\n**What is the expected behavior?**\r\nIt should load the component tree eventually. Previous to the 4.3.0 update these components loaded fine.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nOur app uses React version 16.8.3.\r\nI am on dev tools version 4.3.0 on Chrome 79.0.3945.88 on MacOS Catalina 10.15.2 (but others on earlier versions of MacOS are having the same issue).\r\n\r\nI have a suspicion that this may be related to https://github.com/facebook/react/pull/17579 as this change has made a big impact on our app (mostly in a good way). We use ImmutableJS, and that change has made it much easier to navigate Immutable props since it preloads the values. The component that is loading slowly uses a proportionately large number of Immutable props to other components.\r\n",
        "title": "[DevTools] Component inspector not loading for large components",
        "labels": "Type: Bug",
        "id": 45444
    },
    {
        "body": "",
        "title": "Error: \"Could not find node with id \"45\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45445
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67999)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108660)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"27720\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45446
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"834\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45447
    },
    {
        "body": "\r\n![Screenshot 2020-01-07 at 5 14 39 PM](https://user-images.githubusercontent.com/6754181/71893299-3b0d1500-3171-11ea-8414-b7222c9a5b5e.png)\r\nDescribe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"815\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45448
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Opened profiler\r\n2. Recorded session\r\n3. Clicked \"Ranked\" button\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"1804\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45449
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Just tryed to use `Components` tab\r\n\r\nEdit :  error seems to appear using Firefox, not Chrome\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.4.0-f749045a5\r\n\r\nComponent stack: in Vo\r\n    in bi\r\n    in div\r\n    in Ai\r\n    in Suspense\r\n    in ei\r\n    in div\r\n    in div\r\n    in la\r\n    in Ur\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Context menu with id \"SelectedElement\" already registered.\"",
        "labels": "Type: Bug",
        "id": 45450
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open ranked tab\r\n2. Changing \"Render at\" repeatedly\r\n3. Error appeared\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67999)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108660)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"1145\" in commit tree\" on React Profiler",
        "labels": "Type: Bug",
        "id": 45451
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- Bug\r\n\r\n**What is the current behavior?**\r\n- On trying to analyse a component State using React Developer Tools, the analyse pane stays in the `Loading ...` state and throws this error\r\n```js\r\nUncaught TypeError: Cannot read property 'name' of undefined\r\n    at O (backend.js:1)\r\n    at s (backend.js:1)\r\n    at s (backend.js:1)\r\n    at s (backend.js:1)\r\n    at l (backend.js:1)\r\n    at Object.inspectElement (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\n```\r\n**What is the expected behavior?**\r\n- Able to analyse component State as in the previous React Dev Tools versions. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React Developer Tools version: 4.3.0 (12/20/2019)\r\n- React Version: ^16.4.0\r\n- Browsers:\r\n  - Chrome: Version 79.0.3945.88 (Official Build) (64-bit)\r\n  - Brave: Version 1.1.23 Chromium: 79.0.3945.88 (Official Build) (64-bit)\r\n\r\n\r\n",
        "title": "Cannot analyse component State",
        "labels": "Type: Bug",
        "id": 45452
    },
    {
        "body": "bug\r\nUncaught TypeError: Cannot read property 'name' of undefined\r\nUncaught TypeError: e.hasOwnProperty is not a function\r\n\r\ninfinite loading in component view\r\n![image](https://user-images.githubusercontent.com/8398353/71717720-a37e8e00-2e21-11ea-82a3-cc6d815158fc.png)\r\n\r\nReproduce:\r\nuse hook useRouter or HOC withRouter from react-router-dom and select component with hook/hoc in components view react developer tools\r\nIssue is caused by not-bug https://github.com/hapijs/hapi/issues/3280\r\n(query object does not have constructor and does not have hasOwnProperty)\r\n\r\n![image](https://user-images.githubusercontent.com/8398353/71717283-4afac100-2e20-11ea-9f86-84f63cb73ab1.png)\r\n![image](https://user-images.githubusercontent.com/8398353/71717412-b6dd2980-2e20-11ea-8514-04708cf02015.png)\r\n![image](https://user-images.githubusercontent.com/8398353/71717397-a75de080-2e20-11ea-9dc3-35da5a4f0ff4.png)\r\n",
        "title": "React Developer Tools react-router-dom e.hasOwnProperty is not a function, Cannot read property 'name' of undefined",
        "labels": "Type: Bug",
        "id": 45453
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Open https://codesandbox.io/s/angry-mestorf-cbvdv\r\n2. Open DevTools, and try to inspect the <App> component\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:268899)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46436\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3676)\r\n    at $o (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46146)\r\n    at na (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46382)\r\n\r\nComponent stack: in ha\r\n    in div\r\n    in Ka\r\n    in div\r\n    in bi\r\n    in div\r\n    in Ai\r\n    in Suspense\r\n    in ei\r\n    in div\r\n    in div\r\n    in la\r\n    in Ur\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"f.hasOwnProperty is not a function\"",
        "labels": "Type: Bug",
        "id": 45454
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n1. Select a component\r\n2. The right panel (property panel?) always shows `Loading...` \r\n3. The following error is printed to the console.\r\n\r\n```\r\nbackend.js:1 Uncaught TypeError: Cannot read property 'name' of undefined\r\n    at O (backend.js:1)\r\n    at s (backend.js:1)\r\n    at s (backend.js:1)\r\n    at l (backend.js:1)\r\n    at Object.inspectElement (backend.js:6)\r\n    at t.<anonymous> (backend.js:6)\r\n    at t.r.emit (backend.js:6)\r\n    at backend.js:32\r\n    at t (backend.js:8)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1330321/71661150-497dba00-2d88-11ea-8df1-235f24ba793f.png)\r\n\r\nI don't know why you minify the output, but the call stack points to here:\r\n\r\nhttps://github.com/facebook/react/blob/f887d1aa27336baa0bc292158793a5a244c712b6/packages/react-devtools-shared/src/utils.js#L391\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/falling-wave-1j0qe\r\n\r\n**What is the expected behavior?**\r\n\r\nReact DevTools displays the props of the selected component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.12.0\r\nChrome 79.0.3945.88\r\nIDK",
        "title": "DevTools can't inspect object without prototype",
        "labels": "Type: Bug",
        "id": 45455
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.3.0-3e0967783\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)\r\n    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)\r\n    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:67999)\r\n    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108660)\r\n    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)\r\n    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)\r\n\r\nComponent stack: in Sl\r\n    in div\r\n    in div\r\n    in div\r\n    in vo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Qi\r\n    in Ve\r\n    in nn\r\n    in Da\r\n    in Yc",
        "title": "Error: \"Could not find node with id \"2456\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45456
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163226)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332702)\r\n    at uc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332919)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:46341\r\n\r\nComponent stack: in uc\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find commit data for root \"5621\" and commit 7\"",
        "labels": "Type: Bug",
        "id": 45457
    },
    {
        "body": "I'm tried to use *Profilter tool on Chrome browser, but i got this error when i review the rank of list Elements.  I don't know what is that ?\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"57\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45458
    },
    {
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems like `ReactDOM.hydrate` doesn't play nice with certain kinds of inline SVGs.\r\nSpecifically ones that have `clipPath`s\r\n\r\nWhen nextjs tries calling hydrate on a page with one of these SVGs, the offending part of the svg flashes quickly then react throws this error to the console.\r\n\r\n```\r\nExpected server HTML to contain a matching <clipPath> in <svg>.\r\n```\r\n\r\nI have a very small example of this happening here https://github.com/Delray-Devs/site/tree/brokenSVG\r\n\r\nThe strange part is when next builds the site statically it all works.\r\n\r\nI originally opened this issue on zeit/nextjs, but @timneutkens suggested I open the issue here.\r\n\r\nSee https://github.com/zeit/next.js/issues/9871 for all the details.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe SVG containing the `clipPath` gets rendered correctly on the client side.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.12, not sure about previous versions\r\nBrowser: Firefox and Chrome\r\nOS: macOS\r\n",
        "title": "hydrate SVG error: Expected server HTML to contain a matching <clipPath> in <svg>",
        "labels": "Type: Bug",
        "id": 45459
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. clicked \"Ranked\" in \"Profiler\"\r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"5268\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45460
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Start/Stop Profiling\r\n2. Click \"Ranked\" tab\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"318\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45461
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"6\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45462
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"72\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45463
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"66\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45464
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"50\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45465
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I was profiling a grid performance when rendering with 100 rows\r\n2. Then I was moving between the profiled data\r\n3. When clicked on the Ranked tab, the console showed error and a button to report it.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"312\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45466
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"51\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45467
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** \r\nBug\r\n\r\n**What is the current behavior?**\r\nReact DevTools crashes in the code below because `levelChildren` is `undefined`. \r\n\r\nhttps://github.com/facebook/react/blob/7dc9745427046d462506e9788878ba389e176b8a/packages/react-debug-tools/src/ReactDebugHooks.js#L456-L462\r\n\r\ncallstack is: \r\n```\r\nbackend.js:formatted:6593 Uncaught TypeError: Cannot read property 'push' of undefined\r\n    at S (backend.js:formatted:6593)\r\n    at _ (backend.js:formatted:6638)\r\n    at inspectHooksOfFiber (backend.js:formatted:6682)\r\n    at rt (backend.js:formatted:2372)\r\n    at Object.inspectElement (backend.js:formatted:2753)\r\n    at t.<anonymous> (backend.js:formatted:3484)\r\n    at t.r.emit (backend.js:formatted:978)\r\n    at backend.js:formatted:7407\r\n    at t (backend.js:formatted:4954)\r\n```\r\n\r\nI haven't been able to reproduce this yet outside my app, but here's the steps that trigger the crash in my app: \r\n1) open dev tools\r\n2) start profiling\r\n3) stop profiling\r\n4) select the CalendarMiddle component in the Flamegraph view\r\n5) crash!\r\n\r\n**What is the expected behavior?**\r\nno crash\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm running: \r\n* React 16.12\r\n* RDT 4.2.1 (11/27/2019) revision 3816ae7c3\r\n* Chrome 79.0.3945.88 (Official Build) (64-bit)\r\n* MacOS Catalina 10.15.2 (19C57)\r\n\r\nI've never seen this crash before today.  Interestingly, the crash only happens when I select some components in the flamegraph, but doesn't happen when I select other components. I haven't figured out the pattern yet of which components will trigger a crash. \r\n\r\nI know that this repro isn't particularly actionable at this point, but I'm hoping that someone who knows the RDT code better than I do might have an idea about why this might be happening.\r\n",
        "title": "DevTools crashes (`levelChildren` is undefined) when selecting a component in Flamegraph view",
        "labels": "Type: Bug",
        "id": 45468
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"28540\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45469
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"47989\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45470
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"638\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45471
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I was watching the Flamegraph\r\n2. I clicked on a node\r\n3. I clicked on the Ranked tab and the bug occurred\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"5082\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45472
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"436\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45473
    },
    {
        "body": "Attempting to copy a prop using the new context menu (#17608) prints the following error for Firefox:\r\n> Error: Unable to copy. Perhaps it's not available in your browser?\r\n\r\nFirefox itself _does_ support `document.execCommand('copy')` if it's within the context of an event handler, but it looks like this does not include events that originated within an extension.\r\n\r\nLooks like this was also an issue for DevTools v3: https://github.com/facebook/react-devtools/issues/843\r\n\r\nUnder the hood we are using [`clipboard-js`](https://www.npmjs.com/package/clipboard-js) for this.",
        "title": "DevTools copy operations don't work in Firefox",
        "labels": "Type: Bug",
        "id": 45474
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"479\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45475
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"52381\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45476
    },
    {
        "body": "Steps to reproduce:\r\n\r\n1) Disable all add-ons in Firefox\r\n2) Open an URL that points to a XML file\r\n3) AS EXPECTED: A pretty-printed XML is shown\r\n4) Enable the React DevTools Add-on\r\n5) Open the XML file again\r\n6) FAIL: Only the content inside the XML tags are shown\r\n\r\nUsing Firefox Developer Edition 72.0b6 on macOS 10.15.2",
        "title": "Firefox React DevTools breaks XML formatting",
        "labels": "Type: Bug",
        "id": 45477
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. I looked into a change with many commit\r\n2. Then tried to navigate to the Ranked tab when I saw the following error.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"674\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45478
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"44169\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45479
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to report a bug.\r\n\r\n**What is the current behavior?**\r\nA numeric input field gets cleared accidentally on several occasions.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Open [this sandbox](https://codesandbox.io/embed/sad-rgb-mltuj)\r\n2. Type \u201c12.\u201d into the field, with the trailing decimal separator\r\n3. Unfocus the control\r\n4. Append \u201c.\u201d to the field\u2019s value to see \u201c12..\u201d\r\n5. Unfocus the control once again and see that the number has completely disappeared\r\n\r\n**What is the expected behavior?**\r\n\r\nSimilar to how uncontrolled inputs work (remove the `value` prop and then repeat the steps above), the input should not be cleared on blur.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI\u2019m using React 16.12.0 and experienced the same behavior with the latest version of Chrome and iOS Safari. Regarding this bug, I have no experience with previous versions of React.\r\n",
        "title": "Controlled numeric input gets cleared when unfocused",
        "labels": "Type: Bug",
        "id": 45480
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"39\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45481
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Start profile recording\r\n2. Click once a component (some components will hide)\r\n3. Stop profile recording\r\n4. Click \"Ranked\" tab\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"26038\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45482
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"5\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45483
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"6\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45484
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"836\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45485
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Start profiling\r\n2. End profiling\r\n3. Iterate over commits using arrows and/or bar graph\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"75\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45486
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1.  Moving in next commits in Profiler dev tool in Ranked chart mode\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"30\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45487
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"1758\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45488
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"275099\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45489
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"15081\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45490
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Clicked restart and start profiling\r\n2. Finished profiling\r\n3. Clicked on a commit and got the error below\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"18486\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45491
    },
    {
        "body": "I wasn't doing anything too fancy:\r\n- Ran a really quick profile\r\n- Clicked on the ranked tab\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: `4.2.1-3816ae7c3`\r\n\r\n```\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc\r\n```",
        "title": "Error: \"Could not find node with id \"490\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45492
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Went from Flamegraph to the ranked view. \r\nThis doesn't reproduce consistently \r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"5021\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45493
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Recording with the Profiler\r\n2. Clicking on the \"Ranked Chart\"\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.1-3816ae7c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)\r\n    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)\r\n    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)\r\n    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)\r\n    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)\r\n    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)\r\n\r\nComponent stack: in vl\r\n    in div\r\n    in div\r\n    in div\r\n    in wo\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Li\r\n    in $e\r\n    in dn\r\n    in Ca\r\n    in Pc",
        "title": "Error: \"Could not find node with id \"5203\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45494
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nafter first click on button it's just fine \r\nafter 3 sec(after suspend mode finished) when you click on button again and start typing in input it will not show suspend fallback and it will wait on all 3 second (seems to `timeoutMs` is infinity now)\r\nanother time click on button (after suspend finished) this time we will not see \"wait\" phrase on button and it seems that `timeoutMs` is zero this time\r\n\r\nhttps://codesandbox.io/s/long-shadow-1vhr6\r\n\r\n**What is the expected behavior?**\r\nshow  1.5 second \"wait\" on button and after that show 1.5 second \"child suspend\" in front of it\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm using experimental version and these are new features of concurrent mode \r\n",
        "title": "ConcurrentMode suspend child alongside of input",
        "labels": "Type: Bug",
        "id": 45495
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\r\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\r\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\r\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\r\n\r\nComponent stack: in sc\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find commit data for root \"3971\" and commit 3\"",
        "labels": "Type: Bug",
        "id": 45496
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Click on \"ranked\" in the Profiler\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)\r\n    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103717)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\r\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\r\n\r\nComponent stack: in gl\r\n    in div\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find node with id \"113994\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45497
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\r\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\r\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\r\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\r\n\r\nComponent stack: in sc\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find commit data for root \"335\" and commit 2\"",
        "labels": "Type: Bug",
        "id": 45498
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150913)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n\r\nComponent stack: in dl\r\n    in div\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 21\"",
        "labels": "Type: Bug",
        "id": 45499
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nA bug\r\n\r\n**What is the current behavior?**\r\nWhen Chrome devtools is highlighting highlight box is shown too small.\r\n\r\n![image](https://user-images.githubusercontent.com/44562005/69419027-185ca380-0d5f-11ea-8284-8004147dc713.png)\r\n\r\n**What is the expected behavior?**\r\nHighlight box is shown actual template size.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nChrome 78.0.3904.97\r\nReact Developer Tools 4.2.0",
        "title": "Devtools : highlight box is shown too small.",
        "labels": "Type: Bug",
        "id": 45500
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug (I think?)\r\n\r\n**What is the current behavior?**\r\n```javascript\r\nconst [value, setValue] = useState(\"default\");\r\nreturn (\r\n  <div className=\"App\">\r\n    <input value={value} onChange={e => setValue(e.target.value)} />\r\n    <div>\r\n      <Value.Provider value={value}>\r\n        <Suspense fallback={<div>loading</div>}>\r\n          <MemoizedChild />\r\n         </Suspense>\r\n       </Value.Provider>\r\n     </div>\r\n  </div>\r\n)\r\n```\r\n\r\nWhen using a memoized functional component (`MemoizedChild` in above example) in conjunction with `Context` as a child of a `React.Suspense` component, there seems to be a bug in which `MemoizedChild` does not update when the context it uses changes. For the full example, see my codesandbox below.\r\n\r\nIn the codesandbox, if you change the value of the input, the new value is provided to the context which causes the hook used in `MemoizedChild` (`useValue`) to throw a promise. This flips `Suspense` to the fallback state and when the promise resolves `MemoizedChild`'s state is not updated with the proper context value because (I'm assuming) the memoized value of `MemoizedChild` is the one that contained the previous context value and technically no props have changed, so that makes sense why it wouldn't have updated. However, this seems like it would be unexpected behavior.\r\n\r\nhttps://codesandbox.io/s/react-suspense-maybe-bug-sznbk\r\n\r\n**What is the expected behavior?**\r\nI would expect that `MemoizedChild` would be re-rendered with the new provided value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm assuming all of them that contain Suspense and memo. So, since 16.8?",
        "title": "Memoized child of Suspense component doesn't update when Context updates.",
        "labels": "Type: Bug",
        "id": 45501
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm seeing \"Error: Should not already be working\" after upgrading to React 16.11\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7\r\n\r\nI was unable to reproduce this in a VM environment but our Sentry is getting littered with these errors. \r\n\r\nI know it's a long shot, but I wasn't able to find any information about this error anywhere, just a reference in the error codes file in react, so thought it would be a good idea to report this just in case. Curious if anyone has seen this.\r\n",
        "title": "\"Should not already be working\" in Firefox after a breakpoint/alert",
        "labels": "Type: Bug",
        "id": 45502
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug-ish.\r\n\r\n**What is the current behavior?**\r\n`import 'react'` (where 'react' is the UMD module build) from an ES module will fail due to https://github.com/rollup/rollup/pull/2274.  `this` is not set in the context of ES modules, so if you try to `import 'react'` in that context you will get a runtime error since `this` is undefined and Rollup (before the linked fix) tries to use `this` when it really means `globalThis` or `self`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```\r\nnpm install react\r\n```\r\n`index.html`\r\n```html\r\n<!DOCTYPE html>\r\n<head><meta charset='utf-8'></head>\r\n<body>\r\n\t<script type='module'>\r\n\t\timport './node_modules/react/umd/react.development.js'\r\n\t</script>\r\n</body>\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe React UMD module can be loaded by an ES module.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.11.0\r\nFirefox: 70.0.1\r\nWindows 10",
        "title": "Upgrade Rollup to 0.68.1+",
        "labels": "Type: Bug",
        "id": 45503
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhenever I try something like:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent);\r\n```\r\n\r\nI get the following error: `No instances found with node type: \"undefined\"`. The only way I found for this to work was to reference the `type` property of memo components like this:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent.type);\r\n```\r\n\r\nI am fine with this solution but then flow complains that `type` doesn't exist so I find myself fixing this with `$FlowFixMe` all over the place.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that passing a memo component to `findByType` would work. Or that flow would recognize the `type` property of memo components. I think both should work, specially the first option.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNo, it never worked as far as I know.\r\n",
        "title": "react-test-renderer: the findByType method doesn't work with memo components",
        "labels": "Type: Bug",
        "id": 45504
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Viewing a component within Storybook\r\n2. Opened Profiler\r\n3. Changed the target from Root to Story\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\r\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\r\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\r\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\r\n\r\nComponent stack: in sc\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find commit data for root \"729\" and commit 2\"",
        "labels": "Type: Bug",
        "id": 45505
    },
    {
        "body": "I ran into this when implementing Back button transition in a router. Because the transition is inside a browser `popstate` event, it gets batched with the low pri update, and the pending state doesn't appear.\r\n\r\nI had to do [this](https://github.com/gaearon/suspense-experimental-github-demo/blob/cb75d1a71847be85e1365d8b33f766a0d0e21463/src/createRouter.js#L68-L69) to work around it but it's unfortunate. We might want to fix this by treating pending state as special. Or maybe a warning \u2014 but then we need a first-class official API for opting into user blocking pri.",
        "title": "It's confusing that useTransition doesn't do anything outside of user-blocking events",
        "labels": "Type: Bug",
        "id": 45506
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nI've narrowed it down to this:\r\n\r\nhttps://codesandbox.io/s/usetransition-useeffect-dependency-issue-2olmx\r\n\r\nBasically, what I *think* is important is:\r\n\r\n1. There's a state change resulting in the useEffect being called\r\n2. The useEffect callback starts a transition\r\n3. The transition callback sets state\r\n4. The set state results in a render which suspends\r\n\r\nIf these are all the case, then including the `startTransition` function in the dependency array will trigger an infinite loop. In the codesandbox I have a safety in place so your browser doesn't fall over.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `startTransition` function should be consistent between renders.\r\n\r\nI've observed that if you do not inline the config to `useTransition` then this is not a problem. I know that the docs recommend keeping this config consistent, but if this is desirable behavior, then maybe a warning about this particular situation in the docs would be useful. I expect that inlining the config will be pretty natural for people.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- react@0.0.0-experimental-f6b8d31a7\r\n- react-dom@0.0.0-experimental-f6b8d31a7",
        "title": "useTransition's startTransition function can result in infinite loop when it's included as a useEffect dependency",
        "labels": "Type: Bug",
        "id": 45507
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n`isPending` is never set to true when calling `startTransition` within `useEffect`, but it *does* work properly when within a `useLayoutEffect`.\r\n\r\nhttps://codesandbox.io/s/usetransition-useeffect-issues-p1j9s\r\n\r\nHere's the correct behavior (accomplished via `useLayoutEffect`):\r\n\r\n![good](https://user-images.githubusercontent.com/1500684/68164575-662d7b00-ff1a-11e9-9d02-71d7a22fd5cf.gif)\r\n\r\nHere's the incorrect behavior (via `useEffect`):\r\n\r\n![bad](https://user-images.githubusercontent.com/1500684/68164540-4c8c3380-ff1a-11e9-9191-d9c87ddecbed.gif)\r\n\r\nNote the difference is that the opacity never changes to 0.4 (which is determined based on the `isPending` state).\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect them to both behave the same (at least as far as the user can observe).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- react@0.0.0-experimental-f6b8d31a7\r\n- react-dom@0.0.0-experimental-f6b8d31a7",
        "title": "When calling a useTransition startTransition callback outside of event handlers, isPending is never set to true",
        "labels": "Type: Bug",
        "id": 45508
    },
    {
        "body": "**Bug**\r\n\r\n**What is the current behavior?**\r\n\r\nAs discussed with @gaearon in this thread: https://twitter.com/dan_abramov/status/1189923059031068672\r\n\r\nWhen the `useTransition` is fast, it results to a small blink for the user. You can reproduce it in this example :\r\n\r\n- Choose \"Concurrent Mode\"\r\n- Click \"Next\" in \"fretch-mode: legacy-mode\" \r\n\r\nhttps://codesandbox.io/s/fretch-example-r6t8g\r\n\r\nA simpler example can be provided but I don't have time right now, I just want to track the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behaviour would be to avoid the blink if it is less than \"100ms\" (or another arbitrary delay).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe experimental version, see the example.\r\n",
        "title": "Blink with useTransition",
        "labels": "Type: Bug",
        "id": 45509
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n`onMouseEnter` is fired on `disabled` buttons.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/react-onmouseenter-on-disabled-buttons-fskwd\r\n\r\n**What is the expected behavior?**\r\n\r\n`onMouseEnter` shouldn't be triggered on `disabled` buttons.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.11.0 (not sure when it started to happen)\r\nChrome/MacOS\r\n",
        "title": "onMouseEnter is fired on disabled buttons",
        "labels": "Type: Bug",
        "id": 45510
    },
    {
        "body": "**What is the current behavior?**\r\n\r\nTypeError: Do not know how to serialize a BigInt which makes it so the react dev tools cannot inspect the component props.\r\n\r\nSteps to reproduce\r\n\r\n1. Set a component prop to some value of type `BigInt`.\r\n2. Open Chrome DevTools, then React Components view, try inspecting the component\r\n3. There will be an exception [here](https://github.com/facebook/react/blob/b438699d3620bff236282b049204e1221b3689e9/packages/react-devtools-extensions/src/contentScript.js#L28-L38) (with the message above)\r\n\r\nYou can repro this with the following https://codesandbox.io/s/mystifying-cache-jshv3\r\n\r\nNote that you need to repo via Chrome DevTools so that the bridge is active, if you use the codesandbox built-in DevTools the behavior is different.\r\n\r\n**What is the expected behavior?**\r\n\r\nThat bigints are handled in a similar way to how symbols are handled. So that they don't crash when they cross a boundary, i.e. postMessage.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLatest version, hasn't worked before. That I know. Tested in Chrome and Firefox, although the behavior isn't exactly the same in Firefox as in Chrome, it doesn't appear to work in Firefox either.\r\n\r\nI would like to propose a fix for this but I cannot find where in the source this would go. I don't care for editing capabilities and such, I just don't want the dev tools to give up on my just because I have BigInts in my code.\r\n",
        "title": "Bug: react-devtools TypeError: Do not know how to serialize a BigInt",
        "labels": "Type: Bug",
        "id": 45511
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Was profiling component performance.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)\r\n    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103717)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\r\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\r\n\r\nComponent stack: in gl\r\n    in div\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find node with id \"1681\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45512
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**bug**\r\n\r\n**What is the current behavior?**\r\nWhen useDeferredValue value is updated while the previous reconcile work is still running,\r\nThe previous reconcile work is not aborted, and the new work is queued after it.\r\n\r\n**repro:**\r\nBased on useDeferredValue example,\r\nhttps://codesandbox.io/s/infallible-dewdney-9fkv9\r\n\r\nFor better reproducibility i've made it to run longer using\r\n using `timeoutMs: 30000` + `while (performance.now() - now < 100) {` )\r\nand i've added an indicator value: `Time since last key stroke`\r\nhttps://codesandbox.io/s/intelligent-mestorf-u0p2b\r\n\r\n* Start timeline record\r\n* Type A B C with 1-3 sec interval between key strokes.\r\n* See timeline, there's work of 24 secs 8 + 8 + 8, for each key stroke \r\n* See the values of `Result #X` changes to the old stale value.\r\n\r\nThis is not optimal for 2 reasons:\r\n* We show stale data when we have something newer.\r\n* The cpu is locked processing the old value reconcile, and the new value needs to wait.\r\n\r\n**What is the expected behavior?**\r\nThe prev reconcile work should be cancelled/aborted,\r\nAnd the new value reconcile should start immediately \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact/react-dom `0.0.0-experimental-5faf377df`",
        "title": "useDeferredValue does not abort running reconcile work for stale value",
        "labels": "Type: Bug",
        "id": 45513
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (initially reported at https://github.com/zeit/next.js/issues/9173).\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component has both `dangerouslySetInnerHTML` and `children` props, and the component is used with just the `children` prop, on page load the client logs a warning beginning with ``Warning: Prop `dangerouslySetInnerHTML` did not match.``.\r\n\r\nInterestingly:\r\n\r\n- If just `dangerouslySetInnerHTML` is used there is no warning.\r\n- Multiple instances with just a `children` prop results in only one warning, for the first occurance.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nDemo: https://codesandbox.io/s/react-hydration-warning-demo-3je59\r\n\r\nIn a Next.js project, create a page with the following content:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => (\r\n  <div dangerouslySetInnerHTML={dangerouslySetInnerHTML} children={children} />\r\n)\r\n\r\nexport default () => <TestComponent>a</TestComponent>\r\n```\r\n\r\nLoading the page in a browser will result in this warning logging to the console:\r\n\r\n```\r\nWarning: Prop `dangerouslySetInnerHTML` did not match. Server: \"a\" Client: \"\"\r\n```\r\n\r\nNote that the hydration warning is bogus; using view source and the inspector you can see the SSR and client rendered HTML is identical and correct.\r\n\r\nThis works just the same as before but without a hydration warning:\r\n\r\n```jsx\r\nconst TestComponent = ({ dangerouslySetInnerHTML, children }) => {\r\n  const divProps = {}\r\n  if (dangerouslySetInnerHTML)\r\n    divProps.dangerouslySetInnerHTML = dangerouslySetInnerHTML\r\n  if (children) divProps.children = children\r\n\r\n  return <div {...divProps} />\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no hydration warning at first client render.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNot sure if the bug is present in old versions of React, but it can be seen with v16.11.0.",
        "title": "dangerouslySetInnerHTML, children, and a bogus hydration warning",
        "labels": "Type: Bug",
        "id": 45514
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nBailing out doesn't work properly in lazy components with default props. It seems we're incorrectly [comparing unresolved props (oldProps) with resolved props (newProps)](https://github.com/facebook/react/blob/62b04cfa753076d5ffb1d74b855f8f8db36f5186/packages/react-reconciler/src/ReactFiberClassComponent.js#L1100).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/stoic-curran-3otbb\r\n\r\n**What is the expected behavior?**\r\nIn the example above, `componentDidUpdate` shouldn't have been called when the button is clicked.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "title": "Bailing out doesn't work properly in lazy components with default props",
        "labels": "Type: Bug",
        "id": 45515
    },
    {
        "body": "Current behavior: React Devtools throws \"RangError: Invalid Array Length\" when integers are used as keys on react elements. \r\n\r\nExample: \r\n\r\nhttps://codesandbox.io/s/interesting-violet-v5c5j\r\n\r\nhttps://v5c5j.csb.app/\r\n\r\nUsing anything but strings as keys is as far as I understand not even correct usage, but it would be great if react devtools checked a little bit earlier and had a nicer error than \"RangeError: Invalid Array Length.\" It takes a long time to figure out from this message that one somehow managed to use integers as keys and needs to correct it.\r\n\r\nI've only tested with Chrome and the latest version of react devtools as a chrome extension. ",
        "title": "React Devtools should produce a better error message when integers are present as keys on react elements",
        "labels": "Type: Bug",
        "id": 45516
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)\r\n    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\r\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\r\n\r\nComponent stack: in gl\r\n    in div\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find node with id \"291\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45517
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Record a 5 second profile in the React Profiler Tab\r\n2. Switch the React root in the dropdown\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)\r\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)\r\n    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)\r\n    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)\r\n    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)\r\n    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)\r\n    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)\r\n    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721\r\n\r\nComponent stack: in sc\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find commit data for root \"226\" and commit 6\"",
        "labels": "Type: Bug",
        "id": 45518
    },
    {
        "body": "I want to report a bug. My problem is that the callback function I pass to `useEffect()` is never called in my app. I uploaded a minimal app [here](https://github.com/pschiffmann/react-useeffect-issue) that reproduces the issue.\r\n\r\nAs you can see, I render a couple of nested components. After the initial render, I update the component state inside a `useEffect()` callback. However, this callback is only executed for the first two components, not for the third level component. The result is that the third and subsequent levels are not rendered at all.\r\n\r\nI suspect that this is a bug in React and not a misuse on my side because doing any of the following changes will let the component tree render correctly in all levels:\r\n- Don't use multiple React roots. If I remove the last (yellow) `ReactDOM.render()` call, then the second (red) component tree will render correctly.\r\n- Don't conditionally render child components. Removing the `message !== DEFAULT_MESSAGE` check (`main.tsx`, line 20) causes the component trees to render correctly.\r\n- Use `useLayoutEffect()` instead of `useEffect()`.\r\n\r\nIf you need additional information to reproduce the issue or have any questions, let me know. I'd like provide any help I can!",
        "title": "useEffect callback never called",
        "labels": "Type: Bug",
        "id": 45519
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.2.0-a8b8ffb89\r\n\r\nCall stack: at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154414)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n    at e (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:154999)\r\n\r\nComponent stack: in dl\r\n    in div\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find node with id \"952\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45520
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. React dev tools profiler crashed when changing from \"anonymous\" to \"overlay\" and asked to report the issue\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.1.1-a9cd9a765\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:331467)\r\n    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:331684)\r\n    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58733)\r\n    at Ri (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66060)\r\n    at Jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104557)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89163)\r\n    at Ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89088)\r\n    at ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86037)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45275\r\n\r\nComponent stack: in sc\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Could not find commit data for root \"34103\" and commit 1\"",
        "labels": "Type: Bug",
        "id": 45521
    },
    {
        "body": "I am given a rather annoying popup message\r\n\r\n```\r\nUnsupported React version detected\r\nThis version of React DevTools supports React DOM v15+ and React Native v61+.\r\n\r\nIn order to use DevTools with an older version of React, you'll need to install an older version of the extension.\r\n```\r\n\r\nevery single time I want to use devtools.\r\n\r\nThis is NOT correct. I am using React 16.8 with a standard create-react-app build.",
        "title": "Annoying popup from chrome devtools wrongly telling me I'm using an old version of React",
        "labels": "Type: Bug",
        "id": 45522
    },
    {
        "body": "[From the Profiler docs](https://reactjs.org/docs/profiler.html#onrender-callback):\r\n\r\n> The Profiler requires an onRender function as a prop. React calls this function any time a component within the profiled tree \u201ccommits\u201d an update.\r\n\r\nHowever, given:\r\n\r\n```jsx\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = React.useState(0)\r\n  const increment = () => setCount(c => c + 1)\r\n  return <button onClick={increment}>{count}</button>\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <React.Profiler\r\n        id=\"counter\"\r\n        onRender={() => console.log('called')}\r\n      >\r\n        <div>\r\n          Profiled counter\r\n          <Counter />\r\n        </div>\r\n      </React.Profiler>\r\n      <div>\r\n        Unprofiled counter\r\n        <Counter />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n```\r\n\r\nI'm getting a log when I click on the unprofiled counter.\r\n\r\nReproduction: https://codesandbox.io/s/react-codesandbox-tnff6\r\n\r\nAm I misunderstanding this API, or is this a bug?",
        "title": "Profiler calling onRender for component updates outside of the Profiler tree",
        "labels": "Type: Bug",
        "id": 45523
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen a local file is loaded, the devtools extension displays a panel in devtools, but all elements are missing. There are no console warnings or errors. All elements display properly when using a server, but the documentation says a server is not necessary in this case.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Put this in `index.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Hello World</title>\r\n    <script src=\"https://unpkg.com/react@16.10.1/umd/react.development.js\"></script>\r\n    <script src=\"https://unpkg.com/react-dom@16.10.1/umd/react-dom.development.js\"></script>\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script type=\"text/babel\">\r\n      function HelloWorld() {\r\n        return React.createElement(\"h1\", null, \"Hello, world!\");\r\n      }\r\n      ReactDOM.render(\r\n        React.createElement(HelloWorld, null),\r\n        document.getElementById(\"root\")\r\n      );\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n2. Install React devtools extension and allow access to local file URLS\r\n3. Open `index.html`\r\n4. Open devtools\r\n5. Open components panel\r\n\r\n**What is the expected behavior?**\r\nHello element is displayed with default settings, and both Hello and h1 are displayed when the host type is not hidden in settings.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React/ReactDOM 16.10.1 UMD from Unpkg CDN\r\n- React Developer Tools (Chrome extension) 4.1.2\r\n- Chrome 77.0.3865.90\r\n- macOS 10.14.6",
        "title": "Devtools extension does not show elements from local files",
        "labels": "Type: Bug",
        "id": 45524
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Profiling my react web page\r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.1.2-5184346da\r\n\r\nCall stack: at Map.has (<anonymous>)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150140)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:150791)\r\n\r\nComponent stack: in dl\r\n    in div\r\n    in div\r\n    in div\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc",
        "title": "Error: \"Maximum call stack size exceeded\"",
        "labels": "Type: Bug",
        "id": 45525
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nReact Dev tools gets this error when I try to look at the Components Tab\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI don't know how to reproduce it. It was working yesterday and not working today.\r\n\r\n**What is the expected behavior?**\r\nThat the Components tab of the React dev tools doesn't crash.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6.3\r\n\r\nHere is what I see. It's not my React app crashing. It's the dev tools.\r\n\r\n![Selection_880](https://user-images.githubusercontent.com/148813/65777237-058c7080-e11a-11e9-800a-261e2d3f435d.png)\r\n\r\n\r\nCopy paste of the errors from the screenshot in case that's helpful:\r\n\r\n```\r\nThe error was thrown at hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:61172)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256084\r\n    at Vo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256125)\r\n    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58828)\r\n    at Jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103390)\r\n    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89163)\r\n    at Ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89088)\r\n    at ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86037)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45275\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3691)\r\n```\r\n```\r\nThe error occurred in Vo\r\n    in div\r\n    in aa\r\n    in div\r\n    in za\r\n    in div\r\n    in si\r\n    in div\r\n    in li\r\n    in Suspense\r\n    in Wa\r\n    in div\r\n    in div\r\n    in Jo\r\n    in Xr\r\n    in _o\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in zi\r\n    in Ge\r\n    in un\r\n    in ba\r\n    in Rc\r\n```",
        "title": "Error: \"Minified React error\" in React dev tools when using Components tab",
        "labels": "Type: Bug",
        "id": 45526
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThe Chrome React Developement Tool throws this error:\r\n\r\n> The error was thrown at hi (chrome-\r\n> extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:61172)\r\n>     at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256084\r\n>     at Vo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:256125)\r\n>     at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58828)\r\n>     at Jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103390)\r\n>     at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89163)\r\n>     at Ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89088)\r\n>     at ac (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86037)\r\n>     at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45275\r\n>     at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3691)\r\n\r\n> The error occurred in Vo\r\n>     in div\r\n>     in aa\r\n>     in div\r\n>     in za\r\n>     in div\r\n>     in si\r\n>     in div\r\n>     in li\r\n>     in Suspense\r\n>     in Wa\r\n>     in div\r\n>     in div\r\n>     in Jo\r\n>     in Xr\r\n>     in _o\r\n>     in Unknown\r\n>     in n\r\n>     in Unknown\r\n>     in div\r\n>     in div\r\n>     in zi\r\n>     in Ge\r\n>     in un\r\n>     in ba\r\n>     in Rc\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nWhen I open the Developement Tool for Chrome i get the error, without doing anythign special sometimes.\r\nAfter reloading the frame it only says: Unable to find React on the page.\r\nI need to shutdown my whole PC and restart it, then I see the Tool again, till I go onto the next page and it needs to reaload...\r\n\r\n**What is the expected behavior?**\r\nNo crash.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- Windows 10 Version 1903 (Build 18362.356) 64-bit\r\n- Google Chrome Version 77.0.3865.90 64-bit\r\n- React Developer Tools (Version created from revision a9cd9a765)\r\nIt worked very well some days ago, without any errors.",
        "title": "Error: \"Minified React error #301\"",
        "labels": "Type: Bug",
        "id": 45527
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nThe `useState` hook's value is shown as `undefined` in React DevTools if the value is a string or a number. Clicking on the bug icon prints the correct values to console.\r\n\r\n![image](https://user-images.githubusercontent.com/21111572/65421153-b7225d80-de0b-11e9-8a69-a31836a41c7c.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.**\r\nCodeSandbox: https://codesandbox.io/s/keen-colden-syb7r\r\nDirect link to page so you can see the DevTools: https://2km9v.csb.app/\r\n\r\n**What is the expected behavior?**\r\nThe DevTools should show the correct value of the hook.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.9.0.\r\nGoogle Chrome [Version 77.0.3865.90 (Official Build) (64-bit)] running on Linux x64.\r\n\r\nThis issue appeared after version 4.1.0 (9/19/2019) of the DevTools Chrome extension.\r\n\r\nMight be same bug as #16843 but this one appears without any complicated reproduction steps.\r\n",
        "title": "DevTools: hooks with numbers, strings or booleans show as undefined",
        "labels": "Type: Bug",
        "id": 45528
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nVisual bug: showing wrong state; so user cant use devtools for debugging\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/wizardly-lewin-dlw5k\r\nhttps://dlw5k.csb.app/\r\n\r\n1) Open https://dlw5k.csb.app/\r\n2) Open browser dev tools\r\n3) select \"Components\", click on \"App\", expand `selectedPairs` of `State`\r\n4) select 3+ currencies from the list on the page. State is proper for now\r\n5) uncheck any not last box. \r\nDevtools will remove the last from the list.\r\nUncheck something once more, and again just last item will disappear.\r\n\r\n6) Click on 'bug' icon (\"Log this component data to the console\") \r\nExpand data, 'State' is ok. So just a visual bug?\r\n\r\n**What is the expected behavior?**\r\n\r\nDevtools should update State properly.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact Developer Tools: 4.1.0 (9/19/2019)\r\nBrowser: Google Chrome 76.0.3809.132 (64bit)\r\nOS: Windows 7 Professional SP1 64bit\r\n",
        "title": "DevTools: showing wrong state",
        "labels": "Type: Bug",
        "id": 45529
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG (possibly)\r\n\r\n**What is the current behavior?**\r\n\r\nThe plugin is showing this error:\r\n\r\n>React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return? (react-hooks/rules-of-hooks)eslint\r\n\r\nBut I don't think I'm calling any hooks conditionally.\r\n\r\nThe code:\r\n\r\nhttps://codesandbox.io/s/exciting-bhabha-mqj7q\r\n\r\n```\r\nfunction App(props) {\r\n  const someObject = { propA: true, propB: false };\r\n\r\n  for (const propName in someObject) {\r\n    if (propName === true) {\r\n      console.log(\"something\");\r\n    } else {\r\n      console.log(\"whatever\");\r\n    }\r\n  }\r\n\r\n  // THE PLUGIN ERROR MSG ON THIS useState\r\n  const [myState, setMyState] = useState(null);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/43407798/65239956-10bb1d00-dad8-11e9-88b9-ec517cd17645.png)\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThe plugin wouldn't show the error in this situation.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n![image](https://user-images.githubusercontent.com/43407798/65240081-5a0b6c80-dad8-11e9-8692-a9974342130e.png)\r\n\r\n",
        "title": "eslint-plugin-react-hooks: 'Hook is being called conditionally' error outside condition",
        "labels": "Type: Bug",
        "id": 45530
    },
    {
        "body": "React Dev Tools - Profiler\r\nDescribe what you were doing when the bug occurred:\r\nWas debugging in Storybook\r\n1. Changed the value in dropdown from WrapStory to Root\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.6-a39d9c3\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16722)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293893)\r\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:294128)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n\r\nComponent stack: in Al\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Could not find commit data for root \"1\" and commit 6\" - ReactDevTools",
        "labels": "Type: Bug",
        "id": 45531
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. In React Profiler, under bar chart, clicked one of the components\r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.6-a39d9c3\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16722)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293893)\r\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:294128)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n\r\nComponent stack: in Al\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Could not find commit data for root \"259\" and commit 1\"",
        "labels": "Type: Bug",
        "id": 45532
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a *Bug*\r\n\r\n**What is the current behavior?**\r\n\r\nIf there is a state variable that holds a number, updating it via incrementer/decrementer doesn't render the updated value in the component. Instead it only updates if you focus (click) onto the field and press Enter.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe incrementer/decrementer should render the updated value without having to focus onto the field and press Enter.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact Devtool: 4.0.6\r\nBrowser: Firefox Dev 70.0b6 (64-bit)\r\n\r\n(Timer state variable updates the value in Session)\r\n![hfo_19](https://user-images.githubusercontent.com/17070403/65059248-46a2b900-d993-11e9-8a29-ec382c5f755f.gif)",
        "title": "DevTools: Updating numeric state through incrementer/decrementer doesn't render the updated value ",
        "labels": "Type: Bug",
        "id": 45533
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Opened profiler\r\n2. Recorded\r\n3. Switched to waterfall\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.6-a39d9c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)\r\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98281)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\r\n\r\nComponent stack: in xi\r\n    in div\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Could not find node with id \"16070\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45534
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n1. When Concurrent Mode is enabled\r\n2. and the Chrome tab is inactive\r\n3. and a new render happens inside app\r\n4. the app won't render this update until I open the chrome tab.\r\n\r\nThis only happens on Concurrent Mode. I noticed this because I update the document title on a react Context, like this:\r\n<img width=\"140\" alt=\"Screen Shot 2019-09-12 at 23 58 05\" src=\"https://user-images.githubusercontent.com/619186/64834916-5e0c2b80-d5ba-11e9-8d1c-d3581c9c237e.png\">\r\n\r\nand on Concurrent Mode it was never updating when the tab was inactive. Only when I opened the tab. \r\n\r\nDisabling Concurrent Mode was enough for it to start working as expected.\r\n\r\nI believe this is related to the Chrome throttling behavior of inactive tabs. For example, Chrome doesn't resolve neither `requestIdleCallback` neither `requestAnimationFrame` when the tab is inactive. Made this non-react example just to show this Chrome behavior because I believe it's related: https://codesandbox.io/embed/dank-fire-0zjxv\r\n\r\nReproduction using `useEffect` and allow changing between legacy/sync/concurrent modes: https://codesandbox.io/embed/react-bug-inactive-tabs-tnosy\r\n\r\n### Incorrect behavior (sync or concurrent mode, it get's completely suspended)\r\n\r\n![reproduction-concurrent.gif](https://user-images.githubusercontent.com/619186/64887291-b08f2b80-d63e-11e9-8d17-2ef9c6427881.gif)\r\n\r\n**What is the expected behavior?**\r\n\r\nInactive tabs should have the same behavior with or without Concurrent Mode. They should keep updating/rendering things (ok if a little bit throttled), but NOT completely pause doing things until the tab becomes active.\r\n\r\n![correct-behavior.gif](https://user-images.githubusercontent.com/619186/64887568-4f1b8c80-d63f-11e9-90df-a990291eac75.gif)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.9\r\nChrome 76\r\nmacOS",
        "title": "[Concurrent Mode] App stops updating/rendering on inactive tab",
        "labels": "Type: Bug",
        "id": 45535
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI want to report a bug.\r\n\r\n**What is the current behavior?**\r\nEvent handlers on elements are fired twice, when hovering from one element onto the next.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/quizzical-mountain-9s48c\r\n\r\n**What is the expected behavior?**\r\nEvent handlers should only fire once.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.4\r\nReactDOM 16.8.4\r\nChrome 76.0.3809.132\r\nFirefox 69.0 (64-Bit)\r\nEdge 44.18362.267.0\r\n",
        "title": "Component sometimes fires event handlers twice",
        "labels": "Type: Bug",
        "id": 45536
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\nProgrammatically calling window.print() can cause React to report strange errors before crashing under certain circumstances.  The trigger *seems to be* a call to print() that results in a React state change somewhere (which, in Chrome, seems to happen because the print preview it shows can cause media query events, which can be hooked up to calls to a setState function).  This does not always happen, however--as shown in the example if the code is not called from in a setTimeout it doesn't seem to crash.  In addition, if the user initiates printing instead (e.g. via CTRL+P), React never crashes.\r\n\r\nThe two errors I've seen happen as a result of this are `Failed to execute 'handleEvent' on 'EventListener': The provided callback is no longer runnable` (needs \"Pause on caught exceptions\" in Chrome's DevTools to catch), and after a few of those they're followed by `Maximum update depth exceeded` (even though the setState function is only called once).  Once this happens, there's a good chance the tab become completely unresponsive after the print dialog is closed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nA minimal example can be found here: https://codesandbox.io/s/immutable-snowflake-06cj2 . There are no external dependencies. The code is commented with instructions to reproduce the behavior.\r\n\r\nI've also included a copy of the code here for completeness' sake:\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// Custom hook to match media queries.\r\n// The setMatch call in this function is at the bottom of the error stack.\r\nfunction useMediaQuery(query) {\r\n\r\n  const [match, setMatch] = React.useState(() => window.matchMedia(query).matches);\r\n\r\n  React.useEffect(() => {\r\n    const queryList = window.matchMedia(query);\r\n\r\n    /*************************************************************/\r\n    /* If this function is not called, the crash does not occur. */\r\n    /* When window.print is called, this effect is run as a      */\r\n    /* consequence. However React handles it causes errors and   */\r\n    /* other strange behavior. Because Firefox handles printing  */\r\n    /* differently, it does not crash.                           */\r\n    /* While this is an example of using setState in useEffect,  */\r\n    /* it is only run once before the error is thrown anyway.    */\r\n    /*************************************************************/\r\n    const handleMatch = () => setMatch(queryList.matches);\r\n    handleMatch();\r\n\r\n    // Bookkeeping, not relevant to the crash.\r\n    queryList.addListener(handleMatch);\r\n    return () => queryList.removeListener(handleMatch);\r\n  }, [query]);\r\n\r\n  return match;\r\n}\r\n\r\n\r\nexport function App() {\r\n  // This is the simplist media query that will cause a crash\r\n  // But anything will work as long as it's different during printing.\r\n  // For example, \"(max-width: 1260px)\" also works if the window\r\n  // is wide enough.\r\n  let isPrint = useMediaQuery(\"print\");\r\n\r\n  return (\r\n    <div>\r\n      <p style={{ fontWeight: 'bold' }}>Important: Only Chrome crashes; Firefox (and likely others) are safe.</p>\r\n      <p>(You may need to open this page in its own window instead of the Code Sandbox split-screen.)</p>\r\n\r\n      <button onClick={() => setTimeout(window.print, 100)}>Crashes</button>\r\n      <button onClick={asyncPrint}>Crashes</button>\r\n      <button onClick={() => window.print()}>Does not crash</button>\r\n      <button onClick={syncPrint}>Does not crash</button>\r\n      <p>(Note that pressing CTRL+P never crashes)</p>\r\n      <p>If you click the button to call window.print(), React will behave strangely. Once the print preview is about to show, suddenly an error <code>\"Failed to execute 'handleEvent' on 'EventListener': The provided callback is no longer runnable\"</code> will be thrown. After that happens a few times, a <code>\"Maximum update depth exceeded\"</code> error will be thrown, even though the setState function is only called once.</p>\r\n      <p>(Printing with CTRL+P won't crash, clicking the button to print will)</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction syncPrint() { window.print(); }\r\nfunction asyncPrint() { setTimeout(window.print, 100); }\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n**What is the expected behavior?**\r\nReact should not throw errors after calling window.print(), even if doing so causes state changes.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is the latest release (16.9.0).  I am unsure if other versions of React are affected.\r\nThe behavior was tested using Chrome 76 on Windows 10.  This behavior _will not happen_ in Firefox and likely other browsers as well, probably due to the unique way Chrome handles printing and print previews.\r\n\r\n\r\n\r\n",
        "title": "window.print() crashes if a 'print' event listener causes a rerender (Chrome, DEV-mode only)",
        "labels": "Type: Bug",
        "id": 45537
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Reading the flamegraph of my React app\r\n2. Clicked on one of the options in the `Rendered at` list of the graph\r\n  ![image](https://user-images.githubusercontent.com/41026008/64542778-69710580-d2e1-11e9-8846-ab1b810e034c.png)\r\n3. This caused the below error to appear in React DevTools.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.6-a39d9c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)\r\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\r\n\r\nComponent stack: in xi\r\n    in div\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Could not find node with id \"44300\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45538
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nNew dev tools are working fine. But I have a particular component that, when it mounts, the dev tools no longer can inspect anything about it. When I select it, the right hand side just says \"Loading...\" and nothing ever loads.\r\n\r\n![interactive](https://user-images.githubusercontent.com/1316441/64463256-95fa0700-d0c0-11e9-9d7b-a853854a1bfe.gif)\r\n\r\nAs you can see from the gif above, before I click on that particular component that seems to break, I have no errors in my console. But as soon as I click on the component that breaks (or any of its children) the number of console errors goes up by one.\r\n\r\nThe error in the console looks like this:\r\n\r\n![Screen Shot 2019-09-06 at 4 08 14 PM](https://user-images.githubusercontent.com/1316441/64463296-bc1fa700-d0c0-11e9-9cf4-4dd5fa10ff72.png)\r\n\r\n```\r\nbackend.js:1 Uncaught DOMException: Failed to execute 'postMessage' on 'Window': #<HTMLAllCollection> could not be cloned.\r\n    at Object.send (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:1:94424)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:9:5785\r\n```\r\n\r\nHard to provide steps to reproduce this since it's a custom component with business-specific logic (so can't provide the code). But I tried google-ing this problem and error and nothing showed up. So figured posting it here might help if others out there on the interwebs are having the same issue and they can comment here.\r\n\r\n**What is the expected behavior?**\r\n\r\nInspecting any mounted component will work.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCurrently on react/react-dom 16.3 and the previous dev tools worked just fine. I could inspect any component and see it's data. But the [latestest update](https://reactjs.org/blog/2019/08/15/new-react-devtools.html) broke that.\r\n",
        "title": "DevTools: Failed to execute 'postMessage' on 'Window': #<HTMLAllCollection> could not be cloned.",
        "labels": "Type: Bug",
        "id": 45539
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nLink to troubleshooting instructions in the devtools extension disabled popup is outdated. It is pointing [here](https://github.com/facebook/react-devtools/blob/master/README.md#the-react-tab-doesnt-show-up) which is redirecting [here](https://github.com/facebook/react).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://github.com/facebook/react/blob/master/packages/react-devtools-extensions/popups/disabled.html\r\nLink needs to be updated- not sure what the correct link is\r\n\r\n**What is the expected behavior?**\r\nhttps://github.com/facebook/react/blob/master/packages/react-devtools-extensions/popups/disabled.html\r\nLink needs to be updated- not sure what the correct link is",
        "title": "Troubleshooting instructions link update",
        "labels": "Type: Bug",
        "id": 45540
    },
    {
        "body": "Using `react-refresh/babel` 0.4.0 is giving me this error on a large number of files:\r\n\r\n```\r\nERROR in ../orbit-app/src/hooks/useStores.ts\r\nModule build failed (from ../node_modules/babel-loader/lib/index.js):\r\nTypeError: Cannot read property '0' of undefined\r\n    at Function.get (/Users/nw/projects/motion/orbit/node_modules/@babel/traverse/lib/path/index.js:115:33)\r\n    at NodePath.unshiftContainer (/Users/nw/projects/motion/orbit/node_modules/@babel/traverse/lib/path/modification.js:191:31)\r\n    at PluginPass.exit (/Users/nw/projects/motion/orbit/node_modules/react-refresh/cjs/react-refresh-babel.development.js:546:28)\r\n```\r\n\r\nI narrowed down that file to the simplest thing that causes it:\r\n\r\n```\r\nimport { useContext } from 'react'\r\n\r\nexport default () => useContext()\r\n```\r\n\r\n_Originally posted by @natew in https://github.com/facebook/react/issues/16604#issuecomment-528708174_",
        "title": "Compile error `react-refresh/babel` 0.4.0",
        "labels": "Type: Bug",
        "id": 45541
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.6-a39d9c3\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)\r\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98281)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\r\n\r\nComponent stack: in xi\r\n    in div\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Could not find node with id \"3742\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45542
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `useEffect` from a background page in a chrome extension the body of the effect isnt triggered.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nSee the demo project here: https://github.com/mikecann/bgpage-hooks-issue\r\n\r\n**What is the expected behavior?**\r\n\r\n`useEffect` should be triggered\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt stopped working somewhere between react 16.8 and 16.9 , you can change the react and react_dom version in the demo project and see that it works as expected in 16.8\r\n\r\n**Workaround**\r\n\r\nFor now the issue can be worked around as demonstrated: https://github.com/mikecann/bgpage-hooks-issue/blob/master/bg.tsx#L5\r\n\r\nSo im not really sure whats going on but perhaps because background pages arent actually visually rendered to the screen then React has optimized things so that effects arent triggered?",
        "title": "Chrome Extension Background Page and useEffect Not Triggered",
        "labels": "Type: Bug",
        "id": 45543
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. Start profiling app, record and reload page\r\n2. going through profilers commits\r\n3. crush\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.6-a39d9c3\r\n\r\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5745)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8527)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:275553)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n\r\nComponent stack: in bi\r\n    in div\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 38\"",
        "labels": "Type: Bug",
        "id": 45544
    },
    {
        "body": "Describe what you were doing when the bug occurred:\r\n1. \r\n2. \r\n3. \r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.6-a39d9c3\r\n\r\nCall stack: at n.set (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:34098)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:261228\r\n    at Fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:72851)\r\n    at Vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:74577)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:93355\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25093)\r\n    at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:91165)\r\n    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:79859)\r\n    at M (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:2839)\r\n\r\nComponent stack: in Ma\r\n    in div\r\n    in div\r\n    in div\r\n    in Ga\r\n    in Xa\r\n    in div\r\n    in lo\r\n    in ir\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Cannot modify filter preferences while profiling\"",
        "labels": "Type: Bug",
        "id": 45545
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** **Bug**\r\n\r\n**What is the current behavior?**\r\nTypeError: \"'requestAnimationFrame' called on an object that does not implement interface Window.\"\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://github.com/facebook/react/blob/0f6e3cd61cf4a5a1491bb3c92780936aebc2a146/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L88\r\n\r\nIn the WebExtension content script, globalThis !== window.\r\nSo when `const requestAnimationFrame = window.requestAnimationFrame`, the `this` binding of `rAF` is lost.\r\n\r\nIn the after calling, `rAF` rebinds to the globalThis, but globalThis doesn't implements Window interface.\r\n\r\nPoC: Install this extension in the Firefox and you will see the error reported.\r\n```index.js\r\ntry {\r\n    const raf = window.requestAnimationFrame\r\n    raf(() => console.log('Okay.'))\r\n} catch (e) {\r\n    console.warn(e)\r\n}\r\n```\r\n\r\n```manifest.json\r\n{\r\n    \"name\": \"rAF in content script test\",\r\n    \"version\": \"0.0.1\",\r\n    \"manifest_version\": 2,\r\n    \"content_scripts\": [{ \"js\": [\"/index.js\"], \"matches\": [\"<all_urls>\"] }]\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nFirefox, in WebExtension. \r\n\r\nRelated to https://github.com/facebook/react/issues/16605",
        "title": "TypeError: \"'requestAnimationFrame' called on an object that does not implement interface Window.\"",
        "labels": "Type: Bug",
        "id": 45546
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nHaving an issue\r\n\r\n**What is the current behavior?**\r\nnot able to see any rendering after changing any props in debugging tool. and also getting below issue \r\n![image](https://user-images.githubusercontent.com/7201068/63866449-d7a7f500-c9d0-11e9-80dd-a19d0456711c.png)\r\n\r\nUncaught TypeError: Cannot read property '_reactInternalInstance' of undefined\r\n    at Object.get (react-dom.min.js:formatted:4200)\r\n    at a (react-dom.min.js:formatted:4937)\r\n    at Object.enqueueForceUpdate (react-dom.min.js:formatted:4965)\r\n    at s (backend.js:9)\r\n    at Object.setInProps (backend.js:9)\r\n    at t.<anonymous> (backend.js:1)\r\n    at t.l.emit (backend.js:1)\r\n    at backend.js:9\r\n    at t (backend.js:1)\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nReproduce bug.\r\ntry to change any dynamic pros in the debugger tools section and you will not able to see any DOM changes\r\n\r\n**What is the expected behavior?**\r\n\r\nWhenever change any props in debugger tools. react component should be rendered as per it.\r\nIt was working fine with previous react developer tools chrome plugin \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI am using the below version.\r\n\"react\": \"15.6.2\",\r\n   \"react-dom\": \"15.6.2\",\r\n",
        "title": "New plugin not working after change any props in debugger tools",
        "labels": "Type: Bug",
        "id": 45547
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIf useState's setState is called in a closed window, it hangs the browser (at least Chrome). I agree that this seems like a weird issue, but we do this all of the time in our plugin we've built for an application that has iframe based UI.\r\n\r\nThis reproduces it. Just click \"Do it\". Note that your codesandbox service worker will spin up to 100% cpu and I can't figure out a way to stop it other than to kill that task in the Chrome task manager\r\n\r\nhttps://codesandbox.io/s/react-setstate-on-hidden-window-hangs-repro-cixqn\r\n\r\n**What is the expected behavior?**\r\n\r\nNo hang, it should just ignore the setState call, ideally.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.9. I'm not sure, but hooks are fairly new. This reproduces in Chrome 76, but not Firefox as far as I can tell.\r\n",
        "title": "useState's setState hangs when called in closed window",
        "labels": "Type: Bug",
        "id": 45548
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nArguably a **bug** in eslint-plugin-react-hooks\r\n\r\n**What is the current behavior?**\r\n\r\nThe exhaustive-deps rule does not catch the following case:\r\n\r\n```js\r\nconst FooContext = React.createContext(() => {});\r\n\r\n// Meanwhile, somewhere deep in the component tree\r\nfunction Bar() {\r\n  const foo = useContext(FooContext);\r\n  useEffect(foo, []);\r\n  return <div>A div walks into a Bar\u2026</div>;\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI think the plugin should suggest adding the dependency on `foo`:\r\n\r\n```js\r\nuseEffect(foo, [foo]);\r\n```\r\n\r\nIt already makes this suggestion for the verbose form of the code:\r\n\r\n```js\r\n// This code:\r\nuseEffect(() => foo(), []);\r\n// is fixed to:\r\nuseEffect(() => foo(), [foo]);\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- eslint@6.2.2\r\n- eslint-plugin-react-hooks@2.0.1\r\n- react@16.9.0",
        "title": "[react-hooks/exhaustive-deps] missed warning when passing a function",
        "labels": "Type: Bug",
        "id": 45549
    },
    {
        "body": "PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.5-5441b09\r\n\r\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:275512)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\r\n\r\nComponent stack: in bi\r\n    in div\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 1\"",
        "labels": "Type: Bug",
        "id": 45550
    },
    {
        "body": "Hi,\r\n\r\nFirefox v68.0.2\r\nReact dev tools: latest version\r\n\r\nAfter disabling React dev tools same tab works as expected.\r\n\r\np.s: this happens mostly on non-react tabs.\r\n\r\nI just started using react dev tools and I don't know about prev version of Firefox or React dev tools btw.",
        "title": "Firefox browser console opens randomly blank after installing react dev tools",
        "labels": "Type: Bug",
        "id": 45551
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nWhen using the latest Dev tools (v4.0.5) on my project, when I inspect react-redux elements that use connect() devtools crashes. I can't map from my crash to the actual source but the code is react devtools: build/backend.js\r\n```\r\n useMemo: function(e, t) {\r\n            var n = w()\r\n              , r = null !== n ? n.memoizedState[0] : e(); // <-- here n exists, but n.memoizedState itself is null\r\n            return v.push({\r\n                primitive: \"Memo\",\r\n                stackError: new Error,\r\n                value: r\r\n            }),\r\n            r\r\n        },\r\n```\r\n\r\nup one level of stack is react: \r\n```\r\nfunction useMemo(create, inputs) {\r\n  var dispatcher = resolveDispatcher();\r\n  return dispatcher.useMemo(create, inputs);\r\n}\r\n```\r\n\r\nand up one level is react-redux: (https://github.com/reduxjs/react-redux/blob/master/src/components/connectAdvanced.js#L199)\r\n```\r\nconst childPropsSelector = useMemo(() => {\r\n        // The child props selector needs the store reference as an input.\r\n        // Re-create this selector whenever the store changes.\r\n        return createChildSelector(store)\r\n      }, [store])\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI'll have to try and make a small repro, but I hope there's something obvious given the info above. It's not clear to me if react-redux is doing something or if its devtools. This behavior existed in v3 and i was hoping it'd get magically fixed with v4 but it remains.\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis is in an electron app w/ react-redux v7.1.0 and react v16.8.3 (have to use this due to the version of react native i'm on)\r\n",
        "title": "DevTools: TypeError: Cannot read property '0' of null",
        "labels": "Type: Bug",
        "id": 45552
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nDevTools extension does not persist state. For example, the \u201cWelcome\u201d dialog displays upon every refresh.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Open React DevTools in a React app.\r\n2. Change DevTools settings.\r\n3. Refresh app in browser. \r\n\r\n**What is the expected behavior?**\r\n\r\nSettings should be changed. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is in a corporate install of Chrome 71. It\u2019s possible that it blocks whichever persistence API React DevTools is using (Chrome DevTools itself persists settings successfully).\r\n",
        "title": "React DevTools not persisting settings",
        "labels": "Type: Bug",
        "id": 45553
    },
    {
        "body": "PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.5-5441b09\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11441\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11387)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11920)\r\n    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:277765)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98280)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n\r\nComponent stack: in xi\r\n    in div\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Could not find node with id \"339\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45554
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nscrollbar is covering flamegraph\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\ncurrent\r\n![current](https://user-images.githubusercontent.com/3931792/63563638-b09a8f00-c59c-11e9-95fc-627dcea023b6.png)\r\n\r\nwithout scrollbar, there is more graphs hidden by scrollbar\r\n![without scrollbar](https://user-images.githubusercontent.com/3931792/63563645-b8f2ca00-c59c-11e9-917e-8c63be90cb2d.png)\r\n\r\n**What is the expected behavior?**\r\nscrollbar does not cover flame graph or if flamegraph's height is long enough to use scrollbar, flamegraph container's width should shrink about scrollbars width \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.9 / chrome 78.0.3887.7 / macOS 10.14.6 /  \r\n",
        "title": "Devtools scrollbar hides flamegraph",
        "labels": "Type: Bug",
        "id": 45555
    },
    {
        "body": "PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.5-5441b09\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16721)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:293849)\r\n    at Al (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:294084)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\r\n\r\nComponent stack: in Al\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"Could not find commit data for root \"1180\" and commit 2\"",
        "labels": "Type: Bug",
        "id": 45556
    },
    {
        "body": "PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.5-5441b09\r\n\r\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:275512)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)\r\n\r\nComponent stack: in bi\r\n    in div\r\n    in div\r\n    in div\r\n    in Ir\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Wa\r\n    in ce\r\n    in be\r\n    in So\r\n    in Vl",
        "title": "Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 4\"",
        "labels": "Type: Bug",
        "id": 45557
    },
    {
        "body": "Hi, long time user, first time issuer.\r\n\r\nI think I found a bug with the Profiler component. When I click on the `Save profile...` button at the top nothing happens and there appears to be no new files in my Downloads folder. I think it might be silently failing and that's why I am not getting any response.  Has anyone else ran into this issue?\r\n\r\nAnother thing I would like to mention is that I haven't looked through all of the documentation material about the new Profiler. I only read [this introductory blog post](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html), so if this issue is addressed elsewhere I apologize and also request the source to that solution.\r\n\r\nThank you for your time!\r\n\r\n**Versions:**\r\n * `React DevTools 4.0.5`\r\n * `Firefox: 68.0.2(64-bit)`\r\n * `Ubuntu: 18.04`\r\n",
        "title": "DevTools: Profiler: Save profile does nothing on Firefox",
        "labels": "Type: Bug",
        "id": 45558
    },
    {
        "body": "PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.4-3c6a219\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16721)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293207)\r\n    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293442)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n\r\nComponent stack: in pl\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ha\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Ul",
        "title": "Error: \"Could not find commit data for root \"1896\" and commit 16\"",
        "labels": "Type: Bug",
        "id": 45559
    },
    {
        "body": "## Details\r\nUsing version 4.0.2 (8/15/2019) I am getting a maximum call stack size exceeded when my app starts up. While my app using this is a little different I have replicated the issue using a fresh create-react-app. I will include the App.js code below.\r\n\r\n## Steps to reproduce\r\n1. Create a new app using version 3.0.1 of create-react-app\r\n2. Replace the code in App.js with the code listed below\r\n3. Inspect the console, there should be a stack trace from a maximum call stack exceeded error\r\n\r\n## App.js\r\n```\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst createDivs = num => {\r\n    const rtn = [];\r\n    for(let i = 0; i < num; i++) {\r\n        const key = `div-${i}`;\r\n        rtn.push(<div className={key} key={key} />)\r\n    }\r\n    return rtn;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n      <div>\r\n        {createDivs(15000)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n## Call Stack\r\n<details>\r\n\r\n<summary>backend.js:formatted:2097 Uncaught RangeError: Maximum call stack size exceeded\r\n</summary>\r\n\r\n```\r\n    at ge (backend.js:formatted:2097)\r\n    at Ge (backend.js:formatted:2435)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\nge @ backend.js:formatted:2097\r\nGe @ backend.js:formatted:2435\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\npostMessage (async)\r\nr @ contentScript.js:1\r\n88 @ contentScript.js:1\r\nn @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\nShow 170 more frames\r\n```\r\n\r\n</details>\r\n\r\nThis was not an issue in the previous version of react-devtools.",
        "title": "Getting maximum call stack exceeded on backend.js when rendering many elements.",
        "labels": "Type: Bug",
        "id": 45560
    },
    {
        "body": "The popups that appear when you click on React icon still say \u201cReact tab will appear to the right\u201d. But the tab label has changed. ",
        "title": "Wrong tab suggestion label in DevTools",
        "labels": "Type: Bug",
        "id": 45561
    },
    {
        "body": "1. Open FB page\r\n2. Open Components tab\r\n3. Change address bar to `https://reactjs.org` and press Enter\r\n\r\nExpected: Components tab gets populated.\r\nActual:\r\n\r\n<img width=\"783\" alt=\"Screen Shot 2019-04-23 at 7 27 37 PM\" src=\"https://user-images.githubusercontent.com/810438/56606380-00247a80-65fe-11e9-988c-2ad3e69eb579.png\">\r\n\r\n~~If I **inspect background page**, I see this:~~ (fixed by #229)\r\n\r\n<img width=\"652\" alt=\"Screen Shot 2019-04-23 at 7 27 12 PM\" src=\"https://user-images.githubusercontent.com/810438/56606408-0b77a600-65fe-11e9-9f65-5502401b7e4a.png\">\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/217",
        "title": "DevTools: Components tree is sometimes unexpectedly empty after navigation",
        "labels": "Type: Bug",
        "id": 45562
    },
    {
        "body": "I got this on FB.com sandbox:\r\n\r\n<img width=\"815\" alt=\"screen shot 2019-03-01 at 1 15 24 pm\" src=\"https://user-images.githubusercontent.com/810438/53640457-26dcbb00-3c24-11e9-828f-a987ffeec4da.png\">\r\n\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/25",
        "title": "DevTools: Re-enable postMessage transferable for faster ArrayBuffer transfers",
        "labels": "Type: Bug",
        "id": 45563
    },
    {
        "body": "This is weird. Happens if I select a node deeply and then long-press \"left\" arrow.\r\n\r\n```\r\nInvalid index 154 specified; store contains 154 items.\r\n\r\nUncaught Invariant Violation: Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\r\n    at ReactError (file:///Users/gaearon/p/react-devtools-experimental/shells/dev/build/devtools.js:8529:40)\r\n```\r\n\r\nIt starts with \"invalid index\" and then gives me different React invariants or warnings depending on how lucky I am.\r\n\r\n![Screen Recording 2019-04-25 at 05 58 PM](https://user-images.githubusercontent.com/810438/56754075-fcbafb80-6783-11e9-8fe6-84aa29d1c120.gif)\r\n\r\n---\r\nMore weird symptoms:\r\n\r\n<img width=\"889\" alt=\"Screen Shot 2019-04-25 at 6 38 22 PM\" src=\"https://user-images.githubusercontent.com/810438/56756281-5671f480-6789-11e9-8d0b-631a5217e63b.png\">\r\n\r\n---\r\n<img width=\"832\" alt=\"Screen Shot 2019-04-25 at 6 41 37 PM\" src=\"https://user-images.githubusercontent.com/810438/56756492-c7191100-6789-11e9-8814-cb849590ee01.png\">\r\n\r\n---\r\nThis \"fixes\" it:\r\n\r\n```diff\r\n       runWithPriority(UserBlockingPriority, () => dispatch(action));\r\n-      next(() => dispatch({ type: 'UPDATE_INSPECTED_ELEMENT_ID' }));\r\n+      runWithPriority(UserBlockingPriority, () => dispatch({ type: 'UPDATE_INSPECTED_ELEMENT_ID' }));\r\n     },\r\n```\r\n\r\nSo I suspect it's a bug with `Scheduler.next()`.\r\n\r\n---\r\nThis also looks funky. Note how somewhere in the middle right pane gets \"stuck\" showing the same cycle of values:\r\n\r\n![Screen Recording 2019-04-25 at 07 36 PM](https://user-images.githubusercontent.com/810438/56759733-8b824500-6791-11e9-95ba-d4d3630a4c5e.gif)\r\n\r\n---\r\nReact bug: https://github.com/facebook/react/issues/15512\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/228",
        "title": "DevTools: Crashes and warnings when quickly collapsing",
        "labels": "Type: Bug",
        "id": 45564
    },
    {
        "body": "![clipping-bug](https://user-images.githubusercontent.com/10223856/55770859-3984b400-5a5c-11e9-8ae4-e51ecf1e4f51.gif)\r\n\r\nThis one was kinda tricky to reproduce, but basically the steps are:\r\n\r\n1. Click the inspect element and hover any component\r\n2. Open the console pressing esc\r\n3. Move mouse back to devtools and click again the inspect button (to stop inspection).\r\n4. Close the console with esc.\r\n\r\n(ps: sorry for the gif quality, I don't know how to properly convert the .mov to .gif)\r\n\r\n---\r\nOriginally reported by @lucasecdb via https://github.com/bvaughn/react-devtools-experimental/issues/110",
        "title": "DevTools: Elements height being clipped by console",
        "labels": "Type: Bug",
        "id": 45565
    },
    {
        "body": "1. Hover over a node so you see its bounding box over the page\r\n2. Without moving your mouse, press Cmd-Opt-J to hide the devtools\r\n\r\nResult: The overlay stays (even if you move your mouse or reopen React devtools!)\r\n\r\nExpected: It disappears.\r\n\r\n---\r\nOriginally reported by @sophiebits via https://github.com/bvaughn/react-devtools-experimental/issues/296",
        "title": "DevTools: Overlay stays after devtools are closed",
        "labels": "Type: Bug",
        "id": 45566
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n\u201cWelcome to the new React DevTools!\u201d message blocks the devtool panel every time the it is opened.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Open a website with React with DevTools installed.\r\n2. Open the Component tab.\r\n3. Dismiss the welcome screen.\r\n4. Close the devtools and open it again.\r\n\r\n**What is the expected behavior?**\r\nDismissing the \u201cWelcome to the new React DevTools!\u201d message should be permanent.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDevTools: 4.0.5\r\nChrome: 77.0.3865.35",
        "title": "React DevTools: Welcome screen keeps showing up",
        "labels": "Type: Bug",
        "id": 45567
    },
    {
        "body": "Seems to only happen the first time DevTools is opened after being installed (or perhaps the first time after the browser is opened).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/381",
        "title": "DevTools: Occasional FOUC when loading DevTools",
        "labels": "Type: Bug",
        "id": 45568
    },
    {
        "body": "Windows Firefox:\r\n![image](https://user-images.githubusercontent.com/91933/63136723-30669f00-bf88-11e9-9268-896f5e4ddf5e.png)\r\n\r\nLooks OK in Chrome:\r\n![image](https://user-images.githubusercontent.com/91933/63136731-3eb4bb00-bf88-11e9-8b1f-d7dd6f8ce629.png)\r\n\r\n---\r\nOriginally reported by @Daniel15 via https://github.com/bvaughn/react-devtools-experimental/issues/382",
        "title": "DevTools: Tooltips appear to be Times New Roman in Firefox",
        "labels": "Type: Bug",
        "id": 45569
    },
    {
        "body": "PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\r\n\r\nSimply click on profiler and baam!!\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.3-95ffd3c\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11441\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11387)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11920)\r\n    at _i (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277079)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n\r\nComponent stack: in _i\r\n    in div\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ha\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Ul",
        "title": "Error: \"Could not find node with id \"6002\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45570
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThis is a very specific case - there are some styles leaking from react devtools, if you use it in your own application directly. Specifically these lines: https://github.com/facebook/react/blob/devtools-v4-merge/packages/react-devtools-shared/src/devtools/views/root.css#L174-L178.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIt's funny, I can give a *real* CodeSandbox editor now! You can see the styling on the editor elements here: https://codesandbox.io/s/new.\r\n\r\n**What is the expected behavior?**\r\n\r\nNo leaking styles. Ideally the `* {` would be prefixed by an id or classname specific for the devtools. I think this should be possible with the styling used by the devtools. I can open a PR to fix this if everyone agrees on this fix.\r\n\r\ncc @bvaughn \t",
        "title": "React DevTools: styling overrides global styles",
        "labels": "Type: Bug",
        "id": 45571
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nThe select dropdowns don't function correctly, and are currently unreadable.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n![settings broken](https://user-images.githubusercontent.com/5931248/63256241-102c2e00-c26f-11e9-96bc-ebcab5bb319c.gif)\r\n\r\n\r\n**What is the expected behavior?**\r\nSelect dropdown options are readable and able to be set correctly\r\n\r\n**Which versions of React DevTools, and which browser / OS are affected by this issue? Did this work in previous versions of React DevTools?**\r\n\r\nApp Name | Version \r\n-- | --\r\nGoogle Chrome | 76.0.3809.100\u00a0(Official Build)\u00a0(64-bit)\u00a0(cohort: Stable) \r\nReact DevTools |  4.0.4-3c6a219\r\nOS | Windows\u00a010 OS Version 1809 (Build 17763.678)\r\nJavaScript | V8\u00a07.6.303.29",
        "title": "React DevTools Chrome Browser Extension Option Select Boxes are broken",
        "labels": "Type: Bug",
        "id": 45572
    },
    {
        "body": "PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE\r\n\r\nI got this error when I click 'Ranked'.\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.4-3c6a219\r\n\r\nCall stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11441\r\n    at Map.forEach (<anonymous>)\r\n    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11387)\r\n    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11920)\r\n    at _i (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277123)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98280)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n\r\nComponent stack: in _i\r\n    in div\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ha\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Ul",
        "title": "Error: \"Could not find node with id \"266\" in commit tree\"",
        "labels": "Type: Bug",
        "id": 45573
    },
    {
        "body": "<!-- please provide repro information here -->\r\n**Repro:** https://codesandbox.io/s/xenodochial-lamarr-q71wt\r\n\r\n**Steps:**\r\n1. Profile\r\n2. Select a component from the flame graph (important)\r\n3. Click settings\r\n4. Toggle \"hide commits below ms\" (In my case, it's 100ms)\r\n\r\n**Demo:**\r\n![repro-2](https://user-images.githubusercontent.com/4465644/63220458-49529880-c1b2-11e9-9bd4-aeb059af8b9b.gif)\r\n\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.2-2bcc6c6\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\r\n    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293513)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25092)\r\n\r\nComponent stack: in pl\r\n    in div\r\n    in ml\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ua\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Fl",
        "title": "Error: \"Could not find commit data for root \"1\" and commit null\"",
        "labels": "Type: Bug",
        "id": 45574
    },
    {
        "body": "I tried to select a different component from the dropdown\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.2-2bcc6c6\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292537)\r\n    at ml (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292772)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n\r\nComponent stack: in ml\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ua\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Fl",
        "title": "Error: \"Could not find commit data for root \"34\" and commit 21\"",
        "labels": "Type: Bug",
        "id": 45575
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReporting a bug\r\n\r\n**What is the current behavior?**\r\n\r\nThe standalone devtools v4 script does not load when we navigate to `http://localhost:8097/`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Run `react-devtools`\r\n2. Navigate to `http://localhost:8097/` in a browser\r\n\r\n**What is the expected behavior?**\r\n\r\n- Expect the network call to end and a script to show up\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nnot applicable\r\n",
        "title": "Devtools V4 standalone script at localhost:8097 fails to load",
        "labels": "Type: Bug",
        "id": 45576
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Bug\r\n\r\n**What is the current behavior?**\r\n\r\nStarting a profile in React DevTools v4 results in a console error and no change from the extension:\r\n\r\n```\r\nUncaught Error: startProfiling not supported by this renderer\r\n    at Object.startProfiling (backend.js:9)\r\n    at t.<anonymous> (backend.js:1)\r\n    at t.u.emit (backend.js:1)\r\n    at backend.js:9\r\n    at t (backend.js:1)\r\n```\r\n\r\nI am on React 16.8.2. I am also using auth0-lock, which uses React v15.6.2 ([relevant discussion here](https://github.com/auth0/lock/issues/1148)) as a direct non-dev and non-peer dependency. I suspect that this is causing the bug. This dependency existed when we used DevTools v3, so I suspect that something must have changed in v4 to cause this.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\n1. Open a React app\r\n2. Install auth-lock@11.14.0\r\n2. Try to profile\r\n3. Go to Console, see error\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nProfiling should work and not error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.8.6\r\nreact-dom@16.8.6\r\nauth-lock@11.14.0\r\n\r\nThese dependencies have not changed in between DevTools v3 and v4.",
        "title": "DevTools v4 error \"startProfiling not supported by this renderer\"",
        "labels": "Type: Bug",
        "id": 45577
    },
    {
        "body": "<!-- please provide repro information here -->\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.2-2bcc6c6\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:29005)\r\n    at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:29131)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:218806\r\n    at n.t.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:153564)\r\n    at Ei (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:66077)\r\n    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:65872)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99617)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n\r\nComponent stack: in n\r\n    in div\r\n    in n\r\n    in div\r\n    in div\r\n    in Vr\r\n    in div\r\n    in div\r\n    in io\r\n    in ar\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ua\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Fl",
        "title": "Error: \"Cannot read property 'isCollapsed' of undefined\"",
        "labels": "Type: Bug",
        "id": 45578
    },
    {
        "body": "I don't know who's making the bug, so reporting here. I'll move to correct repo if someone helps me debug it.\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nPlease watch below screencast:\r\nhttps://drive.google.com/file/d/1KMP44qsZ4y3MwrLLDdnOzPZ8z5mMElFP/view\r\n\r\n1. Goto https://react-devtools-tutorial.now.sh/editing-props-and-state\r\n2. Change the last ListItem prop to isComplete from `false` to `true`.\r\n3. Click the checkbox in the view to change the state again from `true` to `false`.\r\n**What is the expected behavior?**\r\nIt should just change the state of that ListItem. Instead, it's adding 3 more in the list with duplicate keys.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLatest React.\r\nMac, Chrome Version 75.0.3770.142 (Official Build) (64-bit)\r\n",
        "title": "DevTools: react-devtools-tutorial.now.sh > editing-props-and-state have a bad state",
        "labels": "Type: Bug",
        "id": 45579
    },
    {
        "body": "<!-- please provide repro information here -->\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.2-2bcc6c6\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\r\n    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293513)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25092)\r\n\r\nComponent stack: in pl\r\n    in div\r\n    in ml\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ua\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Fl",
        "title": "Error: \"Could not find commit data for root \"1\" and commit null\"",
        "labels": "Type: Bug",
        "id": 45580
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug?\r\n\r\n**What is the current behavior?**\r\n\r\n> Cannot set property 'memoizedState' of null\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```js\r\nconst processLink = html => {\r\n  return renderToStaticMarkup(<Link />)\r\n};\r\n\r\nconst RichText = ({ html }) => {\r\n  const htmlProcessed = useMemo(() => processLink(html), [html]);\r\n}\r\n```\r\nSee https://codesandbox.io/s/cannot-set-property-memoizedstate-of-null-mrxfr\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8~16.9\r\n\r\n",
        "title": "SSR: Cannot set property 'memoizedState' of null",
        "labels": "Type: Bug",
        "id": 45581
    },
    {
        "body": "<!-- please provide repro information here -->\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.2-2bcc6c6\r\n\r\nCall stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)\r\n    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292537)\r\n    at ml (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:292772)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n\r\nComponent stack: in ml\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ua\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Fl",
        "title": "Error: \"Could not find commit data for root \"44\" and commit 4\"",
        "labels": "Type: Bug",
        "id": 45582
    },
    {
        "body": "Currently when using the react dev tools on Firefox OSX, I am unable to change the current zoom level. The default zoom level is quite small so even with good eyesight, I struggle to read it on a high resolution display.\r\n\r\nIt is possible to adjust the zoom level of the Firefox dev tools as a whole, by focusing the panel and using CMD +/-. However the React dev tools does not respect this and has no option to switch the zoom level manually. As a result, the react dev tools extension is unusable on Firefox. I would imagine this is a bigger issue for anyone with poor eyesight.\r\n\r\nCan we please add some accessibility options or fix this behaviour?",
        "title": "Dev tools does not respect zoom level on firefox OSX",
        "labels": "Type: Bug",
        "id": 45583
    },
    {
        "body": "<!-- please provide repro information here -->\r\n\r\n---------------------------------------------\r\nPlease do not remove the text below this line\r\n---------------------------------------------\r\n\r\nDevTools version: 4.0.2-2bcc6c6\r\n\r\nCall stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)\r\n    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)\r\n    at Ai (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:274200)\r\n    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)\r\n    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)\r\n    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)\r\n    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)\r\n    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)\r\n    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363\r\n    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)\r\n\r\nComponent stack: in Ai\r\n    in div\r\n    in div\r\n    in div\r\n    in Or\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in Ua\r\n    in le\r\n    in ve\r\n    in ko\r\n    in Fl",
        "title": "[react profiler bug]Error: \"getCommitTree(): Unable to reconstruct tree for root \"1\" and commit 1\"",
        "labels": "Type: Bug",
        "id": 45584
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug starting at React version 16.9.0\r\n\r\n**What is the current behavior?**\r\n\r\nReact version 16.8.6: If a react app was hosted in an iFrame and that iFrame was in a `display:none` style, the `useEffect` hook would trigger.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nReact version 16.9.0: If a react app using this version is hosted in an iFrame and that iFrame is set to `display:none` the `useEffect` hook is never fired.\r\n\r\nA CRA app with a very simple `useEffect` hook is created and hosted here: https://github.com/Kikketer/use-effect-none\r\n\r\nThe static hosted page is here: https://kikketer.github.io/use-effect-none/\r\n\r\nThe codesandbox that has this iFrame with `display:none` can be found here: https://codesandbox.io/embed/react-innerframe-tezku\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `useEffect` hook should be fired even if the app is hosted in a `display:none` iFrame.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nFirefox, Chrome, Edge (77x on mac) with React 16.9.0 both fail to run `useEffect` on this iFrame\r\nSafari with React 16.9.0: Does run the `useEffect` on this iFrame\r\nIE (windows or 11): unknown\r\n",
        "title": "useEffect fails to fire when hosted in display:none iFrame",
        "labels": "Type: Bug",
        "id": 45585
    },
    {
        "body": "Currently the simple event plugin defines a priority for the event but not all events go through the SimpleEventPlugin. That's just one of several EventPlugins. The remaining ones now get the wrong priority associated with them. \r\n\r\nE.g. I think all of these should be discrete:\r\n\r\nchange\r\ncompositionend\r\ncompositionstart\r\ncompositionupdate\r\nselectionchange\r\ntextinput\r\n\r\nThese show up too but I don't know if they're even bridged.\r\n\r\ndblclick\r\npointerenter\r\npointerleave\r\n\r\nFlare defines its own priorities.",
        "title": "Add Priorities for All Event Types",
        "labels": "Type: Bug",
        "id": 45586
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen a error occurs during the assignment of a `ref` (and maybe other conditions), a error boundary wrapping that error may get confused and it renders itself multiple times inside the same parent. See https://codesandbox.io/s/stoic-fermi-6etqb which renders:\r\n\r\n```html\r\n<div id=\"root\">\r\n  <div class=\"boundary\"><span>content</span></div>\r\n  <div class=\"boundary\"><span>error</span></div>\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n```html\r\n<div id=\"root\">\r\n  <div class=\"boundary\"><span>error</span></div>\r\n</div>\r\n```",
        "title": "ErrorBoundary rendering multiple copies of itself when ref assignment fails",
        "labels": "Type: Bug",
        "id": 45587
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhile things like `<input>` correctly get a warning when switching from uncrontrolled to controlled, I'm noticing `<textarea>` does not\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a codesandbox. Type in the input field, we see error (correct), change to textarea and start over, type in field and we don't see the error (incorrect I think) https://codesandbox.io/s/recursing-dawn-jls8i\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8\r\n",
        "title": "textarea does not show warning when switching from uncontrolled to controlled like inputs do",
        "labels": "Type: Bug",
        "id": 45588
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n### Current Behaviour\r\n\r\n - `ReactDOMServer.renderToString` is mutating CSS Variable names that are inlined and in the `--camelCase` format into `--kebab-case`\r\n\r\n### Expected Behaviour\r\n\r\n - `ReactDOMServer.renderToString` does not mutate the CSS Variable name, and keeps it in `--camelCase` format\r\n\r\n### Demo\r\n\r\n - https://codesandbox.io/s/react-dom-server-debugging-28xsr\r\n\r\n### Versions:\r\n\r\n - Issue appears in `react@16.8.6` &  `react-dom@16.8.6` \r\n - Issue appears in `react@16.0.0` & `react-dom@16.0.0` \r\n - (That's all I've tested so far)\r\n\r\n### Other notes:\r\n\r\n - It's worth noting that `ReactDOM.render` is preserving the CSS Variable name and not mutating it. It only seems to only be an issue with `ReactDOMServer.renderToString`\r\n",
        "title": "Bug: React DOM Server is mutating CSS variable names",
        "labels": "Type: Bug",
        "id": 45589
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nReferencing `arguments` from inside an arrow function (i.e. the `arguments` from the nearest non-arrow function) causes a crash in the eslint plugin.\r\n\r\n```\r\nTypeError: Cannot read property 'type' of undefined\r\nOccurred while linting /.../src/react.tsx:92\r\n    at gatherDependenciesRecursively (.../node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1032:21)\r\n    at visitFunctionExpression (.../node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:985:7)\r\n    at .../node_modules/eslint/lib/util/safe-emitter.js:45:58\r\n    at Array.forEach (<anonymous>)\r\n    at Object.emit (.../node_modules/eslint/lib/util/safe-emitter.js:45:38)\r\n    at NodeEventGenerator.applySelector (.../node_modules/eslint/lib/util/node-event-generator.js:251:26)\r\n    at NodeEventGenerator.applySelectors (.../node_modules/eslint/lib/util/node-event-generator.js:280:22)\r\n    at NodeEventGenerator.enterNode (.../node_modules/eslint/lib/util/node-event-generator.js:294:14)\r\n    at CodePathAnalyzer.enterNode (.../node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:632:23)\r\n    at .../node_modules/eslint/lib/linter.js:752:32\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis doesn't reproduce in codesandbox as CRA hasn't been updated yet.\r\n\r\nThis snippet is enough to cause the crash:\r\n\r\n```js\r\nfunction useMyHook(/*...*/) {\r\n  useEffect(() => {\r\n    arguments // crash because reference.resolved.defs is empty\r\n  }, [])\r\n}\r\n```\r\n\r\nThis, however, does not crash:\r\n\r\n```js\r\nfunction useMyHook(/*...*/) {\r\n  useEffect(function() {\r\n    arguments // ok\r\n    return () => arguments // also ok\r\n  }, [])\r\n}\r\n```\r\n\r\nIt is possible this depends on using the `@typescript-eslint/parser` parser; but I think scope analysis is run internally by `eslint` so it shouldn't matter.\r\n\r\n**What is the expected behavior?**\r\nNo crash\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`eslint-plugin-react-hooks@1.6.1`, `react-hooks/exhaustive-deps` rule",
        "title": "[eslint-plugin-react-hooks] Crash when referencing \"arguments\"",
        "labels": "Type: Bug",
        "id": 45590
    },
    {
        "body": "**Do you want to request a feature or report a bug?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nIt's possible to execute JavaScript code written in the child parameter of the `React.createElement` function, if the type parameter consists of a string with mixed casing, like so:\r\n\r\n```javascript\r\nReact.createElement('scRipt', null, 'alert(1)');\r\n```\r\nhttps://codesandbox.io/s/sleepy-hodgkin-twxqe\r\n\r\n**What is the expected behavior?**\r\nIt should not execute the code, but behave exactly like if you typed in 'script' in lowercase.\r\n\r\nI would argue that this is unexpected behavior. Judging from the docs ([\"JSX Prevents Injection Attacks\"](https://reactjs.org/docs/introducing-jsx.html#jsx-prevents-injection-attacks)) developers might get the impression, that it is generally safe to embed any user input using JSX. Additionally, if you try to execute JavaScript using script tags, it won't work. \r\n\r\nI _think_ developers might get the idea to give users the ability to write their own \"safe\" HTML code in comments and the like by parsing their input and converting it to React elements. JSX also allows you to use dynamic input as tag types.\r\n\r\nApart from the mentioned behavior, I'm not aware of any other `type` / `children` combination that would result in JavaScript code execution without a controllable props parameter. So a scenario where a user can control both of these parameters is most likely the only one where this leads to issues.\r\n\r\nSo I think the code below is likely the culprit (line 423). Please correct me if I'm wrong.\r\n\r\nhttps://github.com/facebook/react/blob/fce15f14d38d680f3bdee3a124e9e94e91520e16/packages/react-dom/src/client/ReactDOMComponent.js#L423-L430\r\n\r\nImo it would make sense to convert the `type` variable to lowercase before comparing it to the 'script' string, so it works as anticipated, even if the casing of the input is user-controllable. Unfortunately I'm not familiar enough with the inner workings of React to submit a pull request of which I'm confident, that it doesn't break anything. This would be my naive solution for this issue:\r\n\r\n```javascript\r\nif (typeof type === 'string' && type.toLowerCase() === 'script') { /* ... */ }\r\n```\r\n\r\nI'd love to hear your thoughts on this. Is this behavior actually unexpected and if so, should it be fixed?",
        "title": "Using 'scRipt' in React.createElement's type parameter allows you to execute JavaScript code in the child parameter",
        "labels": "Type: Bug",
        "id": 45591
    },
    {
        "body": "@trueadm @necolas \r\n\r\nUsing a recent build from `master` I noticed that `onPressEnd` on the `Press` component is not being called on `keyup` when pressing with `Enter`. Here's an example that reproduces the issue: http://react-press-event-keyup-bug.surge.sh/. Here's the source for this example:\r\n\r\n```jsx\r\nfunction Application() {\r\n  const [isPressed, setPressed] = React.useState(false);\r\n  const onPressStart = () => {\r\n    setPressed(true);\r\n  };\r\n  const onPressEnd = () => {\r\n    setPressed(false);\r\n  };\r\n  return (\r\n    <Press onPressStart={onPressStart} onPressEnd={onPressEnd}>\r\n      <button style={{ \r\n        margin: 48, fontSize: 28, color: isPressed ? \"red\" : \"initial\" }}>\r\n        Press Me\r\n      </button>\r\n    </Press>\r\n  );\r\n}\r\n```\r\n\r\n**Steps to Reproduce**\r\n1. Focus the button via Tab\r\n2. Press the button by holding down Enter\r\n3. Un-press the button by releasing Enter\r\n\r\n`onPressEnd` is never called so the pressed state persists. If you follow the same steps using the Space key or the mouse you'll see it works as expected. The [unit test for this](https://github.com/facebook/react/blob/f4e1ac8cafb75dfab129b95f0eb39591579f3d03/packages/react-events/src/__tests__/Press-test.internal.js#L336) is passing for me with this build which is kinda weird.\r\n",
        "title": "[Flare] onPressEnd not being called on keyup for Enter key",
        "labels": "Type: Bug",
        "id": 45592
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIn shallow renderer, The returned callback from `useCallback` is not the same one between two rerendering even though the dependencies are the same. But `useMemo` will work as expected.\r\n\r\nFor example, the following test won't work:\r\n\r\n```js\r\n    function SomeComponent() {\r\n      const noop = React.useCallback(() => {}, []);\r\n\r\n      return (\r\n        <div onClick={noop} />\r\n      );\r\n    }\r\n\r\n    const shallowRenderer = createRenderer();\r\n    let firstResult = shallowRenderer.render(<SomeComponent />);\r\n    let secondResult = shallowRenderer.render(<SomeComponent />);\r\n\r\n    expect(firstResult).toEqual(secondResult);\r\n```\r\n\r\nIf `useCallback` returned the same callback between two rendering (I think) the assertion should pass.\r\n\r\nbut the same (almost) logic will work with `useMemo`, in the shallow renderer test suite (See https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/__tests__/ReactShallowRendererHooks-test.js#L273-L291).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nI created a branch in https://github.com/chenesan/react/tree/usecallback-not-work-properly-in-shallow-renderer and you can run the failed shallow renderer test in https://github.com/chenesan/react/commit/b2dff28909247342cfcb9ced2fbe24a0f9ca08b7#diff-d9a78422c03941578ae9ba487e8132cb .\r\n\r\n**What is the expected behavior?**\r\n\r\n`useCallback` should return the memoized callback when the dependencies unchanged even in shallow renderer.\r\n\r\nI tried to look into this and I found out that in shallow renderer `useCallback` just returns the original callback argument (See https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactShallowRenderer.js#L365-L371) but `useMemo` will compare the dependencies between rendering. I'm not sure if it's intended (So it's expected that `useCallback` will not memoize callback in shallow renderer). If it's triaged as a bug I'm glad to send a pr for this :)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.8.6",
        "title": "useCallback doesn't memoize callback in shallow renderer",
        "labels": "Type: Bug",
        "id": 45593
    },
    {
        "body": "**Bug** (behaves different per browser, but generally inconsistent to uncontrolled inputs)\r\n\r\n**Current behavior**\r\nReproduce with https://jsfiddle.net/bootleq/hos4r6qd/\r\n1. Type `a` in *name* field, and `b` in *uncontrolled* field.\r\n2. Submit.\r\n3. Re-run the fiddle.\r\n4. Focus input fields to see if browser \"saves\" previous input.\r\n\r\n**Expected behavior**\r\nBrowser provides `a` suggestion for *name* and `b` for *uncontrolled* field.\r\nControlled and uncontrolled elements should behave the same.\r\n\r\n**Actual result**\r\nUncontrolled input has `b` suggestion, but controlled input (*name*) has **no** suggestion.\r\nTested on Windows 7, Google Chrome 74.0.3729.169.\r\nAnd on Firefox 68.0b4, we can click the *workaround* button before submit, by reset the `value` DOM attribute it behaves as expected.",
        "title": "Controlled input makes browser not saving submitted value (for autocomplete)",
        "labels": "Type: Bug",
        "id": 45594
    },
    {
        "body": "Seems similar to https://github.com/facebook/react/pull/15424.\r\nMinimal repro case: https://codesandbox.io/s/jzq8roj51y.\r\n\r\nTo reproduce, open in new tab (https://jzq8roj51y.codesandbox.io/), let first item's details to load, and then hold-press \"down\". You'll likely (not always) see Details tab flicker and later crash/warn in console.\r\n\r\n![Screen Recording 2019-04-26 at 04 29 PM](https://user-images.githubusercontent.com/810438/56821850-5a644c00-6847-11e9-9fb9-061677cdf864.gif)\r\n",
        "title": "Suspense commits pending trees in Concurrent Mode under heavy load",
        "labels": "Type: Bug",
        "id": 45595
    },
    {
        "body": "From the React.org docs:\r\n> Error boundaries preserve the declarative nature of React, [...] somewhere deep in the tree, **it will still correctly propagate to the closest error boundary.**\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI am not sure if this is a bug or intended behavior, because it only happens with `ReactDOM.hydrate` when an error is thrown only within `render`.\r\n\r\n**What is the current behavior?**\r\nIf an error is thrown in the `render()` method of any component, the error boundary at any given top-level renders its fallback exactly where that component is, instead of where the error boundary is defined.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/74kmwk3o1j\r\n\r\n**What is the expected behavior?**\r\nJust like it `ReactDOM.hydrate` behaves if the error happens in `componentDidMount`, the error boundary's fallback should be rendered where the error boundary element is actually declared.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nv16.8.6 on Chrome, haven't tested previous versions, but I think to remember this working correctly when we upgraded to v16 and added our top-level, page boundary.\r\n",
        "title": "An error in render() + boundary behaves unexpectedly on ReactDOM.hydrate()",
        "labels": "Type: Bug",
        "id": 45596
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhile adding multiple comma separated email addresses the cursor will jump to te beginning the input field. First i thought it was a [Formik](https://github.com/jaredpalmer/formik/issues/1428) issue, but it seems to be a React one.\r\n\r\nExample pure React: https://codesandbox.io/embed/0y06zo7l8p\r\nExample React with Formik: https://codesandbox.io/embed/k57zw7wz5\r\nMDN docs: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple\r\n\r\n**What is the expected behavior?**\r\nCursor stays on current position.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nChrome 73, Safari 12.1, Opera 60.0\r\nReact 16.7.0\r\n\r\nMaybe #14551 related?\r\n",
        "title": "Field type=\"email\" with multiple attribute cursor jumps to start",
        "labels": "Type: Bug",
        "id": 45597
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n> **Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n> **What is the current behavior?**\r\n\r\ncrashes on \r\n```\r\n   Reconciler.unbatchedUpdates(() => {\r\n     Reconciler.updateContainer(this.props.children, this.rootNode, this);\r\n    });\r\n```\r\nwith\r\n`TypeError: _appendAllChildren is not a function`\r\n\r\n> **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n\r\nThis has occurred while updating https://github.com/kevzettler/react-regl to latest `react` and `reconciler` versions.\r\n\r\n> **What is the expected behavior?**\r\n\r\nDoes not crash or gives helpful error message.\r\n\r\n> **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\nyarn list v1.15.2\r\nwarning Filtering by arguments is deprecated. Please use the pattern option instead.\r\n\u2514\u2500 react@16.8.6\r\n\u2728  Done in 0.85s.\r\nKevs-MacBook-Pro:react-regl-test kevzettler$ yarn list react-reconciler\r\nyarn list v1.15.2\r\nwarning Filtering by arguments is deprecated. Please use the pattern option instead.\r\n\u2514\u2500 react-reconciler@0.20.4\r\n```\r\n\r\n\r\n",
        "title": "[react-reconciler] TypeError: _appendAllChildren is not a function",
        "labels": "Type: Bug",
        "id": 45598
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nexample here https://codesandbox.io/s/34mvmoln65\r\nBased on issue #15219 I found the reason of this issue is that, when `ErrorThrower` throws `renderWithHooks` just break down and keep `workInProgressHook` stay `useMemo`. Because of the `componentDidCatch` in `ErrorHandler` we can go on the render phase. But when we reach the `StatefulComponent` we got `useMemo` as `workInProgressHook` and it make `StatefulComponent` with first hook `useMemo`.\r\n\r\nI guess we can fix this just set `workInProgressHook` to null at the beginning of `renderWithHooks`. I post this issue because I see this comment in `renderWithHooks`, based on this example, all this variables may also not be reset when start `renderWithHooks`, so maybe it's better to put them back?\r\n\r\n```js\r\n// The following should have already been reset\r\n  // currentHook = null;\r\n  // workInProgressHook = null;\r\n\r\n  // remainingExpirationTime = NoWork;\r\n  // componentUpdateQueue = null;\r\n\r\n  // didScheduleRenderPhaseUpdate = false;\r\n  // renderPhaseUpdates = null;\r\n  // numberOfReRenders = 0;\r\n  // sideEffectTag = 0;\r\n```\r\n\r\nIf no other concerns about this, I just want to put them back to fix this issue.\r\n",
        "title": "renderWithHooks may initialize workInProgressHook at the beginning",
        "labels": "Type: Bug",
        "id": 45599
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component with hooks throws an error in its render function *after* the hooks have been defined, and that render error is caught via a `componentDidCatch` in a parent component, any subsequent components will have their hook order jumbled up on the next render.\r\n\r\nThis results in the app crashing with an **\"Uncaught Invariant Violation: Should have a queue. This is likely a bug in React. Please file an issue.\"** error (or different messages depending on the specific hooks used)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/34mvmoln65\r\n\r\n(once loaded, open the dev tools console and click the 'Trigger re-render' button)\r\n\r\nRelevant source:\r\n\r\n```jsx\r\nfunction App(props) {\r\n  const [, setCounter] = React.useState(0);\r\n  return (\r\n    <div>\r\n      <ErrorHandler>\r\n        <ErrorThrower />\r\n      </ErrorHandler>\r\n      <StatefulComponent />\r\n      <button onClick={() => setCounter(value => value + 1)}>\r\n        Trigger re-render\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ErrorThrower() {\r\n  React.useMemo(() => undefined, []);\r\n  if (true) {\r\n    throw new Error(\"!!!\");\r\n  }\r\n  return <p>[Error component]</p>;\r\n}\r\n\r\nfunction StatefulComponent() {\r\n  React.useState(null);\r\n  return <p>[Stateful component]</p>;\r\n}\r\n\r\nclass ErrorHandler extends React.Component {\r\n  ...\r\n  componentDidCatch(error) {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe app should not crash, seeing as the `componentDidCatch()` ought to catch the render error and allow the rest of the app to render as normal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis will presumably affect all versions of React that include the current Hooks implementation (v16.8 onwards)",
        "title": "Combination of componentDidCatch and hooks throws \"Should have a queue. This is likely a bug in React.\"",
        "labels": "Type: Bug",
        "id": 45600
    },
    {
        "body": "This seems to be an edge case of https://github.com/facebook/react/issues/11789 fixed in https://github.com/facebook/react/pull/13353/files.\r\n\r\nI ran into this when trying to hydrate content rendered with https://github.com/prismicio/prismic-dom `asHtml` method.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug? I think. \r\n\r\n**What is the current behavior?**\r\n\r\nCurrent behavior:\r\n\r\n1. Server-side stuff comes in from server and contains the things we need\r\n2. Hydration mismatch happens\r\n3. dangerouslySetInnerHTML is called with correct value but an empty string gets rendered instead\r\n\r\nI tried to replicate the issue on https://codesandbox.io/s/2xojk10jln but failed.\r\n\r\nThe following testcase for `packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js` produces the same result (I tried it first with the same PrismicDOM.RichText.asHtml(obj) call I have in the app) but I am not sure if it's correct:\r\n\r\n  ```js\r\n\r\n# test case\r\n    itRenders(\r\n      'a div with dangerouslySetInnerHTML set to html inserted',\r\n      async render => {\r\n        const obj = '<li>bar</li>';\r\n        const e = await render(\r\n          <div dangerouslySetInnerHTML={{__html: obj }} />,\r\n        );\r\n        expect(e.childNodes.length).toBe(1);\r\n        expect(e.firstChild.tagName).toBe('LI');\r\n        expect(e.firstChild.childNodes.length).toBe(1);\r\n      },\r\n    );\r\n```\r\n\r\n```bash\r\n      \u2713 renders a div with dangerouslySetInnerHTML set to html return value of function called with server string render (190ms)\r\n      \u2713 renders a div with dangerouslySetInnerHTML set to html return value of function called with server stream render (52ms)\r\n      \u2713 renders a div with dangerouslySetInnerHTML set to html return value of function called with clean client render (37ms)\r\n      \u2713 renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of good server markup (74ms)\r\n      \u2715 renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup (34ms)\r\n\r\n  \u25cf ReactDOMServerIntegration \u203a ... \u203a renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup\r\n\r\n    expect(received).toBe(expected) // Object.is equality\r\n\r\n    Expected: \"bar\"\r\n    Received: \"\"\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThe client render would have rendered `<li>bar</li>`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\ncommit c05b4b8  (latest master) and >16.8.\r\n\r\nSorry for a bit vague bug report.\r\n",
        "title": "dangerouslySetInnerHTML is left empty on client render on top of bad server markup when rendering HTML",
        "labels": "Type: Bug",
        "id": 45601
    },
    {
        "body": "*bug/question*\r\n\r\n**What is the current behavior?**\r\n\r\nWhen there's a function that mentions itself wrapped with useCallback or useEffect, eslint-plugin-react-hooks will add the function to the list of dependencies causing no-use-before-define warnings\r\n\r\nExample:\r\n\r\n```js\r\nconst updateAndClean = useCallback(() => {\r\n  console.log(\"update something\")\r\n  document.removeEventListener(\"event\", updateAndClean);\r\n});\r\n```\r\n\r\nThe idea of the function above is to clean after itself when there's no need for the event anymore. I'm sure there are better ways to do that, but for the sake of the issue let's presume this is valid code.\r\n\r\neslint-plugin-react-hooks would propose adding \"updateAndClean\" to the list of dependencies:\r\n\r\n```js\r\nconst updateAndClean = useCallback(() => {\r\n  console.log(\"update something\")\r\n  document.removeEventListener(\"event\", updateAndClean);\r\n}, [updateAndClean]);\r\n```\r\nCausing no-use-before-define warning:\r\n`Line 17:  'updateAndClean' was used before it was defined  no-use-before-define` \r\n\r\nQuestions are:\r\n- Is this ok to leave as is? would \"using the function before defining it\" break any useCallback optimisation? \r\n- Can eslint-plugin-react-hooks not automatically fix that since it causes other warnings?\r\n- Knowing the function needs to run once, can I pass an empty array to useCallback?\r\n\r\n",
        "title": "eslint-plugin-react-hooks useCallback circular dependencies?",
        "labels": "Type: Bug",
        "id": 45602
    },
    {
        "body": "I'd like to continue the discussion started by me under a recent blog post by Dan as encouraged by Dan \ud83d\ude09 https://github.com/gaearon/overreacted.io/commit/99bfdca459ff4094ee523c7419b58989d18bc594#r32694433\r\n\r\nJust to summarize what I've stumbled upon when experimenting with useReducer after reading that hoisted & declared in render reducers are treated differently (I've wanted to explore how they are handled by React):\r\n1. I have no idea how to reenter eagerReducer calculation after first scheduled work (& after render gets fully processed & committed). This might very well be just me not understanding how fibers work - but currently I'm confused by this. It doesn't enter this code branch because `fiber.expirationTime` is not 0 (NoWork) and the work gets scheduled right away. Any pointers regarding this? Is this valid? Might this be a bug somewhere?\r\n2. The logic around reducer bailouts is somewhat iffy for me - maybe it's just a matter of mentioning those in the documentation:\r\n- not every reducer update can bailout from rendering. If the action queue gets processed in the render phase then it's just not possible, we are already rendering after all. \r\n- action queue gets processed in the render phase for reducers declared inside render, this means that any new state computation might depend on the \"fresh\" props. This is not the case for the bailout mechanism though - it's only possible to perform a bailout when dispatching an action (so when we do not have access to the fresh props). Should this restriction be mentioned in the docs? IMHO this behaviour is inconsistent - for the greater good, so it's acceptable but I think it should be documented because it's slightly inconsistent & people might trip over this.\r\n\r\n**Note** I'm happy to provide documentation changes if needed, I'd like to discuss those points first to get a better understanding of things.",
        "title": "useReducer - eagerReducer optimization discussion/questions",
        "labels": "Type: Bug",
        "id": 45603
    },
    {
        "body": "Demonstrated in https://github.com/airbnb/enzyme/pull/2027 - when gDSFP returns a state change, cDU does not seem to be called by the shallow renderer. I'm not sure how to make a simple test case; but the identical enzyme tests pass for `mount` (ie, when using React itself) but fail for `shallow` (when using the shallow renderer). enzyme doesn't have any logic for calling or interacting with `getDerivedStateFromProps`, so I suspect it's not an issue with enzyme (but it might be!)",
        "title": "shallow renderer: wrong initial state passed to getDerivedStateFromProps",
        "labels": "Type: Bug",
        "id": 45604
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThe warning is triggered after an intricate sequence of events. I stumbled upon it by accident, assumed it was an error in my code, but then step by step removed everything in my application until I was left with a fairly small bit of code that doesn't seem to be doing anything illegal from the API point of view, yet is triggering a warning.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nhttps://codesandbox.io/s/q87882qv64\r\n\r\nThe example is my real application code trimmed down as much as possible to demonstrate the warning. So some of the code might be a bit nonsensical/contrived, but that's because I removed lots of surrounding code leaving only the relevant bits for reproducing the issue.\r\n\r\nIn other words, there might weird looking uses of useEffect and weird sequencing of things, but that sort of falls out of how I've structured my routes, state, components in the full app, etc.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to know if\r\n\r\na) is this a React bug that I stumbled upon that should be fixed?\r\nb) is this something I'm doing \"wrong\" and how I could fix that in my application (i.e. is this a real memory leak being caused because of the way I structured the code)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.4",
        "title": "setState in useEffect causing a \"React state update on an unmounted component\" warning",
        "labels": "Type: Bug",
        "id": 45605
    },
    {
        "body": "Original report: https://github.com/facebook/react-devtools/issues/1304\r\n\r\nRepro case: https://64yojj2wyk.codesandbox.io/",
        "title": "react-debug-tools doesn't support legacy context (Component.contextTypes)",
        "labels": "Type: Bug",
        "id": 45606
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nCalling `.renderToString()` on `<React.Fragment><div>Hello!</div></React.Fragment>` produces `<div data-reactroot=\"\">Hello!</div>`.\r\n\r\nHowever, many other combinations of DOM root element within \"invisible\" React elements are rendered without `data-reactroot=\"\"`.\r\n\r\ne.g. all of the following produce `<div>Hello!</div>` (without `data-reactroot=\"\"`):\r\n\r\n```\r\n<React.Fragment><React.Fragment><div>Hello!</div></React.Fragment></React.Fragment>\r\n\r\n<Context.Provider><div>Hello!</div></Context.Provider>\r\n\r\n<Context.Consumer>{() => <div>Hello!</div>}</Context.Consumer>\r\n\r\n<React.StrictMode><div>Hello!</div></React.StrictMode>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee above.\r\n\r\n**What is the expected behavior?**\r\n\r\nI assume that any of the above examples should produce markup including `data-reactroot=\"\"` on the `div` element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIssue present in all versions >= 16.7.0, possibly earlier versions too.\r\n\r\nThis is a minor issue - I guess would only affect where the markup is rehydrated on client side using `.render()` rather than `.hydrate()` - usage which is discouraged. However, using `.render()` to rehydrate is still officially supported.\r\n\r\nI can implement a fix and make a PR. But can anyone confirm that the expected behavior is what I think it is, and that this is indeed a bug?",
        "title": "`data-reactroot=\"\"` lost in server render if element inside `<Context.Provider>`",
        "labels": "Type: Bug",
        "id": 45607
    },
    {
        "body": "There's a misleading error when using wrong the `useRef` hook.\r\n\r\n```\r\nfunction MyComponent() {\r\n    let nameRef = useRef();\r\n\r\n   return (\r\n      <div>\r\n        <input ref=\"nameRef\" type=\"text\" />       \r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nSee the example here https://codesandbox.io/s/yvl21qm62j\r\n\r\nThe code above leads to this error `Function components cannot have refs. Did you mean to use React.forwardRef()?`. I'm moving some class components to Hooks, and stumbled upon this, and it took me a while due to the wrong error message.",
        "title": "Misleading error description when using wrong useRef",
        "labels": "Type: Bug",
        "id": 45608
    },
    {
        "body": "Currently, `act` will flush passive effect at the end of a batch of work. But if the effects themselves schedule additional work, and that work schedules more effects, `act` doesn't flush those.\r\n\r\nWhat it should do is keep flushing effects in a loop until there's nothing left to flush.",
        "title": "act should keep flushing passive effects until there are none left",
        "labels": "Type: Bug",
        "id": 45609
    },
    {
        "body": "This is a bug. I've spent a lot of time trying to localize the bug and have ended with the following minimal example:\r\n\r\n```jsx\r\nimport {useState} from React;\r\n\r\nfunction App() {\r\n  const [imageURL, setImageURL] = useState('https://picsum.photos/1600/1200');\r\n  const [meaninglessValue, setMeaninglessValue] = useState(0);\r\n  \r\n  return (\r\n    <div>\r\n      <p>\r\n        <button onClick={() => setImageURL('https://picsum.photos/1600/1200')}>Set picture 1</button>\r\n        <button onClick={() => setImageURL('https://picsum.photos/1500/1300')}>Set picture 2</button>\r\n        <button onClick={() => setMeaninglessValue(meaninglessValue + 1)}>Change another image prop</button>\r\n      </p>\r\n      <DelayedImage src={imageURL} unused={meaninglessValue} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DelayedImage({src}) {\r\n  const [previousSrc, setPreviousSrc] = useState();\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  console.log('Image is rendered with', {previousSrc, src, isLoaded});\r\n  \r\n  if (src !== previousSrc) {\r\n    setPreviousSrc(src);\r\n    setIsLoaded(false);\r\n    console.log('Image unloaded');\r\n  }\r\n  \r\n  const handleLoad = () => {\r\n    setIsLoaded(true);\r\n    console.log('Image loaded');\r\n  };\r\n  \r\n  return (\r\n    <img\r\n      src={src}\r\n      alt=\"\"\r\n      onLoad={handleLoad}\r\n      onError={handleLoad}\r\n      style={{\r\n        maxWidth: '100%',\r\n        maxHeight: '80vh',\r\n        opacity: isLoaded ? 1 : 0.2\r\n      }}\r\n     />\r\n  );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n```\r\n\r\n[Live demo](https://codepen.io/TheFinesse/pen/qgGBqj?editors=0010)\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Open the demo\r\n2. Wait until the image is loaded (becomes opaque)\r\n3. Click the \"Set picture 2\" button\r\n4. Wait a bit (while the image is loading)\r\n\r\n**Expected result:**\r\n\r\nThe second image gets opaque after a few seconds (the `DelayedImage` component gets rerendered with the new state).\r\n\r\n**Actual result:**\r\n\r\nThe image stays translucent despite the new state that should make it opaque.\r\n\r\nI reproduced the bug with React 16.8.2 in Safari 12.0.3 and Chrome 72.0.3626.109 on macOS 10.14.3 (didn't try other versions).\r\n\r\n### More details about the example\r\n\r\nThe `DelayedImage` component is an image that gets translucent while being loaded. The information about whether the image is loading or loaded is stored in a state using the `useState` hook. The other state hook is used to check whether the image URL has changed (like in [the FAQ example](https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops)).\r\n\r\nWhen the component is rendered for the first time, it works as expected: it is translucent while the image is loading and opaque after the image is loaded. When the `src` prop is changed (by clicking the \"Set picture 2\" button), the image gets translucent but doesn't get opaque when it's loaded.\r\n\r\nAccording to the console messages, the correct value (`isLoaded === true`) is set to the state but React doesn't rerenders the component. React rerenders the component with the correct state when any other `DelayedImage` props is changed (by clicking the last button or changing a prop using Redux Dev Tools).",
        "title": "The component is not updated when a new state is changed using a callback from useState",
        "labels": "Type: Bug",
        "id": 45610
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nSimple memo components receive new props during context change if their parent got rerendered.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/jp21pwzrv9\r\n\r\n**What is the expected behavior?**\r\n\r\nConceptually from the user's perspective `React.memo(Component)` & `React.memo(Component, shallowEqual)` should behave exactly the same (but they dont)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCurrent React's master ( 0e67969cb1ad8c27a72294662e68fa5d7c2c9783 ) & current latest release 16.8.2\r\n\r\nI've already written a failing test for this - https://github.com/facebook/react/pull/14876 . Would love to work on fixing this but as mentioned in this PR, I would require some guidance on how this should get fixed properly.\r\n",
        "title": "Simple memo components being updated with new set of props during context change",
        "labels": "Type: Bug",
        "id": 45611
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nCannot type Chinese  in `<input />`  under controlled mode when using react-dom 16.8.2 via CND\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/youluna/egz9Lvrp/36/\r\n1. Switch IME(input method editor) into Chinese\r\n2. try type any letters, you can only get English letters but not Chinese characters\r\n![image](https://user-images.githubusercontent.com/10049465/52859396-8be5da80-3167-11e9-96ac-95caa4e7f5a7.png)\r\n\r\n**What is the expected behavior?**\r\nCan type Chinese characters\r\n![image](https://user-images.githubusercontent.com/10049465/52859361-740e5680-3167-11e9-8a7c-6e28d7650b4e.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nNot worked in react-dom 16.8.2 \r\nBut worked well in react-dom 16.8.1 \r\n\r\nrelated https://github.com/alibaba-fusion/next/issues/324\r\n\r\nupdate:\r\nIt's wired that use React as a <script> tag from a CDN doesn't work, but as a react package on npm worked well. Both are version 16.8.2\r\n1. CDN: https://jsfiddle.net/youluna/6o3rhg7u/1/\r\n2. npm: https://codesandbox.io/s/xp15m8woww",
        "title": "Cannot type Chinese  in `<input />`  under controlled mode + ReactDom 16.8.2",
        "labels": "Type: Bug",
        "id": 45612
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nCounter value is 1.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/7jzwjm090j\r\n\r\n**What is the expected behavior?**\r\nCounter value should be 2.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nFirefox/Chrome\r\n16.8.1",
        "title": "Calling setState during component rendering causes incorrect previous state value in next state update",
        "labels": "Type: Bug",
        "id": 45613
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nQuestion. This may also be related to #14563.\r\n\r\nHow do we trigger suspense from a hook?\r\n\r\n**Why did the question come up?**\r\n\r\nThis question came up during our usage of `react-i18next`. A recent update of `react-i18next` provided the `useTranslation`-hook which allows obtaining the current translations and will also trigger loading of not-yet-loaded translation namespaces (kinda like code splitting).\r\n\r\nTo handle the case where the translations aren't loaded yet, the `useTranslation`-hook throws a promise to trigger `Suspense`, which is actually really neat because it cleanly integrates with the existing react features!\r\n\r\nHowever, if you are using more hooks after calling the `useTranslation`-hook, these other hooks won't be rendered if `useTranslation` throws the promise. Once the translations have loaded the hook won't throw anymore and react will award you with a big red warning that the amount of hooks has changed.\r\n\r\n**Example**\r\n\r\n```js\r\nconst Component = () => {\r\n  const [t] = useTranslation('translationnamespace');\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div onClick={() => setCount(count + 1)}>\r\n      {t('The count is:')} {count}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nIf `translationnamespace` isn't loaded yet, `useTranslation` will throw, causing `useState` to not be rendered. Once `translationnamespace` is loaded, `useTranslation` won't throw anymore, which causes `useState` to be rendered causing the warning.\r\n\r\n**The General Case**\r\n\r\nSo this question doesn't apply to react-i18next only, but instead applies to all hooks that wish to trigger suspense. How would we go about doing this, and how would this integrate with the current \"Rules of Hooks\" that state that hooks mustn't be rendered conditionally?",
        "title": "Trigger suspense from hooks",
        "labels": "Type: Bug",
        "id": 45614
    },
    {
        "body": "See the issue and the test case with original fix in https://github.com/facebook/react/pull/14802.\r\n\r\nWe'll need to fix it properly, see https://github.com/facebook/react/pull/14802#issuecomment-463277621.",
        "title": "Shallow renderer doesn't update on setState() with Hooks",
        "labels": "Type: Bug",
        "id": 45615
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen updating the state from `useState` doesn't actually update the component. In this case it is being updated on an event handler. I used `console.log` to verify that it is being called yet no update in the component is being dispatched. It's like React doesn't register that it wants to update the state.\r\n\r\nMight want to throw out that I'm new with this React Hooks and it could be something that I'm missing.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.**\r\nI've setup a simple example showcasing my issue, I also included an implementation with the old class syntax and when doing it with classes, it works fine. [Here is the link to the CodeSandbox](https://codesandbox.io/s/mjz3o5xnly)\r\n\r\nThis example is taken from my project, I'm fading out and translating upwards so I want to keep the text until the animation is done.\r\n\r\n**What is the expected behavior?**\r\nThe component should update with the new registered state when trying to update state in a event handler.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact v16.8\r\nReact DOM v16.8\r\n",
        "title": "An update to the state from `useState` is not registered in event handler `onTransitionEnd`",
        "labels": "Type: Bug",
        "id": 45616
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** Bug\r\n\r\n**What is the current behavior?** When unmounting a component that has a child being rendered under a different parent (with portals), react is throwing an error\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nhttps://codesandbox.io/s/73n31lwpjx\r\n\r\n**What is the expected behavior?**\r\n\r\nComponent should unmount normally\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.1\r\nIssue also happens with 16.7.0 (https://codesandbox.io/s/oxmpxmllvy)\r\n\r\nThe issue is only happening under very strict conditions:\r\n- The component being rendered with ReactDOM Portals (Modal) should not render any HTML\r\n- The parent component (Panel) should render Modal as the first component under <React.Fragment>\r\n\r\nAvoiding this is as simple as moving Modal under some other HTML. I'm not entirely sure this is an issue or I'm just doing something wrong with Fragment and portals.\r\n\r\nThe actual error being thrown is:\r\n`react-dom.development.js:9254 Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`",
        "title": "unmount an empty component is breaking with ReactDOM portals",
        "labels": "Type: Bug",
        "id": 45617
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA question, maybe a bug but more likely a misunderstanding on my side.\r\n\r\n**What is the current behavior?**\r\n\r\nCalling `ReactDOM.render` from within a `useEffect` won't actually render to the dom unless an update is triggered from anywhere else within the entire react app.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee: https://codesandbox.io/s/jl02nrqznw\r\n\r\n**What is the expected behavior?**\r\n\r\nAfter the `RendersAnotherRoot` component is initially rendered, the `useEffect` function is called and then the subsequent `ReactDOM.render` call renders the separate react root.\r\n\r\n**Note**: Uncommenting the setCount update from within the `RendersAnotherRootWithUpdate` component will then render the content from both `useEffect` render calls.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact 16.8.1\r\nreact-dom 16.8.1",
        "title": "Question: ReactDOM render call in useEffect delayed until first update",
        "labels": "Type: Bug",
        "id": 45618
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThere is a warning shown in the console for a component which has all the following conditions met:\r\n\r\n* it is memoized using `React.memo`\r\n* it uses hooks\r\n* it uses suspense (there is a promise thrown).\r\n\r\nText of that warning: `Warning: ComponentName: Rendered more hooks than during the previous render. This is not currently supported and may lead to unexpected behavior.`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/71lr16j491\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning should be shown because the rules of hooks are met. Also, the behavior should be consistent no matter if `React.memo` is used or not.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.1",
        "title": "Warning when a memoized component uses both hooks and suspense",
        "labels": "Type: Bug",
        "id": 45619
    },
    {
        "body": "useImperativeHandle have bug in 16.8.1 if you want to access any state will get the initial state not current state but in 16.8.0-alpha.1 it work good \r\n\r\nYou can see here https://codesandbox.io/s/xjl8znwpz open console when you change input value will get the currently value in console but if you clicked button get value from ref will get initial value (e)\r\n\r\nIf you try same here https://codesandbox.io/s/qxkll6po0j with 16.8.0-alpha.1 when clicked button get currently value\r\n",
        "title": "useImperativeHandle behaves as if inputs are [] by default",
        "labels": "Type: Bug",
        "id": 45620
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug. Initially reported in https://github.com/mozilla-services/react-jsonschema-form/issues/1153\r\n\r\n**What is the current behavior?**\r\nAutofill overwrites existing values in fields when those fields are controlled components in React.\r\n\r\nSee https://jsfiddle.net/epicfaace/9p17e2qx/21/ -- to test this, add a \"Saved Address\" in the Chrome options.\r\n\r\n![2019-01-24 10 37 23](https://user-images.githubusercontent.com/1689183/51700667-91b32a80-1fc4-11e9-876b-6f795225d99b.gif)\r\n\r\n**What is the expected behavior?**\r\nAutofill does not overwrite existing fields. I've made a JSFiddle with a plain HTML form, which works with the expected behavior.\r\n\r\nSee https://jsfiddle.net/epicfaace/1my3f9n4/6/\r\n\r\n![2019-01-24 10 37 02](https://user-images.githubusercontent.com/1689183/51700679-9841a200-1fc4-11e9-9408-dae369ac5366.gif)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.3.2\r\nChrome 71.0.3578.98\r\n",
        "title": "Chrome Autofill overwrites values on controlled components",
        "labels": "Type: Bug",
        "id": 45621
    },
    {
        "body": "\"Cannot set property 'memoizedState' of null\"\r\n\r\n<img width=\"639\" alt=\"screen shot 2019-01-23 at 5 09 40 pm\" src=\"https://user-images.githubusercontent.com/810438/51623925-b27e7000-1f31-11e9-857a-67343d99d91b.png\">\r\n\r\n\r\n```js\r\n  // Regression test\r\n  fit('does not swallow original error when updating another component in render phase', () => {\r\n    let {useState} = React;\r\n\r\n    let _setState;\r\n    function A() {\r\n      const [, setState] = useState(0);\r\n      _setState = setState;\r\n      return null;\r\n    }\r\n\r\n    function B() {\r\n      _setState(() => {\r\n        throw new Error('Hello')\r\n      });\r\n    }\r\n\r\n    expect(() =>\r\n      ReactTestRenderer.create(\r\n        <React.Fragment>\r\n          <A />\r\n          <B />\r\n        </React.Fragment>,\r\n      ),\r\n    ).toThrow('Hello');\r\n  });\r\n\r\n```",
        "title": "Original error message is swallowed in an edge case with render phase updates",
        "labels": "Type: Bug",
        "id": 45622
    },
    {
        "body": "I hope this is the place to submit issues regarding concurrent mode.\r\nI don't know if this is a bug or intended behaviour, but I have a situation where the my react app behaves differently depending on the use of concurrent mode.\r\n\r\nHere is a link to a codesandbox demo: https://codesandbox.io/s/5xl0vnx11p\r\n\r\nThe behaviour on mobile Safari on iOS (12.1.2) is different whether using ReactDOM.render vs ReactDOM.createRoot. When ReactDOM.render is used, a tap results in an alert and after the alert is dismissed, the hover styles are applied. When using ReactDOM.createRoot, a tap results in the hover styles being applied. A second tap is needed to invoke the click handler.\r\n\r\n(This double tap behaviour from iOS is described [here](https://css-tricks.com/annoying-mobile-double-tap-link-issue/))\r\n\r\nShouldn't the two render methods behave the same in this regard? or is this really intended behaviour?\r\n\r\nBTW: A setTimout arround the mouseEnter event handler body does make ReactDOM.createRoot behave the same way as ReactDOM.render\r\n\r\n\r\n\r\n",
        "title": "Concurrent mode iOS hover behaviour",
        "labels": "Type: Bug",
        "id": 45623
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n**What is the current behavior?**\r\nThrowing an error from a component while server rendering changes the default value of a context if there is a provider in that tree.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/03o0pnor6w\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport { renderToString } from \"react-dom/server\";\r\n\r\nlet Theme = React.createContext(\"light\");\r\n\r\nlet Throw = () => {\r\n  throw new Error(\"some error\");\r\n};\r\n\r\ntry {\r\n  renderToString(\r\n    <Theme.Provider value=\"dark\">\r\n      <Throw />\r\n    </Theme.Provider>\r\n  );\r\n} catch (e) {}\r\n\r\n// this should log \"light\" since it's the default value and\r\n// there's no provider in the tree but it logs \"dark\" instead\r\nconsole.log(renderToString(<Theme.Consumer>{x => x}</Theme.Consumer>));\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThrowing an error from a component while server rendering shouldn't change the default value of context.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI think this is broken in all versions of React with new context. (Here's a codesandbox of the issue with React 16.3.0, https://codesandbox.io/s/l945mq008l) It also only happens while server rendering, it works correctly in the browser (https://codesandbox.io/s/mm10ov8688)",
        "title": " Throwing an error from a component while server rendering changes the default value of a context if there is a provider in that tree.",
        "labels": "Type: Bug",
        "id": 45624
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nPossible bug\r\n\r\n**What is the current behavior?**\r\n`eslint-plugin-react-hooks` currently uses undocumented `context.report(node, message).`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nEverything works fine in latest eslint (for now).\r\n\r\n**What is the expected behavior?**\r\n`eslint-plugin-react-hooks` uses [documented `context.report({ node, message })`](https://eslint.org/docs/developer-guide/working-with-rules#contextreport).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n`eslint-plugin-react-hooks@latest`\r\n\r\nI just noticed when working on a tslint port and typescript reported errors on every context.report usage. I'm happy to open a PR since a fix is pretty straight forward. It looks like a legacy signature that is still supported. Since this is undocumented however it might break unannounced. I tested it quickly on my local machine and couldn't detect observable changes in the reported errors.\r\n\r\nFrom a quick dive it seems that positional arguments are handled by\r\nhttps://github.com/eslint/eslint/blob/bc50dc7737496712463220e662946eb516e36ae1/lib/util/report-translator.js#L57\r\nbut this might only be an internal method. Hard to tell.",
        "title": "eslint-plugin-rules-of-react uses undocumented context.report signature",
        "labels": "Type: Bug",
        "id": 45625
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn the screenshot below the \"DropTarget(Tile) [update]\" should have been visualized above the \"Tile [mount]\". Similarly, the item with \"stop icon\" to the right should have been in the first row.\r\n![image](https://user-images.githubusercontent.com/4648469/50094133-b91f1680-0212-11e9-8cf7-17d131a09d4f.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSorry, I don't have public demo. When the bug happens it doesn't seem to be specific to a specific component / lifecycle event. I'm not sure whether it's React's problem or Chrome's.\r\n\r\n**What is the expected behavior?**\r\nDifferent order.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.6.3 (but I have seen this in 16.4.0 too)\r\nChrome 70.0.3538.110, Windows 10 Home\r\n",
        "title": "Wrong visualization order in User Timing when profiling in Chrome",
        "labels": "Type: Bug",
        "id": 45626
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe shallow renderer from the 'react-test-renderer' package does not work with [Class.contextType](https://reactjs.org/docs/context.html#classcontexttype). The component always receives an empty object as the context.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe shallow renderer should forward the context provided to the render method to the rendered component's this.context.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.6.3\r\n\r\n**Steps to reproduce**\r\n\r\nThe test below can be used to reproduce the problem ([Open on codesandbox.io](https://codesandbox.io/s/oql0l6p95)). The first test reproduces the bug and the second test shows a workaround.\r\n\r\n\r\n    import * as React from \"react\";\r\n    import ShallowRenderer from 'react-test-renderer/shallow'\r\n    import PropTypes from 'prop-types';\r\n    \r\n    const TestContext = React.createContext({message:\"TEST1\"});\r\n    class TestShallow extends React.Component {\r\n    \r\n        static contextType = TestContext;\r\n    \r\n        componentDidMount() {\r\n            console.log(this.context.message);\r\n        }\r\n    \r\n        render() {\r\n            return <h1>{this.context.message}</h1>;\r\n        }\r\n    }\r\n    \r\n    it('shallow render with contextType', () => {\r\n    \r\n        const result = new ShallowRenderer().render(<TestShallow />, {message:\"TEST2\"});\r\n        expect(result).toEqual(<h1>TEST2</h1>); //FAILS\r\n    \r\n    });\r\n    \r\n    it('workaround shallow render with contextType', () => {\r\n    \r\n        TestShallow.contextTypes = {\r\n            message: PropTypes.string\r\n        };\r\n    \r\n        const result = new ShallowRenderer().render(<TestShallow />, {message:\"TEST2\"});\r\n        expect(result).toEqual(<h1>TEST2</h1>); //WORKS\r\n    \r\n    });\r\n\r\n\r\nThe problem seems to be located [here](https://github.com/facebook/react/blob/2743fb7b23a5af42059a9b07c5f6048f941709d9/packages/react-test-renderer/src/ReactShallowRenderer.js#L146). The function getMaskedContext() checks the properties declared on type.contextTypes and filters out the properties from the context provided to the shallow render unless the types.contextTypes is declared.\r\n\r\n",
        "title": "ShallowRenderer does not work with Class.contextType",
        "labels": "Type: Bug",
        "id": 45627
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen you render a portal with null child value, if the portal is rendered in first place, then the app crashes and give the message: \r\n\r\n```Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.```\r\n\r\nBut if you put the portal to render after the rest of component content, it works like it should.\r\n\r\nOn a debug i realized that's the other nodes of component are removed like the portal created div is a parent of the other nodes of component, that's the cause of this error.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nI did a example project (https://codesandbox.io/s/910pqpn23r?module=%2Fsrc%2FTableRow.js)\r\n\r\nAfter you run, you need only to click the button to see the error.\r\n\r\n**What is the expected behavior?**\r\n\r\nUnmount the component correctly\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTested React version: 16.6.3 and i don't know if this already worked on any previous versions.",
        "title": "\"Failed to execute 'removeChild' on 'Node'\" error on unmounting React portal with nulled child",
        "labels": "Type: Bug",
        "id": 45628
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nReact hooks linter fails with this piece of code\r\n\r\n```js\r\nfunction useHook() {\r\n  const ref = React.useRef([1, 2, 3]);\r\n  const res = []\r\n  // valid because there are not unexpected returns\r\n  if (ref.current) {\r\n    for (let i = 0; i !== ref.current.length && !ref.current[i]; ++i ) {\r\n      res.push(ref.current[i]);\r\n    }\r\n  }\r\n  React.useLayoutEffect(() => {});\r\n}\r\n```\r\n\r\nhowever a bit more usual for loop is handled as expected\r\n```js\r\nfunction useHook() {\r\n  const ref = React.useRef([1, 2, 3]);\r\n  const res = []\r\n  if (ref.current) {\r\n    for (let i = 0; i !== ref.current.length; ++i ) {\r\n      res.push(ref.current[i]);\r\n    }\r\n  }\r\n  React.useLayoutEffect(() => {});\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nSkip for looks without returns\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks 0.0.0",
        "title": "react-hooks linter fails with unusual for loop",
        "labels": "Type: Bug",
        "id": 45629
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a *bug*\r\n\r\n**What is the current behavior?**\r\nThere are cases where actions dispatched by `useReducer`'s dispatch function are reduced twice (in concurrent mode).\r\n\r\nAs far as I can tell from my first quick read of the code of react-dom (so I might be totally wrong!), this happens, when a higher priority action is added to a queue that already contains lower priority actions.\r\n\r\nOn the first run, that is caused by for example an onClick handler (higher priority), the dispatched action is appended to the queue. On processing the queue the lower priority actions (for example from setInterval events)  are _ignored_ and the \"onClick action\" is reduced, but stays on the end of the queue, so that on the next time the queue is processed, that action gets reduced a second time.\r\n\r\nSee a testcase at:\r\nhttps://codesandbox.io/s/nxq3w7rwl\r\n\r\nPressing the button increments the button (most of the time not always, depending if 'TICK' actions are in the queue) by two.\r\n\r\n**What is the expected behavior?**\r\nI'd expect a dispatched action to be only reduced once.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTested with React 16.7.0-alpha.2 on Chrome (70.0.3538.110) and Safari (12.0.1) both on macOs\r\n",
        "title": "useReducer: dispatched actions are reduced twice",
        "labels": "Type: Bug",
        "id": 45630
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a  bug\r\n\r\n**What is the current behavior?**\r\n\r\nIn Chrome, when typing a sharp S (\u00df, a German letter) in an input field with `type=\"email\"`, it converts the `\u00df` to `ss` (~~expected~~ unexpected behaviour) and the cursor jumps back to the beginning of the input field (unexpected behaviour). This does only happen if the `\u00df` is part of the domain.\r\nTrying to type `test@test\u00df.de` will end as `.detest@testss`:\r\n![Example](https://i.imgur.com/SWQ0p4f.gif)\r\n\r\nIt can be tested with the latest Google Chrome: \r\nhttps://codepen.io/anon/pen/MzzEqB\r\nIf you don't have a `\u00df` on your keyboard, you can reproduce the bug by just Copy&Pasting it.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with Chrome Version 70.0.3538.110 (Official Build) (64-bit) on Ubuntu 18.04 and React 16.6.3\r\n\r\nIn Firefox, this does not happen, as it does not convert `\u00df` to `ss`. I didn't test other browsers.",
        "title": "Sometimes controlled email inputs break in Chrome due to punycoding",
        "labels": "Type: Bug",
        "id": 45631
    },
    {
        "body": "As reported in open source (facebook/react-native/issues/21967), the `useEffect` hook is broken for React Native when using JavaScriptCore (which affects both iOS and Android).\r\n\r\nThis is because the [`setTimeout` branch of `scheduler`](https://github.com/facebook/react/blob/c2a2d8a539bf02e40c43d36adc2826e228f30955/packages/scheduler/src/Scheduler.js#L463-L495) specifies a [5000ms delay](https://github.com/facebook/react/blob/c2a2d8a539bf02e40c43d36adc2826e228f30955/packages/scheduler/src/Scheduler.js#L483). This 5000ms is _supposed to be the maximum expiration time_, but in this fork it _ends up being the minimum callback time_ (unless another state update forces us to sync-flush pending callbacks). Since `useEffect` is passive, this means React won't call it until after a few seconds have passed.\r\n\r\nI assume we (React team) haven't noticed this because we're typically using the `postMessage` implementation, but with JavaScriptCore\u2013 React Native ends up using the `setTimeout` fork.\r\n\r\nI think this was broken by commit 4d17c3f (PR #13740) which intentionally changed the delay under the (mistaken) assumption that it would only impact unit tests.\r\n\r\nIf we want to avoid using `setTimeout` for React Native, I think we'll need to add a `scheduler` implementation that does not require `postMessage` or `MessageChannel`, since JavaScript Core does not support either.",
        "title": "useEffect is broken for React Native with JSC",
        "labels": "Type: Bug",
        "id": 45632
    },
    {
        "body": "This is reproducible with the following snippet:\r\n\r\n```\r\n\"use strict\";\r\n\r\nconst React = require(\"react\");\r\nconst ReactDOMServer = require(\"react-dom/server\");\r\n\r\nfunction Hello() {\r\n  throw new Error(\"foo\");\r\n  return React.createElement(\"div\", null, \"Hello, world!\");\r\n}\r\n\r\nconst stream = ReactDOMServer.renderToNodeStream(React.createElement(Hello));\r\n\r\nstream.on(\"data\", chunk => {\r\n  console.log(chunk.toString());\r\n});\r\n\r\nstream.on(\"end\", () => {\r\n  console.log(\"-- done --\");\r\n});\r\n\r\nstream.on(\"error\", err => {\r\n  console.error(err);\r\n});\r\n```\r\n\r\nReact 16.6.1 emits an `error` event as expected, but React 16.6.3 silently swallows an exception, leaving the stream in a broken state in which it never ends.\r\n\r\nThis problem appears to be caused by this modification in `ReactDOMNodeStreamRenderer.js`:\r\n\r\nhttps://github.com/facebook/react/commit/b545546ccbe056e35c6be9c938561df643cc3950#diff-1090c7a359d6dc602b62ac38b66697b3L25\r\n\r\nHere, `stream.destroy` gets called with an exception object but the actual handler `stream._destroy` doesn't use it anywhere which results in ignoring the exception.\r\n",
        "title": "React 16.6.3 silently swallows an exception in `ReactDOMServer.renderToNodeStream()`",
        "labels": "Type: Bug",
        "id": 45633
    },
    {
        "body": "With this:\r\n\r\n```js\r\n    const Add = React.memo(props => {\r\n      return props.inner + props.outer;\r\n    });\r\n    Add.defaultProps = {\r\n      inner: 2,\r\n    };\r\n    const LazyAdd = lazy(() => fakeImport(Add));\r\n```\r\n\r\nIf I render `LazyAdd` again after it resolves, it won't get the `inner` default prop value. This is a bug.",
        "title": "Re-rendering lazy() doesn't respect defaultProps on memo()",
        "labels": "Type: Bug",
        "id": 45634
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\n`React.useCallback` returns `undefined` when the component is rendered server-side.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis bug can be reproduced by creating a React component using a `useCallback`. Logging the return value on the server yields `undefined` while it properly returns the function in the browser.\r\n\r\nYou can observe this bug in this CodeSandbox: https://codesandbox.io/s/r557kww6wn The application is properly rendered to a string bug looking at the console, you will see that the return value of `useCallback` is `undefined`.\r\n\r\nHere's the exact same application but rendered on the client: https://codesandbox.io/s/xvwv797pxz The function is properly logged to the console.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.useCallback` should return the memoized callback, not `undefined`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* react: 16.7.0-alpha.2\r\n* react-dom: 16.7.0-alpha.2",
        "title": "useCallback returns undefined when the component is rendered server-side",
        "labels": "Type: Bug",
        "id": 45635
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug - regression\r\n\r\n**What is the current behavior?**\r\n\r\nIn react 16 when creating a `<select size=\"3\">` (size > 1) the first child <option> is automatically getting marked as selected. In React 16 there does not seem to be a way to specify no <option> gets selected by default\r\n\r\nhttps://codesandbox.io/s/m76ozkwm89\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nIn React 15 unless you marked an option to be selected <option selected> no options were selected by default.\r\n\r\nhttps://codesandbox.io/s/6894m3k9w\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReproducible in Chrome 72 and Firefox 59.\r\n\r\n**Note:** this is almost a duplicate of #12200. In fact, I copied issue text and codesandbox examples, just changing `multiple` to `size=\"3\"`.",
        "title": "Regression: React 16 automatically marks first item of a select with size > 1 as checked",
        "labels": "Type: Bug",
        "id": 45636
    },
    {
        "body": "![image](https://user-images.githubusercontent.com/5781517/48439210-1c251580-e75c-11e8-98db-e64938e1fb39.png)\r\n\r\n:smile: \t",
        "title": "Hooks are disabled in v16.7.0-alpha.1",
        "labels": "Type: Bug",
        "id": 45637
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\n\r\npage is very slow.\r\n\r\nAs we can see from this picture, React has been executing a work loop during the rendering suspend.\r\n\r\n![image](https://user-images.githubusercontent.com/4060976/48454245-83d97000-e7f1-11e8-9346-51ee4591cf9e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4060976/48457425-a1143b80-e7fd-11e8-8ddd-5cd2682a1f09.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect the page not to be stuck\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact16.6.3\r\n",
        "title": "When using React.lazy will cause the GPU/CPU to run overloaded, and the page is very slow.",
        "labels": "Type: Bug",
        "id": 45638
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nTextarea lose focus after insert paired punctuation by \"Chinese-Pinyin 10 key\" input source on IOS safari. And then textarea can't be focused when I click it. But after other element has been focused, the textarea could be focused again.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[CodeSandbox Demo](https://codesandbox.io/s/7w23wpl0q1)\r\n\r\n[steps(youtube video)](https://youtu.be/4PJ2WVD83Eg)\r\n\r\n**What is the expected behavior?**\r\njust work fine!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nversions of React: 16+\r\nOS: IOS\r\nbrowser: safari\r\n\r\n\r\n\r\n",
        "title": "Textarea loses focus after inserting paired punctuation with Chinese IME",
        "labels": "Type: Bug",
        "id": 45639
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nI have a component which listens for resize events (via a BlueprintJS ResizeSensor). When loading a component dynamically with `lazy` / `Suspense`, an exception occurs as the resize sensor appears to be unmounted:\r\n\r\n```\r\nUncaught Error: Unable to find node on an unmounted component.\r\n    at invariant (29.chunk.js:86295)\r\n    at findCurrentFiberUsingSlowPath (29.chunk.js:90628)\r\n    at findCurrentHostFiber (29.chunk.js:90640)\r\n    at findHostInstanceWithWarning (29.chunk.js:106349)\r\n    at findDOMNode (29.chunk.js:106869)\r\n    at ResizeSensor.componentDidUpdate (29.chunk.js:10535)\r\n```\r\n\r\nThe resize sensor [should be removing listeners on unmount](https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/resize-sensor/resizeSensor.tsx#L73).\r\n\r\nDemo: https://codesandbox.io/s/n4241q075l\r\nRelated: https://github.com/palantir/blueprint/issues/3141\r\n\r\n**What is the expected behavior?**\r\n\r\nNo exception is thrown.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with:\r\n- React 16.6.1, fails\r\n- React 16.6.0, works",
        "title": "findDOMNode() throws inside Suspense",
        "labels": "Type: Bug",
        "id": 45640
    },
    {
        "body": "Hello. How can I test components with Suspense/Lazy?\r\nnow renderer.create(...)toTree() throws\r\n\"toTree() does not yet know how to handle nodes with tag=13\"\r\n\r\nreact 16.6.1\r\nreact-test-renderer 16.6.1",
        "title": "react-test-renderer doesn't support Suspense and lazy nodes",
        "labels": "Type: Bug",
        "id": 45641
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n```PropTypes.*.isRequired``` with ```React.memo``` doesn't get triggered in the console when the required prop is undefined.\r\n\r\n\r\n```jsx\r\nimport React, { memo } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// ********************************************\r\n// It should appear two propTypes console errors\r\n// ********************************************\r\n\r\n// without memo(..): it will throw the propTypes error like it should\r\nconst MemoButton = memo(() => {\r\n  return <button>Memo Button</button>;\r\n});\r\nMemoButton.propTypes = {\r\n  memocolor: PropTypes.string.isRequired\r\n};\r\n\r\n// it will throw the error in the console\r\nconst Button = () => {\r\n  return <button>Button</button>;\r\n};\r\nButton.propTypes = {\r\n  color: PropTypes.string.isRequired\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <>\r\n    <MemoButton />\r\n    <Button />\r\n  </>,\r\n  rootElement\r\n);\r\n```\r\n[![Edit 501jppv64n](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/501jppv64n?expanddevtools=1)\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n```js\r\n// affected versions\r\n\"prop-types\": \"15.6.2\",\r\n\"react\": \"16.6.1\",\r\n\"react-dom\": \"16.6.1\",\r\n```\r\n",
        "title": "React.memo and React.lazy ignore propTypes",
        "labels": "Type: Bug",
        "id": 45642
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nWhen using Suspense, triggering several very-rapid non-cache hits locks up the nearest parent Suspense component until it is remounted.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce**\r\n- Visit https://codesandbox.io/s/00ml9vl9qv\r\n- Open Devtools to show the Network inspector\r\n- Click a post to view\r\n- Click the \u201cNext\u201d button (or focus it with your keyboard)\r\n- Press space bar multiple times very quickly (6 should do)\r\n- Inspect the network tab. You'll find that some of the later posts requests did not happen at all and that any further post requests made will also not be called.\r\n\r\n**What is the expected behavior?**\r\nAll cache/resource requests should be called regardless of how quickly or how many pending requests are currently inflight.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.7.0-alpha.0\r\nBrowser: 70.0.3538.77 (Official Build) (64-bit)\r\nOS: MacOS Mohave 10.14\r\n",
        "title": "Rapid successive calls to unloaded cache/resource items in Suspense results in a silent lockup",
        "labels": "Type: Bug",
        "id": 45643
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nNot sure if its a bug or a feature request.\r\n\r\n**What is the current behavior?**\r\nThe component given as a fallback to Suspense is remounted each time a lazy child resolves.\r\n\r\nhttps://codesandbox.io/s/z6v6x3n1np\r\nThis example shows how a fallback component, which counts up, is mounted more than once.\r\n\r\n**What is the expected behavior?**\r\nThe fallback is mounted once and is only unmounted when all lazy children are resolved.\r\nIn the example the counter would run up to 9.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact@16.6.0\r\n",
        "title": "Suspense fallback remounts when each child resolves",
        "labels": "Type: Bug",
        "id": 45644
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nPossibly a bug\r\n\r\n**What is the current behavior?**\r\nRepro demo: GitHub user search. \r\nType one character and wait after the list is rendered - everything works correctly. Subsequent fetches work this way.\r\nType two characters faster than results for the first character are rendered and fallback will never go although the second request is successful. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/k5v6ojz107\r\n\r\n**What is the expected behavior?**\r\nSuspense \"resolves\" with last resolved fetch and renders the list of users\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: 16.7.0-alpha.0\r\nreact-dom: 16.7.0-alpha.0\r\nreact-cache: 2.0.0-alpha.0",
        "title": "Suspense doesn't \"resolve\" for subsequent times if was suspended again ",
        "labels": "Type: Bug",
        "id": 45645
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nWhen using suspense and hooks - specifically `useState` and `useEffect` - nested async renders (using `react-cache`) cause state hooks not to be updated. Specifically this happens between the first promise settling and the last promise settling in a `Suspense` component. However the state updates concerned can be outside of the `Suspense` root: https://codesandbox.io/s/wznnxz9pvw\r\n\r\nIn the linked example, moving the mouse will update the displayed coordinates for the first 2000ms (the time at which the first thrown promise resolves) however, after this the UI will not show any updated coordinates until after the final nested promise in the adjacent `Suspense` root settles.\r\n\r\nI may both be using Suspense wrong (given the understandable lack of documentation) as I've been having other bugs with this setup, specifically the above example will sometimes never render beyond the \"loading ...\" placeholder. This is especially noticeable with setting higher timeouts in the `Timeout` component.\r\n\r\nreact 16.7.0-alpha\r\nreact-dom 16.7.0-alpha\r\nreact-cache 2.0.0-alpha\r\n",
        "title": "Suspense ping shouldn't suspend if all suspended content is already in fallback mode",
        "labels": "Type: Bug",
        "id": 45646
    },
    {
        "body": "hey folks, looks like [this code](https://github.com/facebook/react/commit/b565f495319750d98628425d120312997bee410b) added small issue with safari and it could flood devtools console output with messages like this:\r\n<img width=\"875\" alt=\"screenshot 2018-10-26 at 15 25 33\" src=\"https://user-images.githubusercontent.com/778908/47569863-0e3a5c80-d935-11e8-8e59-8d95d35ba131.png\"> \r\nAs I understand it happens [here](https://github.com/facebook/react/commit/b565f495319750d98628425d120312997bee410b#diff-a654f37b01573fc8006b426d56ad53ceR50) and I see you catch the error, but safari still adds the error message if you have iframes with different origin",
        "title": "Safari Devtools flooded with security errors on react-dom selection work with iframes with diff origins",
        "labels": "Type: Bug",
        "id": 45647
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIn a component loaded using React.lazy, default props are not merged into the props object for these lifecycles:\r\n- componentDidMount\r\n- componentDidUpdate\r\n- componentWillUnmount\r\n- getSnapshotBeforeUpdate\r\n\r\nIn shouldComponentUpdate, default props are merged into the nextProps argument, but not this.props.\r\n\r\nSteps to reproduce:\r\n1. Create a component that has a default value for a prop using defaultProps.\r\n2. Use that prop in one of the above lifecycles.\r\n3. Load the component using React.lazy.\r\n4. Observe that the prop is not defined in the above lifecycles.\r\n\r\n[CodeSandbox Link](https://codesandbox.io/s/vym3zl8063)\r\n\r\n**What is the expected behavior?**\r\nDefault props should be merged into props for all lifecycles when using React.lazy.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact 16.6.0\r\nreact-dom 16.6.0\r\n\r\nWindows 10 Firefox 63.0\r\nWindows 10 Chrome 70.0.3538.77\r\n\r\nReact.lazy was not in previous versions of React",
        "title": "React.lazy: defaultProps not merged into props in commit phase lifecycles",
        "labels": "Type: Bug",
        "id": 45648
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n1. I create an app using [create-react-app](https://github.com/facebook/create-react-app)\r\n2. I use JAWS Professional Edition Version 2018 (build 1710.42 ILM) and Internet Explorer 11 on Windows 7\r\n3. I use arrow keys to navigate to paragraph \"Edit src/App.js and save to reload.\"\r\n4. Jaws announces \"Edit src/App.js and save to reload. **clickable**\"\r\n\r\n**What is the expected behavior?**\r\nThis paragraph is non interactive, it should not be announced as clickable.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- JAWS Professional Edition Version 2018 (build 1710.42 ILM) \r\n- Internet Explorer 11\r\n- Windows 7\r\n- create-react-app 2.0.3\r\n\r\n**suspected cause**\r\nUsing Chrome Event Listener Breakpoints I observed there's a function called `trapClickOnNonInteractiveElement` which is the onclick handler for non interactive elements. This noop function is causing JAWS to think this is an interactive element\r\n\r\n**possible solution**\r\nIn [trapClickOnNonInteractiveElement](https://github.com/facebook/react/blob/8a8d973d3cc5623676a84f87af66ef9259c3937c/packages/react-dom/src/client/ReactDOMComponent.js#L245) there is a comment which reads \r\n```\r\n// TODO: Only do this for the relevant Safaris maybe?\r\n```\r\nI think that this would fix this issue.",
        "title": "JAWS reads non-interactive elements as Clickable",
        "labels": "Type: Bug",
        "id": 45649
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nSince React@16.5 seems that `root` element has `onclick` event handler with noop function.\r\nIn ios Safari/Chrome browsers html element has gray overlay when tap on it.\r\n\r\nThe current behavior is that the whole `root` is blinking when we tap on it.\r\n\r\nThe simple example to reproduce:\r\nhttps://codesandbox.io/s/wyo8rlj1zk\r\nThe issue is reproducing only in fullscreen mode https://wyo8rlj1zk.codesandbox.io/\r\n(root container is steel blue)\r\n\r\nI suppose changes came from here:\r\nhttps://github.com/facebook/react/pull/11927\r\nhttps://github.com/facebook/react/pull/11927/files\r\n\r\nand the issue can be related with:\r\nhttps://github.com/mui-org/material-ui/issues/11154\r\nhttps://github.com/facebook/react/issues/12717\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.5\r\nios 11.3/12 Safari/Chrome",
        "title": "The gray overlay when tap the react root container",
        "labels": "Type: Bug",
        "id": 45650
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nGlobal `window.event` is overwritten in React 16.5+ in development mode. Here're minimal repro steps:\r\n\r\n- React **16.5.2 in dev mode**: https://jsfiddle.net/sergei_startsev/ecz103vL/2/\r\n\r\nIf you click the button, you see `DOMContentLoaded` event type.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe current behavior contradicts with specified behavior [window property event returns the Event which is **currently being handled** by the site's code. Outside the context of an event handler, the value is **always** `undefined`](https://developer.mozilla.org/en-US/docs/Web/API/Window/event). Moreover it works properly in production mode:\r\n\r\n- React **16.5.2 in prod mode**: https://jsfiddle.net/sergei_startsev/st5L8e02/2/\r\n\r\nIt returns expected `click` event type.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt works properly in React 16.4.2 and prod mode:\r\n\r\n- React **16.4.2** in dev mode: https://jsfiddle.net/sergei_startsev/o26L08qw/\r\n\r\nThe issue is reproduced in Chrome 69. It works properly in FF 62 (`window.event` isn't support in 62, however it should be reproduced in FF 63 - it was recently added, see [details](https://developer.mozilla.org/en-US/docs/Web/API/Window/event#Browser_Compatibility)).\r\n\r\nIt seems that the issue was introduced by @ConradIrwin in #11696.",
        "title": "Global `window.event` is overwritten in React 16.5+ in development mode. ",
        "labels": "Type: Bug",
        "id": 45651
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen transitioning from a state having an iframe inside a component to a state without that said iframe, we have an error at `setOffsets(node, offsets)` because `node.ownerDocument.defaultView` being `null`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nWorking on it\r\n\r\n**What is the expected behavior?**\r\n\r\nShould not break\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAffected since this 16.5.0, coming from this PR exactly https://github.com/facebook/react/pull/12037/files#diff-26d90cba6ee597ef475fa80dcf76ae1d\r\n\r\n`getOffsets` as a check on `ownerDocument.default` fallbacks to `window`, but `setOffsets` does not.\r\n\r\nIs there a reason why?",
        "title": "16.5 with better support of iframe has some side effects",
        "labels": "Type: Bug",
        "id": 45652
    },
    {
        "body": "The 16.5.0 package released to unpkg currently has the production/profiling variant present for cjs builds but there is no equivalent for umd builds. \r\n\r\ni.e. There is the file https://unpkg.com/react@16.5.0/cjs/react.profiling.min.js but there is no https://unpkg.com/react@16.5.0/umd/react.profiling.min.js\r\n\r\nIt would be great if a future release had the profiling variant packaged as umd as well.\r\n\r\nAlso thanks for the awesome framework!",
        "title": "Missing UMD variant of react.profiling.min.js",
        "labels": "Type: Bug",
        "id": 45653
    },
    {
        "body": "This was introduced in React 16.5.0.\r\n\r\nIf IE9 encounters an unknown html element in development, React crashes as it attempts to call console.error.apply here:\r\n\r\nhttps://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/warningWithoutStack.js#L30\r\n\r\nThis is reproduceable with the following CodePen:\r\n\r\n**Code**\r\nhttps://codepen.io/nhunzaker/pen/YOeZXv\r\n\r\n**Demo**\r\nhttps://s.codepen.io/nhunzaker/debug/YOeZXv/mWMoNxzPjbZk\r\n\r\n ",
        "title": "IE9: Unable to call apply on console.error when encountering an unknown tag",
        "labels": "Type: Bug",
        "id": 45654
    },
    {
        "body": "Under certain conditions we decrement the `__count` attribute too often, which can result in `onInteractionScheduledWorkCompleted` being called prematurely and/or more than once for a given interaction.\r\n\r\n- [x] Track interactions scheduled during (sync) render phase.\r\n- [x] Do not double-decrement suspense loads within a sync render.\r\n- [x] Do not decrement sync commits that are waiting on suspense when the `Placeholder` is past its expiration.\r\n- [x] Properly decrement pending interaction count when a suspense resource loads before its placeholder is shown.\r\n- [x] Add test with high priority render between suspended and resolved suspense states (for both sync and async rendering)",
        "title": "Interaction reference count decremented too aggressively",
        "labels": "Type: Bug",
        "id": 45655
    },
    {
        "body": "See https://github.com/facebook/react/pull/13509#pullrequestreview-150683126.\r\nWe'll need to remember to fix it one way or the other before cutting a release.",
        "title": "Node/UMD bundles are broken on master",
        "labels": "Type: Bug",
        "id": 45656
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, but more of a minor annoyance.\r\n\r\n**What is the current behavior?**\r\n\r\n**tl;dr** Updating a component that makes a resource request which trigger state updates causes a warning to be displayed.\r\n\r\n(This description is based off of a modified version of the `unstable_async/fixtures` example.)\r\n\r\nGiven a component that makes a resource call, which triggers React updates.\r\n\r\n```js\r\nconst someResource = createResource(fetchUserData);\r\n\r\nfunction UserDetails(props) {\r\n  // another component is \"plugged in\" to this resource, so\r\n  // calling read() will trigger setState() calls in that component\r\n  const data = someResource.read(props.id);\r\n  return (\r\n    <div>{data}</div>\r\n  )\r\n}\r\n```\r\n\r\nWhen  the resource requesting component is mounting, it is an indeterminate component. During updates, it is known to be a functional component. In both instances, the component is called to get a return value. The difference being that when it is known to be a functional component, the renderer's phase is set to `render` before calling the function.\r\n\r\n```js\r\n// mountIndeterminateComponent()\r\nconst value = UserDetails(...);\r\n\r\n// updateFunctionalComponent()\r\nsetCurrentPhase('render');\r\nconst value = UserDetails(...);\r\nsetCurrentPhase(null);\r\n```\r\n\r\nBecause the phase is set to `render` for the functional component, we get a warning that React `Cannot update during an existing state transition...` (from `warnAboutInvalidUpdates()`).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/0484pzv330\r\n\r\nThis is the `unstable_async/suspense` demo, but has been modified to add a button to navigate the user details for `acdlite` from any other user page.\r\n\r\n1. Click on any user (besides `Andrew Clark`, the warning is only triggered when his data is not cached).\r\n2. Click on the `Go to Andrew Clark` button.\r\n\r\nIn the console, there will be a warning about updating during an existing state transition.\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nMaster build",
        "title": "Updating component that makes resource request triggers update warning",
        "labels": "Type: Bug",
        "id": 45657
    },
    {
        "body": "Extracted from https://github.com/facebook/react/issues/12643.\r\n\r\nWe're currently diff a host node in the complete phase even if it has bailed out in the begin phase. By itself, this just means we're doing a little bit more work than necessary. But it also has some observable effects. In particular, https://github.com/facebook/react/issues/13424 (which by itself would be very rare and probably not worth fixing) is made worse because we end up committing update to inputs from another component.\r\n\r\nI have a fix for this in https://github.com/facebook/react/pull/13423. Filing this for posterity.",
        "title": "Host components outside the setState path are sometimes unnecessarily diffed and updated",
        "labels": "Type: Bug",
        "id": 45658
    },
    {
        "body": "Extracting from https://github.com/facebook/react/issues/12643.\r\n\r\nThis issue has always been in React. I can reproduce it up to React 0.11. However **it's probably extremely rare in practice and isn't worth fixing**. I'm just filing this for posterity.\r\n\r\nHere is a minimal example.\r\n\r\n```js\r\nclass App extends React.Component {\r\n  state = {value: ''}\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\r\n      \"input\",\r\n      () => {\r\n        // COMMENT OUT THIS LINE TO FIX:\r\n        this.setState({});\r\n      },\r\n      true\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"container\"));\r\n```\r\n\r\nTyping doesn't work \u2014 unless I comment out that `setState` call in the capture phase listener.\r\n\r\nSay the input is empty and we're typing `a`.\r\n\r\nWhat happens here is that `setState({})` in the capture phase non-React listener runs first. When re-rendering due to that first empty `setState({})`, input props still contain the old value (`\"\"`) while the DOM node's value is new (`\"a\"`). They're not equal, so we'll set the DOM node value to `\"\"` (according to the props) and remember `\"\"` as the current value.\r\n\r\n<img width=\"549\" alt=\"screen shot 2018-08-17 at 1 08 42 am\" src=\"https://user-images.githubusercontent.com/810438/44241204-4b0e0880-a1ba-11e8-847d-bf9ca43eb954.png\">\r\n\r\nThen, `ChangeEventPlugin` tries to decide whether to emit a change event. It asks the tracker whether the value has changed. The tracker compares the presumably \"new\" `node.value` (it's `\"\"` \u2014 we've just set it earlier!) with the `lastValue` it has stored (also `\"\"` \u2014 and also just updated). No changes!\r\n\r\n<img width=\"505\" alt=\"screen shot 2018-08-17 at 1 10 59 am\" src=\"https://user-images.githubusercontent.com/810438/44241293-e0110180-a1ba-11e8-9c5a-b0d808f745cd.png\">\r\n\r\n\r\nOur `\"a\"` update is lost. We never get the change event, and never actually get a chance to set the correct state.",
        "title": "onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener",
        "labels": "Type: Bug",
        "id": 45659
    },
    {
        "body": "While working on the DevTools profiler, I've noticed that durations are sometimes incorrect. This seems to be vaguely related to high/low priority state updates. Need to track this down more so I'm filing an issue for myself.",
        "title": "Profiler durations are sometimes incorrect",
        "labels": "Type: Bug",
        "id": 45660
    },
    {
        "body": "*bug*\r\nIn react@15 we could set \"value\" or \"defaultValue\", and selected element scrolled into view.\r\nhttps://codesandbox.io/s/6vx637r10n\r\n\r\nBut in react@16 this does not work.\r\nhttps://codesandbox.io/s/7jqqz3zmo1",
        "title": "Select multiple - does not scroll to selected item(items)",
        "labels": "Type: Bug",
        "id": 45661
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen `ReactFiberScheduler` exceeds the update count and throws the `Maximum update depth exceeded.` invariant, it did not update `nestedUpdateCount` (leaving it in a \"dirty\" state). This has been fixed in this PR yet to be released: https://github.com/facebook/react/pull/13160/files#diff-24152ba0b2ac251decb6a12f41bdf116R1478\r\n\r\nBut out of interest + further concern, I [began to explore](https://github.com/facebook/react/pull/13160#issuecomment-403919095) some concerns around whether ReactDOM (Fiber really) maintaining some \"state\" and in fact, being left dirty in at least some error cases was indeed a concern or had been considered in the community. While `nestedUpdateCount` might be fixed here, I can't imagine it was the only state value which could have issues.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nI created a repo with `create-react-app` which demonstrates my concern: https://github.com/brokentone/react-dom-enzyme\r\n\r\nObserve that you will have 2 test failures. ComponentOne is indeed poorly written, but ComponentTwo is quite simple and should be \"ok.\" Skipping ComponentOne should should ComponentTwo passing.\r\n\r\n**What is the expected behavior?**\r\n\r\nOnly `ComponentOne` should fail in my example.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nUnclear",
        "title": "If console.error throws while reporting an error, React can enter an invalid internal state",
        "labels": "Type: Bug",
        "id": 45662
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** Bug, I guess\r\n\r\n**What is the current behavior?** \r\n\r\n\r\n```\r\n  console.error node_modules/fbjs/lib/warning.js:33\r\n    Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.\r\n```\r\n\r\nSteps to reproduce the behavior:\r\n1. `git clone https://github.com/stereobooster/react-context-issue`\r\n2. `cd react-context-issue`\r\n3. `yarn`\r\n4. `yarn test`\r\n\r\n**What is the expected behavior?** no warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.4. Browser not affected, because error is in node.js\r\n\r\nOpen this because of https://github.com/facebook/react/pull/13127#issuecomment-402527012\r\n\r\nIssue happens because of Enzyme (https://github.com/airbnb/enzyme/issues/1693), code is unreleased, so I copy-pasted it from master. \r\n\r\nI'm looking for advice or some clue on how to fix this, so I would be able to create PR in Enzyme repo (or in React repo if this is the case). Thank you.\r\n\r\n",
        "title": "Enzyme + Context API = Warning: Detected multiple renderers concurrently rendering the same context provider",
        "labels": "Type: Bug",
        "id": 45663
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug.\r\n\r\n**What is the current behavior?**\r\nThis addresses a bug in `enzyme`, https://github.com/airbnb/enzyme/issues/1683.\r\n\r\nOn [this line](https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactShallowRenderer.js#L110) `element.type()` invokes the SFC with `element` as the `this` value. I believe that this is needed for create-react-class components, but that there needs to be a separate branch for SFCs.\r\n\r\n**What is the expected behavior?**\r\n`this` inside a strict-mode SFC will be `undefined`, not the element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nIn all of React 0.13, 0.14, 15, and 16, this bug exists.\r\n\r\nWhile the bug ideally will be fixed, I understand that it's highly unlikely that it would be backported to the 14/15 lines - but I can wrap around it if there's a reliable way, in those versions, to distinguish SFCs from create-react-class components (is there?).",
        "title": "react-test-renderer shallow: SFCs should not get `this`",
        "labels": "Type: Bug",
        "id": 45664
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug \r\n\r\n**What is the current behavior?**\r\n\r\n<!--\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n-->\r\n\r\nThe https://github.com/facebook/react/pull/12931 change seems to have broken the server-side rendering on `master`: I'm attempting to `yarn start` the `fixtures/ssr` to test https://github.com/facebook/react/pull/12063 and getting the following error from the server-side when I load the `localhost:3000` page:\r\n```\r\nReferenceError: requestAnimationFrame is not defined\r\n    at /__CENSORED__/react/build/node_modules/react-dom/cjs/react-dom.development.js:5232:34\r\n    at Object.<anonymous> (/__CENSORED__/react/build/node_modules/react-dom/cjs/react-dom.development.js:17632:5)\r\n    at Module._compile (module.js:624:30)\r\n    at Module._extensions..js (module.js:635:10)\r\n    at Object.require.extensions.(anonymous function) [as .js] (/__CENSORED__/react/fixtures/ssr/node_modules/babel-register/lib/node.js:152:7)\r\n    at Module.load (module.js:545:32)\r\n    at tryModuleLoad (module.js:508:12)\r\n    at Function.Module._load (module.js:500:3)\r\n    at Module.require (module.js:568:17)\r\n    at require (internal/module.js:11:18)\r\n```\r\nIt points to this line:\r\n```js\r\n// We capture a local reference to any global, in case it gets polyfilled after\r\n// this module is initially evaluated.\r\n// We want to be using a consistent implementation.\r\nconst localRequestAnimationFrame = requestAnimationFrame;\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNo ReferenceError in server-side environment.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nhttps://github.com/facebook/react/commit/79a740c6e32ca300d4e7ff55ab06de172d4237fd (not published at the time of writing)\r\n\r\nNode environment: `fixtures/ssr` during server-side rendering in response to a browser request.\r\n",
        "title": "react-dom throws \"ReferenceError: requestAnimationFrame is not defined\" in SSR environment since #12931",
        "labels": "Type: Bug",
        "id": 45665
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nOne context consumer has a value of another contexts provider.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nExample \r\n```js\r\nconst React = require(\"react\");\r\nconst { renderToString } = require(\"react-dom/server\");\r\n\r\nconst {\r\n  Provider: LocationContextProvider,\r\n  Consumer: LocationContextConsumer\r\n} = React.createContext(\"location\");\r\nconst {\r\n  Provider: BaseContextProvider,\r\n  Consumer: BaseContextConsumer\r\n} = React.createContext(\"base\");\r\n\r\nconst e = React.createElement;\r\nconst html = () =>\r\n  renderToString(\r\n    e(\r\n      LocationContextProvider,\r\n      { value: \"location\" },\r\n      e(BaseContextConsumer, null, baseContextValue =>\r\n        e(LocationContextConsumer, null, locationContextValue =>\r\n          e(\r\n            BaseContextProvider,\r\n            { value: \"base\" },\r\n            e(\"span\", null, `${locationContextValue} - ${baseContextValue}`)\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\nconsole.log(\"1st attempt\", html());\r\nconsole.log(\"2nd attempt\", html());\r\n\r\n```\r\n\r\nOutput\r\n```\r\n1st attempt <span>location - base</span>\r\n2nd attempt <span>location - location</span>\r\n```\r\n\r\n**What is the expected behavior?**\r\n1st attempt and 2nd attempt to produce the same result\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.3 - 16.4\r\nAll OS\r\nThe issue does not appear on version prior react 16.3 using the create-react-context polyfill\r\n\r\n**Notes**\r\nThis issue was found while trying to use Ryan's new [reach/router](https://github.com/reach/router) and SSR which does something like the example above.\r\n\r\nAfter communicating with him, Ryan opened the following [issue](https://github.com/reach/router/issues/27) on his repository.\r\n",
        "title": "React Context issue",
        "labels": "Type: Bug",
        "id": 45666
    },
    {
        "body": "https://codesandbox.io/s/40j50607y0\r\n\r\nRendering a component like:\r\n\r\n```js\r\nconst Foo = () => <React.Fragment />\r\n```\r\n\r\nThrows the error:\r\n\r\n> Foo(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\r\n\r\nThe error is confusing because clearly `Foo` _is_ returning a value. I don't know if we want to support rendering empty fragments, but in any case this error is confusing.\r\n\r\nIf this isn't allowed it should explicitly call out that a component cannot return a fragment with no children.\r\n\r\ncc @gaearon ",
        "title": "Returning an empty fragment throws a confusing error",
        "labels": "Type: Bug",
        "id": 45667
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*bug*\r\n\r\n**What is the current behavior?**\r\nWhen you directly after the loading choose the maximum value on the input type range, the event isn't fire with an onChange. The event is fire when it's not the maximum value of the input.\r\n\r\nSandbox: https://codesandbox.io/s/7kv59yj360\r\nClick on the maximum (right) of the input of type range.\r\nThere is no message on the console and the displayed value doesn't change as expected\r\nClick on a other value on the input, a message is displayed in the console and the value change\r\nWhen you click on the last value it's now displayed.\r\n\r\n**What is the expected behavior?**\r\nAn event should trigger when you directly click on the maximum value of the input of type range.\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTesting on macOS High Sierra, Firefox 60.0.1, Safari 11.1, Chrome 66.0.3359.181, react 16.2.0\r\n\r\n\r\nTo get around this behaviour, I had to change onChange by onInput but add a blanck onChange to still get the drag behaviour on Safari on Iphone (see this [CodeSandBox ](https://codesandbox.io/s/w0x0jzjvw5))\r\n",
        "title": "`onChange` event doesn't trigger when direclty clicking on the maximum `input[type=range]` value",
        "labels": "Type: Bug",
        "id": 45668
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nCreating an `<input type='submit'` with `value={undefined}` results in a button with no text. https://codesandbox.io/s/nn7p94y3rl\r\n\r\nThe same behaviour can be seen with `type='reset'`\r\n\r\nI have a PR open with a proposed fix. https://github.com/facebook/react/pull/12780\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input should use the browser's default value for the input (Submit for en, etc.).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.2. Chrome 66.0.3359.139. macOS 10.13.4. Works in React 15 (unsure of earlier versions)\r\n",
        "title": "Submit/Reset inputs lose text when value=undefined.",
        "labels": "Type: Bug",
        "id": 45669
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe unsafe lifecycle function aliases in 16.3.2 are not merged when defined more than once because of mixins, triggering an error:\r\n\r\n>Uncaught Error: ReactClassInterface: You are attempting to define `UNSAFE_componentWillReceiveProps` on your component more than once. This conflict may be due to a mixin.\r\n\r\nTo reproduce: rename all cWM, cWRP, and cWU functions with their UNSAFE_ versions in a project where mixins cause those functions to be duplicated\r\n\r\n**What is the expected behavior?**\r\n\r\nThat these lifecyle function continue to work as expected when called via UNSAFE aliases in 16.3, and if they are not supposed to with regard to redefining/merging, that the migration path documentation is updated to indicate so.\r\n\r\n\r\n\r\n\r\n",
        "title": "UNSAFE_ lifecycle functions can no longer be defined more than once via mixins",
        "labels": "Type: Bug",
        "id": 45670
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you use `react-art` rendrer, the `Consumer` is picking up the default value defined by the initial creation of the context rather than the values provided by Provider.\r\n\r\nActual behabiour: `Shape` has `y = 10` (initial value).\r\n\r\n```javascript\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\nvar ReactART = require(\"react-art\");\r\nvar Group = ReactART.Group;\r\nvar Shape = ReactART.Shape;\r\nvar Surface = ReactART.Surface;\r\n\r\nvar RED_DOT_PATH =\r\n  \"M12.5,17 C16.0898511,17 19,14.0898511 19,10.5 C19,6.91014895 16.0898511,4 12.5,4 C8.91014895,4 6,6.91014895 6,10.5 C6,14.0898511 8.91014895,17 12.5,17 Z M12.5,17\";\r\n\r\nconst { Consumer, Provider } = React.createContext({ x: 0, y: 10 });\r\n\r\nconst App = () => (\r\n  <Provider value={{ x: 0, y: 100 }}>\r\n    <Surface width={700} height={700}>\r\n      <Consumer>\r\n        {({ x, y }) => {\r\n          return <Shape x={x} y={y} fill=\"#D97B76\" d={RED_DOT_PATH} />;\r\n        }}\r\n      </Consumer>\r\n    </Surface>\r\n  </Provider>\r\n);\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n```\r\n\r\nDemo: https://codesandbox.io/s/llx6kv6527\r\n\r\n**What is the expected behavior?**\r\n\r\n`Shape` should have `y = 100` (provided value).\r\n\r\nv16.3.2 for `react`, `react-dom` and `react-art `\r\n\r\n",
        "title": "react-art + React Context API is not working correctly",
        "labels": "Type: Bug",
        "id": 45671
    },
    {
        "body": "#### Type\r\n`inconsistency` for common use cases.\r\n`bug` for projects relying on correct DOM emissions.\r\n\r\n#### Description\r\nIt's unclear to me if the following is a known issue or not.\r\nTake in consideration the snippet below:\r\n```jsx\r\n<input type=\"checkbox\" defaultChecked={true} />\r\n```\r\n#### Current Behavior\r\nSetting the `defaultValue` prop on inputs of other types sets both the `value` and `defaultValue` attribute on the DOM element.\r\n\r\nWhen setting the `defaultChecked` prop on inputs of type `checkbox` only the `checked` attribute is correctly set, leaving the `defaultChecked` attribute unchanged.\r\n\r\n#### Expected Behaviour\r\nLike mentioned above, the expected behavior would be for the `defaultChecked` prop to set both the `checked` and `defaultChecked` attributes on the corresponding DOM node (like it's the case with the `defaultValue` prop).\r\n",
        "title": "defaultChecked prop sets only checked attribute",
        "labels": "Type: Bug",
        "id": 45672
    },
    {
        "body": "**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.1\r\n\r\n**What is the current behavior?**\r\nWarning message recommends using  soon to-be deprecated lifecycle method - `componentWillMount`\r\n\r\n_Warning Content:_ \r\n`Warning: Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.\r\n`\r\n**What is the expected behavior?**\r\nwarning messages should be inline with deprecation plans.\r\n",
        "title": "warning message recommends using soon deprecated lifecycle methods",
        "labels": "Type: Bug",
        "id": 45673
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nunexpected **grey splash** caused by `onMouseDown` on real ios device's browsers, both safari and chrome.\r\n[Please checkout this **grey splash** issue first](https://github.com/mui-org/material-ui/issues/11154)\r\nI did some trial later, and find out that vanilla html `<button onmousedown=\"\">btn</button>` doesn't cause **grey splash**, but with React's jsx `<button onMouseDown={()=>{}}></button>`, there is a noticeable **grey splash**\r\n\r\n**What is the expected behavior?**\r\n\r\nwho wants a splash?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.3.2\"\r\n",
        "title": "onMouseDown causes splash on real ios browsers",
        "labels": "Type: Bug",
        "id": 45674
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe size prop can only be a number and I think this should be true for inputs and selects but not necessarily true for the rest of HTML tags or web components.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSorry, it's a CodePen. This example uses a framework called OnsenUI that internally uses web components. In the OnsenUI framework there is an icon web component that transforms every size prop value into a string which is not attached to the DOM.\r\n\r\nI know that the example has more dependencies than React, BUT there is also a simple div (as simple as this `<div size=\"40px\" />`) which is also affected by this issue.\r\n\r\nhttps://codepen.io/airamrguez/pen/bMEgEP\r\n\r\n**What is the expected behavior?**\r\n\r\nThe size prop should be added to the DOM when it is not a number on HTML tags that aren't inputs and selects.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe affected versions are >= 16.3\r\nIt works ok in versions <= 16.2\r\nBrowsers: All\r\n",
        "title": "Size prop is not attached to the DOM",
        "labels": "Type: Bug",
        "id": 45675
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIf you try to access the `.root` of a component tree of a component created with `forwardRef`, you will get an error\r\n\r\n> `Unexpected object passed to ReactTestInstance constructor`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nA minimal example is simply a component created with `forwardRef`:\r\n\r\n```js\r\nimport React from \"react\";\r\n\r\nexport default React.forwardRef(() => <div>hello</div>);\r\n```\r\n\r\nNow if you try to use `create` from `react-test-renderer` and access `.root`, you will get\r\n\r\n> Unexpected object passed to ReactTestInstance constructor (tag: 14). This is probably a bug in React.\r\n\r\n```js\r\nimport React from \"react\";\r\nimport { create } from \"react-test-renderer\";\r\n\r\nimport Hello from \"./Hello\";\r\n\r\nit(\"test forwardRef component\", () => {\r\n  const tree = create(<Hello />);\r\n  expect(tree.root);\r\n});\r\n```\r\n\r\nhttps://codesandbox.io/s/vm98x95wx5\r\n\r\n**What is the expected behavior?**\r\nYou should be able to create components created with forwardRef with the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.3 using jest (forwardRef did not exist previously).",
        "title": "react-test-renderer.create does not work properly with forwardRef components",
        "labels": "Type: Bug",
        "id": 45676
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nexample: https://codesandbox.io/s/04393o3k6w\r\nIf the `LogProps` is child of `M.Provider`, and `M.Consumer` is used in its children.\r\nWhen the `M.Provider` is updating, even if the `LogProps` is wrapped in a component that  never updates, it can still be triggered by the callback of `React.forwardRef`, and updates the `LogProps`.\r\n\r\n**What is the expected behavior?**\r\nthe `LogProps` shouldn't update when the root component had updated, whether or not  `M.Consumer` is used in its children;\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nit's used react@16.3\r\n",
        "title": "Unexpected behavior when use React.forwardRef with React.createContext ",
        "labels": "Type: Bug",
        "id": 45677
    },
    {
        "body": "I think it is a bug.\r\n\r\nGit with example - https://github.com/axules/react-context-research\r\n> npm i\r\nnpm start\r\ngo to http://localhost:3003\r\n\r\n**Dependencies**\r\nReact v16.3.2\r\nChrome v65.0.3325.181\r\n\r\n### Components\r\nContext - OrderDetailsContext\r\nRoot component - OrdersView\r\nSimple component - OrdersViewRow \r\nSubscribed component - OrderDetailsView\r\n\r\n### Problem\r\nApplication have one dynamic context (OrderDetailsContext) and 3 components: one root component (OrdersView) and 2 children components (OrdersViewRow and OrderDetailsView). Only one component (OrderDetailsView) subscribed to dynamic context and have to be refreshed once context data is changed. But with them we have problem.\r\nWhen context is changed the subscribed component is not refreshed and have old version of context data.\r\n\r\n#### actual\r\nOrderDetailsView do not update once context is updated.\r\n\r\n#### expected\r\nOrderDetailsView will update once context is updated.\r\n\r\n### First solution\r\nGo to OrdersView and move OrderDetailsView to the top of render function, then subscribed component will be updated when context is changed.\r\n![image](https://user-images.githubusercontent.com/20991327/39345798-42d1dd14-49f3-11e8-8d45-ac29bd50204f.png)\r\n\r\n### Second strange solution\r\nGo to separeted component (OrdersViewRow) and just remove `<td>Remove this td and I will work!</td>`, then subscribed component will be updated when context is changed.\r\n\r\n### Video\r\nhttps://youtu.be/WET0a2hApwM\r\n\r\n### Reproduce\r\n\r\n1. Clone https://github.com/axules/react-context-research.git\r\n1. npm i\r\n1. npm start\r\n1. Open http://localhost:3003 in Chrome\r\n1. Open dev tools in Chrome\r\n1. Click on View button\r\n\r\n#### expected\r\n* 'Loading...' text should be visibled and hidden after.\r\n* Text should be updated and new number should be displayed.\r\n* console log should be\r\n![image](https://user-images.githubusercontent.com/20991327/39346895-073bc6c4-49f9-11e8-85c9-1f085208bcb3.png)\r\n\r\n#### actual\r\n* 'Loading...' text is not visibled.\r\n* Text is not changed.\r\n* console log is\r\n![image](https://user-images.githubusercontent.com/20991327/39346859-e5877f46-49f8-11e8-95a6-38b0fe492e5e.png)\r\n",
        "title": "Strange beahvior React + new Context API",
        "labels": "Type: Bug",
        "id": 45678
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\n`data-reactroot` is missing from the generated string, causing existing valid dom to be cleared\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/829oxp48n2\r\n\r\n**What is the expected behavior?**\r\nthe markup of the root element should have `data-reactroot` but it is missing\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.3.2, not sure",
        "title": "Having a context provider as root element causes `renderToString` to omit `data-reactroot` from output",
        "labels": "Type: Bug",
        "id": 45679
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nA bug\r\n\r\n**What is the current behavior?**\r\nCheckbox not fires onChange for controlled component, it somehow related to global event listeners with setState, see sandbox example.\r\n\r\n**What is the expected behavior?**\r\nCheckbox should fire onChange handler\r\n\r\n**Broken example with REACT 16:**\r\nhttps://codesandbox.io/s/8y6jv95k18\r\n\r\n**Working example with REACT 15 version:**\r\nhttps://codesandbox.io/s/rl3w4nqqzm",
        "title": "onChange doesn't fire if a capture-phase document listener for the underlying native event calls setState()",
        "labels": "Type: Bug",
        "id": 45680
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nGiven the following (simplified) snippet:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  render() {\r\n    if (typeof document === 'undefined') return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n\r\nclass Para extends React.Component {\r\n  render() {\r\n    return (\r\n      <span>\r\n        Some Text\r\n        <HoverMenu />\r\n      </span>\r\n    )\r\n  }\r\n} \r\n```\r\n\r\nwhere `div#root` is a valid `div` that exists, the following error is shown when hydrating after SSR:\r\n\r\n`Warning: Expected server HTML to contain a matching <div> in <span>`\r\n\r\nThe warning goes away if I update the definition of `HoverMenu` to:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  componentDidMount() {\r\n    this.setState({ isActive: true })\r\n  }\r\n  render() {\r\n    const { isActive} = this.state\r\n    if (!isActive) return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n```\r\n\r\nI'd prefer not to do that because of the double rendering caused by `setState` in `componentDidMount`.\r\n\r\nI don't quite understand what that error is telling me. No `<div />` is rendered server-side in either case. The error is particularly confusing, as the `HoverMenu` DOM `div` is not even rendered inside a DOM `span`. (I wonder if this is happening because `HoverMenu` is nested inside a React `span`.)\r\n\r\n**What is the expected behavior?**\r\n\r\nNo error is thrown. Or, at least that the error message is clearer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome 65\r\nReact 16.2\r\n(SSR through Next 5.1)\r\n",
        "title": "Unexpected warning when hydrating with portal and SSR",
        "labels": "Type: Bug",
        "id": 45681
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems that, if the children of a new-style `React.createContext()` context `Provider` are constant, the `Provider` can block updates from old-style `this.context` context providers from propagating to `this.context` consumers.\r\n\r\nThis sandbox demonstrates the issue. Clicking the button with a number will correctly increment the `Root`'s `state` and `context`, but the update is only propagated to the `Child3`'s `context` (and its button) when the \"Colors!\" button is clicked, as it causes an update to the `value` of the new-style `Provider`:\r\n\r\nhttps://codesandbox.io/s/ol4lpokpjy\r\n\r\n<details>\r\n<summary>Copy of the source code in the sandbox</summary>\r\n\r\n```jsx\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Root extends React.Component {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    };\r\n    this.countUp = this.countUp.bind(this);\r\n  }\r\n\r\n  getChildContext() {\r\n    return {\r\n      ...this.context,\r\n      count: this.state.count,\r\n      countUp: this.countUp\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n\r\n  countUp() {\r\n    this.setState(({ count }) => ({ count: count + 1 }));\r\n  }\r\n}\r\n\r\nRoot.childContextTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  countUp: PropTypes.func.isRequired\r\n};\r\n\r\nconst ctx = React.createContext();\r\n\r\nclass Child1 extends React.Component {\r\n  constructor(props: { onClick(): void }) {\r\n    super(props);\r\n    this.state = {\r\n      color: randomHexColor(),\r\n      newColor: this.newColor.bind(this)\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ctx.Provider value={this.state}>{this.props.children}</ctx.Provider>\r\n    );\r\n  }\r\n\r\n  newColor() {\r\n    const color = randomHexColor();\r\n    this.setState(() => ({ color }));\r\n  }\r\n}\r\n\r\nfunction randomHexColor() {\r\n  const colorStr = Math.floor(Math.random() * (Math.pow(2, 24) - 1)).toString(\r\n    16\r\n  );\r\n  return \"#000000\".slice(0, -colorStr.length) + colorStr;\r\n}\r\n\r\nclass Child2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <ctx.Consumer>\r\n        {ctx => (\r\n          <React.Fragment>\r\n            <Child3 color={ctx.color} />\r\n            <button onClick={ctx.newColor}>Colors!</button>\r\n          </React.Fragment>\r\n        )}\r\n      </ctx.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nclass Child3 extends React.Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        style={{ color: this.props.color }}\r\n        onClick={this.context.countUp}\r\n      >\r\n        {this.context.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nChild3.contextTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  countUp: PropTypes.func.isRequired\r\n};\r\n\r\nReactDOM.render(\r\n  <Root>\r\n    <Child1>\r\n      <Child2 />\r\n    </Child1>\r\n  </Root>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n```\r\n\r\n</details>\r\n\r\n**What is the expected behavior?**\r\n\r\nBoth old-style and new-style context updates should coexist.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.1; also broken in 16.3.0.\r\n\r\n---\r\n\r\nThis seems to only happen if the `children` of the `Provider` are constant, which is what happens when the children are provided on the first and only `ReactDOM.render` call. If `Child1` is updated to directly use `<Child2/>` instead of `{this.props.children}`, the problem does not happen.\r\n\r\nThis can also be a problem when using a production optimization that hoists constant elements outside the Component if the specified children are constant, which would even defeat the fix/workaround for the example above.",
        "title": "New Context Provider may block Old context propagation if children are constant",
        "labels": "Type: Bug",
        "id": 45682
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (?)\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently, the 16.3.x versions of `react-dom` ship [`react-dom.development.js`](https://unpkg.com/react-dom@16.3.1/cjs/react-dom.development.js) containing usage of `Array.from` which is not available in certain React-supported browsers like IE11. It causes breakage if those particular code paths are taken in such a browser (I ran into it using `<StrictMode>` in IE11).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nReproduction (should see \"Hello, world!\" but IE11 will crash and show nothing):\r\nhttps://codepen.io/anon/pen/zWJBrO?editors=0010\r\n\r\n**What is the expected behavior?**\r\n\r\n`react-dom.development.js` would not use `Array.from` or document that a polyfill is required.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react` and `react-dom`: 16.3.0-alpha.0 through 16.3.1\r\nInternet Explorer 11\r\n",
        "title": "react-dom development bundle uses Array.from",
        "labels": "Type: Bug",
        "id": 45683
    },
    {
        "body": "Since React 16.0.0, it looks like there might be a case where `event.target` on a change event in IE9 reports as the window, but I can't reproduce it outside of the DOM test fixtures.\r\n\r\n*Steps to reproduce*\r\n\r\n1. Open this build of the fixtures: http://react-ie-9-target-issues.surge.sh in IE9\r\n2. Enter text into an input\r\n3. Observe that the `event.target.value` is the window, as recorded by the fixture\r\n\r\nI can not reproduce this using the following CodePen:\r\n\r\nhttps://codepen.io/nhunzaker/pen/dmeoxJ?editors=1010\r\nViewable in IE9 here: https://s.codepen.io/nhunzaker/debug/dmeoxJ/PNrvYLevqQbM\r\n\r\nHere's a diff of my changes with master:\r\nhttps://github.com/facebook/react/compare/master...nhunzaker:ie9-target-issue\r\n\r\nAny idea what's going on? Here's what I think I need to check next:\r\n\r\n- [x] Differences in rAF polyfill\r\n- [x] Differences in map/set polyfill\r\n\r\n_This list will probably grow_",
        "title": "Possible incorrect event.target on number inputs in IE9?",
        "labels": "Type: Bug",
        "id": 45684
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWith React 16.3.0, when using `<React.Fragment>` IE 11 gives the following warning:\r\n\r\n```\r\nWarning: Invalid prop `children` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\r\n```\r\n\r\nSteps to reproduce:\r\n1. Use `create-react-app` to create a new React app.\r\n2. Add `<React.Fragment>` to `App.js`. For example:\r\n\r\n```\r\nimport React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <React.Fragment>\r\n          <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1 className=\"App-title\">Welcome to React</h1>\r\n          </header>\r\n          <p className=\"App-intro\">\r\n            To get started, edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n        </React.Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n3. Open the app in IE 11.\r\n4. Open IE dev tools and refresh the browser.\r\n5. You should see the above mentioned warning message in the console window.\r\n\r\nNo warnings with Chrome, Firefox, and Edge.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no warnings shown.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.3.0\r\nBrowser: IE 11\r\nOS: Windows 10",
        "title": "Warning in IE 11 when using React.Fragment",
        "labels": "Type: Bug",
        "id": 45685
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nAn internal error is raised when the error tries to propagate.\r\n\r\n<details>\r\n<summary>Uncaught TypeError: Cannot read property 'return' of null</summary>\r\n<pre>Uncaught TypeError: Cannot read property 'return' of null\r\n    at renderRoot (react-dom.development.js:12223)\r\n    at performWorkOnRoot (react-dom.development.js:12764)\r\n    at performWork (react-dom.development.js:12685)\r\n    at performSyncWork (react-dom.development.js:12662)\r\n    at requestWork (react-dom.development.js:12562)\r\n    at scheduleWorkImpl (react-dom.development.js:12437)\r\n    at scheduleWork (react-dom.development.js:12397)\r\n    at scheduleRootUpdate (react-dom.development.js:13025)\r\n    at updateContainerAtExpirationTime (react-dom.development.js:13053)\r\n    at Object.updateContainer (react-dom.development.js:13072)</pre>\r\n</details>\r\n\r\nhttps://jsfiddle.net/thysultan/Luktwrdm/264/\r\n\r\n**What is the expected behavior?**\r\n\r\nError should propagate to error boundary.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0\r\n\r\n",
        "title": "Error boundary bug",
        "labels": "Type: Bug",
        "id": 45686
    },
    {
        "body": "Got this debugging another error. Filing here for reference. Original code: https://phabricator.intern.facebook.com/P59317705",
        "title": "Uncaught Error: Should be working on a root. This error is likely caused by a bug in React.",
        "labels": "Type: Bug",
        "id": 45687
    },
    {
        "body": "Running into a strange issue that i cannot reproduce, it happens when running tests in Karma using `16.3.0-alpha.3`\r\n\r\n![image](https://user-images.githubusercontent.com/339286/37868035-ee7c67a2-2f76-11e8-9568-2149d81907d5.png)\r\n\r\nThe issue is here:\r\n\r\nhttps://github.com/facebook/react/blob/208b490ed907346ae3e37159535299899f74312d/packages/react-reconciler/src/ReactFiberScheduler.js#L864-L877\r\n\r\nMy test is throwing an error because of a missing `onChange` handler when rendering a checkbox with `checked` but no handler. What appears to be happening is that `nextUnitOfWork` is not `null` and misses the first branch, `replayUnitOfWork` is run, after which `nextUnitOfWork` _is_ null and `sourceFiber` doesn't exist and so access of `return` fails.\r\n\r\nI've tried for a while to reproduce it, the following codesandbox is a simplified version of the code that is throwing, but the error isn't present there :/ https://codesandbox.io/s/0332y243zp",
        "title": "Cannot read property 'return' of null",
        "labels": "Type: Bug",
        "id": 45688
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a DOM element rendered by a React component has focus, and the React component unmounts, the React `onBlur` event does not fire on parent DOM elements.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/134wrzy6q7\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that, just like the browser fires a `focusout` event when removing a DOM node, React would fire an `onBlur` events up to parent nodes when the focused node is removed / unmounted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.2\r\nMac OS X: 10.13.2\r\nBrowser: Chrome 67.0.3366.0, Chrome 64.0.3282.186\r\n\r\nNo idea if this worked in earlier versions of React.",
        "title": "React onBlur events not firing during unmount",
        "labels": "Type: Bug",
        "id": 45689
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nIt is a bug\r\n\r\n**What is the current behavior?**\r\nReact adds \"className\" to the DOM instead of \"class\" property. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nOpen the link below in IE11 and inspect the DOM. There will be the following h1 - `<h1 className=\"test-ie11-bug\">Hello React :)</h1>`\r\nhttps://vydimitrov.github.io/react-simple-boilerplate/\r\n\r\nLink to the test repo:\r\nhttps://github.com/vydimitrov/react-simple-boilerplate\r\n\r\n**What is the expected behavior?**\r\nTo add \"class\" to DOM when an element has property \"className\"\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.3.0-alpha.1\r\nInternet Explorer 11 - version 11.540.15063.0\r\n\r\nIt works as expected in React 16.2.0",
        "title": "React adds \"className\" to DOM instead of \"class\" in IE11",
        "labels": "Type: Bug",
        "id": 45690
    },
    {
        "body": "*BUG*\r\n\r\n**What is the current behavior?**\r\nFor input type=\"number\", step does not work as expected if there is an initial value set. Step only seems to get honored if the initial value is \"\" or null.\r\n\r\nExample:\r\nhttps://codepen.io/anon/pen/MQMBmX\r\n\r\nThe example uses a controlled input binding value and step. Step is 1/10th of the value. If you edit the value in the textbox to 50000 and increment using the stepper, it will increment to 50100 (i.e. by the initial value and not by the current step).\r\n\r\nEdit the code so initial value is \"\" or null. Edit textbox to 50000 and step up - value goes to 55000 as expected.\r\n\r\n**What is the expected behavior?**\r\nIt should be possible to render a number input that honors step without having to initialize the input component value to null or \"\" first.\r\n\r\nIt seems when there is an initial value provided, it will write a value attribute into the DOM (e.g. value=\"100\").  When initial value is \"\" or null then just the value attribute is written to DOM with no assignment. e.g. (value).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1  (ported to this version to confirm if still an issue)\r\n0.14.7 (originally found in this version)\r\n\r\nSeems to affect Chrome only (confirmed windows and mac, versions 59 and 64). Bug does not appear in Safari (on a mac at least).",
        "title": "For Controlled Input, step does not work as expected unless initialized with null or \"\".",
        "labels": "Type: Bug",
        "id": 45691
    },
    {
        "body": "This:\r\n\r\nhttps://github.com/facebook/react/blob/8e5f12ca6c18fb48ea71cba6bfa9bd7cf499ccb6/packages/react-reconciler/src/ReactFiberBeginWork.js#L217\r\n\r\nmight mean that `_owner.stateNode` is `null`.\r\n\r\nSo assumption like this leads to runtime failure in DEV:\r\n\r\nhttps://github.com/facebook/react/blob/8e5f12ca6c18fb48ea71cba6bfa9bd7cf499ccb6/packages/react-dom/src/client/ReactDOM.js#L1131\r\n\r\nWe should fix up all such code sites.",
        "title": "It's not safe to read CurrentOwner.current and assume it has a stateNode",
        "labels": "Type: Bug",
        "id": 45692
    },
    {
        "body": "I think there may be a bug in context in the latest alpha. When some updates are scheduled in the commit phase, it doesn't seem to propagate.\r\n\r\n```\r\ngit clone https://github.com/gaearon/emoji-search.git\r\ncd emoji-search\r\nyarn\r\nyarn start\r\n```\r\n\r\nEnter \"mon\". Erase it. Click on \"dark mode\".\r\nExpected: all children update. Actual: some children don't update.\r\n\r\nThis only seems to happen with [this indirection](https://github.com/gaearon/emoji-search/blob/2a3e23001ac5b1b2a05bc7b4ea9d7ef254888739/src/App.js#L12-L25).\r\n\r\n![gif](https://d2ffutrenqvap3.cloudfront.net/items/2E3k0F2r3H0u040P2v2n/Screen%20Recording%202018-02-18%20at%2023.57.gif?v=4b4b511e)",
        "title": "Context update doesn't fully propagate in some cases",
        "labels": "Type: Bug",
        "id": 45693
    },
    {
        "body": "Noticed this with 16.3 alpha:\r\n\r\n<img width=\"238\" alt=\"screen shot 2018-02-18 at 21 58 15\" src=\"https://user-images.githubusercontent.com/810438/36357507-e855da24-14f6-11e8-8398-b568fe92efd2.png\">\r\n\r\nI think we just need to support it here: https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js.\r\n\r\nOr else we could skip them [here](https://github.com/facebook/react/blob/e68c0164aa92ed383a0060639d9c449e2f740fb5/packages/react-reconciler/src/ReactDebugFiberPerf.js#L162) altogether.",
        "title": "Context Providers (and maybe Consumers) show up as \"Unknown\" in Performance tab",
        "labels": "Type: Bug",
        "id": 45694
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- Report a bug\r\n\r\n\r\n**What is the current behavior?**\r\n- Each time a child component of `Context.Consumer` calls `setState`, its parent `Context.Consumer` re-renders.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n- https://codesandbox.io/s/2p30y1l8rj\r\n\r\n\r\n**What is the expected behavior?**\r\n- Presumably the expected behavior is one where setting the state of a child component does not affect any parent `Context.Consumer` components, particularly when that state does not change\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- Versions\r\n  - 16.3.0-alpha.1\r\n  - 16.3.0-alpha.0\r\n- Browser\r\n  - Chrome (OSX 10.13.3) 64.0.3282.140\r\n- This works as expected when the previous context API is used",
        "title": "Context.Consumer unexpectedly updates each time one of its child components call setState",
        "labels": "Type: Bug",
        "id": 45695
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug - Regression\r\n\r\n**What is the current behavior?**\r\n\r\nIn react 16 when creating a `<select multiple>` the first child `<option>` is automatically getting marked as selected. In React 16 there does not seem to be a way to specify no `<option>` gets selected by default\r\n\r\nhttps://codesandbox.io/s/moxm2on3z9\r\n\r\n**What is the expected behavior?**\r\n\r\nIn React 15 unless you marked an option to be selected `<option selected>` no options were selected by default.\r\n\r\nhttps://codesandbox.io/s/ll11z5wqzl\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions effected include `react^16.2`, this worked in `react^0.13` and `react^15`. This bug is reproducible in chrome 64 and Firefox 58.\r\n\r\n\r\n-------------------------------\r\n\r\nThe hacky workaround I found to get around the first option getting selected is to inject a `<option style={{display: 'none'}} />` as the first child of the multiselect.",
        "title": "Regression: React 16 automatically marks first item of a mutliple select as checked",
        "labels": "Type: Bug",
        "id": 45696
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen use two or more contexts that created by `createContext`,in the child-tree of cxt2.Provider,i use cxt1.Provider to set a new context of cxt1,i expect only the child consumer got the new cxt1,but the result is that the cxt2.Provider's next sibling's child-tree got an unexpected cxt2.Provider's new context\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n[createContext issue](https://codesandbox.io/s/4j3m6l2l3w)\r\n\r\n**What is the expected behavior?**\r\nContextProvider only affect the children node.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.3.0-alpha.0",
        "title": "unexpected ContextConsumer or ContextProvider behavior",
        "labels": "Type: Bug",
        "id": 45697
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n> Unsupported component type 13 in test renderer. This is probably a bug in React.\r\n\r\n`invariant()` is called because `react-test-renderer` does not know about the the `ContextConsumer` and `ContextProvider` component types.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/wkvl8ojpjw\r\n\r\n**What is the expected behavior?**\r\n\r\nIt can identify the new context types.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.0",
        "title": "ContextConsumer and ContextProvider in react-test-renderer",
        "labels": "Type: Bug",
        "id": 45698
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug.\r\n\r\n**What is the current behavior?**\r\n\r\n```js\r\n  renderer.create(\r\n    <Fragment>\r\n      <Fragment>foo</Fragment>\r\n    </Fragment>\r\n  )\r\n  .toTree()\r\n```\r\n\r\n> Invariant Violation: toTree() does not yet know how to handle nodes with tag=10\r\n\r\nhttps://codesandbox.io/s/olky92m01y\r\n\r\n**What is the expected behavior?**\r\n\r\nreturns a tree.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0\r\n",
        "title": "react-test-renderer: toTree() does not yet know how to handle nodes with tag=10",
        "labels": "Type: Bug",
        "id": 45699
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReporting a bug.\r\n\r\n**What is the current behavior?**\r\nBasically I have many controlled `<textarea/>` fields in the app that I am currently developing and I normally only want them to re-render when their values have changed through their onChange event, but they re-render every time setState() gets called anywhere within the component or any parent component.\r\n\r\nI even tried creating a custom component which only contains a `<textarea/>` and setting shouldComponentUpdate() to return false but it seems to ignore that command completely. It's weird because in this case the console.log()s in my child component's render() function don't get executed but the field gets re-rendered nonetheless.\r\n\r\nThis issue is causing some major performance problems in my app. I hope someone addresses this issue as fast as possible so I can continue working on my react project. Maybe someone can provide a temporary workaround? Please let me know if there's something I'm missing or if I'm using this field incorrectly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI have isolated the problem in a new empty app and you can see the behavior in the following gif:\r\nhttps://gfycat.com/DentalExcitableIndri\r\n\r\nThe code is very simple. You can recreate this problem by creating 2 controlled fields, one `<input/>` and another `<textarea/>`. Then go to your browser, inspect the `<textarea/>` element and input something in the basic input field. The `<textarea/>` will re-render on every new typed letter in the `<input/>` field but not the other way around.\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tta1 : \"ta1\",\r\n\t\t\tta2 : \"ta2\",\r\n\t\t\tta3 : \"ta3\",\r\n\t\t\ti1 : \"i1\",\r\n\t\t\ti2 : \"i2\",\r\n\t\t\ti3 : \"i3\"\r\n\t\t};\r\n\t\tthis.handleInputChange = this.handleInputChange.bind(this);\r\n\t}\r\n\r\n\thandleInputChange(event){\r\n\t\tthis.setState({\r\n\t\t\t[event.target.name] : event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t\t<h1 className=\"App-title\">Welcome to React</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<p className=\"App-intro\">\r\n\t\t\t\t\ttest\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\ttextareas\r\n\t\t\t\t\t\t<textarea value={this.state.ta1} name=\"ta1\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<textarea value={this.state.ta2} name=\"ta2\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<textarea value={this.state.ta3} name=\"ta3\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\tinput fields\r\n\t\t\t\t\t\t<input value={this.state.i1} name=\"i1\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<input value={this.state.i2} name=\"i2\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t\t<input value={this.state.i3} name=\"i3\" onChange={this.handleInputChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe `<textarea/>` field should only re-render when its data is changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI was able to recreate this problem on React versions 16.2.0 (latest) and 15.6.1. I did not test on other versions so I am not sure if this worked correctly before. I'm using Chrome 62.0.3202.94 64-bit (latest) and Firefox 57.0.4 64-bit (latest) on Ubuntu 14.04.",
        "title": "All controlled <textarea/> fields re-render on any setState() call even though their data has not changed.",
        "labels": "Type: Bug",
        "id": 45700
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen an input field changes from \"email\" to \"text\", an exception TypeError will be thrown from setSelection.\r\n![Screenshot](https://raw.githubusercontent.com/adrianimboden/react-bug-reproduction/master/screenshot.png)\r\n\r\n**Reproduction**\r\nSee here: https://github.com/adrianimboden/react-bug-reproduction\r\n\r\n**What is the expected behavior?**\r\nIt should not crash because of an uncaught exception\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster (https://github.com/facebook/react/commit/4ca7855ca062d5d7dfca83c86acf46731e1e57ef)\r\nFirefox\r\n\r\nThis would be my proposed change to fix the issue: https://github.com/adrianimboden/react/commit/db923b8c3c1cb23ad9fb150c160ce56f39dd3cae",
        "title": "Problem when input type changes from email to text",
        "labels": "Type: Bug",
        "id": 45701
    },
    {
        "body": "See my comment in https://github.com/facebook/react/pull/11912#discussion_r161108162. It's not really documented but people might rely on this. Need to fix.",
        "title": "Some events are missing on master for SimulateNative",
        "labels": "Type: Bug",
        "id": 45702
    },
    {
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThe shallow renderer defaults a class component's state to empty object if it's not set. \"Real\" renderers don't seem to do this, so a component can render successfully in the shallow renderer, but fail at runtime in the browser with a null reference error.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\nHere is ReactDOM's behavior (crashes reading an uninitialized state value): https://codesandbox.io/s/4jv82zmp0\r\nHere is the shallow renderer behavior (component able to render): https://codesandbox.io/s/pp733nrxzq\r\n\r\n**What is the expected behavior?**\r\nThey initialize state in the same way.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16. This wasn't an issue in React 15.",
        "title": "State initialization disparity between shallow renderer and ReactDOM",
        "labels": "Type: Bug",
        "id": 45703
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nA specific order of unmounting and remounting `unstable_createReturn`s from `react-call-return` causes an invariant violation in `unmountHostComponents`.\r\n\r\n**Reproduce**\r\nThe following sandbox example crashes with an invariant violation when both the `min` and `cycle` props are *odd* numbers greater than zero.\r\n\r\nhttps://codesandbox.io/s/llyjz19rz7\r\n\r\n**What is the expected behavior?**\r\nThe app does not crash and cycles the number of items in the list.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n`react` and `react-dom` versions 16.1 and newer, `react-call-return` version 0.5.0\r\n",
        "title": "`react-call-return`: Expected to find a host parent.",
        "labels": "Type: Bug",
        "id": 45704
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIn mobile Safari, DOM events originating from elements rendered through a Portal do **not** bubble (propagate) up the React component tree.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce....**\r\nPlease see the following JSFiddle: https://jsfiddle.net/zebulonj/wf7orwan/\r\n\r\nIn this JSFiddle, the expected behavior (seen in a desktop browser) is that clicking on the portal content (appearing as a modal, including backdrop) should toggle to the \"On\" or \"Off\" indicator rendered in the main content. However, in mobile Safari (iOS 11.1.1), the click events do not propagate.\r\n\r\n\r\n**What is the expected behavior?**\r\nClick events should propagate up the React component tree.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAffected: React 16.2\r\niOS 11.1.1\r\n",
        "title": "Click events don't bubble from Portal content on mobile Safari",
        "labels": "Type: Bug",
        "id": 45705
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReact ART crashes when components are rendered with Node.\r\n\r\n**What is the expected behavior?**\r\n\r\nNo crash.\r\n\r\nThe issue lies upstream in the art fork, and there is a proposed fix, but the PR needs attention so I'm cross posting here. Hope that's ok\r\n\r\nhttps://github.com/sebmarkbage/art/pull/16",
        "title": "React ART crashes with SSR",
        "labels": "Type: Bug",
        "id": 45706
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** \r\n\r\nBug \r\n\r\n**What is the current behavior?**\r\n\r\nReact DOM crashes when `<option>` contains three interpolated value if one is a conditional. \r\n\r\nReproduction: https://jsfiddle.net/0opjvycp/ \r\n\r\n1. Change the value of the `<select>`\r\n2. React crashes with `NotFoundError: Node was not found` \r\n\r\nFrom what I can tell, the conditional value is necessary, and it must be three interpolated values. \r\n\r\n**What is the expected behavior?**\r\n\r\nReact should not crash. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact DOM 16.2 and 16.0. I think this worked in 15.6 - https://jsfiddle.net/mrwkmuqc/ does not crash \r\n",
        "title": " React DOM crashes when <option> contains three interpolated value if one is a conditional. ",
        "labels": "Type: Bug",
        "id": 45707
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug \r\n\r\n**What is the current behavior?**\r\nemail input doesn't control for whitespace // possible variation on [Issue 6368](https://github.com/facebook/react/issues/6368); however, 6368 shows up at 15.0.0 this bug shows up at 15.2\r\n\r\n**If the current behavior is a bug, demo**\r\n\r\nno bug in React 15.0.0\r\nno bug in React 15.1.0\r\nbug on React 15.2\r\n[React~15 fiddle](https://jsfiddle.net/cburnett/79z43qxn/9/)\r\n\r\nbug on React 16 \r\n[React~16 fiddle](https://jsfiddle.net/cburnett/q1297t5w/2/)\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen a user presses down the backspace key and holds it, all values in the input are removed, including the whitespaces  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWorks on 15.1.0\r\nbug at >= 15.2.0 \r\ntesting on Chrome 63\r\nMacOs Sierra 10.12\r\n",
        "title": "backspace fails to clear values on input type='email'",
        "labels": "Type: Bug",
        "id": 45708
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nMy OS and browser are configured to a locale that uses comma as the decimal mark (Finland for those interested). In the codepen below when I accidentally type a period after some number the whole input gets cleared. This is somehow related to the parent component's state being updated because if the `defaultValue` prop is removed from the `<Input>` component the input doesn't get cleared.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codepen.io/anon/pen/aEOgNL?editors=0010\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input should retain its visible value even if it would be invalid (can't be converted to a number).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0 and Chrome 63 on macOS 10.12.6.\r\n\r\nTested in Safari 11.0.2 and typing a period kinda works. After typing the first number after the period it gets converted to a comma but the cursor jumps to the beginning.\r\n\r\nAlso tested in Firefox 57.0.1 but it seems to think that period is the correct decimal mark.",
        "title": "Number input gets cleared when typing period as decimal mark",
        "labels": "Type: Bug",
        "id": 45709
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nShallowRenderer not considering contextTypes.\r\n\r\n**Note: I was not able to easily include react-test-renderer in a fiddle so I include a unit test. \r\n\r\n ```\r\n    //Context used in shallow and normal rendering\r\n    const context = { appName: 'abc', mode: 'def' };\r\n\r\n    class TopLevelComponent extends React.Component {\r\n      render() { return <div>{this.props.children}</div>; }\r\n      getChildContext() { return context; }\r\n    }\r\n    TopLevelComponent.childContextTypes = { appName: PropTypes.string, mode: PropTypes.string };\r\n\r\n    class Component1 extends React.Component {\r\n      render() { return <div mode={this.context.mode} appname={this.context.appName}/>; }\r\n    }\r\n    Component1.contextTypes = { appName: PropTypes.string };\r\n\r\n    //Use shallow renderer and assert that we got appName but not mode\r\n    const shallowComponent1 = new ShallowRenderer().render(<Component1/>, context);\r\n    expect(shallowComponent1.props.appname).toBe('abc'); //Pass\r\n    expect(shallowComponent1.props.mode).toBeUndefined(); //This expectation fails\r\n\r\n    //Render Component1 under a component with childContext\r\n    const wrappedEl = React.createElement(() => <TopLevelComponent><Component1/></TopLevelComponent>);\r\n    const domNode = document.createElement('div');\r\n    ReactDOM.render(wrappedEl, domNode);\r\n    const html = domNode.innerHTML;    \r\n    expect(html).toContain('abc'); //Pass\r\n    expect(html).not.toContain('def'); //Pass: As you can see this property is undefined\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would expect that when rendering Component1 with ShallowRenderer, render method would check Component1.contextTypes and mask any property that is not specified there just like function getMaskedContext(workInProgress, unmaskedContext) does in react-dom library.\r\n\r\nI fixed this behavior by changing render method like this: (inpired again by getMaskedContext)\r\n\r\n```\r\n  const oldRender = ShallowRenderer.prototype.render;\r\n  ShallowRenderer.prototype.render = function render(element) {\r\n\r\n    const unmaskedContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n    if (element && element.type && unmaskedContext) {\r\n      if (element.type.hasOwnProperty('contextTypes')) {\r\n        const context = {};\r\n        for (const key in element.type.contextTypes) {\r\n          context[key] = unmaskedContext[key];\r\n        }\r\n\r\n        arguments[1] = context;\r\n      }\r\n    }\r\n\r\n    return oldRender.apply(this, arguments);\r\n  };\r\n\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis bug is for version 16. We are upgrading from React 15, we were using enzyme shallow rendering and this wasn't the behavior. It is difficult to say which part of the code has changed between React 15 and enzyme at this point but my code sample includes only code from react libraries.\r\n",
        "title": "ShallowRenderer not considering contextTypes when rendering children",
        "labels": "Type: Bug",
        "id": 45710
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nNumber inputs with decimal values in Chrome ShadowDOM do not maintain cursor position as user backspaces in the input field.\r\n\r\nSuper low-quality gif (sorry):\r\n<img src=\"https://thumbs.gfycat.com/TautIncredibleEkaltadeta-size_restricted.gif\"/>\r\n\r\nThis issue appears to be similar to the problem here: https://github.com/facebook/react/pull/7359, but in this case it's only custom elements with a shadow root that exhibit the problem.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n1. Have a React component render a number input: `<input type=\"number\" />`.\r\n2. Attach that React component as part of the ShadowDOM node of a custom element.\r\n3. Enter in some decimal value (e.g., `88.88`) into the input.\r\n4. Slowly backspace in the input. As soon as the decimal point would be the last character, the decimal point is removed and the cursor position jumps to the beginning of the input.\r\n\r\nDemo: https://jsfiddle.net/69z2wepo/94566/\r\n\r\n**What is the expected behavior?**\r\n\r\nThe ShadowDOM case behaves like the other cases: when backspacing in the input, the cursor does not jump to the beginning of the input and the decimal point is not unexpectedly deleted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.2.0 + Chrome 62.0.3202.62 + OSX 10.12.6\r\n",
        "title": "Cursor jumps when backspacing in a number input (with ShadowDOM)",
        "labels": "Type: Bug",
        "id": 45711
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n**Bug**\r\n\r\n**What is the current behavior?**\r\nWhen input control becomes disabled, React does not call onBlur callback\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal https://jsfiddle.net/c22pez5z/\r\n\r\n**What is the expected behavior?**\r\n1. Focus on input element\r\n2. Press Enter button (it makes input disabled)\r\n3. `Blur counter` and `Native blur counter` should be equal.",
        "title": "React does not call onBlur callback",
        "labels": "Type: Bug",
        "id": 45712
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nFrom the docs (https://reactjs.org/docs/fragments.html#keyed-fragments):\r\n```jsx\r\nfunction Glossary(props) {\r\n  return (\r\n    <dl>\r\n      {props.items.map(item => (\r\n        // Without the `key`, React will fire a key warning\r\n        <React.Fragment key={item.id}>\r\n          <dt>{item.term}</dt>\r\n          <dd>{item.description}</dd>\r\n        </React.Fragment>\r\n      ))}\r\n    </dl>\r\n  );\r\n}\r\n```\r\n\r\nIf I do this:\r\n```jsx\r\nrenderer\r\n  .create(\r\n    <Glossary\r\n      items={[{ id: 'id', term: 'term', description: 'description' }]}\r\n    />\r\n  )\r\n  .toJSON();\r\n```\r\n\r\nThe result is:\r\n```json\r\n{\r\n  \"type\": \"dl\",\r\n  \"props\": {},\r\n  \"children\": [\r\n    { \"type\": \"dt\", \"props\": {}, \"children\": [\"term\"] },\r\n    { \"type\": \"dd\", \"props\": {}, \"children\": [\"description\"] }\r\n  ]\r\n}\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\nSee above\r\n\r\n**What is the expected behavior?**\r\nThat, somehow, the `key` is not lost. I'm not sure where it would make sense, but it should be in there somewhere.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.2.0",
        "title": "react-test-renderer does not include `key` on fragments",
        "labels": "Type: Bug",
        "id": 45713
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug? (not a biggy - not sure if IE11 is support for development)\r\n\r\n**What is the current behavior?**\r\n\r\nIE11 seems to always throw a warning for hydration failures\r\neg\r\n\r\n> **Warning: Prop `style` did not match. Server: \"text-decoration: none;\" Client: \"text-decoration:none\"**\r\n\r\nNote: there is a space between the colon and none from Server, Client has no space\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nHave a SSR rendered component, using inline styles\r\n```\r\n                       <a href=\"/page1\" style={{ textDecoration: \"none\" }}>\r\n                            <h1 className=\"splash-head\">Go to Page1</h1>\r\n                        </a>\r\n```\r\n\r\nThen hydrate it on IE11\r\n`ReactDOM.hydrate(component, document.getElementById(\"app\"));`\r\n\r\nThis **doesnt** occur in either Chrome or Firefox\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.1.1\r\nBrowser: IE11\r\n\r\n",
        "title": "False positive warning about style mismatch when hydrating server markup in IE11",
        "labels": "Type: Bug",
        "id": 45714
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nSee fiddle https://jsfiddle.net/j2nzg31L/1/\r\n\r\nThe warning related to the select fires repeatedly.  @gaearon tells me it should dedupe, and that this is a bug.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nSee above\r\n\r\n**What is the expected behavior?**\r\n\r\nSee above\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2",
        "title": "Select warning fires repeatedly ",
        "labels": "Type: Bug",
        "id": 45715
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen hydrating a pre-rendered component that uses `dangerouslySetInnerHTML`, + an object with a `toString` method, we get a warning such as:\r\n\r\n```\r\nWarning: Did not expect server HTML to contain the text node \"Bonjour\" in <p>.\r\n```\r\n\r\nThe component will also appear blank.\r\n\r\nThis is noteworthy since:\r\n- The markup returned by `render` appears to be correct, meaning:\r\n  - The markup that an SSR server returns is correct\r\n  - The markup that appears on page if we just use `render` on the client, without SSR is correct\r\n- It's only if we do both, that we get errors.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codesandbox.io/s/vqkq34o965\r\n\r\n(Code, for posterity:)\r\n```js\r\nimport React from \"react\";\r\nimport { hydrate } from \"react-dom\";\r\n\r\nconst HelloObj = {\r\n  toString: () => \"Bonjour\"\r\n};\r\n\r\nconst MyComponent = () => (\r\n  <p\r\n    dangerouslySetInnerHTML={{\r\n      __html: HelloObj\r\n    }}\r\n  />\r\n);\r\n\r\nhydrate(<MyComponent />, document.getElementById(\"app\"));\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe component is not blank, and no error is outputted in the console\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- react/react-dom 16.2.0\r\n  - This worked < 16 (confirmed working in 15.6.1, if we use the `render` method)\r\n- Chrome Version 62.0.3202.94\r\n- OS X 10.12.6",
        "title": "hydrating a component with `dangerouslySetInnerHTML` and `toString` causes a warning, and the component to not render",
        "labels": "Type: Bug",
        "id": 45716
    },
    {
        "body": "See this test case:\r\n\r\nhttps://github.com/facebook/react/blob/323efbc33c27a602a4aab8519f58feba1e0a216c/packages/react-dom/src/__tests__/ReactStatelessComponent-test.js#L142-L157\r\n\r\nPretty sure the different message in production wasn't intentional, but is a consequence of `ReactCurrentOwner.current` not being set in production for functional components.\r\n\r\nWe need to see if it's possible to emit the same (useful) message both in development in production. If it's not possible, we need to change the production message to be more ambiguous instead of suggesting the wrong reason for the problem.",
        "title": "Fix the misleading error message in production",
        "labels": "Type: Bug",
        "id": 45717
    },
    {
        "body": "https://codesandbox.io/embed/j30o67kpxy\r\nReact shows warning in console if I use React.Fragment\r\n```\r\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\r\n```",
        "title": "\"React.createElement: type is invalid\" warning in IE11 when using React.Fragment",
        "labels": "Type: Bug",
        "id": 45718
    },
    {
        "body": "Regression in master from https://github.com/facebook/react/pull/11534.\r\nFound it thanks to the attribute fixture snapshots.",
        "title": "value|defaultValue={Symbol|Function} should be ignored, not stringified",
        "labels": "Type: Bug",
        "id": 45719
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIf there is a client/server mismatch for text inside of an a or button element, it causes it to be automatically focused on page load.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n```\r\nlet text;\r\nlet URL = '/randomURL';\r\nif (typeof window !== 'undefined') {\r\n  text = 'CLIENT TEXT';\r\n} else {\r\n  text = 'TEXT';\r\n}\r\n\r\nreturn (\r\n  <a href={URL}>\r\n    {text}\r\n  </a>\r\n);\r\n```\r\n\r\nif the focus is not on the window (i.e. if a dom element is selected in the chrome inspector or react inspector widnow), then it doesn't add the focus.\r\n\r\n**What is the expected behavior?**\r\nThe expected behavior is that it would either show CLIENT TEXT or TEXT (depending on how React16 resolves the diff), but for it not to be automatically highlighted \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact16 / macosx / chrome + ff + safari",
        "title": "client/server mismatch for text inside of an a/button causes the the a/button to focus on page load",
        "labels": "Type: Bug",
        "id": 45720
    },
    {
        "body": "Calling `ReactDOMServer.renderToStaticMarkup(elementWithPortal);` gets stuck in a loop while trying to do a static render.\r\n\r\nCurrent behavior:\r\nThe behavior can be seen here: https://codepen.io/anon/pen/BmqWOM  by un-commenting line 58 (warning: this will make your tab freeze)\r\n\r\nExpected behavior:\r\nIt should return with results or throw some kind of error if the input is not valid\r\n",
        "title": "ReactDOMServer.renderToStaticMarkup gets stuck while trying to render Portals",
        "labels": "Type: Bug",
        "id": 45721
    },
    {
        "body": "Imported from https://github.com/facebook/react/issues/10474#issuecomment-345331144 at request of @gaearon \r\n\r\n**Do you want to request a *feature* or report a *bug*?** Bug\r\n\r\n**What is the current behavior?**\r\n\r\nIn development mode React uses `invokeGuardedCallback` to be able to catch errors without interrupting the normal \"break on uncaught exceptions\" feature of devtools.\r\n\r\nIn the current implementation of `invokeGuardedCallback` an event is created and dispatched, which allows for error handling without a `try{ } catch` block.\r\n\r\nUnfortunately it has the side effect of overriding `window.event`, and so you are unable to access `window.event` within guarded callbacks when running React in development mode. In production mode it works fine.\r\n\r\nWe would like to access window.event at Superhuman to be able to detect where DOM focus is from the user's point of view. Usually this is document.activeElement, but in a few cases (like during a blur event, or when clicking between two iframes) the focus will end up in a different place.\r\n\r\nThis works fine in production, and we currently work around this in development mode by overriding `ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDOMEventListener.handleTopLevel` and maintiaining a reference to the event. In production mode we just use window.event.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nin development: https://jsfiddle.net/n782L2qg/, in production: https://jsfiddle.net/kqt2o7pr/. In both cases I would expect the alert to say `window.event.type: click`, but in development it says `window.event.type: react-invokeguardedcallback`\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like a way to access window.event in development. I'm happy for this to be somewhat obscure, but ideally I would not have to use the secret internals to make this work.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Development 0.15 and 0.16 at least. probably before.\r\n",
        "title": "react-dom: Ability to access window.event in development",
        "labels": "Type: Bug",
        "id": 45722
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nClicking a disabled button in IE11 fires a mouse event that bubbles and is caught by parent click event listeners.\r\nThe event is swallowed/not fired in all other major browsers.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\nhttps://codesandbox.io/s/r0q76vqjwn\r\n\r\n**What is the expected behavior?**\r\nThe event should not fire or bubble.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.6.2 - IE11",
        "title": "Disabled button click event propagates in IE11",
        "labels": "Type: Bug",
        "id": 45723
    },
    {
        "body": "Here's a fixture demonstrating the issue (first test case): http://react-number-input-form-reset-bug.surge.sh/number-inputs\r\n\r\nIf you have a controlled number input within a form containing a reset button, hitting Enter can trigger that reset event. This causes the focused input to be reset to the `defaultValue`, which won't be in sync with the tracked value because we do that work on blur for number inputs to avoid triggering validation warnings. This doesn't affect other input types, since the tracked value is updated immediately.\r\n\r\nThis might be a viable tradeoff for avoiding those validation warnings, so I'm not sure if this is actionable, but I wanted to at least document it for future reference.\r\n\r\n\r\ncc @nhunzaker @gaearon \r\n\r\n",
        "title": "Resetting a form containing a focused controlled number input puts it out of step with state",
        "labels": "Type: Bug",
        "id": 45724
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug report. It looks like IE9 is unmounting text nodes when undoing text input operations. If the display value of the input is rendered in another component, it raises an exception because IE9 does not allow changes to `nodeValue` on unmounted text nodes.\r\n\r\nI think that's the issue, anyway. It is documented here:\r\n\r\nhttps://connect.microsoft.com/IE/feedbackdetail/view/944330/invalid-argument-error-when-changing-nodevalue-of-a-text-node-removed-by-setting-innerhtml-on-an-ancestor\r\n\r\n**What is the current behavior?**\r\n\r\n1. Open http://react-dom-test-fixtures.surge.sh/number-inputs in IE9\r\n2. Change the text in the first controlled text input\r\n3. Start debugging in the IE9 developer tools\r\n4. Press ctrl+z to undo your text change\r\n5. IE9 raises an exception when setting the nodeValue of the text label to the right of the input \"invalid arguments\":\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis affects IE9 when using React 16. It is also an issue on master.\r\n\r\n--- \r\n\r\nThe issue springs up in ReactDOM.js:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOM.js#L392-L398\r\n\r\nI think there just needs to be a wrapper around the text node to see if it has a parent before updating. Maybe something like:\r\n\r\n```javascript\r\ncommitTextUpdate(\r\n  textInstance: TextInstance,\r\n  oldText: string,\r\n  newText: string,\r\n): void {\r\n  // IE9 will raise an exception if modifying a detached text node\r\n  // https://connect.microsoft.com/IE/feedbackdetail/view/944330/invalid-argument-error-when-changing-nodevalue-of-a-text-node-removed-by-setting-innerhtml-on-an-ancestor\r\n  if (textInstance.parentNode) {\r\n    textInstance.nodeValue = newText;\r\n  }\r\n}\r\n```\r\n\r\nBut that feels like a band-aid solution. I'm curious what is causing the text node to unmount to begin-with.",
        "title": "Undo operation on text input throws exception in IE9",
        "labels": "Type: Bug",
        "id": 45725
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the following is rendered to string using ReactDOM:\r\n\r\n```jsx\r\n<select value=\"\"><option>a ({`b`})</option></select>\r\n```\r\n\r\nI get\r\n\r\n```html\r\n<select data-reactroot=\"\"><option>a (b)</option></select>\r\n```\r\n\r\nWhen hydrating the above code, I get this warning:\r\n\r\n  Warning: Text content did not match. Server: \"a (b)\" Client: \"a (\"\r\n\r\nFiddle: https://jsfiddle.net/z1q0azjL/1/\r\n\r\n**What is the expected behavior?**\r\n\r\nI should get:\r\n\r\n```html\r\n<select data-reactroot=\"\"><option>a (<!-- -->b<!-- -->)</option></select>\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.1.1\r\n\r\nThis has something to do with `flattenOptionChildren` in ReactPartialRenderer.js.\r\n\r\nPS:\r\nWhen browsing ReactPartialRenderer.js, I found this code:\r\n\r\n```js\r\n        props = Object.assign(\r\n          {\r\n            selected: undefined,\r\n            children: undefined,\r\n          },\r\n          props,\r\n          {\r\n            selected: selected,\r\n            children: optionChildren,\r\n          },\r\n        );\r\n```\r\n\r\nWhat is the point of those `undefined` props when they are overwritten later on?\r\n\r\n\r\n",
        "title": "Children of option tags flattened when select has value",
        "labels": "Type: Bug",
        "id": 45726
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n\r\n**What is the current behavior?**\r\n\r\nIf the style prop is passed a decimal number, react converts the dot in a comma, resulting in an invalid css value. I suspect this might be due to my locale being different from english, but the behavior should be the same irregardless of the user's locale (and the conversion is correct if I use `String(12.34)`)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem**\r\n\r\nhttps://jsfiddle.net/ab4zx24r/3/\r\n\r\n<img width=\"150\" alt=\"schermata 2017-11-12 alle 12 12 46\" src=\"https://user-images.githubusercontent.com/6401008/32698272-e74979de-c7a2-11e7-8005-0e1b6c695916.png\">\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\ndecimal numbers should be always converted with a dot\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact version: 16.x.0\r\nos: macos 10.13.1\r\nbrowsers:\r\n  * chrome 62\r\n  * safari 11.0.1\r\n\r\nfirefox 58.0 beta 1 is unaffected\r\n\r\n",
        "title": "inline style with decimal numbers",
        "labels": "Type: Bug",
        "id": 45727
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nreport a bug\r\n\r\n**What is the current behavior?**\r\nWhen I call setState with a callback in a test using react shallow renderer (via enzyme), the callback gets called and `this.state` is still the old state.\r\n\r\nEDIT: This seems limited to componentWillMount\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nEDIT: Reproduce with this https://github.com/bdwain/setstate-callback-bug\r\n\r\n**What is the expected behavior?**\r\nWhen the setState callback gets called, it should have access to the new state.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nVersion 16.\r\nIt worked in v15 with enzyme 2.\r\n\r\nEDIT: I think this is because in componentWillMount, [this line](https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactShallowRenderer.js#L67) causes the render method in the shallow wrapper to return early, before it updates the state.",
        "title": "SetState callback called before component state is updated in React Shallow Renderer",
        "labels": "Type: Bug",
        "id": 45728
    },
    {
        "body": "There was a test added as part of shallow renderer rewrite (#9426) in https://github.com/facebook/react/pull/9426/commits/fc1c6f913cb74a2cb1ce1cfe6ba91b431786c4ac that I don\u2019t understand.\r\n\r\nIt tests that you can take an *instance*, call `cloneElement` on it, and pass the result to the shallow renderer. If we are doing this internally this seems like a misunderstanding of how the API should work, and we need to fix those callsites to read `getRenderOutput()` instead of `getMountedInstance()`.\r\n\r\nYou can see the test is wrong because if you change it to render to a *different* shallow renderer like this\r\n\r\n```js\r\n    const shallowRenderer = createRenderer();\r\n    let result = shallowRenderer.render(<SimpleComponent foo=\"foo\" />);\r\n    expect(result).toEqual(<div>foo:bar</div>);\r\n    const instance = shallowRenderer.getMountedInstance();\r\n\r\n    const shallowRenderer2 = createRenderer();\r\n    const cloned = React.cloneElement(instance, {foo: 'baz'});\r\n    result = shallowRenderer2.render(cloned);\r\n    expect(result).toEqual(<div>baz:bar</div>);\r\n```\r\n\r\nit will fail with \r\n\r\n```\r\nTypeError: Cannot read property 'prototype' of undefined\r\n```\r\n\r\nThe argument we\u2019re passing in this case is **not** a proper React element and doesn\u2019t actually have `element.type`. It just mostly \u201chappens\u201d to work because both React elements and ShallowRenderer instances have `.props` on them, and code almost doesn\u2019t read anything else in the update path. This [is an example hack](https://github.com/facebook/react/blob/779d23f72e7f2c763f7a3e3373a4134c54356fd6/packages/react-test-renderer/src/ReactShallowRenderer.js#L147-L148) that we needed because of this.\r\n\r\nI think we should just delete this test, and fix the internal callsites. It was never intentionally supported, and prevents me from doing some other fixes in the shalllow renderer.",
        "title": "Remove support for cloneElement(getMountedInstance()) in shallow renderer",
        "labels": "Type: Bug",
        "id": 45729
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*bug* (I think)\r\n\r\n**What is the current behavior?**\r\nHere's a [codesandbox](https://codesandbox.io/s/0ml3roomr0). Or just plop this in an `index.html`:\r\n\r\n```html\r\n<body>\r\n<div id=\"root\"></div>\r\n<script src=\"https://unpkg.com/react@16.0.0/umd/react.development.js\"></script>\r\n<script src=\"https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js\"></script>\r\n<script src=\"https://unpkg.com/babel-standalone@6.26.0/babel.js\"></script>\r\n<script type=\"text/babel\">\r\nfunction makeRenderable(fn, valueGetter) {\r\n  const ITERATOR_SYMBOL =\r\n    (typeof Symbol === 'function' && Symbol.iterator) || '@@iterator'\r\n  function iterator() {\r\n    let timesCalled = 0\r\n    return {\r\n      next() {\r\n        const done = timesCalled++ > 0\r\n        return {done, value: done ? undefined : valueGetter()}\r\n      },\r\n    }\r\n  }\r\n  fn[ITERATOR_SYMBOL] = iterator\r\n  return fn\r\n}\r\n\r\nconst renderableFunction = makeRenderable(function(a, b) {\r\n  // kinda irrelevant what goes on in here...\r\n  return a + b\r\n}, () => 'I am the rendered version of the function')\r\n\r\nfunction Working() {\r\n  return (\r\n    <div>\r\n      This works: <div>{renderableFunction}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction NotWorking() {\r\n  return <div>This does not work: {renderableFunction}</div>\r\n}\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <Working />\r\n    <hr />\r\n    <NotWorking />\r\n  </div>,\r\n  document.getElementById('root'),\r\n)\r\n</script>\r\n</body>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect that things will render the same regardless of whether they're an only child or a member of an array of children.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nYes, [it worked in React@15](https://codesandbox.io/s/8zlpvjzjy9).\r\n\r\n**Suggested Solution**\r\n\r\nI'm fairly confident that the issue is in the array of children case, the [`getIteratorFn` call](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L578-L586) is within a `typeof newChild === 'object' && newChild !== null` if statement, whereas the original [reconcileChildFibers](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L1358) puts the [`getIteratorFn` call outside it](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L1434-L1441).\r\n\r\nIf I'm not mistaken, a simple fix would be to move [this curly brace](https://github.com/facebook/react/blob/2c0a8fb99e945315c9dce7a15c85775d51f5755d/packages/react-reconciler/src/ReactChildFiber.js#L589) a few lines up :wink:\r\n\r\nI'm happy to do so complete with a test given a little direction (like, where the test should go). Thanks!",
        "title": "A function that is also an iterable is treated inconsistently",
        "labels": "Type: Bug",
        "id": 45730
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nAfter an `onDrop` event has fired inside an \"editable\" element (input, textarea, contentEditable), the `onSelect` event on that element will no longer fire when changing selection using the keyboard. \r\n\r\nAs you can see in this gif below, the onSelect event gets called each time I move the cursor around (using the arrow keys). But once the `onDrop` event has fired, `onSelect` will no longer fire when I move the cursor around (also using the keys):\r\n\r\n![react-onselect-bug](https://user-images.githubusercontent.com/3599069/32080216-bd42f580-baae-11e7-98ee-93a482ed80ca.gif)\r\n\r\n[Here's the jsfiddle](https://jsfiddle.net/owmL8n6u/1/) I used to record the video above.\r\n\r\n**What is the expected behavior?**\r\nThe `onSelect` event should always fire when selection changes.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16 / Chrome 62",
        "title": "onDrop breaks onSelect event",
        "labels": "Type: Bug",
        "id": 45731
    },
    {
        "body": "See my comment in https://github.com/facebook/react/pull/11291#issuecomment-338974574.\r\nI verified https://github.com/facebook/react/pull/11291 introduced this regression.",
        "title": "Invariants that don't have error codes yet are missing in production builds",
        "labels": "Type: Bug",
        "id": 45732
    },
    {
        "body": "It seems like those were intended to be public APIs (https://github.com/facebook/react/pull/10629) but they\u2019re not published on npm because `lib` folder is not in the `\"files\"` whitelist.",
        "title": "react-art on npm is missing the /lib/ folder",
        "labels": "Type: Bug",
        "id": 45733
    },
    {
        "body": "There is no extra guard or clause in `enqueueForceUpdate` when calling `render` which means the `render` always calls `shouldComponentUpdate` which can block even forced re-render during tests.\r\n\r\nThis for example [breaks shallow rendering in Enzyme when using MobX and observables](https://github.com/airbnb/enzyme/issues/1267).\r\n\r\nMinimal test case:\r\n\r\n```javascript\r\nimport React from 'react'\r\nimport ShallowRenderer from 'react-test-renderer/shallow';\r\nconst renderer = new ShallowRenderer();\r\n\r\nclass TestComponent extends React.Component {\r\n  render() { return <span/> }\r\n}\r\n\r\ndescribe('forceUpdate', () => {\r\n  it('does not call shouldComponentUpdate', () => {\r\n    let called = 0\r\n    TestComponent.prototype.shouldComponentUpdate = () => called += 1\r\n    const component = renderer.render(<TestComponent/>);\r\n    renderer._instance.forceUpdate()\r\n    expect(called).toBe(0) // <- this throws because called === 1\r\n  })\r\n})\r\n```",
        "title": "Shallow test renderer calls shouldComponentUpdate on forceUpdate",
        "labels": "Type: Bug",
        "id": 45734
    },
    {
        "body": "We had an internal issue (T22633912) which manifested itself as an infinite nested update loop triggering our invariant.\r\n\r\n@trueadm investigated that it was introduced in https://github.com/facebook/react/pull/10426 and then fixed in https://github.com/facebook/react/pull/11187. We don\u2019t, however, have any failing tests related to that.\r\n\r\nEven though we removed that coalescing implementation, I feel like we need to investigate what happened and add a regression test to prevent the same issue from occurring in the future.\r\n\r\nIt might also be valuable to think about any additional information we can surface in the error, at least in development. For example, component names for last ten fibers that scheduled an update.",
        "title": "Investigate the nested update overflow caused by coalescing",
        "labels": "Type: Bug",
        "id": 45735
    },
    {
        "body": "**What is the current behavior?**\r\n\r\nIf `componentWillMount` has multiple `setState` calls, only the last one works in shallow renderer\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem**\r\nhttps://www.webpackbin.com/bins/-Kw11Ya_ZJ1BcL0rpDKj\r\n\r\nHere, DOM renderer correctly renders \"Hello, world\" while test shallow renderer renders \"undefined, world\". \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nIssue is introduced in React 16.\r\n\r\nThe reason must be those lines, replacing `publicInstance.state` with `this._renderer._newState` should fix it:\r\nhttps://github.com/facebook/react/blob/e932ad68bed656eed5295b61ba74e5d0857902ed/src/renderers/testing/ReactShallowRendererEntry.js#L212-L215",
        "title": "Shallow renderer: subsequent `setState` calls inside `componentWillMount` discard the previous ones",
        "labels": "Type: Bug",
        "id": 45736
    },
    {
        "body": "`<input autoFocus />` works on the client but not when hydrated.\r\n\r\nThat's because this used to be implemented in JS as a special case but `hydrateInstance` doesn't cause a commit effect to be scheduled that can call `.focus()` like `finalizeChildren` does.\r\n\r\nThe question here is, should we even bother implementing this in JS anymore or should we just emit the `autofocus` attribute in SSR and let the browser take care of it.\r\n\r\n",
        "title": "autoFocus doesn't work with SSR in React 16",
        "labels": "Type: Bug",
        "id": 45737
    },
    {
        "body": "Hi, I'm having an issue with `onMouseEnter` being triggered on children of a component. *It only occurs with React 16*.\r\n\r\nI've created a [CodePen that shows the issue](https://codepen.io/testprofile75/pen/VMXXdb).\r\n\r\nSimplified structure is as below:\r\n```\r\n           <Card/> :\r\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\r\n|                            |\r\n|          <Cover/>          |\r\n|                            |\r\n------------------------------\r\n|                            |\r\n|    <div class=\"text\" />    |\r\n|                            |\r\n\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\u2013\r\n```\r\n\r\n`<Card />` is a component that needs to capture `onMouseMove` events (and trigger a `render`) and `<Cover/>` is a simple component that waits for an image (passed as a `prop`) to be loaded before displaying it (using `onload` on an `Image` created in the `constructor`).\r\n\r\nIf you open the console, you'll see that `onMouseEnter` is triggered when hovering `<Card />` (normal behavior), but also when hovering the `.text` div (which is not supposed to happen).\r\n\r\nIf you remove the whole `onload` logic from the `<Cover/>` element, then `onMouseEnter` works as intended.\r\n\r\nIt's possible that I'm coding this in a way that isn't appropriate, but it does look like a bug anyway :)\r\n\r\n",
        "title": "onMouseEnter triggered on children in React 16",
        "labels": "Type: Bug",
        "id": 45738
    },
    {
        "body": "Bug report:\r\n\r\nI noticed a \"Warning: Text content did not match\" warning on certain pages of my isomorphic React app, using React and ReactDOM 16.0.0.\r\n\r\nAfter boiling it down to a simple test case it seems that different kinds of newlines are handled differently, some failing to match. If I do:\r\n\r\n    let test = 'foo\\nbar';\r\n    ...\r\n    <div>{test}</div>\r\n\r\nEverything is fine, no mismatch error and the words are separated in the browser.\r\n\r\nHowever if I do:\r\n\r\n    let test = 'foo\\rbar';\r\n\r\nI get:\r\n\r\n```\r\nWarning: Text content did not match. Server: \"foo\r\nbar\" Client: \"foo\r\nbar\"\r\n```\r\n\r\nExcept in the JS error console the second foobar reads as one word. This seems to be a Chrome issue, mishandling single \\r carriage return. Try `x = 'a\\rb';` and it echoes that string to the console as one word. In the browser I see \"foobar\" as one word.\r\n\r\nMore importantly though if I do Windows newlines:\r\n\r\n    let x = 'foo\\r\\nbar';\r\n\r\nThe result in my app is:\r\n\r\n```\r\nWarning: Text content did not match. Server: \"foo\r\nbar\" Client: \"foo\r\nbar\"\r\n```\r\n\r\nWhich definitely seems like a bug in React's reconciliation logic.\r\n\r\nSetup:\r\nFull list of NPM deps:\r\n\r\n```\r\n  \"dependencies\": {\r\n    \"babel-plugin-transform-object-rest-spread\": \"6.26.0\",\r\n    \"babel-preset-es2015\": \"6.24.1\",\r\n    \"babel-preset-react\": \"6.24.1\",\r\n    \"babel-register\": \"6.26.0\",\r\n    \"express\": \"4.15.3\",\r\n    \"json-bigint\": \"0.2.3\",\r\n    \"moment\": \"2.18.1\",\r\n    \"pm2\": \"2.7.1\",\r\n    \"react\": \"16.0.0\",\r\n    \"react-dom\": \"16.0.0\",\r\n    \"request\": \"2.81.0\",\r\n    \"request-promise-native\": \"1.0.4\"\r\n  },\r\n```\r\n\r\nThis is a Node/Express app on Node 8.4.0. Browser is macOS Chrome 61.0.3163.100\r\n\r\nWorkaround:\r\n\r\nPreprocess any text that's user-uploaded content to normalize the newlines.\r\n",
        "title": "SSR: ReactDOM client and server handling newlines differently causing mismatch warnings",
        "labels": "Type: Bug",
        "id": 45739
    },
    {
        "body": "See internal task 22198152.",
        "title": "\"Cannot read namespaceURI of null\" error when rendering into a comment",
        "labels": "Type: Bug",
        "id": 45740
    },
    {
        "body": "SVG `image` element is not getting onLoad event dispatched on IE11\r\n\r\nExample:\r\nhttps://codepen.io/sahid/pen/NaaRzX\r\n\r\nTested with React 15.1 and 16.0",
        "title": "SVG image onLoad event not getting dispatched on IE11",
        "labels": "Type: Bug",
        "id": 45741
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nReact 15.x was able to render within a DocumentFragment/shadowRoot, not possible with Fiber anymore\r\n\r\n**DEMO**\r\n\r\nhttps://www.webpackbin.com/bins/-KvPFG7-HGfQ34IgUxQt\r\n\r\n```js\r\nimport React, {Component} from 'react'\r\nimport {render} from 'react-dom'\r\n\r\n\r\nclass MyComponent extends Component{\r\n  render(){\r\n    return <div>Hello From React !</div>\r\n  }\r\n}\r\n\r\nclass MyElement extends HTMLElement {\r\n  static is = 'my-element'\r\n  constructor(){\r\n    super()\r\n    const shadowRoot = this.attachShadow({mode:'open'})\r\n    try {\r\n      // this fails \r\n      render(<MyComponent/>, shadowRoot)\r\n    } catch (e){\r\n      console.error(e)\r\n      shadowRoot.innerHTML = `\r\n        <div style=\"color:red;\">${e}</div>\r\n        <div>see console log for stack trace</div>\r\n       `\r\n    }\r\n  }\r\n  connectedCallback(){\r\n    console.log('MyElement mounted!')\r\n  }\r\n}\r\n\r\ncustomElements.define(MyElement.is, MyElement)\r\n```\r\n\r\n\r\nrelated -> https://github.com/skatejs/renderer-react/issues/3\r\n\r\n**What is the expected behavior?**\r\nbe able to render to shadow root like previous versions of React\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16\r\nChrome\r\n",
        "title": "Fiber cannot render to DocumentFragment/ShadowRoot",
        "labels": "Type: Bug",
        "id": 45742
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI report a bug.\r\n**What is the current behavior?**\r\nWhen resetting a form which contains a select with a defaultValue, the selected option becomes the first option element in the list, not the one with value=defaultValue.\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**\r\nI have put a piece of code here : \r\nhttps://codepen.io/zehiro/pen/YrxZWw?editors=1111#0\r\n\r\nClick on the reset button, which just does a form.reset() on the form.\r\n**What is the expected behavior?**\r\nI expect the select to select the option with value=defaultValue (like applying a form.reset() on a `<input/>`\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact-DOM 15.6.2.\r\nIt seems to be browser independent (tried with Chromium 61 and firefox 55 for Fedora).\r\nI didn't try this on prior version of React.",
        "title": "Reset of select ignores defaultValue",
        "labels": "Type: Bug",
        "id": 45743
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug.\r\n\r\n**What is the current behavior?**\r\nAs of React 16, `<noscript dangerouslySetInnerHTML={...} />`s are not properly rehydrated. Equivalent code works in React 15.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**\r\nConsider the following server-side code:\r\n```js\r\nconst React = require('react');\r\nconst ReactDOMServer = require('react-dom/server');\r\n\r\nclass Main extends React.Component {\r\n\r\n    render() {\r\n        const component = React.createElement('strong', {}, 'Hello!');\r\n        const contents = ReactDOMServer.renderToStaticMarkup(component);\r\n        console.log(\"--- Contents: \" + contents);\r\n        return React.createElement('noscript', {\r\n            dangerouslySetInnerHTML: {__html: contents},\r\n        }, null);\r\n    }\r\n\r\n}\r\n\r\nfunction createApp() {\r\n    return React.createElement(Main, {}, null);\r\n}\r\n\r\nconsole.log(ReactDOMServer.renderToString(createApp()));\r\n```\r\nThis code works fine in Reacts 15 and 16 alike; the outputs are similar:\r\n```\r\n// React 15\r\n--- Contents: <strong>Hello!</strong>\r\n<noscript data-reactroot=\"\" data-reactid=\"1\" data-react-checksum=\"1795300394\"><strong>Hello!</strong></noscript>\r\n\r\n// React 16\r\n--- Contents: <strong>Hello!</strong>\r\n<noscript data-reactroot=\"\"><strong>Hello!</strong></noscript>\r\n```\r\n\r\nNow, consider the following application ([jsbin](https://jsbin.com/xonayepave/edit?html,output)):\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n\r\n<!-- React 16 (exhibits bug) -->\r\n<script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\r\n<script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\r\n\r\n<!-- React 15 (does not exhibit bug) -->\r\n<!--\r\n<script crossorigin src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.6.1/react.js\"></script>\r\n<script crossorigin src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.6.1/react-dom.js\"></script>\r\n-->\r\n\r\n\r\n<div id=\"target\"><noscript data-reactroot=\"\"><strong>Hello!</strong></noscript></div>\r\n\r\n<script>\r\nclass Main extends React.Component {\r\n\r\n    render() {\r\n        const contents = '<strong>Hello!</strong>';\r\n        console.log(\"--- Contents: \" + contents);\r\n        return React.createElement('noscript', {\r\n            dangerouslySetInnerHTML: {__html: contents},\r\n        }, null);\r\n    }\r\n\r\n}\r\n\r\nfunction createApp() {\r\n    return React.createElement(Main, {}, null);\r\n}\r\n\r\n(ReactDOM.hydrate || ReactDOM.render)(\r\n    createApp(), document.getElementById('target'));\r\n\r\nconsole.log(\"Initialized.\");\r\n</script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\nIn React 16, this displays the following in the console:\r\n```\r\n[log] --- Contents: <strong>Hello!</strong>\r\n[err] Warning: Prop `dangerouslySetInnerHTML` did not match. Server: \"&lt;strong&gt;Hello!&lt;/strong&gt;\" Client: \"<strong>Hello!</strong>\"\r\n[log] Initialized.\r\n```\r\n\r\nIf you swap the comment blocks in the HTML so that React 15 is used, the code works just fine: there are no warnings. (This is true regardless of whether you change the contents of `div#target` from the React 16 output to the React 15 output.)\r\n\r\nThe error message confuses me; it states that the server output is\r\n```\r\n&lt;strong&gt;Hello!&lt;/strong&gt;\r\n```\r\nbut this is not consistent with the output of the server-side code (neither the \"Contents\" nor the final markup emitted has HTML entities).\r\n\r\nPlease note that this is important because it breaks [the only known workaround][workaround] to #1252.\r\n\r\n[workaround]: https://github.com/facebook/react/issues/1252#issuecomment-246161590\r\n\r\nI believe that this may be specific to `noscript`s, because if one replaces all occurrences of `noscript` with `div` then the example works fine in React 16.\r\n\r\n**What is the expected behavior?**\r\nRendering a component with `renderToString` and then rehydrating that component verbatim should not yield an error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nRegression from 15 to 16. Tested in Chrome v61.\r\n",
        "title": "React 16 fails to rehydrate noscripts",
        "labels": "Type: Bug",
        "id": 45744
    },
    {
        "body": "See the original report in https://github.com/facebook/react/issues/10772#issuecomment-333242375.\r\n\r\nThe problem is that SVG is case sensitive, and so na\u00efvely setting `tabIndex` and relying on insensitivity won't work with it.\r\n\r\nThe good news is it seems like `tabindex` is the only valid [SVG attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute) with this problem. We just missed it because it applies both to HTML and SVG.\r\n\r\nI think the fix is to add it back to the whitelist. ",
        "title": "<svg tabIndex=\"2\"> doesn't work ",
        "labels": "Type: Bug",
        "id": 45745
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe UMD production build linked in the announcement ( https://unpkg.com/react@16.0.0/umd/react.production.min.js ) define global variables `y` and `Nb` (react-dom). \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/ebsrpraL/).**\r\n\r\nUse the build with an app that defined the function or variable `y`, loaded before react.\r\n\r\n**What is the expected behavior?**\r\n\r\nReact builds should not define any other global symbols other than `React`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.0.0. It worked fine with some betas of 16.0.0.\r\n",
        "title": "UMD Production builds define global variables",
        "labels": "Type: Bug",
        "id": 45746
    },
    {
        "body": "\u7248\u672c\uff08versions\uff09\uff1a\r\nreact@16.0.0\r\nreact-dom@16.0.0\r\n\r\n\u63cf\u8ff0\uff08description\uff09\uff1a\r\n\u7ed9\u7236\u7ea7\u522b\u7ed1\u5b9a onMouseEnter \u4e8b\u4ef6\u3002\u5728\u9996\u6b21\u6e32\u67d3\u540e\uff0c\u9f20\u6807\u79fb\u5165\u65b0\u6e32\u67d3\u8fdb\u53bb\u7684\u5b50\u5143\u7d20\u4f1a\u89e6\u53d1\u7236\u5143\u7d20\u7684 onMouseEnter \u4e8b\u4ef6\u3002\r\n\r\n\u793a\u4f8b\uff08demo\uff09\uff1a\r\n\r\n```js\r\nimport React, {Component} from 'react';\r\n\r\nclass Demo extends Component {\r\n    constructor(prop) {\r\n        super(prop);\r\n        this.enter = this.enter.bind(this)\r\n        this.state = {\r\n            flag: false\r\n        }\r\n    }\r\n    enter(event) {\r\n        console.log(event.nativeEvent);\r\n        console.log(\"enter\")\r\n    }\r\n    click() {\r\n        this.setState({flag:!this.state.flag})\r\n    }\r\n    render() {\r\n        let old = {\r\n            height: \"100px\",\r\n            width: \"100px\",\r\n            border: \"1px solid #6dbbff\"\r\n        };\r\n        let aa = {\r\n            height: \"100px\",\r\n            width: \"100px\",\r\n            border: \"1px solid red\"\r\n        };\r\n        let content = {\r\n            border: \"1px solid black\",\r\n            display: \"flex\",\r\n            padding:\"10px\"\r\n        }\r\n        return(\r\n            <div>\r\n                <div style={content} onMouseEnter={this.enter}>\r\n                    {this.state.a}\r\n                    <div style={old}>old</div>\r\n                    <div style={aa}>old</div>\r\n                    {this.state.flag && <div style={aa}>new</div>}\r\n                </div>\r\n                <button onClick={this.click.bind(this)}>\u70b9\u6211\uff08click me\uff09</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n```",
        "title": "In React 16, onMouseEnter is triggered an extra time when entering a new child",
        "labels": "Type: Bug",
        "id": 45747
    },
    {
        "body": "**Bug**:\r\nThe active navbar item is incorrect sometimes.\r\n\r\n**Reproduction steps:**\r\nNavigate to http://reactjs.netlify.com/docs/handling-events.html. Observe that **Synthetic Event** is highlighted.\r\n\r\n**Expected Behavior:**\r\n`Quick Start > Handling Events` should be highlighted.\r\n",
        "title": "[website] Side nav sometimes shows an incorrect \"current\" highlight",
        "labels": "Type: Bug",
        "id": 45748
    },
    {
        "body": "I'd like to report a possible bug.\r\n\r\n1. Brief description\r\nOnFocus synthetic event is fired multiple times on single focus occurrence in Safari. Expected behaviour is for it to be fired only once per focus.\r\n\r\n2. Live demo: https://codesandbox.io/s/101pnjxq27\r\n\r\n3. Minimal steps to reproduce\r\n- install create-react-app\r\n`$ npm install -g create-react-app`\r\n\r\n- create an example application\r\n`$ create-react-app input-focus-test`\r\n`$ cd input-focus-test`\r\n\r\n- edit application file and add input with onFocus event handler\r\n`$ vi src/App.js`\r\n\r\n```javascript\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  handleOnFocus = evt => {\r\n        console.log('handleOnFocus', evt);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to React</h1>\r\n        </header>\r\n        <p className=\"App-intro\">\r\n          To get started, edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p>\r\n          Input\r\n          <input onFocus={this.handleOnFocus}/>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n- start application\r\n`$ npm run start`\r\n\r\n- open up locahost:3000 in Safari\r\n- click on the input field with developer\u2019s console opened\r\n- notice focus event fired multiple times\r\n\r\n4. Additional info\r\nThis issue has been found in the following environment:\r\n- macOS Sierra version 10.12.6 (also tested and found on High Sierra)\r\n- Safari 10.1.2 (also tested and found in Safari 10.0 and Safari 11, seems to work on latest Safari mobile, Chrome and Firefox)\r\n- React JS 15.5.4 (also tested and found in React 16)\r\n- example steps to reproduce above generated with create-react-app version 1.4.1\r\n\r\nSome of our observations that might come in handy:\r\n- this issue seems to behave randomly to some extent\r\n- event is usually fired twice when changing focus from input to input (so first click on input fires two events, consequential fire only one, but when changing focus to a different input field it fires twice again)\r\n- additional interesting behavior happens with multiple input fields; for instance with input fields 1 and 2, first focus on input 1 generates two events onFocus with input 1, but then focus on input 2 sometimes generates three events: onFocus with input 1, then input 2, then input 1 again as targets.\r\n",
        "title": "Multiple onFocus events fired on single focus in Safari",
        "labels": "Type: Bug",
        "id": 45749
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nPage load throws console error: `Warning: Stateless function components cannot be given refs. Attempts to access this ref will fail.null`\r\n\r\n```\r\n// Chrome console\r\n6VM598:27 Warning: Stateless function components cannot be given refs. Attempts to access this ref will fail.null\r\nwindow.console.error @ VM598:27\r\nprintWarning @ warning.js:36\r\nwarning @ warning.js:60\r\nmountIndeterminateComponent @ react-dom.development.js:10488\r\nbeginWork @ react-dom.development.js:10647\r\nperformUnitOfWork @ react-dom.development.js:12621\r\nworkLoop @ react-dom.development.js:12730\r\ncallCallback @ react-dom.development.js:1319\r\ninvokeGuardedCallbackDev @ react-dom.development.js:1358\r\ninvokeGuardedCallback @ react-dom.development.js:1215\r\nperformWork @ react-dom.development.js:12848\r\nbatchedUpdates @ react-dom.development.js:13292\r\nperformFiberBatchedUpdates @ react-dom.development.js:1666\r\nstackBatchedUpdates @ react-dom.development.js:1657\r\nbatchedUpdates @ react-dom.development.js:1671\r\nbatchedUpdatesWithControlledComponents @ react-dom.development.js:1684\r\ndispatchEvent @ react-dom.development.js:1894\r\n```\r\n\r\n**What is the expected behavior?**\r\nNo console error. Or at least some way to trace which is the stateless component that is causing the issue.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n`\"react\": \"^16.0.0-rc.3\",`\r\n`Chrome Version 60.0.3112.113 (Official Build) (64-bit)`\r\n`macOS Sierra 10.12.6`\r\n\r\n\r\n- This error only started to appear after upgrading from React 15 -> 16.",
        "title": "Warning: Stateless function components cannot be given refs. Attempts to access this ref will fail.null after updating to React 16",
        "labels": "Type: Bug",
        "id": 45750
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI've started recieving this warning about my SVGs which is using [feGaussianBlur](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feGaussianBlur): \r\n`Warning: Expected server HTML to contain a matching <feGaussianBlur> in <filter>.`\r\n\r\n**What is the expected behavior?**\r\nShould be no warnings because there are no difference.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nSuch behavior started right after updating to `React 16.0.0-rc.3` and never happened with `React 15.6.1`",
        "title": "Unexpected SSR difference warning with SVG <filter> primitives",
        "labels": "Type: Bug",
        "id": 45751
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n Bug\r\n\r\n**What is the current behavior?**\r\n\r\nLet's say you start filling a form input type text or a select element with `foo`. Then you click on a link and press the back button. The browser back-forward cache will kick in and change the initial value of the form elements. We will get our `foo` value back.\r\nHowever, React doesn't account for it when the component is controlled.\r\n\r\nI have tried reproducing the behavior with jsfiddle with [react@latest](https://jsfiddle.net/d4fovwxx/) and [react@next](https://jsfiddle.net/vm5vouqo/) with no luck as the BFcache doesn't kick in without SSR.\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect React triggering a `onChange` event to replicate the actual form value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React `@latest`.\r\n- Chrome `@latest`\r\n\r\nWe have been [using the following hack](https://github.com/callemall/material-ui/blob/v1-beta/src/Input/Input.js#L349-#L356) on Material-UI:\r\n```js\r\n  componentDidMount() {\r\n    // Fix SSR issue with the go back feature of the browsers.\r\n    // Let's say you start filling the input with \"foo\", you change the page then after comes back.\r\n    // The browser will reset the input value to \"foo\", but we also need to tell React about it.\r\n    this.handleChange({\r\n      target: this.input,\r\n    });\r\n  }\r\n```\r\n\r\nBut it comes with issues: https://github.com/callemall/material-ui/pull/8110.\r\nSo instead, we tried simulating a change event [as suggested in StackOverflow](https://stackoverflow.com/questions/23892547/what-is-the-best-way-to-trigger-onchange-event-in-react-js) but it doesn't work anymore\r\n```js\r\nvar event = new Event('input', { bubbles: true });\r\nelement.dispatchEvent(event);\r\n```\r\n\r\nSo for now, we are going to disable the BFcache with `<form autoComplete=\"off\">`.",
        "title": "BFcache, SSR and form elements",
        "labels": "Type: Bug",
        "id": 45752
    },
    {
        "body": "I don't know if this is a bug or if i am doing it wrong,\r\nWhen i have a component that the render returns an array in Fiber, the rendered returns only the first element\r\n\r\n```javascript\r\nconst Wrap = ({ children }) => children;\r\n\r\ndescribe('Test', () => {\r\n\r\n    it('renders 2 div', () => {\r\n        const rendered = ReactTestRenderer.create(\r\n            <Wrap>\r\n                <div>One</div>\r\n                <div>Two</div>\r\n            </Wrap>\r\n        );\r\n        console.log(rendered.toTree().rendered);\r\n    })\r\n})\r\n```\r\n\r\n**What is the current behavior?**\r\nLog's only the first element\r\n\r\n**What is the expected behavior?**\r\nI think this should be an array of elements\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16\r\n",
        "title": "Tests: toTree on a rendered array",
        "labels": "Type: Bug",
        "id": 45753
    },
    {
        "body": "Observed this on react@16.0.0-beta.5\r\n\r\n```js\r\nimport React from 'react';\r\nimport { renderToString } from 'react-dom/server';\r\n\r\nconst B = () => 'b';\r\n\r\nconsole.log(renderToString(<div>{'a'}<B />{'c'}</div>));\r\n```\r\n\r\nThis renders as `<div data-reactroot=\"\">a<!-- -->bc</div>`. If you try to hydrate this you'll get the error: Text content did not match. Server: \"bc\" Client: \"b\".",
        "title": "Returning plain string from component renders collapsed text nodes on server",
        "labels": "Type: Bug",
        "id": 45754
    },
    {
        "body": "It doesn't work in chrome, IE 11, edge nor chrome on Ubuntu. these browsers report a charCode of 10 and the event dispatcher dismisses it \r\nI've made a pull request with an unobtrusive fix here: #10514 ",
        "title": "ctrl + Enter keypress only works in firefox",
        "labels": "Type: Bug",
        "id": 45755
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?** \r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nWhenever I render SVG elements that are camel cased (e.g. `<linearGradient />`) on the server side,  I get the following warning:\r\n\r\n```\r\nWarning: <linearGradient /> is using uppercase HTML. Always use lowercase HTML tags in React.\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nWarnings should be consistent with the client side rendering, if possible. In this case, I'd expect no warning, since using camel cased SVG element names is pretty standard.\r\n\r\nFor client side rendering, there seems to be a check for the current namespace:\r\n\r\nhttps://github.com/facebook/react/blob/efcac24af26afba90e2ef525509ca40f3bd6f270/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L344-L352\r\n\r\nFor server side rendering, there seems to be currently no such check in place:\r\n\r\nhttps://github.com/facebook/react/blob/81706eeb7a51c1cea7fd8e66733a4f4618155ef5/src/renderers/shared/server/ReactPartialRenderer.js#L537-L544\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nHitting this on 16.0.0-beta.5. Was not hitting it on 15.6.1, the version I was previously on.\r\n\r\nThanks in advance.",
        "title": "Server side rendering: \"Warning: <linearGradient /> is using uppercase HTML. Always use lowercase HTML tags in React.\"",
        "labels": "Type: Bug",
        "id": 45756
    },
    {
        "body": "While working on an app, I was trying to use an image tag, I thought it was something with my setup, but I stripped everything down to zero, as below.\r\n\r\n**index.html**\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n  </head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n  </body>\r\n  <script src=\"./index_bundle.js\"></script>\r\n</html>\r\n```\r\n**index.js**\r\n```\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nReactDOM.render(<img src={'/img/logo.png'} alt=\"vb\" />, document.getElementById('app'));\r\n```\r\n\r\nThe image renders properly, but I get an error in console that reads\r\n```\r\nindex_bundle.js:659 Uncaught TypeError: Cannot read property '__reactInternalInstance$oz59ctes8c' of null\r\n    at Object.getClosestInstanceFromNode (index_bundle.js:659)\r\n    at findParent (index_bundle.js:19989)\r\n    at handleTopLevelImpl (index_bundle.js:20018)\r\n    at ReactDefaultBatchingStrategyTransaction.perform (index_bundle.js:4017)\r\n    at Object.batchedUpdates (index_bundle.js:19940)\r\n    at Object.batchedUpdates (index_bundle.js:1382)\r\n    at dispatchEvent (index_bundle.js:20098)\r\n```\r\n\r\nDigging into the source, the error is thrown from the following function inside ``src/renderers/dom/shared/ReactDOMComponentTree.js``\r\n```\r\n/**\r\n * Given a DOM node, return the closest ReactDOMComponent or\r\n * ReactDOMTextComponent instance ancestor.\r\n */\r\nfunction getClosestInstanceFromNode(node) {\r\n  if (node[internalInstanceKey]) {\r\n    return node[internalInstanceKey];\r\n  }\r\n\r\n  // Walk up the tree until we find an ancestor whose instance we have cached.\r\n  var parents = [];\r\n  while (!node[internalInstanceKey]) {\r\n    parents.push(node);\r\n    if (node.parentNode) {\r\n      node = node.parentNode;\r\n    } else {\r\n      // Top of the tree. This node must not be part of a React tree (or is\r\n      // unmounted, potentially).\r\n      return null;\r\n    }\r\n  }\r\n\r\n  var closest;\r\n  var inst;\r\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\r\n    closest = inst;\r\n    if (parents.length) {\r\n      precacheChildNodes(inst, node);\r\n    }\r\n  }\r\n\r\n  return closest;\r\n}\r\n```\r\n\r\nIt doesn't matter where I put the image, inside a component, surrounded by divs, with siblings, alone. Nothing gets rid of this error.",
        "title": "Adding an image tag inside a react component throws error.",
        "labels": "Type: Bug",
        "id": 45757
    },
    {
        "body": "It surprised me that this doesn\u2019t throw (neither in Stack nor in Fiber):\r\n\r\n```js\r\nReactDOM.render(\r\n  <div>\r\n    {function() {}}\r\n  </div>,\r\n  document.getElementById('container')\r\n );\r\n```\r\n\r\nIsn\u2019t this always indicative of a mistake?",
        "title": "Throw when host component has a function child",
        "labels": "Type: Bug",
        "id": 45758
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug \r\n\r\n**What is the current behavior?**\r\n\r\nReactDOM.render and ReactDOM.unstable_renderSubtreeIntoContainer no longer return created React component instances\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\n```\r\nthis.eParentElement = document.createElement('div');\r\nconst ReactComponent = React.createElement(this.reactComponent, params);\r\nthis.componentRef = ReactDOM.render(ReactComponent, this.eParentElement);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nAfter the steps above this.componentRef should be an instance just created - it is now null with React 16 beta.\r\n\r\nIt's entirely possible that I should be doing something different now, but if so it's not clear what that should be\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16 beta\r\nChrome\r\nOSX\r\n\r\nthanks\r\n",
        "title": "ReactDOM.render()/unstable_renderIntoContainer() doesn't return instance if called during an update",
        "labels": "Type: Bug",
        "id": 45759
    },
    {
        "body": "There is a bug in the React 16 beta server renderer, reported by @7rulnik [in the React 16 beta thread](https://github.com/facebook/react/issues/10294#issuecomment-318231160), where the renderer throws an exception when `style` is included and NODE_ENV is `production`.\r\n\r\nGiven this file:\r\n\r\n```\r\n// index.js\r\nconst React = require('react')\r\nconst ReactServer = require('react-dom/server')\r\nconst foo1 = React.createElement(\"div\", {\r\n  className: \"sign-link\",\r\n  id: \"sign-layout-link\",\r\n  style: { position: 'absolute' }\r\n});\r\n\r\nconsole.log(ReactServer.renderToString(foo1))\r\n```\r\n\r\nIf you run `NODE_ENV=production node index.js`, you'll get:\r\n\r\n```\r\nTypeError: re is not a function\r\n    at /Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/react-dom/cjs/react-dom-server.production.min.js:1:7774\r\n    at /Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/fbjs/lib/memoizeStringOnly.js:23:32\r\n    at f (/Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/react-dom/cjs/react-dom-server.production.min.js:1:2423)\r\n    at b (/Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/react-dom/cjs/react-dom-server.production.min.js:1:3163)\r\n    at e.renderDOM (/Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/react-dom/cjs/react-dom-server.production.min.js:1:9665)\r\n    at e.render (/Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/react-dom/cjs/react-dom-server.production.min.js:1:8762)\r\n    at e.read (/Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/react-dom/cjs/react-dom-server.production.min.js:1:8452)\r\n    at Object.T [as renderToString] (/Users/v7rulnik/projects/kupibilet/internals/kupibilet.ru/node_modules/react-dom/cjs/react-dom-server.production.min.js:1:4384)\r\n    at repl:1:13\r\n    at ContextifyScript.Script.runInThisContext (vm.js:44:33)\r\n```\r\n\r\nWeirdly, dev mode does **not** throw an error.",
        "title": "React 16 server renderer breaks with style object in prod mode",
        "labels": "Type: Bug",
        "id": 45760
    },
    {
        "body": "To reproduce:\r\n* In IE11 (on Win7 or Win10) go to https://jsfiddle.net/robbertbrak/84v837e9/164/\r\n* Open the Developer console.\r\n* Switch to the Microsoft Korean IME (standard settings) and switch to Korean input.\r\n* Put the cursor in the contenteditable div and type `\uc5ec\ub984.` (on a QWERTY keyboard this is typed as `dufma.`).\r\n* Do the same for the input field.\r\nResult: in the developer console a list of composition events and the contents of the data attribute is logged. However, the data of the first `compositionend` event is wrong. It should be \uc5ec, not \uc5ec\ub974. See screenshot below.\r\n\r\n![selection_329](https://user-images.githubusercontent.com/734581/28353791-8c8a1454-6c5d-11e7-9b5f-b98c1a72927f.png)\r\n\r\nYou can see that this is wrong by trying out the same thing on https://dvcs.w3.org/hg/d4e/raw-file/tip/key-event-test.html. As seen in the screenshot below, a plain (non-React) input field emits a `compositionend` event with the proper data.\r\n\r\n![korean-11 413 15063 0](https://user-images.githubusercontent.com/734581/28353853-ccd18628-6c5d-11e7-85e2-9a1cf1a42f40.png)\r\n\r\nThis occurs with the latest version of React, but I have also seen this behaviour in older versions. An example of where this causes problems is in Draft JS.",
        "title": "Incorrect data in compositionend event when typing Korean on IE11",
        "labels": "Type: Bug",
        "id": 45761
    },
    {
        "body": "I'm not sure why but https://github.com/facebook/react/pull/10156 seems to have caused issues in production with us. We'll need to either revert or find a way to fix forward. Right now master is broken, and if we sync again before fixing, we'll break things.",
        "title": "Uncontrolled radio fix is breaking master",
        "labels": "Type: Bug",
        "id": 45762
    },
    {
        "body": "I see `ReactDOMFiber-prod` starts with\r\n\r\n```js\r\nvar invariant = require(\"fbjs/lib/invariant\"), EventListener = require(\"fbjs/lib/EventListener\"), React = require(\"React\"), warning = require(\"fbjs/lib/warning\"), ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\r\n\r\nrequire(\"fbjs/lib/camelizeStyleName\");\r\n\r\nvar hyphenateStyleName = require(\"fbjs/lib/hyphenateStyleName\"), memoizeStringOnly = require(\"fbjs/lib/memoizeStringOnly\");\r\n\r\nrequire(\"prop-types\");\r\n\r\nvar emptyFunction = require(\"fbjs/lib/emptyFunction\"), containsNode = require(\"fbjs/lib/containsNode\"), focusNode = require(\"fbjs/lib/focusNode\"), getActiveElement = require(\"fbjs/lib/getActiveElement\"), shallowEqual = require(\"fbjs/lib/shallowEqual\");\r\n\r\nrequire(\"prop-types/checkPropTypes\");\r\n```\r\n\r\nNotice how `require(\"prop-types\")` shouldn't be there. We probably `require` it and then don\u2019t use it in PROD. We need some mechanism to express a module is pure from side effects, and have Rollup DCE this `require`.",
        "title": "DEV-only requires in FB bundles",
        "labels": "Type: Bug",
        "id": 45763
    },
    {
        "body": "here is an app https://gist.github.com/gre/52e28f74eda0beccc17e880efe18c250\r\nThere is intentionally a bug in this app: the App component returns `<Demo setVariables={v=>this.setState(..)} variables={..} />` and `Demo` calls `setVariables` in componentDidMount and componentWillReceiveProps (it shouldn't, this is bad user code). What this issue raises is a regression behaviour in React 16 compared to 15.\r\n\r\n\r\nin React 15 : it renders but you directly get a `Uncaught RangeError: Maximum call stack size exceeded`.\r\nin React 16 : nothing renders, the app never loads and the browser is spinning forever! I think React is stuck in an infinite recursion.\r\n\r\nI presume this is because fiber is by nature async. The fact things never ends makes it very hard to investigate and isolate the source of the problem in a large codebase.\r\nshould there be some sort of maximum call stack in Fiber ?\r\n\r\n> Context: When we migrated our app to latest React Native recently, we had a weird freezing case: the app was completely unresponsive (no button works) but you could still do native actions like scroll a ScrollView. however, even the RN devtool menu action was not working (like the inspector) \u2013 probably because it involves JS and React was just stuck in this recursion loop.\r\nIn our case, the issue was because calling `relay.setVariables` in lifecycle but with a wrong logic. for some reason our code used to work in the past but now creates this recursion loop.",
        "title": "Fiber infinite recursion in mounting lifecycle",
        "labels": "Type: Bug",
        "id": 45764
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*bug*?\r\n\r\n**What is the current behavior?**\r\nWhen switching from `v15.6.1`'s `development` into `production` mode, the in the examples below defined curried `onBlur` handler suddenly stops working. It seems to have something to do with the number of arguments.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nReact `v15.6.1` (`production`, partially working)\r\nhttp://jsfiddle.net/axc28sfq/\r\n\r\nReact `v15.6.1` (`development`, fully working)\r\nhttp://jsfiddle.net/z0mp7gv5/\r\n\r\nReact `v15.1.0` (`production`, fully working - _also works fine in `development` mode_)\r\nhttp://jsfiddle.net/85w1uL3f/\r\n\r\nReact `v16.0.0-alpha.13` (`development`, partially working)\r\nhttps://jsfiddle.net/z0fystqx/\r\n\r\n**What is the expected behavior?**\r\nWhatever the correct usage of the handler function might be in the end, at least the behavior should stay the same across the different build modes?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis was working fine with `v15.1.0` (`development` and `production`).\r\n",
        "title": "Curried onBlur handler not triggered anymore when using v15.6.1 in production mode",
        "labels": "Type: Bug",
        "id": 45765
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIn mobile safari and some versions of desktop safari `onClick` on any non-anchor element requires two click to trigger if\r\n\r\n* the element contains multiple comment/text nodes AND\r\n* the clicks are on the second or later text nodes AND EITHER\r\n  * the element has padding AND the element is **not** set to, or natively, `display: inline`\r\n  * OR the element has `display: flex` (thanks @malash)\r\n\r\nIt can be worked around by either\r\n\r\n* not having padding on the element OR\r\n* ensuring that the element contains only one text node OR\r\n* adding a single top level element inside the element with the `onClick` and then having multiple text nodes within that instead, e.g. `<span onClick={thing}><span>multi{' '}nodes</span></span>` instead of `<span onClick={thing}>multi{' '}nodes</span>`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nThis can be seen on this fiddle - https://jsfiddle.net/y8Lh8937/\r\n\r\n* First \"Yea\" is a span with one text node, one click works\r\n* Second \"Yea\" is the first text node of a span with padding, one click works\r\n* \"Nah\" is the second text node of a span with padding, *needs two clicks*\r\n* Third and fourth \"Yeah\" have the same markup (span with multiple text nodes) but no padding, one click works\r\n\r\nNote that you'll need to zoom in to make sure you're hitting the \"Nah\" on mobile to reproduce the behaviour, as it's sensitive to the exact area hit.\r\n\r\nNote that on desktop, to ensure that you're clicking on the text, you should be seeing the `text` cursor when over the \"Nah\" items; if you're seeing the `default` cursor then you're on the `<span>` (which will work).\r\n\r\n**What is the expected behavior?**\r\n\r\nAll text nodes should trigger the click handler on the first click.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCurrent react\r\nDesktop Safari 10.1.1 (12603.2.4)\r\nMobile Safari on iOS 10.3.2 (14F89) (use agent `5.0 (iPhone; CPU iPhone OS 10_3_2 like Max OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.0 Mobile/14F89 Safari/602.1`)\r\n\r\nThanks to @scottlyttle and @stella-h for this.",
        "title": "Multiple clicks needed for non-anchor element onClick with padding in Safari",
        "labels": "Type: Bug",
        "id": 45766
    },
    {
        "body": "BUG.\r\n\r\nMouseenter event not triggered when cursor moves from disabled button\r\nsee [example](https://alfa-laboratory.github.io/arui-feather/styleguide/#playground/code=%3Cdiv%3E%0A%20%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20disabled=%7B%20true%20%7D%3EDisabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%0A%20%20%20%20%3Cdiv%20className='row'%3E%0A%20%20%20%20%20%20%20%20Hover%20on%20%20right%20button%20and%20then%20move%20cursor%20to%20left%20button%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20onMouseEnter=%7B()=%3E%7Balert('Hey!');%7D%7D%20%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Not%20Disabled%0A%20%20%20%20%20%20%20%20%20%20%20%20%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%3ENot%20Disabled%3C/button%3E%0A%20%20%20%20%20%20%20%20%3C/div%3E%0A%20%20%20%20%3C/div%3E%0A%20%0A%3C/div%3E)\r\n\r\n\r\n**What is the expected behavior?**\r\nShould trigger Mouseenter event\r\n\r\nReact 15.5.3\r\nLatest Chrome\r\nMacOs 10.12.5",
        "title": "Mouseenter event not triggered when cursor moves from disabled button",
        "labels": "Type: Bug",
        "id": 45767
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn React v16, the callback function that is an optional parameter to the `setState` function is called and passed a value of null.  Previously, in React v15, the function was called with a value of undefined.  This change breaks the default parameters feature of JavaScript.\r\n\r\nI discovered this behavior while working on a React Native project (hence the example using View & Text).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\n```\r\nimport React, {\r\n\tComponent,\r\n} from 'react';\r\n\r\nexport default class MyComp extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({}, (val) => console.log(val))\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<View>\r\n\t\t\t\t<Text>{this.props.climbs}</Text>\r\n\t\t\t</View>\r\n\t\t);\r\n\t}\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe callback function will be called with undefined\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nBroken behavior was observed in React 16 alpha 12 and React Native 0.45.1.  \r\n\r\nI replicated the issue in React 15.4.1 and React Native 0.40.0 and it was working as expected.",
        "title": "setState callback called with null instead of undefined",
        "labels": "Type: Bug",
        "id": 45768
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, following on from https://github.com/airbnb/enzyme/issues/953\r\n\r\n**What is the current behavior?**\r\n\r\nIn `node_modules/react-test-renderer/cjs/react-test-renderer-shallow.development.js`, the callback second argument to `setState` is never called.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\n```js\r\nimport ShallowRenderer from 'react-test-renderer/shallow'\r\n\r\nconst renderer = new ShallowRenderer()\r\nrenderer.render(<YourComponent />)\r\nconst instance = renderer.getMountedInstance()\r\ninstance.methodThatCallsSetState()\r\n// => callback passed into setState as the second argument within methodThatCallsSetState is never called\r\n```\r\n\r\nThe shallow renderer code is as follows:\r\n\r\n```js\r\nUpdater.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState, callback, callerName) {\r\n  if (typeof partialState === 'function') {\r\n    partialState = partialState(publicInstance.state, publicInstance.props);\r\n  }\r\n\r\n  this._renderer._newState = _extends({}, publicInstance.state, partialState);\r\n\r\n  this._renderer.render(this._renderer._element, this._renderer._context);\r\n};\r\n```\r\n\r\nAs you can see, the callback is ignored. In the deep renderer (`node_modules/react-test-renderer/cjs/react-test-renderer.development.js`), the callback _is_ used:\r\n```js\r\nenqueueSetState: function (instance, partialState, callback) {\r\n  var fiber = ReactInstanceMap_1.get(instance);\r\n  var priorityLevel = getPriorityContext(fiber, false);\r\n  callback = callback === undefined ? null : callback;\r\n  {\r\n    warnOnInvalidCallback(callback, 'setState');\r\n  }\r\n  addUpdate$1(fiber, partialState, callback, priorityLevel);\r\n  scheduleUpdate(fiber, priorityLevel);\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe callback is called.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16, `react-test-renderer` v16. I don't know if this worked before.",
        "title": "react-test-renderer/shallow setState callback is never called",
        "labels": "Type: Bug",
        "id": 45769
    },
    {
        "body": "Bug.\r\n\r\nIf I put several input type=\"radio\" with same name (as in jsfiddle example below) onChange handler triggered only once for individual input when mouse click on input happen.\r\n\r\n```jsx\r\n<input type=\"radio\" name=\"some\" onChange={...} />\r\n<input type=\"radio\" name=\"some\" onChange={...} />\r\n...\r\n```\r\n\r\nExample: https://jsfiddle.net/Bacher/jxrar3ke/7/\r\nTry to click on different radio inputs several times. Next clicks has no console.log output.\r\n\r\nI expect trigger onChange every time when I click on non-selected radio input.\r\n\r\nBug reproduces in several latest versions of React, at least 15.6.0 and 15.6.1.\r\nMy OS is Ubuntu. I try in latest Chrome and latest Firefox.",
        "title": "Input with type=radio incorrectly trigger onChange handler",
        "labels": "Type: Bug",
        "id": 45770
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen using `dangerouslySetInnerHtml` of svg elements, the DOM nodes from the previous render aren't being removed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nSee this [fiddle](https://jsfiddle.net/csmrvzsb/1/)\r\n\r\n**What is the expected behavior?**\r\nThe DOM should only contain the last rendered value for `dangerouslySetInnerHTML`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact - 15.5.4+\r\nBrowser - IE11\r\nDid this work in previous versions of React? Not sure\r\n\r\n\r\nAfter digging around I found #6982 . Which made me think this is happening because of [this line](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/setInnerHTML.js#L37) in `setInnerHTML.js` where it looks like this\r\n```js\r\n  // IE does not have innerHTML for SVG nodes, so instead we inject the\r\n  // new markup in a temp node and then move the child nodes across into\r\n  // the target node\r\n  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {\r\n    reusableSVGContainer =\r\n      reusableSVGContainer || document.createElement('div');\r\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';\r\n    var svgNode = reusableSVGContainer.firstChild;\r\n    while (svgNode.firstChild) {\r\n      node.appendChild(svgNode.firstChild);\r\n    }\r\n  }\r\n```\r\n\r\nBecause there's a call to `node.appendChild(svgNode.firstChild);` it will never remove all of the previous nodes but only add the new ones.\r\nBut that's just a guess...",
        "title": "dangerouslySetInnerHTML in IE11 for svg elements",
        "labels": "Type: Bug",
        "id": 45771
    },
    {
        "body": "As migrating from 15.4 to 15.5, I am rewrite original react components with `create-react-class`. \r\n\r\nHowever, there is a warning.\r\n\r\n```\r\nreact-15.5.4.js?bust=1497843639843:3287 Warning: getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\r\n```\r\n\r\n As I am really transferring from a **classic** `React.createClass` definition, I would like to ask is this warning appropriate? Or, this is a depreciation sames as the level of migrating to `create-react-class`?\r\n\r\nOoops, I get ticket #9999  :D",
        "title": "False positive getDefaultProps warning when mixing development and production versions",
        "labels": "Type: Bug",
        "id": 45772
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n```js\r\n<div style={{ '--value': 5 }}></div>\r\n```\r\nbecomes\r\n```html\r\n<div style=\"--value: 5px;\"></div>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nhttps://codepen.io/TrySound/pen/MojVOp\r\n\r\n**What is the expected behavior?**\r\n\r\nLeave values same as they are passed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 15.6.0\r\n",
        "title": "Do not add units to css custom properties",
        "labels": "Type: Bug",
        "id": 45773
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nonClick and onChange doesn't fire on radio buttons on iOS\r\nTypeError: undefined is not an object (evaluating 'descriptor.get.call')\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n```\r\n<input type=\"radio\" name=\"vote\" value=\"0\" onChange={this._sendVote} />\r\n<input type=\"radio\" name=\"vote\" value=\"1\" onChange={this._sendVote} />\r\n```\r\n                                    \r\n**What is the expected behavior?**\r\nonClick and onChange should fire\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.6.0 on iOS. Was working on 15.5.4\r\n",
        "title": "onClick and onChange doesn't fire on radio buttons on iOS",
        "labels": "Type: Bug",
        "id": 45774
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nUndocumented breaking change for IE11\r\n\r\n**What is the current behavior?**\r\nStarting `react-addons-update` v15.5 the package has been changed from depending on an internal file from the `react` package (`react/lib/update.js`) to actually include the full implementation.\r\n\r\nWhile the internal implementation depended on the `object-assign` polyfill, the external one actually calls `Object.assign` directly, breaking support with IE 11.\r\n\r\n- [`react-addons-update@15.4.2`](https://unpkg.com/react-addons-update@15.4.2)\r\n- [`react@15.4.2/lib/update.js`](https://unpkg.com/react@15.4.2/lib/update.js)\r\n- [`react-addons-update@15.2.2`](https://unpkg.com/react-addons-update@15.5.2)\r\n\r\nThis requires users that support IE11 to polyfill `Object.assign`. This was not mentioned in the [release blog post of React 15.5](https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html#react-addons).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\n\u2013\r\n\r\n**What is the expected behavior?**\r\n\r\nAdd a mention of this to the release blog post.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 15.5+. Worked fine in React 15.4.",
        "title": "react-addons-update 15.5.2 uses Object.assign",
        "labels": "Type: Bug",
        "id": 45775
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen mousing into a descendant DOM node that has a different React root, the mouseLeave event on the parent React DOM component is fired unexpectedly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nDemo: https://codesandbox.io/s/lqm3M147\r\n\r\n1. Open the console to see the logs printed.\r\n2. Mouse from the \"Parent\" into the \"Normal Child\", and then back out, and note that `mouseLeave` __does not__ fire\r\n2. Mouse from the \"Parent\" into the \"Portal Child\", rendered by embedding a new React root, and note that `mouseLeave` __does__ fire. Mouse back out, and note that it fires again. Sometimes, it fires multiple times for the enter/exit step.\r\n\r\n**What is the expected behavior?**\r\n`mouseLeave` should not fire when entering/exiting the \"Portal Child\", since it is a descendant node of \"Parent\".\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTested with the following, and the issue is reproducible in all cases\r\n* React 15.4.1 and 15.5.3\r\n* Latest Chrome, Firefox, Safari",
        "title": "Mouseleave events fire unexpectedly when mousing into descendant node with a different React root",
        "labels": "Type: Bug",
        "id": 45776
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nBoth `onClick` and `onClickCapture` called on bubbling phase.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\nDemo shows that event phase in `onClickCapture` for react is incorrect: it's bubbling, but must be capturing. Moreover, `event.nativeEvent` also shows bubbling phase, so probably the reason is not in syntethic event.\r\n\r\nhttps://jsbin.com/xebarapije/2/edit?js,console,output\r\n\r\n**What is the expected behavior?**\r\n`onClickCapture` calls during capturing phase\r\n`onClick` calls during bubbling phase\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact version: `15.5.4`\r\nos: `win7`\r\ndid this work? `don't know`",
        "title": "Synthetic eventPhase doesn't reflect the synthetic phase",
        "labels": "Type: Bug",
        "id": 45777
    },
    {
        "body": "Cant't mount text node components in a child window in **IE11** and **Edge**.\r\n\r\nhttp://jsfiddle.net/69z2wepo/78456/\r\n\r\n```jsx\r\nconst SomeComponent = () => (\r\n  <div>\r\n    <span>This will be displayed</span>\r\n    <br/>\r\n    This will not be displayed (This is the text node that will break the mounting)\r\n    <br/>\r\n    <span>This will not be displayed because the mounting has stopped</span>\r\n  </div>\r\n);\r\n\r\nclass PopoutWindow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      openedWindow: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var win,\r\n        container,\r\n        openedWindow = {};\r\n\r\n    var onLoadHandler = () => {\r\n      container = win.document.createElement('div');\r\n      container.id = 'test';\r\n      win.document.body.appendChild(container);\r\n      ReactDOM.render(this.props.children, container);\r\n      openedWindow.update = newComponent => {\r\n        ReactDOM.render(newComponent, container);\r\n      };\r\n      this.setState({openedWindow: openedWindow});\r\n    };\r\n\r\n    win = window.open('about:blank', 'Test', 'width: 600px; height: 600px'); \r\n\r\n    win.onload = onLoadHandler;\r\n\r\n    // call onload handler in case it's not been called\r\n    setTimeout(onLoadHandler, 0);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.state.openedWindow.update(this.props.children);\r\n  }\r\n\r\n  render() {\r\n    return <div />;\r\n  }\r\n}\r\n\r\nReactDOM.render((\r\n  <PopoutWindow title=\"Test\">\r\n    <SomeComponent />\r\n  </PopoutWindow>\r\n), container);\r\n```\r\n\r\nIt throws the following error: `SCRIPT87: Invalid argument.`\r\n\r\nDebugging the stack trace I've noticed that the fragment creation (`ownerDocument.createDocumentFragment()`, line 7923, `react-dom.js`) is resulting in a malformed fragment. Later, when trying to append this \"malformed\" fragment to the DOM (`parentNode.insertBefore(tree.node, referenceNode)`, line 1623, `react-dom.js`), it fails and throws that error.\r\n\r\nI tried to replace the fragment by a span element for this specific case (IE11 and child window) and it worked. Could this be a solution?",
        "title": "Cant't mount text node components",
        "labels": "Type: Bug",
        "id": 45778
    },
    {
        "body": "When creating an Element with a ref from inside of a constructor an error is thrown in production mode, but not in dev mode.\r\n\r\nHere is a minimal sample:\r\nhttps://jsfiddle.net/84v837e9/35/\r\n\r\nAn error, \"Only a ReactOwner can have refs\", should happen in dev and production modes.\r\n\r\nThis is happening in React 15.4",
        "title": "No error when element with ref created in another elements constructor in dev environment.",
        "labels": "Type: Bug",
        "id": 45779
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nCalling `this.isMounted()` in `componentWillUnmount` in prior versions would return `true`. Now it returns `false`.\r\n\r\nI believe this was untested behavior before, but the new tests that were added may check the wrong value: https://github.com/facebook/react/blob/master/src/isomorphic/classic/class/__tests__/create-react-class-integration-test.js#L417 Changing this line to test for `true` will exhibit the behavior.\r\n\r\nThe fix would be to defer setting the  `__isMounted` flag to `false` until after all mixins and the `componentWillUnmount` method were called on the component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n15.5.x and anything using `create-react-class` is broken. Working correctly in 15.4.x with `React.createClass`.\r\n",
        "title": "isMounted behavior different with `create-react-class`",
        "labels": "Type: Bug",
        "id": 45780
    },
    {
        "body": "https://jsfiddle.net/3apqnhmw/\r\n\r\n```jsx\r\nclass Foo extends React.Component {\r\n  render() {\r\n     return <div>Foo</div>\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return Foo\r\n  }\r\n}\r\n```\r\n\r\nWhen `App` returns `Foo` instead of `<Foo />` accidentally, Fiber does not catch this.",
        "title": "[Fiber] returning functions from render does not throw",
        "labels": "Type: Bug",
        "id": 45781
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nReact allows a dot in a controlled input that doesn't allow changing the value, if the value set as a prop is a number. If it's a string the issue is not present.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nhttps://jsfiddle.net/84v837e9/23/\r\n\r\nIn this example the first input allows a dot, even though the code doesn't allow changes. The second input doesn't allow the dot.\r\n\r\n**What is the expected behavior?**\r\nThe dot shouldn't be allowed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nversion 15.5.4, Chrome and Firefox (see the jsfiddle example)",
        "title": "Controlled input allows dot",
        "labels": "Type: Bug",
        "id": 45782
    },
    {
        "body": "With the following, using the latest alpha (10) and `jsdom` 9.12.0:\r\n\r\n```js\r\nconst ReactTestUtils = require('react-dom/test-utils')\r\n\r\nconst Foo = () => (\r\n  React.createElement(\r\n    'div',\r\n    null,\r\n    React.createElement('img', { src: 'foo.jpg'})\r\n  )\r\n)\r\n\r\nReactTestUtils.renderIntoDocument(\r\n  React.createElement(Foo)\r\n)\r\n```\r\n\r\nThe following error is thrown:\r\n\r\n```\r\nTypeError: Cannot read property 'nodeName' of null\r\n    at shouldUseChangeEvent (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:6310:22)\r\n    at Object.extractEvents (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:6495:9)\r\n    at Object.extractEvents (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:715:46)\r\n    at Object.handleTopLevel [as _handleTopLevel] (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:772:35)\r\n    at handleTopLevelImpl (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:7051:24)\r\n    at batchedUpdates (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:14806:14)\r\n    at performFiberBatchedUpdates (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:6161:10)\r\n    at stackBatchedUpdates (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:6152:10)\r\n    at batchedUpdates (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.js:6166:10)\r\n    at Object.batchedUpdatesWithControlledComponents [as batchedUpdates] (/Users/brandondail/projects/react-tester/node_modules/react-dom/cjs/react-dom.development.\r\njs:6179:12)\r\n```\r\n\r\nThe issue is that [`completeWork` calls `finalizeInitialChildren`](https://github.com/facebook/react/blob/b1768b5a48d1f82e4ef4150e0036c5f846d3758a/src/renderers/shared/fiber/ReactFiberCompleteWork.js#L275-L279) before it [sets the `stateNode`](https://github.com/facebook/react/blob/b1768b5a48d1f82e4ef4150e0036c5f846d3758a/src/renderers/shared/fiber/ReactFiberCompleteWork.js#L285) on the `workInProgress`.\r\n\r\n `finalizeInitialChildren` eventually calls `setValueForProperty` for the image tag, which sets the `src` property, and causes jsdom to trigger an event. The top level event listener then [grabs that instance](https://github.com/facebook/react/blob/4c292facc9fa176cd0a8a094b38fc1800650325f/src/renderers/dom/shared/ReactEventListener.js#L178), which has no `stateNode` which eventually triggers the error.\r\n\r\n`ReactTestUtils` is likely to be used frequently with jsdom so I think it's important to support. Is this something that can be addressed in Fiber?",
        "title": "ReactTestUtils: event dispatched before workInProgress stateNode is set",
        "labels": "Type: Bug",
        "id": 45783
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nI have a number input with defalut value 0 and in onChange function I'll parse value to float to avoid invalid input, but I'll always get left pad 0 on input UI. But in previouse version, my code works.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n<input type=\"number\" value={this.state.value} onChange={e=>this.setState({value: parseFloat(e.target.value)? parseFloat(e.target.value) : 0})}\r\n\r\n**What is the expected behavior?**\r\nShould not have left pad 0.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact 15.5.3, all browser / all OS. It works in 15.4.2",
        "title": "A number input will always have left pad 0 though parseFloat value in onChange",
        "labels": "Type: Bug",
        "id": 45784
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n```\r\nCannot find module './ReactReconcileTransaction' from 'ReactShallowRenderer.js'\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n\r\n```\r\n$ yarn add --dev react-test-renderer\r\n```\r\n\r\n```js\r\n// Component.test.js\r\n\r\nconst ReactShallowRenderer = require('react-test-renderer/shallow') // Cannot find module error\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThat `ReactReconcileTransaction` module is included in `react-test-renderer` package.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n15.5.1\r\n\r\n---\r\n\r\nIf this is something relatively simple, I wouldn't mind making my first PR to React if given a nudge in the right direction. I looked already in the grunt tasks for building the packages, but nothing stood out.",
        "title": "Cannot find module './ReactReconcileTransaction' from 'ReactShallowRenderer.js' in `react-test-renderer`",
        "labels": "Type: Bug",
        "id": 45785
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nWhen using rollup in a project that imports the latest React `16.0.0-alpha7`, the bundle ends up containing both `react-development.js` and `react-production.min.js`, and the file size is unnecessarily large. \r\n\r\nMy guess - This happening because the entry point of react was changed recently to \r\n```js\r\nif (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('./cjs/react.production.min.js');\r\n} else {\r\n  module.exports = require('./cjs/react.development.js');\r\n}\r\n```\r\nand rollup apparently[ cannot eliminate exports in dead branches](https://github.com/rollup/rollup/issues/208) even when replacing `process.env.NODE_ENV` with production. \r\n\r\nUglify also cannot remove the dead code, because rollup seems to hoist `require`d stuff to the top level.\r\n**Online Demo**: Try building `react@next` using [this tool](https://cost-of-modules.herokuapp.com) that uses rollup to report package sizes. Compare that to searching for just `react`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\nSteps to reproduce:\r\n1) Import react in any project that uses rollup to bundle.\r\n2) Use [rollup-plugin-replace] (https://github.com/rollup/rollup-plugin-replace) to replace `process.env.NODE_ENV` with production.\r\n3) Use `rollup-plugin-node-resolve`,  `rollup-plugin-commonjs` and `uglifyjs` plugins  so that rollup understands commonjs exports and minifies stuff.\r\n4) Check the bundle size, it is 47.5kB. \r\n\r\n**What is the expected behavior?**\r\nSize should be much smaller.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThe size is fine when using `15.4.2` because the entry point reads as\r\n```js\r\n'use strict';\r\n\r\nmodule.exports = require('./lib/React');\r\n```",
        "title": "React 16.0.0-alpha 7 does not bundle correctly in a project using rollup",
        "labels": "Type: Bug",
        "id": 45786
    },
    {
        "body": "With 15.5.0-rc.1, I get\r\n```\r\nUncaught TypeError: Cannot read property 'firstChild' of null\r\n    at precacheChildNodes (react-dom.js:6619)\r\n    at getNodeFromInstance (react-dom.js:6714)\r\n    at ReactDOMComponent.trapBubbledEventsLocal (react-dom.js:5772)\r\n    at CallbackQueue.notifyAll (react-dom.js:948)\r\n    at ReactTestReconcileTransaction.close (react-dom.js:12207)\r\n    at ReactTestReconcileTransaction.closeAll (react-dom.js:14993)\r\n    at ReactTestReconcileTransaction.perform (react-dom.js:14940)\r\n    at ReactUpdatesFlushTransaction.perform (react-dom.js:14927)\r\n    at ReactUpdatesFlushTransaction.perform (react-dom.js:13047)\r\n    at Object.flushBatchedUpdates (react-dom.js:13130)\r\n```",
        "title": "TypeError: Cannot read property 'firstChild' of null at precacheChildNodes (react-dom.js:6619)",
        "labels": "Type: Bug",
        "id": 45787
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nWhen running `npm run build`, I get the following error:\r\n```\r\nCreating an optimized production build...\r\nFailed to compile.\r\n\r\nstatic/js/main.6a1ea184.js from UglifyJs\r\nSyntaxError: Name expected [./~/react-addons-create-fragment/index.js:343,0]\r\n\r\nerror Command failed with exit code 1.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\nThe react-addons-create-fragment/index.js:343 is a line with destructuring assignment. I think code in the distributable should be es5.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\n* using create-react-app, create an app\r\n* add material-ui (`npm install --save material-ui`)\r\n* import Drawer (`import Drawer from 'material-ui/Drawer'`)\r\n\r\n**What is the expected behavior?**\r\nThis will build properly with `npm run build`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nunknown",
        "title": "react-addons-create-fragment destructuring assignment remains in distributed code",
        "labels": "Type: Bug",
        "id": 45788
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen a focussed button becomes disabled, React does not dispatch a blur event.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n1. Attach a blur event to a button\r\n2. Focus the button\r\n3. Make the button disabled or remove it from the DOM\r\n\r\n**What is the expected behavior?**\r\nA blur event will be dispatched.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.1.0, not sure if it worked in previous versions.\r\n\r\nIsolated test case: http://jsbin.com/fuvite/1/edit?html,css,js,output",
        "title": "No blur event fired when button is disabled/removed",
        "labels": "Type: Bug",
        "id": 45789
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug-ish\r\n\r\n**What is the current behavior?**\r\nWhen doing server-side rendering with React, requiring `react-dom` (which transitively requires `ReactDOMFrameScheduling.js`) throws an exception because rAF is not defined.\r\n\r\n```\r\nInvariant Violation: React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers.\r\n    at invariant (app/node_modules/fbjs/lib/invariant.js:44:15)\r\n    at Object.<anonymous> (app/node_modules/react-dom/lib/ReactDOMFrameScheduling.js:30:3)\r\n```\r\n\r\nThis can happen if you have a universal component that has top-level imports of client-side libraries, like `react-router-scroll`, that require `react-dom` instead of `react-dom/server`.\r\n\r\n**What is the expected behavior?**\r\nI would expect not to get this error unless requestAnimationFrame were actually called. Ex: lazily check for rAF and define rIC.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.0.0-alpha.3 on Node 7.7.1. This started happening in alpha 3, which shipped and enabled Fiber.\r\n",
        "title": "[Fiber] Check for requestAnimationFrame throws when react-dom is required on the server",
        "labels": "Type: Bug",
        "id": 45790
    },
    {
        "body": "I found a bug in IE11.\r\nReact version is 15.4.0.\r\n\r\nPasting text in text box does not fire change event on IE11.\r\n\r\nhttps://jsfiddle.net/mashimonator/uh699v8d/6/",
        "title": "Pasting text in text box does not fire change event on IE11.",
        "labels": "Type: Bug",
        "id": 45791
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nSetting the value to `\"\"` on a `<select>` with `size` > 3 does not deselect the currently selected option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\nJSFiddle: https://jsfiddle.net/rpbiwer/55jzq7dq/2/\r\n\r\n**What is the expected behavior?**\r\nAfter rendering a `<select>` with the value set to an empty string, I expect there to be no selection in the rendered select box. Mainly this expectation comes from this React warning when I use `null` instead of `\"\"`:\r\n```\r\nWarning: `value` prop on `select` should not be null. Consider using the empty string to clear the component or `undefined` for uncontrolled components.\r\n```\r\n\r\nIn the fiddle, if I change this line:\r\n```javascript\r\nlet newSelection = nowHidden ? \"\" : this.state.selected;\r\n```\r\nto\r\n```javascript\r\nlet newSelection = nowHidden ? undefined : this.state.selected;\r\n```\r\nI get the behavior I expect.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI've gotten this with React 15.3.0 and whichever version is used in the fiddle. I don't know if it worked in previous versions.\r\nThis was tested using Chrome 56 on OS X.",
        "title": "Change warning for <select value={null} /> to suggest an empty array rather than empty string",
        "labels": "Type: Bug",
        "id": 45792
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug!\r\n\r\n**What is the current behavior?**\r\n\r\nWhen rendering an `input` element of type `checkbox` with an `onClick` and `onChange` handler, `onChange` is still called even though `event.preventDefault()` is called in the `onClick` handler.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\nhttp://jsfiddle.net/rf3w7apc/\r\n\r\n**What is the expected behavior?**\r\n\r\nCalling `event.preventDefault` in the `onClick` handler should prevent the default action  from occurring (or undo its effect), which is to update the value of the `input` element. This should stop any `change` event listener from being invoked. See https://jsfiddle.net/L1eskzsq/ for expected behavior\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested using a build from master, macOS 10.12.2, verified in:\r\n\r\n* Chrome  56.0.2924.87 (64-bit)\r\n* Firefox 51.0.1 (64-bit)\r\n\r\nSafari 10.0.2 calls the `change` event listener in both cases.\r\n",
        "title": "event.preventDefault in click handler does not prevent onChange from being called",
        "labels": "Type: Bug",
        "id": 45793
    },
    {
        "body": "**Bug**\r\nFor iOS only.\r\nWhen pressing `clear` on a date input, the `onChange` event is fired but` event.target.value` is showing the original value rather than an empty string.\r\n\r\n**What is the current behavior?**\r\nOn Chrome and Android, when the clear button is pressed the onChange event has a value of `''`.\r\nOn iOS when the clear button is pressed the onChange event has a value of `previousValue`.\r\n\r\n**Demo**\r\nhttps://output.jsbin.com/zojuteloto/5/\r\nTry on Chrome/Android. Then on iOS.\r\n\r\n**What is the expected behavior?**\r\nValue should be returned an an empty string.\r\n\r\n**Versions**\r\nAffects React 15+ & iOS 10. Unsure of previous versions.\r\n",
        "title": "Clear button on iOS date input does not return correct event value",
        "labels": "Type: Bug",
        "id": 45794
    },
    {
        "body": "I would like to point out a specific behaviour when using React with IE and Edge.\r\n\r\nI am building a user-computer chat application where users are presented prompts to navigate them through a user journey. One of the steps is where the user enters a street name/postcode and they are presented a list of addresses to choose from. Therefore I have a step with a text input field which after the user submits disappears for a list of addresses to appear.\r\n\r\nI have an example where there are two ways for submitting. One is by clicking on a send button, and the other is by hitting 'Enter' on a keyboard. When the user uses the mouse submission everything is ok on all browsers, however if the user presses the keyboard key then click events do not work as expected on IE and Edge.\r\n\r\nMy assumption is that the problem comes because the field that has the focus is deleted from the DOM but I can't be sure. To make things stranger I could only reproduce the issue by putting the addresses in the list in two nested div elements with display:flex set in the styles.\r\n\r\nHere is a link to a fiddle: https://jsfiddle.net/rcvx5uLt/\r\n\r\nExpected: After a value is entered in the input and enter is pressed or send is clicked I would expect the list of addresses provided to be clickable.\r\n\r\nActual:\r\n- When a value is entered end send is clicked with the mouse the events on the list items can be tracked.\r\n- When a value is entered and Enter is pressed the events on the list can't be tracked.\r\n\r\n\r\nI am using react 15.4.2 with IE 11.713.10586.0 and  Edge 25.10586.672.0/EdgeHTML 13.10586.\r\n",
        "title": "Problems with click events on IE and Edge",
        "labels": "Type: Bug",
        "id": 45795
    },
    {
        "body": "I found this exception when trying to use react perf tools with components that internally uses `ReactDOMServer.renderToStaticMarkup`.\r\n\r\n```js\r\nUncaught TypeError: Cannot read property 'parentID' of undefined\r\n    at https://unpkg.com/react-dom@15.4.0/dist/react-dom.js:10986:50\r\n    at Array.forEach (native)\r\n    at https://unpkg.com/react-dom@15.4.0/dist/react-dom.js:10980:16\r\n    at Array.forEach (native)\r\n    at getWasted (https://unpkg.com/react-dom@15.4.0/dist/react-dom.js:10971:16)\r\n    at Object.printWasted (https://unpkg.com/react-dom@15.4.0/dist/react-dom.js:11142:15)\r\n    at eval (eval at transform.run (https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.24/browser.js:5811:10), <anonymous>:35:19)\r\n    at exec (https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.24/browser.js:5866:21)\r\n    at runScripts (https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.24/browser.js:5903:3)\r\n```\r\n\r\nMinimal reproducible case: https://jsfiddle.net/niwinz/3dw7mt8u/3/\r\n\r\nA different but mostly related exception is happens when `?react_perf` is used in the url.\r\n\r\nYou may be asking yourself, why I need to use reactserverdom together with reactdom...  I need it to render a svg into a blob and then use that's blob uri as background-url style attribute. I have also other use cases when I need to render to string instead to directly to the dom, so I think that is reasonable usage.",
        "title": "Unexpected exception on using React Perf tools ",
        "labels": "Type: Bug",
        "id": 45796
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIn Edge the onBeforeInput event is fired after Edge has already made changes to the DOM negating the purpose of the event and breaking the assumptions of components built on this event, such as Draft.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\nhttps://jsfiddle.net/max_winderbaum/yv38s3xe/3/ demonstrates the issue in general but to see the effects on other components consider these steps\r\n\r\n1. Go to https://facebook.github.io/draft-js\r\n2. Type `hello world`\r\n3. Bold `hello`\r\n4. Underline the space between the words\r\n5. Select both `hello` and the space and press `a`\r\n6. The entire control's text is replaced with `a`\r\n7. Hit undo several times to observe further broken states until finally React fails with a `NotFoundError` in `removeChild`\r\n\r\nThis issue is opened in Draft because the core issue is that onBeforeInput is misbehaving on Edge and so breaks Draft's assumptions.\r\n\r\n**What is the expected behavior?**\r\n\r\nonBeforeInput should fire before any changes occur in the DOM\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis repros in the latest version of Draft.\r\n\r\nThe root cause here is the same root cause as in #7269, although that issue no longer repros. The fix referenced in that issue, #7270, fixes this issue as well.\r\n",
        "title": "onBeforeInput fires after Edge updates the DOM",
        "labels": "Type: Bug",
        "id": 45797
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nMissing copyright licence\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\nSee https://markssoftware.com/2017/01/14/npm-is-lying-to-you-and-facebook-is-stealing-copyright/\r\n**What is the expected behavior?**\r\nNot a lawyer, Facebook should know how to show MIT according to their policies.\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nChecked current version 15.4.2? All OSes and this is probably in previous versions.",
        "title": "Missing object-assign licence (please check others)",
        "labels": "Type: Bug",
        "id": 45798
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nreport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nbroken link in the first section of https://github.com/facebook/react/blob/master/docs/tutorial/tutorial.md\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\nN/A\r\n\r\n**What is the expected behavior?**\r\n\r\nLink should go to a working version of tic-tac-toe on codepen\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nN/A\r\n",
        "title": "Broken link in react tutorial",
        "labels": "Type: Bug",
        "id": 45799
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nboth.\r\n\r\n**What is the current behavior?**\r\n\r\nThere is a existed issue [#3926](https://github.com/facebook/react/issues/3926) but it is just one of the problems in some kind of browsers.\r\n\r\nI have uploaded the detail, demo files, test results and temporary solution in [react-compositionevent](https://github.com/eyesofkids/react-compositionevent)\r\n\r\nThe main problem is when users type these words from IME(Chinese, Japanese or maybe Korean) and do something like search the database or filter out from some data, sometimes these functions will be unworkable. For example, if users type \"ni\" during the composition session, maybe it will be one of \"\u4f60\u5c3c\u6ce5\u817b\" in Chinese or one of \"\u306b\u30cb\u5c3c\u716e\" in Japanese. But in this moment, the `change` event also be fired. If the search or filter functions of the application are designed to be invoked when `change` event occured, there maybe something wrong logically. These functions should be invoked after users finished the composition session.\r\n\r\nIn React, there are three synthetic events - `onCompositionEnd`, `onCompositionStart` and `onCompositionUpdate`. If the input components(`<input...>` and `<textarea.../>`) are \"uncontrolled\", we can use them to help `onChange` to capture the text correctly. The only different point is Google Chrome change its events sequence after v53. Check [Cinput.js](https://github.com/eyesofkids/react-compositionevent/blob/master/uncontrolled/Cinput.js) and [Ctextarea.js](https://github.com/eyesofkids/react-compositionevent/blob/master/uncontrolled/Ctextarea.js) files.\r\n\r\nBut if these input components are \"controlled\", it will be hard to solve the problem.\r\n\r\nBecause these the `value` of a controlled component is came from `state`. We can't modify `state` directly and the only way to update state is using `this.setState()` to schedule update. But `this.setState()` may be asynchronous.\r\n\r\nAfter test, i found different OS/browsers could have different results. I have written some code to solve it. But i thought it isn't a good solution. It uses the browser detection and two properties of the `state` object. One is for input, another is for internal functions(search, filter...etc). It can't just use one property of the `state` object because i can't stop any `change` events, state need it to update the value of the input element. If i stop some change events during composition session, i would get nothing after typing these words from IME.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\r\n\r\nYou can use online test demo: [https://eyesofkids.github.io/](https://eyesofkids.github.io/)\r\nor use a normal input component(controlled/uncontrolled) to test.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input(and textarea) controlled components in React should ensure these fired \"change\" and \"composition\" events is consistent in different browsers. I found there are 3 different results(events fired sequence) at least.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 15.4.1\r\n- browsers: chrome, firefox, safari, opera, ie, edge\r\n- OS: macOS, win7, win10",
        "title": "Composition Events(Chinese, Japanese IME) problem in controlled components(input, textarea)",
        "labels": "Type: Bug",
        "id": 45800
    },
    {
        "body": "**What is the current behavior?**\r\nUsing `.stopPropagation` in an `onFocus` event on a textarea or its parent causes the cursor to disappear or render at an incorrect location in Firefox.\r\n\r\nYou can see the vanishing cursor [at this fiddle](https://jsfiddle.net/aq59me3d/3/). There are no issues on Chrome and Edge, but FireFox 50.1.0 has this problem. In my full app, the cursor doesn't vanish but rather moves elsewhere (italics are placeholder text):\r\n\r\n<img width=\"118\" alt=\"2016-12-25\" src=\"https://cloud.githubusercontent.com/assets/2739312/21473053/83e67f52-cac5-11e6-8b6c-1e1f98289bb6.png\">\r\n<img width=\"88\" alt=\"2016-12-25 1\" src=\"https://cloud.githubusercontent.com/assets/2739312/21473058/a0e1f168-cac5-11e6-872e-70d8e6d83c93.png\">\r\n<img width=\"66\" alt=\"2016-12-25 2\" src=\"https://cloud.githubusercontent.com/assets/2739312/21473055/8836dc5a-cac5-11e6-8adc-4edb65763104.png\">\r\n\r\nI have not reproduced this behavior in the fiddle.\r\n\r\n**What is the expected behavior?**\r\nIt's hard to say what the expected behavior is, since the real `focus` event does not bubble. [Here](https://jsfiddle.net/axacmxfv/)'s a fiddle to show that the cursor position is not affected when the event is stopped in a vanilla-JS environment.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThe fiddle shows the issue with `15.4.1` on FF (on Windows 10).  I saw the same issue on `15.3`. \r\n\r\n**Why stopPropagation**\r\nBefore I get eaten alive for using this, I'll just say that having a non-bubbling focus event simplifies one of the interactions I'm setting up. Specifically, my app has a bunch of widgets that can be marked active. When a user clicks into a field in the widget, that widget should be marked active. However, widgets can be nested in other widgets, in which only the inner-most widget should be marked active.",
        "title": "textarea + onFocus + stopPropagation = incorrect cursor rendering on Firefox",
        "labels": "Type: Bug",
        "id": 45801
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nonly when `NODE_ENV=production`: `null` is being passed as first argument to `componentDidMount`. this becomes an issue when a default param is specified for `componentDidMount`.\r\n\r\nfrom the backtrace from the componentDidMount call it seems like the difference between 15.3 and 15.4 is the extra `arg` argument in this line:\r\n\r\nhttps://github.com/facebook/react/blob/308e0b77863071f31cff7aec74e359603526274e/src/renderers/shared/stack/reconciler/CallbackQueue.js#L73\r\n\r\n**Repro**\r\nhttps://github.com/kentor/throwaway/tree/master/react-15.4-breaks-default-param\r\nclone the project then cd into it\r\n```\r\ncd react-15.4-breaks-default-param\r\nyarn\r\nnpm run dev\r\n```\r\nopen  localhost:9966 (with an es6 supported browser) and open the console, it should log a message. kill the wzrd process\r\n\r\nthen run\r\n```\r\nnpm run prod\r\n```\r\nthen refresh localhost:9966, the console should log null\r\n\r\n**What is the expected behavior?**\r\nthey should either both log `this should be logged` or they should both log `null`. development build and production build shouldn't differ in this regard\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.4. Everything was OK in 15.3",
        "title": "15.4 breaks default param behavior on componentDidMount in production build",
        "labels": "Type: Bug",
        "id": 45802
    },
    {
        "body": "I think this is a bug that only happens in \"non-prod\" mode.\r\n\r\nI noticed this using the react-dropzone library but I think I found a simple use case to reproduce the problem.  If you check out the [fiddle](https://jsfiddle.net/69z2wepo/64978/) you can see that click handler is called twice even though the element is only clicked once.  Here is an example showing it [\"working and not working\"](https://jsfiddle.net/f2ntq2h6/1/)  \r\n\r\nI believe it has something to do with the outer div's click listener and this chunk of code:\r\n\r\n```js\r\nif (true) {\r\n  /**\r\n   * To help development we can get better devtools integration by simulating a\r\n   * real browser event.\r\n   */\r\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\r\n    var fakeNode = document.createElement('react');\r\n    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {\r\n      var boundFunc = func.bind(null, a);\r\n      var evtType = 'react-' + name;\r\n      fakeNode.addEventListener(evtType, boundFunc, false);\r\n      var evt = document.createEvent('Event');\r\n      // $FlowFixMe https://github.com/facebook/flow/issues/2336\r\n      evt.initEvent(evtType, false, false);\r\n      fakeNode.dispatchEvent(evt);\r\n      fakeNode.removeEventListener(evtType, boundFunc, false);\r\n    };\r\n  }\r\n}\r\n```\r\n\r\nI tested this on Chrome/Mac I have also seen this behavior on React 14.8.\r\n",
        "title": "Click handler can get called twice in \"non-prod\" mode.",
        "labels": "Type: Bug",
        "id": 45803
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nStrange behavior : a form is submitted when I click a `button[type=button]`\r\n\r\nThe following sequence induce this behavior \r\n+ click on `button[type=\"button\"]`\r\n+ call setState()\r\n+ button is transformed into a `button[type=submit]`\r\n+ the form submission handler is called \ud83e\udd14\r\n\r\n**What is the expected behavior?**\r\n\r\nA `button[type=button]` is not expected trigger form submit.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI reproduced with react@__0.14.8__ and __15.4.0__ with Google Chrome v54 and Firefox v50 ([see this fiddle](http://www.webpackbin.com/Ey4LVhDQM))\r\n\r\n_This behavior does not happen if I add an unique `key` property to both my buttons_ ",
        "title": "Form submitted on `button[type=button]` click",
        "labels": "Type: Bug",
        "id": 45804
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n- Type text \"123\" in an input\r\n- Select the whole text\r\n- Type the `A` key\r\n\r\nWhen hitting the `A` key, `onChange` is triggered twice. One time `event.target.value` is `\"\"`. The second time it's `\"A\"`.\r\n\r\nThis only happens in IE10. IE9 and IE11 both behave correctly.\r\n\r\n**Demo fiddle**\r\n\r\nhttps://jsfiddle.net/69z2wepo/64637/\r\n\r\n![ie10onchange](https://cloud.githubusercontent.com/assets/524089/21014764/8883c6fa-bd5f-11e6-8e9c-65a957bbca7e.gif)\r\n\r\n**What is the expected behavior?**\r\nWhen hitting the `A` key, `onChange` is triggered only one time. `event.target.value` should be `\"A\"`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 15.4.1 (possibly also older versions)\r\n- IE10 / Windows 7\r\n",
        "title": "IE10 triggers onChange twice when replacing a text selection ",
        "labels": "Type: Bug",
        "id": 45805
    },
    {
        "body": "If you control a textarea with **value**, it behaves differently when you use undo. When the textarea is controlled, you can only undo one letter at a time. This is not how undo works normally with an uncontrolled component. Undo seems to work as expected with input components.\r\n\r\nWith a controlled textarea component, you can only undo one letter at a time. The normal undo works with some kind of algorithm for how much is going to be un- or redone.\r\n\r\nYou can try the difference in this codepen:\r\n\r\nhttps://codepen.io/fabsor/pen/LbmBOv\r\n\r\nTested with React 15.3.1 and Chrome 54 and Chrome Canary. Works as expected in Firefox and Safari. It might be a Chrome bug?",
        "title": "Undo behavior in controlled textareas works differently from the default behaviour in chrome",
        "labels": "Type: Bug",
        "id": 45806
    },
    {
        "body": "Using both ReactDOM.render and ReactDOMServer.render(\\w+) causes an invariant violation in React 15.4.1.\r\n\r\nSee console on https://jsfiddle.net/martinkadlec/jb7bqg5o/4/\r\nThere is:\r\n```javascript\r\nreact-dom.js:18121 Warning: Exception thrown by hook while handling onSetChildren: Invariant Violation: Item must have been set\r\nInvariant Violation: Item must have been set\r\n    at invariant (https://unpkg.com/react@15.4.1/dist/react-with-addons.js:5175:15)\r\n```\r\nNotice that I render completely different components with each of the render methods.\r\n\r\nSome criteria have to be met for the warning to show, like at least two nested components.\r\n\r\nTo me it seems like the ReactDOMServer is messing with itemMap in the regular React and the IDs of components doesn't match.",
        "title": "Invariant Violation when rendering using both ReactDOM and ReactDOMServer",
        "labels": "Type: Bug",
        "id": 45807
    },
    {
        "body": "![untitled2](https://cloud.githubusercontent.com/assets/2460942/20637058/b744111c-b3bd-11e6-97ba-5529639730f0.gif)\r\n\r\nI'm trying to make a simple text box component with a suggestion feature.\r\nHowever, in IE 11, there is an event that the Japanese IME conversion arbitrarily decides (I did not press the Enter key ...).\r\nI examined it a little by myself, but this seems to have occurred only in IE 11, it seems that it has not occurred in other browsers such as Chrome and old Ver such as IE 10.\r\nReact version is 15.4.0.\r\nThere seemed to be similar issues in the past\uff08https://github.com/facebook/react/issues/7027\uff09, but that bug has already been fixed.\r\nIs this another bug? Or maybe I do not like how to make it?\r\n\r\n```\r\n/**\r\n * SuggestTextBox\r\n */\r\nconst SuggestTextBox = React.createClass({\r\n\ttimer: null,\r\n\tgetInitialState: function(){\r\n\t\treturn {\r\n\t\t\tfocus       : false,\r\n\t\t\tsuggestList : [],\r\n\t\t\tvalue: ''\r\n\t\t};\r\n\t},\r\n\t/**\r\n\t * getSuggestListFromApi\r\n\t */\r\n\tgetSuggestListFromApi: function(value){\r\n\t\t// Request API and get response\r\n\t\tCommon.apiCall({\r\n\t\t\ttype     : 'GET',\r\n\t\t\turl      : '/api/hoge',\r\n\t\t\tdataType : 'json',\r\n\t\t\tdata     : {\r\n\t\t\t\tKeyword: value\r\n\t\t\t},\r\n\t\t\tcache    : false,\r\n\t\t\tcallback : function(result){\r\n\t\t\t\t// set the state\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsuggestList: result.data.list,\r\n\t\t\t\t\tactiveItem: null\r\n\t\t\t\t});\r\n\t\t\t}.bind(this)\r\n\t\t});\r\n\t},\r\n\t/**\r\n\t * handleTextboxChange\r\n\t */\r\n\thandleTextboxChange: function(e){\r\n\t\tthis.setState({\r\n\t\t\tvalue: e.target.value,\r\n\t\t\tsuggestList: []\r\n\t\t});\r\n\t\tif (this.state.focus) {\r\n\t\t\tif (e.target.value) {\r\n\t\t\t\tif (this.timer) {\r\n\t\t\t\t\twindow.clearTimeout(this.timer);\r\n\t\t\t\t}\r\n\t\t\t\tthis.timer = window.setTimeout(function(){\r\n\t\t\t\t\tthis.getSuggestListFromApi(e.target.value);\r\n\t\t\t\t}.bind(this), 300);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * handleFocus\r\n\t */\r\n\thandleFocus: function(e){\r\n\t\tthis.setState({\r\n\t\t\tfocus: true\r\n\t\t});\r\n\t},\r\n\t/**\r\n\t * getSuggestNodes\r\n\t */\r\n\tgetSuggestNode: function(){\r\n\t\tvar listNode = this.state.suggestList.map(function(item, idx){\r\n\t\t\treturn (\r\n\t\t\t\t<li\r\n\t\t\t\t  key={'fuga_suggestItem_'+item.id}\r\n\t\t\t\t  data-id={item.id}\r\n\t\t\t\t  data-name='fuga'\r\n\t\t\t\t  data-value={item.name}>\r\n\t\t\t\t\t{item.name}\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t}.bind(this));\r\n\t\tif (listNode.length > 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<ul className=\"suggestList\">\r\n\t\t\t\t\t{listNode}\r\n\t\t\t\t</ul>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t},\r\n\trender: function(){\r\n\t\tlet suggestNode = this.getSuggestNode();\r\n\t\treturn (\r\n\t\t\t<label>\r\n\t\t\t\t<input\r\n\t\t\t\t  type=\"text\"\r\n\t\t\t\t  name=\"fuga\"\r\n\t\t\t\t  value={this.state.value}\r\n\t\t\t\t  onChange={this.handleTextboxChange}\r\n\t\t\t\t  onFocus={this.handleFocus} />\r\n\t\t\t\t{suggestNode}\r\n\t\t\t</label>\r\n\t\t);\r\n\t}\r\n});\r\n```\r\nhttps://jsfiddle.net/mashimonator/u3b0f1xj/1/",
        "title": "onChange does not work well with IE11 at Japanese IME. in React 15.4.0",
        "labels": "Type: Bug",
        "id": 45808
    },
    {
        "body": "https://jsfiddle.net/kwrdf44r/\n",
        "title": "A group of radio button requires all to have defaultChecked attribute to work properly in Firefox",
        "labels": "Type: Bug",
        "id": 45809
    },
    {
        "body": "Repro: https://jsfiddle.net/5t5ua47c/\nIn the example, a click handler in the subtree queues an update for both the the subtree and parent components, with the following ordering of lifecycle methods:\n\n```\nparent will update\n> child will update\n>> subtree will update\n> child did update\nparent did update\n>> subtree did update\n```\n\nIf the parent component unmounts the subtree in `componentDidUpdate` this will cause the subtree to be unmounted by the time that its `componentDidUpdate` method is called (https://jsfiddle.net/v5fk4xvx/1/):\n\n```\nparent will update\n> child will update\n>> subtree will update\n> child did update\nparent did update (unmount subtree)\n>> subtree will unmount\n>> subtree did update\n```\n\n**What is the expected behavior?**\n\nProbably this:\n\n```\nparent will update\n> child will update\n>> subtree will update\n> child did update\n>> subtree did update\nparent did update\n```\n",
        "title": "Unexpected interleaving of subtree/parent lifecycle methods",
        "labels": "Type: Bug",
        "id": 45810
    },
    {
        "body": "https://jsfiddle.net/nnwd2c34/\n\nCan reproduce on Chrome, but not in IE11.\n",
        "title": "input autoFocus causes focus to be emitted before ref",
        "labels": "Type: Bug",
        "id": 45811
    },
    {
        "body": "There is a bug in the logic for determining if `props` is a plain object. This bug results in a false positive, flooding the console with hundreds of instances of this warning: \"Expected props argument to be a plain object. Properties defined in its prototype chain will be ignored.\".\n\nThe code that's failing is in [ReactElement.js, Line 210 in the v15.3.1 branch](https://github.com/facebook/react/blob/v15.3.1/src/isomorphic/classic/element/ReactElement.js#L210) (line number is probably different in master)\n\n> config.**proto** == null || config.**proto** === Object.prototype,\n\nThis fails when the props object is created in one iframe, but uses an instance of React from another frame. Each browser window/tab/frame has it's own instance of the Object constructor. For instance, `document.querySelector('iframe').contentWindow.Object === Object` always results in `false`.\n\nCheck out this [demo](https://jsfiddle.net/05ugxo5f/4/), which shows the false-positive warning message.\n",
        "title": "Bug: False Positive \"plain object\" Warning  ",
        "labels": "Type: Bug",
        "id": 45812
    },
    {
        "body": "**bug**\n\nIn the following\n\n``` jsx\nconst Component = () =>\n        <fieldset disabled>\n            <button\n              onClick={() => alert('clicked by React')}\n            >click me here and <span style={{color: 'red'}}>here</span></button>\n        </fieldset>;\n```\n\nclicking on `click me here and` will not trigger `alert('clicked by React')` whereas clicking on the red `here` will trigger `alert('clicked by React')`.\n\nDemo: https://jsfiddle.net/ropbvL3y/\n\nThanks for React, it's an incredibly well designed tool.\n",
        "title": "[bug] click not disabled on <fieldset disabled><button onClick={() => alert('clicked')}><span>click me</span></button></fieldset>",
        "labels": "Type: Bug",
        "id": 45813
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\nBug\n\n**What is the current behavior?**\n\nWhen there are two lists of radio buttons and they are conditionally shown the correct radio button isn't always checked. In the [provided JSFiddle](https://jsfiddle.net/atimmer/krphcc8e/3/) I have created two lists and put a button before them to toggle between the two lists. You can see when switching to the second list of radio buttons none of the radio buttons is checked even though the second one should be checked based on the state.\n\n**What is the expected behavior?**\n\nThe correct radio button should be checked. The following JSFiddle shows the behaviour with React 15.3.0 where it still worked: https://jsfiddle.net/atimmer/Lzjs56sn/1/.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n\n\u2705 React 15.3.0: It works.\n\u274c React 15.3.1: It is broken.\n",
        "title": "Radio buttons are not correctly checked when using multiple lists of radio buttons",
        "labels": "Type: Bug",
        "id": 45814
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nBug\n\n**What is the current behavior?**\nUsing polyfilled ES6 `Map` on browsers without native Map support\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar**\nhttps://jsfiddle.net/t5ht7mmb/1/ \u2013 `isNative` returns `true` on IE9\n\n**What is the expected behavior?**\nUsing objects instead of `Map`. While `isNative` method has been implemented in #7491 it can't detect core-js polyfills. Look at discussion in comments here: https://github.com/lodash/lodash/commit/e156459176c1f35964fc443b39f04c4cb0a96763#diff-001d0647fb00f8336795faccdec19a31R11199\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n15.3.1\n",
        "title": "Native Map detection in ReactComponentTreeHook fails with core-js",
        "labels": "Type: Bug",
        "id": 45815
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\nReport a bug.\n\n**What is the current behavior?**\n1. Open [this demo](https://jsfiddle.net/c49bj73v/6/) in IE10\n2. Type any five character text\n3. Caret should be at position `2` (i.e. `12|345`) because it is forced there after every change with `setSelectionRange`\n4. Use arrow or mouse to move caret to position `5` (i.e. `12345|`).\n5. Press backspace\n6. Caret goes to position `4` (i.e. `1234|`)\n\n**What is the expected behavior?**\n\nCaret should obey `setSelectionRange` and go to position `2` even after backspace on IE10.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n\nThis bug started at React v15.0.0. React v14.8 did not have this problem.\n\nThis issue was reported here https://github.com/msafi/text-mask/issues/133. @Heymdall found out that if you wrap `setSelectionRange` in a `setTimeout(..., 0)`, it sets the position correctly, though the user would have to type slowly to ensure this always happens, so that is not a workaround.\n",
        "title": "input element `setSelectionRange` after backspace does not work in IE10",
        "labels": "Type: Bug",
        "id": 45816
    },
    {
        "body": "I believe this is a bug and potentially related to https://github.com/facebook/react/issues/3298, but the specific details are different enough that I wanted to file a separate issue. Feel free to close if it's the same root cause.\n\nI have a repro here: https://jsfiddle.net/7s6mwccu/2/\n- ClickMe is a component that runs `causeError` on click\n- `causeError` first renders components of type A and B (let's call them A0 and B0)\n- B0 has a componentDidMount function that calls setState (comes into play later)\n- `causeError` then updates A0 with a new prop\n- A.componentDidUpdate unmounts B0 and mounts a new B, B1\n- After `causeError` is all done, React's runtime performs some ops (presumably due to B0's setState) that leads to:\n\n> Warning: React can't find the root component node for data-reactid value `.2`. If you're seeing this message, it probably means that you've loaded two copies of React on the page. At this time, only a single copy of React can be loaded at a time.\n> Uncaught TypeError: Cannot read property 'firstChild' of undefined\n\nPeeking at the stacktrace, it looks like `didPutListener` is trying to findDOMNode on an already-unmounted component.\n\nSome weird details:\n- Leaving off onClick removes this error\n- Not calling setState in B.componentDidMount also removes this error\n\nSo it's a bit different from #3298 because it's not erroring if we only unmount B during a click; it's erroring if we have onClick and setState.\n\nThis is on React 0.14 - I tested it briefly on React 15 and got\n\n> Invariant Violation: React DOM tree root should always have a node reference.\n\nwhich presumably is a better formed version of the same error.\n",
        "title": "Bug: didPutListener tries to findDOMNode on unmounted component",
        "labels": "Type: Bug",
        "id": 45817
    },
    {
        "body": "Trying to test a very simple React component using Material-UI through Jest and `react-test-renderer`, I'm stuck because `ReactCompositeComponent: injectEnvironment() can only be called once`.\n\nIt looks like `react-test-renderer` calls `injectEnvironment`, but so does `react-dom`, which is (in my actual application) imported somewhere within a Material-UI module which is in turn imported by my component code.\n\nThis may not really be a 'bug' in React or `react-test-renderer` per se, though one could imagine other dependencies somehow loading `react-dom` as well, causing the same issue.\n\nI created a test-case at https://github.com/NicolasT/react-test-renderer-and-react-dom-incompatible which may provide some more context.\n\n`react`: 15.3.0\n`react-dom`: 15.3.0\n`react-test-renderer`: 15.3.0\n",
        "title": "`injectEnvironment` called twice: `react-test-renderer` and `react-dom`",
        "labels": "Type: Bug",
        "id": 45818
    },
    {
        "body": "While following a server-side react tutorial, I encountered a runtime error caused by ReactComponentTreeDevtool. Specifically, the purgeDeep function seems to be problematic under certain conditions (react/lib/ReactComponentTreeDevtool.js line 47):\n\nUser Code:\n\n<img width=\"258\" alt=\"screen shot 2016-07-24 at 3 49 40 pm\" src=\"https://cloud.githubusercontent.com/assets/19496802/17106234/73aaee92-523f-11e6-9235-64d06ffeb31d.png\">\n\n<img width=\"532\" alt=\"screen shot 2016-07-24 at 3 47 01 pm\" src=\"https://cloud.githubusercontent.com/assets/19496802/17106241/7d085fe2-523f-11e6-86ee-b1eb8615945c.png\">\n\nStack Trace:\n\n![screen shot 2016-07-24 at 3 41 00 pm](https://cloud.githubusercontent.com/assets/19496802/17106263/8c0a2a02-523f-11e6-94c2-342624793ecf.png)\n\nOffending Code:\n\n<img width=\"453\" alt=\"screen shot 2016-07-25 at 8 21 17 am\" src=\"https://cloud.githubusercontent.com/assets/19496802/17106609/cd9c230c-5240-11e6-9b21-5d6d00429dee.png\">\n\nResolution: Adding a check for undefined childIDs before the traversal (react/lib/ReactComponentTreeDevtool.js line 47) resolves the issue (see below).\n\n<img width=\"772\" alt=\"screen shot 2016-07-25 at 8 19 57 am\" src=\"https://cloud.githubusercontent.com/assets/19496802/17106547/9be323c4-5240-11e6-973a-a777999d9b69.png\">\n\n![screen shot 2016-07-24 at 4 02 23 pm](https://cloud.githubusercontent.com/assets/19496802/17106322/bdf6bf6c-523f-11e6-8784-1fa4e612186a.png)\n\nAdditional:\nOS: OS X Yosemite (10.10.5)\nNode: 4.4.7\nRun on: babel-node (via babel-cli 6.11.4 )\n\nLet me know if there's any additional information I should provide (e.g. dev dependencies). Thanks!\n",
        "title": "babel-node: ReactComponentTreeDevtool.js causes ReactDOMServer.renderToString to fail",
        "labels": "Type: Bug",
        "id": 45819
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nBug (regression) IE/Edge\n\n**What is the current behavior?**\nOn React > v15.2.0, Edge and IE11 do not prompt the user to save the password for the form\n\n**Steps to reproduce**\nWith react 15.1.0:\nhttps://jsfiddle.net/69z2wepo/49876/\nWith React 15.2.0:\nhttps://jsfiddle.net/69z2wepo/49877/\n\n**What is the expected behavior?**\nThe browser prompts the user to save their password for the form\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact > 15.2.0. It worked in React 15.2.0\nIE 11, Edge\n",
        "title": "IE 11 and Edge no longer prompt to remember password on controlled form",
        "labels": "Type: Bug",
        "id": 45820
    },
    {
        "body": "I use react in my node webkit application. \nI just update the react and react-dom from 0.14.3 to 15.2.0, I haven't changed my code. But the onChange event not fire now, and there is no error console log.\n\nAny help will be appreciated.\n",
        "title": "In NW.js app, the 'file' type <input> onChange event doesn't fire",
        "labels": "Type: Bug",
        "id": 45821
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\nBug\n\n**What is the current behavior?**\n\nRendering a list of controlled checkboxes causes the reconciler to unnecessarily update (add or remove) the `checked` attribute on every render, regardless of whether the value has changed.\n\nI have a table with ~300-500 rows that needs to add a \"highlighted\" class to the rows based on some user interaction on another part of the screen. I'd expect that the table renderer would get called on every interaction, but I was seeing ~40ms render times in the Perf tool. I dug into it and it looks like every render the reconciler removes the \"checked\" attribute (see JSFiddle). The `checked` attribute on the row datum never changes; is always false.\n\nExtracting the rows into their own component and using `componentShouldUpdate` fixes the slowness, but this seems like a bug.\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\n\nHere are two JSFiddles demonstrating the issue: \n\nMinimal repro: https://jsfiddle.net/69z2wepo/49455/\n\nFull repro: https://jsfiddle.net/69z2wepo/49466/\n\n**What is the expected behavior?**\n\nThe reconciler shouldn't be touching the DOM for attributes that haven't changed.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n\nMac OSX 10.11. Chrome 51, Safari 9.1, Firefox 44\n\nReact Version 15.0.1.\n",
        "title": "Checkbox attribute unnecessarily removed from DOM on every render",
        "labels": "Type: Bug",
        "id": 45822
    },
    {
        "body": "Input onChange not triggered every time if e.preventDefault() is called in onChange handler.\n\nOccurs when typing fast: some characters are lost.\n\nReact 5.0.2 & IE11.\n",
        "title": "Input onChange not triggered every time in IE11 if e.preventDefault() used",
        "labels": "Type: Bug",
        "id": 45823
    },
    {
        "body": "When using `onInput` event on `contentEditable` `div`, the event is not being fired on IE11. It does work on Chrome 51.0.2704.103 (64-bit) and Microsoft Edge. It also reproduces on React 0.14.*, so it doesn't seem to be a regression.\n\nSee it being reproduced here: https://jsfiddle.net/dbmu8yps/\n\nMaybe related to #4051 , @jquense?\n",
        "title": "onInput is not firing on contentEditable div in IE11",
        "labels": "Type: Bug",
        "id": 45824
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\nReport a bug.\n\n**What is the current behavior?**\n\nWhen testing components, `Warning: ReactComponentTreeDevtool: Missing React element for debugID 1 when building stack` is shown when calling `TestUtils.renderIntoDocument`.\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\n\nhttps://github.com/angusfretwell/reproduce-debugid-warning (`npm install && npm test`).\n\n**What is the expected behavior?**\n\nAccording to #7187 this is an internal warning and shouldn't be displayed.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n- react@15.2.1\n- react-addons-test-utils@15.2.1\n- react-dom@15.2.1\n\nI didn't receive this warning on 15.2.0.\n",
        "title": "\"Missing React element for debugID\" warning when testing components with Jest",
        "labels": "Type: Bug",
        "id": 45825
    },
    {
        "body": "Hello. On IE11/React 15.2.0 when copy/paste data from keyboard to a textarea, onChange not firing, \nthis works fine in Chrome and FF\n\nI've included a test link:\n https://jsfiddle.net/wxwawpkn/\n(a log msg should happen when you copy/paste data into textarea)\n\nThanks!\n",
        "title": "onChange not firing properly in React 15.2.0 + IE11 when paste text into textarea",
        "labels": "Type: Bug",
        "id": 45826
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nBug\n\n**What is the current behavior?**\nAs reported by @adamryvola in https://github.com/facebook/react/pull/6869#issuecomment-230349514, React is displaying a warning `Warning: ReactComponentTreeDevtool: Missing React element for debugID 2 when building stack` when another component is rendered in `componentWillMount`\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\n\n``` js\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\nconst container = document.getElementById('container');\nconst menuContainer = document.getElementById('menu-container');\n\nexport default class App extends Component {\n\n  componentWillMount() {\n    ReactDOM.render(<div />, menuContainer);  // <= Trigger the warning\n  }\n\n  render() {\n    return (\n      <div>\n        <div>App</div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, container);\n\n```\n\nJSFiddle: https://jsfiddle.net/0n3a6vp9/\n\n**What is the expected behavior?**\nAccording to @gaearon this warning is \"against internal bugs in React, it's not meant for users\" (source: https://github.com/facebook/react/pull/6869#issuecomment-230272365) so this warning should not be triggered.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact `15.2.0`, no issue with `React 0.14.7`\n",
        "title": "\"Missing React element for debugID\" warning when triggering a render in componentWillMount",
        "labels": "Type: Bug",
        "id": 45827
    },
    {
        "body": "**Bug**\n\n**What is the current behavior?**\nWhen using ReactCSSTransitionGroup in react v15.2.0, it warns me about an unknown prop passed to the DOM element created by this component (span)\n\n```\nWarning: Unknown prop `transitionAppearTimeout` on <span> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in span (created by ReactTransitionGroup)\n    in ReactTransitionGroup (created by ReactCSSTransitionGroup)\n    in ReactCSSTransitionGroup (created by Element-panel)\n    in Element-panel (created by Connect(Element-panel))\n    in Connect(Element-panel) (created by Diagrammer-page)\n    in div (created by Diagrammer-page)\n    in Diagrammer-page (created by Connect(Diagrammer-page))\n    in Connect(Diagrammer-page) (created by Constructor)\n    in Constructor (created by Connect(Constructor))\n    in Connect(Constructor) (created by Diagram-edit)\n    in Diagram-edit (created by RouterContext)\n    in div (created by model-layout)\n    in model-layout (created by RouterContext)\n    in RouterContext (created by Router)\n    in Router (created by App)\n    in Provider (created by App)\n    in App\n    in AppContainer\n```\n\n**Demo**\nhttps://jsfiddle.net/vrs7mmjL/\n\n**What is the expected behavior?**\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n\nReact V 15.0.2\nOS: tested on OSX El capitan\nIt worked on previous versions\n",
        "title": "Getting a warning using ReactCSSTransitionGroup in react v15.2.0",
        "labels": "Type: Bug",
        "id": 45828
    },
    {
        "body": "I think it is bug\r\n\r\nNow onMouseEnter event handler calls in child element when there are several reactroots. \r\n\r\nTo reproduce - run fiddle and move mouse from white square to red and back. In console you can see log when you do it. Link - https://jsfiddle.net/47sn3j5c/ . It works wrong.\r\n\r\nExpected behavior: handler has to call just when mouse enter to red square. See here simiar example but with one reactroot - https://jsfiddle.net/bs3rc2wp/1/ . It works right.\r\n\r\nReact 15.1.0\r\n",
        "title": "onMouseEnter propagation in double reactroot",
        "labels": "Type: Bug",
        "id": 45829
    },
    {
        "body": "Hello everyone. I have a problem after updating React from v0.14.8 to the current latest v15.1.0. \n\nActually, I cannot even tell what exactly cause this problem. On some pages of my SPA everything works just fine, but during one specific action in my app, this error happens. \n\nThis problem appeared after React (and some dependent libraries) update\n\n![screenshot from 2016-06-24 13 40 15](https://cloud.githubusercontent.com/assets/17126360/16336516/dee3aff0-3a16-11e6-9f74-9383bd8282b9.png)\n",
        "title": "Cannot read property 'getNativeNode' of null (ReactReconciler)",
        "labels": "Type: Bug",
        "id": 45830
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nBug\n**What is the current behavior?**\nReact at the beginning rounds `input[type=range]` value to 0 or 1, and then looks at step parameter which is 0.1 for example. The result is incorrect value of input after component mounts. When I put `value` attribute after `step` attributes, it works fine.\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\nDemo: https://jsfiddle.net/2Lm4gy5k/ Comment or uncomment line 13 and 14 to see the difference.\n\n**What is the expected behavior?**\nTo always look at step parameter and then round the value (if required).\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nv15.1.0 (Opera, Chrome, Firefox). \n\nYes, works in v.0.14.0 (https://jsfiddle.net/wrcnLugd/)\n",
        "title": "Value of input[range] incorrectly rounded after mounting (step attribute ommited)",
        "labels": "Type: Bug",
        "id": 45831
    },
    {
        "body": "I have a simple search bar (controlled text input) with autocomplete.\n\nWhen I type text very quickly, I do get onKeyDown events, but every now and then, the corresponding onChange event goes missing. For example, if I type \"foobar\", the input field may end up showing \"foobr\".\n\nThis happens only on IE (tested with IE11 on Windows 7), and I have not seen this on any other browser.\n\nHere's a fiddle showing the issue: https://jsfiddle.net/zjfbow3w/3/ and a log:\n\n```\nkeyDown:  f\nkeyDown:  o\nchange:   f\nrender:   f\nchange:   fo\nrender:   fo\nrender:   fo\nkeyDown:  o\nkeyDown:  b\nchange:   foo\nrender:   foo\nchange:   foob\nrender:   foob\nkeyDown:  a\nrender:   foob\nkeyDown:  r\nchange:   foobr\nrender:   foobr\nrender:   foobr\n```\n\nNote that onKeyDown handler sees that \"a\", but not the onChange handler.\n\nThe fiddle includes a timer (which in real code triggers an AJAX call), which is somehow important for this issue -- if I remove the timer, I cannot reproduce this issue any more.\n\nThe React version in the fiddle is 15.1.0 (but this happens on 0.14.3, too).\n",
        "title": "OnChange randomly misses keys on IE if typing very quickly",
        "labels": "Type: Bug",
        "id": 45832
    },
    {
        "body": "Hello. On Firefox (v31 and 40 at least) when changing `<select>` values from keyboard `onChange` not firing, actually it fires only on blur: https://jsfiddle.net/mh3mn8st/\nReact 15.1.0.\nthanks!\n",
        "title": "<select> onChange not firing when using keyboard",
        "labels": "Type: Bug",
        "id": 45833
    },
    {
        "body": "I want to use a controlled `<select multiple={true} />` component in React. In addition to the value I also want to keep the focused state of the select in the state. To do this, I update the state with `setState` in the `onChange`, `onFocus` and `onBlur` event handlers. Unfortunately there is an issue in Firefox: Firefox will only update the value on a change event after the select has gained focus. This means that a user has to click twice on the select element to change its value when it does not have focus. I would expect the select to gain focus and change the value at the same click.\n\nI created a jsFiddle to demonstrate the prolem: [React select multiple issue in Firefox demonstration](https://jsfiddle.net/fugf1kw9/2/)\n\nI only see this problem in Firefox and with select multiple. In IE and Chrome it is working as expected, and in Firefox it is working as expected for other form elements (simple select, checkbox, radio, text input, textarea).\n\nMy environment:\n- Firefox 46.0.1 under Win7 x64\n- React 15.1.0\n",
        "title": "Changing state in onFocus and onChange for a select multiple element does not work in Firefox",
        "labels": "Type: Bug",
        "id": 45834
    },
    {
        "body": "When trying to use react-addons-perf@15.1.0 in Google Chrome, it is found that after Perf.start(), error messages displayed\nWarning: There is an internal error in the React performance measurement code. Did not expect ctor timer to start while componentDidMount timer is still in progress for another instance.\nWarning: There is an internal error in the React performance measurement code. We did not expect componentDidMount timer to stop while no timer is still in progress for another instance. Please report this as a bug in React.\n\nAfter I typed Perf.stop() and try to use getWasted - this error message displayed\nReactPerf.js:239 Uncaught TypeError: Cannot read property 'updateCount' of undefined(\u2026)\n",
        "title": "[bug] Problems of using react-addons-perf",
        "labels": "Type: Bug",
        "id": 45835
    },
    {
        "body": "like #3926, but in ie9\n",
        "title": "Change event fires too many times when inputing Chinese characters in IE 9",
        "labels": "Type: Bug",
        "id": 45836
    },
    {
        "body": "I believe #5744 introduced a behavioral difference between development and production versions of React. We released it as a part of 15.0, and this difference still exists.\n\nThe production behavior hasn\u2019t changed. However the development behavior diverged after this change.\n\n``` js\nvar el = React.createElement('div', { key: undefined })\ndocument.body.innerHTML = (typeof el.key) + ' ' + el.key\n```\n\nWhat do you expect to appear?\n### 0.14.x\n- Development (https://jsfiddle.net/sjLcmnq6/1/): `object null`\n- Production (https://jsfiddle.net/qro1wck0/1/): `object null`\n## 15.x\n- Development (https://jsfiddle.net/69z2wepo/43538/):  **`string undefined`**\n- Production (https://jsfiddle.net/rakg6uwy/1/): `object null`\n\nThe 15.x dev behavior is different because [dev code path only checks the existence of a property but not whether it\u2019s undefined](https://github.com/alitaheri/react/blob/c3980a6d08257d39a08bed8b116d53a56344166b/src/isomorphic/classic/element/ReactElement.js#L130-L133) whereas the [prod code path checks for undefined explicitly](https://github.com/alitaheri/react/blob/c3980a6d08257d39a08bed8b116d53a56344166b/src/isomorphic/classic/element/ReactElement.js#L135-L136).\n\n`React.cloneElement()` is not affected because it doesn\u2019t include those warnings.\n\n---\n\nThis doesn\u2019t seem like a major problem (nobody noticed it!) in the real world, but I think we should fix this.\nI have a related fix in the works so I\u2019ll add some more tests and include it.\n",
        "title": "React.createElement(type, { key: undefined }) is handled incorrectly",
        "labels": "Type: Bug",
        "id": 45837
    },
    {
        "body": "After upgrading to 15.1.0 I'm having trouble using the React Perf tools. I've done the following:\n\nAdded to one of my files:\n\n```\nimport Perf from 'react-addons-perf';\nwindow.Perf = Perf;\n```\n\nI then launch my app in Chrome. Open the Dev Tools and run this in the console:\n\n```\nPerf.start();\nPerf.stop();\nPerf.printWasted();\n```\n\nAnd I get:\n\n```\nTypeError: Cannot read property 'forEach' of undefined\ngetWasted   @   7.7.js:149515\nprintWasted @   7.7.js:149666\n(anonymous function)    @   VM508:1\n```\n\nThe failure is on this line: `flushHistory.forEach(function (flush) {`.\n\nThe same behaviour occurs for all other `print*` method such as `printInclusive()` and `printExclusive()`.\nThe same behaviour occurs if I put the commands into my code (ie. NOT running in the Chrome Console).\n",
        "title": "Perf.print*() method not working in 15.1.0: Cannot read property 'forEach' of undefined",
        "labels": "Type: Bug",
        "id": 45838
    },
    {
        "body": "bug\n\nWarning displayed in console about internal error of React performance measurement code.\n\n``` js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Perf from 'react-addons-perf';\nimport { browserHistory, Router } from 'react-router';\n\nimport routes from './routes';\nimport persist from 'altFlux/persist';\n\npersist('docs');\n\nconst target = document.getElementById('app');\n\nPerf.start();\n\nrender(\n  <Router\n    routes={routes}\n    history={browserHistory}\n  />,\n  target,\n  () => {\n    Perf.stop();\n    Perf.printWasted();\n  }\n);\n```\n\n![screen shot 2016-05-23 at 9 21 08 am](https://cloud.githubusercontent.com/assets/91464/15472297/5e440d48-20c8-11e6-99d7-363f6d1bdcce.png)\n\n15.1.0\nGoogle Chrome\n",
        "title": "React devtools 15.1.0 ctor timer error",
        "labels": "Type: Bug",
        "id": 45839
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\n\nBug\n\n**What is the current behavior?**\n\nRunning npm install and then npm start in the examples/basic-commonjs directory of react-15.0.2 as found on https://facebook.github.io/react/downloads.html results in the following error:\n\n```\nSyntaxError: /Users/Robert/Downloads/react-15.0.2/examples/basic-commonjs/index.js: Unexpected token (13:11) while parsing file: /Users/Robert/Downloads/react-15.0.2/examples/basic-commonjs/index.js\n```\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\n\n```\ncurl https://facebook.github.io/react/downloads/react-15.0.2.zip > react-15.0.2.zip\nunzip react-15.0.2.zip\ncd react-15.0.2/examples/basic-commonjs/\nnpm install\nnpm start\n```\n\n**What is the expected behavior?**\n\nThe example works\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\n\nReact 15.0.2. NPM 2.15.1. Node 4.4.4. OS/X 10.11.4\n\nUnknown if it worked previously.\n",
        "title": "15.0.2 (Current) Starter Kit examples/basic-commonjs not working",
        "labels": "Type: Bug",
        "id": 45840
    },
    {
        "body": "I have this code\n\n```\n       <input name='test' value={1} type='radio' />\n       <input name='test' value={2} type='radio' defaultChecked />\n```\n\nhttps://jsfiddle.net/69z2wepo/42137/\n\nAnd when I click on radio it gives me warning\nWarning: Test is changing a uncontrolled input of type radio to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components\n\nSo its not clear why or is it a bug ?\n",
        "title": "Warning is changing a uncontrolled input of type radio to be controlled...",
        "labels": "Type: Bug",
        "id": 45841
    },
    {
        "body": "A controlled number input, without a corresponding `setState` function, still allows `e`, `-` and `.` to be entered (and numbers can be inputted afterwards). I could be incorrect but I don't believe this is the desired behavior.\n\n[Here's a JSFiddle](https://jsfiddle.net/vervujhm/) demonstrating the issue.\n",
        "title": "Controlled number input doesn't handle e, - and . properly",
        "labels": "Type: Bug",
        "id": 45842
    },
    {
        "body": "See: https://jsfiddle.net/pnct6b7r/\n\nIt will not trigger the alert in Chrome and Safari, but it will work in Firefox and even IE8.\n\nIs this a React issue or Webkit issue? If it is a Webkit issue, should we \"fix it\" in React given that we want [consistent events across browsers](http://facebook.github.io/react/docs/events.html)?\n\nps: The JSFiddle was based on the isuse #5332.\n",
        "title": "Iframe load event not firing in Chrome and Safari when src is 'about:blank'",
        "labels": "Type: Bug",
        "id": 45843
    },
    {
        "body": "Most of our tests rely on this. I went through a debugger and stepped through the callback function. \n\nOnly the components `Foo` and `Bar` are captured any sub-component under `<Bar/>` is not coming in the callback.\n\n```\nvar component = ReactDOM.render(<Foo><Bar/></Foo>, container);\nTestUtils.findAllInRenderedTree(component, child => console.log(child));\n```\n",
        "title": "TestUtils.findAllInRenderedTree is not iterating through all components since React 15.",
        "labels": "Type: Bug",
        "id": 45844
    },
    {
        "body": "Repro:\nGo to http://facebook.github.io/react/\nScroll to TODO example\nType anything into the input field\nClick in the middle of the text and type another character. Notice the cursor jumps to the end of the text field.\n",
        "title": "Typing in middle of controlled text field jumps to end",
        "labels": "Type: Bug",
        "id": 45845
    },
    {
        "body": "In my render method I have something like\n\n```\n<input type={dynamicTypeValue} value={dynamicValue} />\n```\n\nIf I first render this input as a number, (e.g. `dynamicTypeValue = 'number'; dynamicValue = 5`) but then change the input to a string: (`dynamicTypeValue = 'string'; dynamicValue = '01/01/2016'`) I get a warning \nthat the new value is not a valid number:\n\n```\nThe specified value \"01/01/2000\" is not a valid number. The value must match to the following regular expression: -?(\\d+|\\d+\\.\\d+|\\.\\d+)([eE][-+]?\\d+)?\nDOMPropertyOperations.js:142 The specified value \"01/01/2012\" is not a valid number. The value must match to the following regular expression: -?(\\d+|\\d+\\.\\d+|\\.\\d+)([eE][-+]?\\d+)?\n```\n\n![screen shot 2016-04-07 at 6 07 45 pm](https://cloud.githubusercontent.com/assets/1074773/14368429/a7d61baa-fceb-11e5-91f0-199ff95aa276.png)\n\nIs this expected behavior?\n",
        "title": "Warning when changing the type and value of an input field",
        "labels": "Type: Bug",
        "id": 45846
    },
    {
        "body": "Calling `setState` in `componentWillMount` of a component causes the error\n\n```\nTypeError: Cannot read property '_currentElement' of null\n    at ReactCompositeComponentMixin._updateRenderedComponent\n```\n\nwhen rendering server-side with `ReactDOMServer.renderToString` and preceded by a component that renders content using `ReactDOMServer.renderToString` or `ReactDOMServer.renderToStaticMarkup`.\n\nCauses TypeError with 0.14.8 and 15.0.0-rc.2:\nhttps://github.com/PKJedi/react-dom-server-test/blob/master/test.js\n\nWorks with 0.13:\nhttps://github.com/PKJedi/react-dom-server-test/blob/master/0.13/test.js\n",
        "title": "setState in componentWillMount causes TypeError when rendering with renderToString and preceded by a component that renders with renderToString",
        "labels": "Type: Bug",
        "id": 45847
    },
    {
        "body": "I'm having a hard time narrowing a repro down for this and there seem to be a lot of required moving parts, so I'll try to give as much information as I can.\n\nRelevant snippet of package.json:\n\n```\n    \"react\": \"15.0.0-rc.2\", // repros w/ 0.14.7 as well\n    \"react-dom\": \"15.0.0-rc.2\",\n    \"react-redux\": \"4.0.6\",\n    \"react-router\": \"2.0.0-rc5\",\n    \"react-router-redux\": \"4.0.0-rc.1\",\n    \"redux\": \"3.2.1\",\n```\n\nOur routes look something like this:\n\n```\n      <Route component={App}>\n        <Route component={LayoutNoFooter}>\n          <Route component={Page2} />\n        </Route>\n        <Route component={Layout}>\n          <Route component={Page1} />\n        </Route>\n      </Route>\n```\n\n`LayoutNoFooter` simply wraps `Layout` and passes an additional prop in.\n\nI have this component in the `Header`, which is rendered by `Layout`: https://gist.github.com/aaronjensen/86c9643ecc53ad4e9006\n\n`Header` is a react-redux connected component.\n\n`Page1` has a `componentWillUnmount` that dispatches an action that ultimately toggles `searchMode` in `HeaderLogo`. \n\nWhen I go from `Page1` to `Page2` the invariant violation fires.\n\nIf I `setTimeout` the action dispatch in `componentWillUnmount` it appears to work fine. If I replace `LayoutNoFooter` with `Layout` it appears to work fine.\n\nThe invariant violation is on the `img` tag of the `HeaderLogo`\n\n![stack](https://screenshots-dx37.s3.amazonaws.com/monosnap/Integration_Test__Hotel_Results_2016-03-28_22-35-14.png)\n\nI've tried building a repro in codepen, with a similar structure `setState` calls to simulate react-router and redux, but I suspect they are doing more that would require me to actually build a repro w/ those technologies. If that would be helpful, I can work on it over time and hopefully repro it. Maybe there's enough info here, however. Thanks!\n",
        "title": "Uncaught Invariant Violation: Must be mounted to trap events when replacing an image with a link to an image",
        "labels": "Type: Bug",
        "id": 45848
    },
    {
        "body": "A controlled input filed of type email behave differently from a controlled field of type text.\nIf you manage a controlled input field of type email, the actual state and the rendered DOM are different if the user digit spaces, e.g. '  '.\n\nWith an input element like this:\n`<input type=\"text\" value={'stringFromTheState'} />`\nif you try to digit letters or spaces, you will always get rendered the string 'stringFromTheState'.\n\nWith an input element like this:\n`<input type=\"email\" value={'stringFromTheState'} />`\nif you try to digit letters you will always get rendered the string 'stringFromTheState'.\nif you try to digit spaces you will get a new rendered string that compose the state with the spaces.\n\nThis is problematic is before saving the state you need to validate the field and force it to do something smart like strip the white spaces.\n",
        "title": "Input type 'email' as controlled component does not control white spaces",
        "labels": "Type: Bug",
        "id": 45849
    },
    {
        "body": "# This \"good first bug\" is taken by @YongPilMoon. Don't work on it unless that's you!\r\n\r\nThis has been discussed a few times before but I don\u2019t think there was any conclusion, and PRs intending to solve the issue were not merged for various reasons.\r\n\r\nI would like to close those PRs as outdated, and reboot the discussion about this.\r\nPerformance considered, the conclusion from @sebmarkbage and @syranide seems to be:\r\n\r\n> We should consider not allowing conflicting style rules at all.\r\n\r\n\u2014 https://github.com/facebook/react/pull/2013#issuecomment-57338177\r\n\r\n> IMHO, all things considered it's better to just disallow overlapping and warn in dev.\r\n\r\n\u2014 https://github.com/facebook/react/pull/4661#issuecomment-132996649\r\n\r\nRadium by @ianobermiller came to the same conclusion in https://github.com/FormidableLabs/radium/issues/95 but there was some backlash afterwards. React Native seems to allow style expansions but only for a few attributes (e.g. `margin` and `padding`, but not `border`).\r\n\r\nI\u2019m closing old pull requests about this, and creating this issue to track implementation of the behavior we seem to agree upon: we should warn in `__DEV__` when `border` and `borderBottom` are used at the same time. We can discuss more specifics (should either be ignored? should we allow a few whitelisted properties but warn for others?) in this issue.\r\n\r\nAs a migration strategy, we can suggest people to use something like https://github.com/ActionIQ/style-builder if they really need those shortcuts. It\u2019s also something we\u2019ll need to decide upon when implementing integrated styling.\r\n\r\n---\r\n\r\nRelated issues:\r\n- #2231\r\n- #2407\r\n- #5030\r\n- https://github.com/FormidableLabs/radium/issues/95\r\n\r\nRelated PRs:\r\n- #2013\r\n- #4661\r\n",
        "title": "Warn when using overlapping styles (e.g. border and borderBottom)",
        "labels": "Type: Bug",
        "id": 45850
    },
    {
        "body": "I was able to come up with a repro for this bug that does not rely on weird interactions between JS and Flash, though it only happens in Firefox: http://jsfiddle.net/bzrppsym/3/\n\nA summary of the repro is that if you have a React component that is updating itself via a setInterval loop and an INPUT that is focused, and you zoom in/out to trigger a resize handler which re-renders the React component, the error is triggered.\n\n**Note**: that this only happens in Firefox and if the INPUT is focused. This does not seem to happen in Chrome. The same workaround suggested in #4958 also applies, i.e. wrapping the resize handler body in a setTimeout.\n",
        "title": "Firefox issue: Expected flush transaction's stored dirty-components length to match dirty-components array length.",
        "labels": "Type: Bug",
        "id": 45851
    },
    {
        "body": "the following button should not fire `onclick`, but it does so in IE11:\n\n```\n<input type=\"button\" disabled onClick={handleClick} value=\"...\"></input>\n```\n\nChrome and Mozilla are ok; using the normal DOM without React is ok too.\n\nSee the [plunker example](https://plnkr.co/edit/ow8tPPK89pSZOAsJlYJs?p=preview) that reproduces the issue (open it with IE).\n",
        "title": "Disabled input button should not fire onClick in IE11",
        "labels": "Type: Bug",
        "id": 45852
    },
    {
        "body": "Identical app. I call `printDOM()` after the app is loaded.\n\nReact 0.14.7:\n\n<img width=\"622\" alt=\"screen shot 2016-03-17 at 20 31 56\" src=\"https://cloud.githubusercontent.com/assets/810438/13860294/6f7dff1a-ec7f-11e5-91bc-00cc8fcc143c.png\">\n\nReact 15.0 RC1, RC2 and master:\n\n<img width=\"635\" alt=\"screen shot 2016-03-17 at 20 34 02\" src=\"https://cloud.githubusercontent.com/assets/810438/13860333/a8eb4276-ec7f-11e5-8200-38db6dc5466b.png\">\n\nWe should fix this before releasing 15.0.\n",
        "title": "ReactPerf.printDOM() throws \"Uncaught TypeError: Converting circular structure to JSON(\u2026)\"",
        "labels": "Type: Bug",
        "id": 45853
    },
    {
        "body": "It happened that I stumbled on following edge case. If you add `name='nodeName'` attribute to form's _input_, at some point of React event handling (`ChangeEventPlugin.js: shouldUseChangeEvent()`) it will call: `elem.nodeName && elem.nodeName.toLowerCase()`, but coincidentally `nodeName` property refers to _input_ and invocation fails.\n\nHere's a [jsFiddle example](https://jsfiddle.net/tLd7xvwc/)\n",
        "title": "Form input name='nodeName' breaks onSubmit event handling",
        "labels": "Type: Bug",
        "id": 45854
    },
    {
        "body": "The following \n\n```\nvar Hello = React.createClass({\n  render: function() {\n    return <div><p>Hello</p>test</div>;\n  }\n});\n```\n\nresults in only \"Hello\" being written in IE11 - [jsfiddle](https://jsfiddle.net/hL0jpazq/2/)\n\nI realize there has been some changes to the way text nodes work in v15, but before we update our code to use `<span>`, I wanted to check if this is the intended behavior (since \"test\" is written in chrome).\n",
        "title": "v15-rc1 seems to skip some text nodes in IE",
        "labels": "Type: Bug",
        "id": 45855
    },
    {
        "body": "React 0.14.7: `<option value=\"\">empty</option>` emits empty string on change\nhttp://jsbin.com/pisita/10/edit?html,js,console,output\nReact 15.0.0-rc.1`<option value=\"\">empty</option>` emits string with value \"empty\" on change\nhttp://jsbin.com/bemaze/12/edit?html,js,console,output\nThis is because React 15.0.0-rc.1 cuts off `value=\"\"` from option tag\n",
        "title": "Select option empty value regression in 15.0.0-rc.1",
        "labels": "Type: Bug",
        "id": 45856
    },
    {
        "body": "When a responder captures the active responder, it seems that `onResponderTerminate` is not called until after `onResponderGrant`. This seems like the wrong thing to do. Are there reasons for this behavior?\n",
        "title": "onResponderGrant called before onResponderTerminate",
        "labels": "Type: Bug",
        "id": 45857
    },
    {
        "body": "Run this:\n\n``` js\nlet html = renderToString(<div>foo</div>)\n```\n\nGet this:\n\n```\n<div data-reactroot=\"\" data-reactid=\"1\" data-react-checksum=\"-1450897250\">foo</div>\n```\n\nNot sure if this is a bug but I thought `data-reactid` and friends are gone in `v15`, no?\n\nAlso when testing `v15` with an old project using `v0.14.7` - which has a much complex scenario, `renderToString()` returned following causing a blank page:\n\n```\n<!-- react-empty: 1 -- data-react-checksum=\"1336804998\">\n```\n\nJust wondering is the behavior for server rendering changing in `v15`? Thanks.\n",
        "title": "renderToString() fails to terminate comment node",
        "labels": "Type: Bug",
        "id": 45858
    },
    {
        "body": "I have a view with a controlled select on it. When the onChange event fires, the resulting function actually changes the view, removing the select. Then I get this error:\n\n`Uncaught TypeError: Cannot set property 'pendingUpdate' of null`\n\nReproduced here:\nhttps://jsfiddle.net/wntgpwcx/5/  (react 0.14.7)\n\nI also noticed I don't get the same error in an older version (0.13.1)\nhttps://jsfiddle.net/wntgpwcx/6/\n\nThe line that throws is in ReactDOMSelect L183:\n\n``` javascript\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  // _wrapper state is not null here\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  this._wrapperState.pendingUpdate = true; // _wrapperState is null after the executeOnChange happens\n  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n  return returnValue;\n}\n```\n\nI was able to see a fix for a similar situation here:\nhttps://github.com/facebook/react/pull/4624/files\n\nI don't know if a similar check could be applied here, or maybe I just shouldn't remove my select as a result of an onChange event?\n",
        "title": "Render during reconciliation causes NPE",
        "labels": "Type: Bug",
        "id": 45859
    },
    {
        "body": "The cursor should not jump to the end of the text field when editing text: https://jsfiddle.net/h89zmzp8/\n\nIt's `unstable_`, so it probably doesn't need to be fixed before the v15 milestone, but we should get it fixed at some point.\n\ncc @jquense \n",
        "title": "Updates not queued properly when using unstable_renderSubtreeIntoContainer",
        "labels": "Type: Bug",
        "id": 45860
    },
    {
        "body": "I'm not sure if this is expected but it caught me out earlier:\n\n```\n// Without clone\nfunction MyComponent() {}\n\nMyComponent.defaultProps = {\n    foo: 'foo'\n};\n\nlet element = React.createElement(MyComponent, {\n    foo: undefined\n});\n\nconsole.log(element.props.foo); // 'foo'\n```\n\n```\n// With clone\nfunction MyComponent() {}\n\nMyComponent.defaultProps = {\n    foo: 'foo'\n};\n\nlet element = React.createElement(MyComponent);\nelement = React.cloneElement(element, {\n    foo: undefined\n});\n\nconsole.log(element.props.foo); // undefined\n```\n",
        "title": "React.cloneElement handles `undefined` props differently to React.createElement",
        "labels": "Type: Bug",
        "id": 45861
    },
    {
        "body": "If the name of the input field is \"props\" this test fails.  Anything else seems fine.\n\nOnly in FF though.\n\n```\nFAILED form test should find button debug.html:35:1\nHTMLFormElement doesn't have a named property setter for '\"props\"'\nReactDOMComponent.Mixin.getPublicInstance@base/test/index.js:11797:12\nfindAllInRenderedTreeInternal@base/test/index.js:143582:21\nfindAllInRenderedTreeInternal@base/test/index.js:143595:23\nReactTestUtils.findAllInRenderedTree@base/test/index.js:143681:13\nReactTestUtils.scryRenderedDOMComponentsWithTag@base/test/index.js:143729:1\n@base/test/index.js:144114:33\n debug.html:38:11\n\n```\n\nHere is a test case.\n\n``` jsx\nimport React, {DOM, Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport expect from 'expect';\nimport {renderIntoDocument, scryRenderedComponentsWithType as withType, scryRenderedDOMComponentsWithTag as withTag} from 'react-addons-test-utils';\n\nfunction into(node, debug) {\n    debug = document.createElement('div');\n    document.body.appendChild(debug)\n    return ReactDOM.render(node, debug);\n}\n\nclass App extends Component {\n    render() {\n        return <form>\n            <button>Hello</button>\n            <input name=\"props\"/>\n        </form>\n    }\n}\n\ndescribe('form test', function () {\n\n    it('should find button', function () {\n\n        var f = into(<App/>);\n\n        expect(withTag(f, 'button')[0]).toExist();\n\n    });\n});\n```\n",
        "title": "scryRenderedDOMComponentsWithTag throws error on FF 43.0.4",
        "labels": "Type: Bug",
        "id": 45862
    },
    {
        "body": "code exmaple: [Non-minified version](https://jsfiddle.net/sy7eja68/) and [Minified version](https://jsfiddle.net/sy7eja68/1/)\n\nBoth have the same code, html and js, the only difference is referenced to different version of react.js files.\n\nThere are three boxes.  Dragging the \"**drag me**\" box will show a \"**start**\" at the top, then show a \"**over**\" if it is dragged over either \"**normal drop**\" or \"**drop react**\" box, and show a \"**end**\" with a drop to the two drop boxes.\n\nEverything works fine on my Firefox(43.0.1), and the the [Minified version](https://jsfiddle.net/sy7eja68/1/) works fine on my IE 11, and Edge(13).\n\nThe only thing dose not work is the  [Non-minified version](https://jsfiddle.net/sy7eja68/) on IE/Edge.\n\nWhen dragging over the  \"**drop react**\" box, there shows **NO** \"over\".  In the F12 console, I can see lines of \"`SCRIPT16389: Unspecified error.`\". And with `console.log(ev.dataTransfer)`, I get this result: \n\n```\n[object DataTransfer] {\n   dropEffect: <Permission denied>,\n   effectAllowed: \"all\",\n   files: FileList {...}, \n   items: DataTransferItemList {...}, \n   types: DOMStringList {...}\n}\n```\n\nI thought the `dropEffect` should also be accessible on IE/Edge with non-minified version react.js files?\n",
        "title": "DataTransfer's dropEffect not working on IE/Edge with not minified version react.js",
        "labels": "Type: Bug",
        "id": 45863
    },
    {
        "body": "If you keep a `_this` reference at the `componentWillMount()` lifecycle method of a component that is then rendered with `renderToString()`, then `_this.isMounted() === true` later on. The documentation however claims that server-side components aren't really mounted; since `componentDidMount()` is never called.\n\nI think this behavior changed in React 0.14 but that might be wrong.\n",
        "title": "After server-side renderToString() component claims it isMounted() ",
        "labels": "Type: Bug",
        "id": 45864
    },
    {
        "body": "Did not know where to post this best.\n\nSince some weeks, the layout looks broken on https://facebook.github.io/react/html-jsx.html\n\nGoogle Chrome 43, Linux\n\nScreenshot:\n![selection_003](https://cloud.githubusercontent.com/assets/417542/10411670/7a7529c8-6f6d-11e5-9c97-ef8c2d1b3755.png)\n",
        "title": "Page messed up: facebook.github.io/react/html-jsx.html",
        "labels": "Type: Bug",
        "id": 45865
    },
    {
        "body": "When you blacklist \"es6.arrowFunctions\" from Babel, the following will stop working and you will get the error \"Uncaught TypeError: not a constructor\".\n\n``` js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => <div>Hello world</div>\nReactDOM.render(<App />, document.getElementById('root'))\n```\n",
        "title": " Stateless function components do not work with native arrow functions",
        "labels": "Type: Bug",
        "id": 45866
    },
    {
        "body": "http://jsbin.com/yiyusuwuco/1/edit?js,console,output\n1. Focus the textbox.\n2. Press shift-tab to move focus into the radio button group.\n3. Press spacebar to check the radio button.\n   - Observe a click event in the console.\n4. Press spacebar to redundantly check the radio button.\n   - In Chrome 45.0.2454.85 (64-bit, OSX), observe no additional click event in the console.\n   - In Firefox 40.0.3 (OSX), observe an additional click event in the console.\n\nThis is entirely the browsers' fault, but, since React's Synthetic Event system is trying to fully normalize inconsistencies like this, here's an obscure one for the list :/\n\nI, at least, prefer Firefox's behavior: I expect real clicks and synthetic (keyboard-originated) clicks to have the same conditions for firing.\n\n(Incidentally, this feels to me like it might've been an accident in Chrome rather than an explicit decision. Is there some place to file this bug with them? I feel like that's pretty pie-in-the-sky, though ;P)\n",
        "title": "Pressing spacebar on a checked radio button only fires click in some browsers",
        "labels": "Type: Bug",
        "id": 45867
    },
    {
        "body": "I loop my product list with map() and create a react component for each item.\n\n``` javascript\n      var ProductListItem = React.createClass({\n        handleEvent: function(e) {\n          console.log(e.target.value);\n        },\n        render: function() {\n          return (\n            <tr>\n              <th>{this.props.id}</th>\n              <th>{this.props.name}</th>\n              <th>{this.props.quantity}</th>\n              <th>\n                <button type=\"button\" className=\"btn btn-default btn-sm\" value={this.props.id} onClick={this.handleEvent}>\n                  <span className=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n                </button>\n              </th>\n            </tr>\n          );\n        }\n      });\n```\n\nWhen I click on the button sometimes the e.target.value is defined and sometimes undefined. Its totally random. After clicking on the button 50 times, the value sets magically undefined.\n",
        "title": "Target value sometimes undefined",
        "labels": "Type: Bug",
        "id": 45868
    },
    {
        "body": "I have put together this [simple example](http://jsbin.com/cimirozeje/edit?js,console,output) to demonstrate the issue.\n\nThe problem is happening on `select` elements. If there are any mouse event listeners attached that would trigger a render, the `onChange` handler never gets called.\n\nIt looks like unlike other browsers, **IE** and **Edge** trigger mouse events on the `select` element when clicking on the options, but that should not prevent the `change` event from triggering.\n",
        "title": "Change event does not fire in IE and Edge under certain circumstances",
        "labels": "Type: Bug",
        "id": 45869
    },
    {
        "body": "I have a super simple React (Native) component with a static root with a callback ref. When the component is mounted, the callback ref is invoked with the root component. Then when I call `setState` the callback ref receives `null` and then the root component again.\n\n``` js\nclass Example extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    console.log('in the constructor');\n  }\n\n  render() {\n    return (\n      <View\n        key=\"root\"\n        ref={component => { console.log('got ref', component); }}\n        style={this.props.style}\n      />\n    );\n  }\n\n  componentDidMount() {\n    console.log('in componentDidMount');\n    this.setState({});\n  }\n}\n```\n\nThe console logs read:\n\n```\nin the constructor\ngot ref R\u2026s.c\u2026s.Constructor {props: Object, context: Object, refs: Object, updater: Object, state: null\u2026}\nin componentDidMount\ngot ref null\ngot ref R\u2026s.c\u2026s.Constructor {props: Object, context: Object, refs: Object, updater: Object, state: null\u2026}\n```\n\nThe `null` ref is confusing to me since the ref'd view isn't unmounted nor is its parent. I believe this is under 0.14 beta 1 (whatever RN master uses). \n",
        "title": "Callback ref is passed null and then the component again",
        "labels": "Type: Bug",
        "id": 45870
    },
    {
        "body": "I'm experiencing an unexpected error related to \"native\" DOM events created in an \"owner\" component and triggered by DOM elements rendered by \"owned\" components.  There's been a number of seemingly related issues, the closest being #3790 - but this might be a different edge case so I thought I'd create a new issue for it.\n### Reproduction\n\nI've tried to whittle this down as much as possible:\n(The JSFiddle is using 0.13.3, but I get the same error using 0.14.0-beta1)\nhttps://jsfiddle.net/dmininger/8rdqhnox/\n#### Steps\n1. Click \"Go to Two\"\n2. Click \"Go to One\"\n3. Click \"Go to Two\"\n\nThe second time component `Two` is rendered React throws `Invariant Violation: ReactMount: Two valid but unequal nodes with the same `data-reactid``\n#### Notes\n\nAs I was trying to narrow down the cause, I found that under the following scenarios **no** error will be thrown:\n1. An onClick prop with an empty function (`onClick: function(){}`) is added to the \"a\" element in component `One`. See https://jsfiddle.net/dmininger/kx98qfd2/\n2. The \"input\" element in component `Two` is removed (leaving the \"form\" element). See https://jsfiddle.net/dmininger/snjb8ysq/\n3. The return value of the render methods of components `One` and `Two` are inlined in the render method of the `Main` component  (i.e. everything is rendered by a single component). See https://jsfiddle.net/dmininger/3majxxL0/\n4. ONLY WHEN USING 0.14.0-beta1: The \"form\" element in component `Two` is removed (leaving the \"input\" element). (Sorry, no fiddle, is 0.14.0-beta1 on a CDN?) This still throws in 0.13.3.\n\nThanks!\n",
        "title": "Yet Another Invariant Violation: ReactMount: Two valid but unequal nodes with the same `data-reactid`",
        "labels": "Type: Bug",
        "id": 45871
    },
    {
        "body": "See this jsfiddle: https://jsfiddle.net/tvxderw3/\n\nIn Chrome, as you quickly move your mouse up and down the list, you'll notice that some get stuck in the hover state. This works fine in Safari, and works in Chrome if you use a stable key between the hover states. I think `mouseout` somehow isn't firing if the underlying DOM node is replaced by a new one in the same tick, but it's odd that this is a Chrome-only bug.\n",
        "title": "`onMouseLeave` can be unreliable in Chrome",
        "labels": "Type: Bug",
        "id": 45872
    },
    {
        "body": "After migrating from 0.13 to 0.14-beta1, some of our unit tests are reporting false positive failures. It seems as though `findRenderedDOMComponentWithTag` is no longer able to find elements inside components.\n\n``` javascript\n// Create simple component\nconst test = React.createClass({\n    render: () => {\n        return <div><svg /></div>;\n    }\n});\n\n// Render into document\nconst MyElement = ReactTestUtils.renderIntoDocument(<test />);\n\n// Make sure component has an SVG element\nconst svg = ReactTestUtils.findRenderedDOMComponentWithTag(MyElement, 'svg');\n// OOPS! This fails in 0.14 with:\n// > Did not find exactly one match for tag:svg\n\n// However, this works just fine\nconsole.log(findDOMNode(MyElement).childNodes[0]);\n// => Returns \"<svg/>\" element\n```\n",
        "title": "Unexpected behavior of `findRenderedDOMComponentWithTag` in React 0.14-beta1",
        "labels": "Type: Bug",
        "id": 45873
    },
    {
        "body": "[Here is code for reproducing:](https://jsfiddle.net/69z2wepo/11806/)\n\n``` js\nvar Test = React.createClass({\n  render: function() {\n    return (\n      <select defaultValue={this.props.current}>\n        {this.props.items.map((i) => (\n          <option value={i} key={i}>{i}</option>\n        ))}\n      </select>\n    );\n  }\n});\n\nvar container = document.getElementById('container');\nvar code = document.getElementById('code');\nvar test = <Test items={[1, 2, 3]} current={2} />;\nvar prerender = React.renderToString(test);\ncode.innerText = prerender.replace(/></g, '>\\n<');\n\ncontainer.innerHTML = prerender;\nsetTimeout(() => {\n  React.render(test, container)\n}, 1000);\n```\n\nSo I'm rendering `select` on  the server and got small lag on the client.\n",
        "title": "renderToString incorrectly supports select's defaultValue",
        "labels": "Type: Bug",
        "id": 45874
    },
    {
        "body": "This came up while diagnosing #4321 - https://github.com/facebook/react/issues/4321#issuecomment-120064258\n\nThis is because we just look for the closing `>` when adding the checksum.\n\n```\n> ReactDOM.renderToString(React.createElement('img'))\n'<img data-reactid=\".yxoueqje2o\"/ data-react-checksum=\"-951841932\">'\n> ReactDOM.renderToString(React.createElement('div', null, React.createElement('img')))\n'<div data-reactid=\".2d7dcluvuv4\" data-react-checksum=\"-890562330\"><img data-reactid=\".2d7dcluvuv4.0\"/></div>'\n```\n",
        "title": "Checksum inserted incorrectly for self-closing root tags",
        "labels": "Type: Bug",
        "id": 45875
    },
    {
        "body": "Hi, I am trying to find a working example of driving a multiple select element using React's TestUtils. For a single select this works fine:\n\n``` javascript\nTestUtils.Simulate.change(el, { target: { value: 1 } });\n```\n\nFor a multiple select field, you get an error:\n\n```\nTypeError: Array.prototype.slice called on null or undefined\n```\n\nIf instead pass an array of arguments to `change` it doesn't seem to be triggering the change handler or being reflected in the component state:\n\n``` javascript\nTestUtils.Simulate.change(el, [{ target: { value: 1 } }]);  // doesn't seem to trigger any change in component state\n```\n\nApologies if I'm missing something obvious but if anyone knows of the proper way to do this any help would be appreciated.\n\nThanks\n",
        "title": "Example of using TestUtils.Simulate.change on a multiple select field.",
        "labels": "Type: Bug",
        "id": 45876
    },
    {
        "body": "There is an asymmetry to EnterLeave event plugin. Since `mouseenter` is created from the relativeTarget of the `mouseout` event it fires even though the target is disabled. Since the `mouseleave` is the inverse, i.e requires that the disabled element fire a mouseout, it doesn't fire a `mouseleave` for the disabled element.\n\nI am pretty sure the correct behavior here is that neither event should fire if its target is disabled, since this mirrors `mouseout`. No idea if none-chrome browsers have the same behavior for which mouse events fire on disabled elements.\n\nAdditional caveat I just realized, React is probably also not firing `mousenter` events in the case where the mouse leaves a disabled element into a non disabled element\n",
        "title": "mouseenter fires on disabled inputs whereas mouseleave does not",
        "labels": "Type: Bug",
        "id": 45877
    },
    {
        "body": "### Extra details\r\n\r\n* Similar discussion with extra details and reproducing analysis: https://github.com/facebook/react/issues/8683\r\n* Previous attempt to fix it: https://github.com/facebook/react/pull/8438 (includes some unit tests, but sufficient to be confident in the fix)\r\n\r\n------\r\n\r\n### Original Issue\r\n\r\n\r\nWhen I was trying this [example](https://jsfiddle.net/reactjs/n47gckhr/light/) from https://facebook.github.io/react/blog/2013/11/05/thinking-in-react.html, any Chinese characters inputted by Chinese pinyin input method would fire too many renders like:\r\n\r\n![screen shot 2015-05-21 at 14 04 36](https://cloud.githubusercontent.com/assets/1091472/7742565/2c8625b0-ffc3-11e4-8ac2-d7eb22a3aef3.png)\r\n\r\nActually I would expect those not to fire before I confirm the Chinese character.\r\n\r\nThen I tried another kind of input method - wubi input method, I got this:\r\n\r\n![screen shot 2015-05-21 at 14 17 15](https://cloud.githubusercontent.com/assets/1091472/7742657/42c27bac-ffc4-11e4-8a3a-7d4550e88a59.png)\r\n\r\nIt's weird too. So I did a test [in jQuery](http://jsbin.com/yepogahobo/1/edit?html,js,console,output):\r\n\r\n![screen shot 2015-05-21 at 14 05 12](https://cloud.githubusercontent.com/assets/1091472/7742591/71da6842-ffc3-11e4-9d7a-a8438721029c.png)\r\n\r\nOnly after I press the space bar to confirm the character, the `keyup` event would fire.\r\n\r\nI know it might be different between the implementation of jQuery `keyup` and react `onChange` , but I would expect the way how jQuery `keyup` handles Chinese characters instead of react's `onChange`.\r\n",
        "title": "Change event fires extra times before IME composition ends",
        "labels": "Type: Bug",
        "id": 45878
    },
    {
        "body": "Hi,\n\nI don't really know if this is expected but the following:\n\n```\nvar Hello = React.createClass({\n    render: function() {\n        return <div test={this.props.value} placeholder={this.props.value} data-placeholder={this.props.value}>Hello</div>;\n    }\n});\n\nReact.render(<Hello value=\"World\"/>, document.body);\n```\n\nWill lead to \n\n```\n<div placeholder=\"World\" data-placeholder=\"World\" data-reactid=\".0\">Hello</div>\n```\n\nIt seems that React did not mount the \"test\" attribute because it's not standart. But actually it mounted the placeholder attribute while it is not standart too. Is this expected?\n\nSo React can mount a div with a placeholder attribute in its current state, but the weird thing is that it can't update this attribute.\n\n```\nvar Hello = React.createClass({\n    render: function() {\n        return <div test={this.props.value} placeholder={this.props.value} data-placeholder={this.props.value}>Hello</div>;\n    }\n});\n\nReact.render(<Hello value=\"World\"/>, document.body);\nReact.render(<Hello value=\"WorldUpdated\"/>, document.body);\n```\n\nThis will produce:\n\n```\n<div placeholder=\"World\" data-placeholder=\"WorldUpdated\" data-reactid=\".0\">Hello</div>\n```\n\nSee http://jsfiddle.net/kb3gN/10968/\n\nDon't know how this is supposed to work but I think the current behavior is kind of unexpected ;)\n",
        "title": "React can mount with <div placeholder=x> but does not update placeholder attribute",
        "labels": "Type: Bug",
        "id": 45879
    },
    {
        "body": "My co-worker and I were caught off-guard by this behaviour yesterday, and I wanted to see if this is a possible React bug or some misunderstanding on our part.\n\nBasically it seems having more than one part to the innerhtml of an option element and then trying to update one of them will throw the error:\n\n```\n\"Uncaught Error: Invariant Violation: findComponentRoot(..., .0.1.$0.0): Unable to find element.\nThis probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent.\nTry inspecting the child nodes of the element with React ID ``.\"\n```\n\nWe have worked around it by combining the parts into a single variable and then using that.\n\nHere is the jsfiddle demonstrating the error: http://jsfiddle.net/johnarnold212675186/14te87oy/\nHere is what we've done as a workaround: http://jsfiddle.net/johnarnold212675186/zqgjjwaL/\n\nAm I doing something wrong, or is this something that should be possible with React?\n",
        "title": "Uncaught Error: \"Unable to find element\" when updating the innerhtml of an Option element.",
        "labels": "Type: Bug",
        "id": 45880
    },
    {
        "body": "In this repro, I created 2 buttons and only one is rendered at a time. One button's click handler is hooked up to React's synthetic \"click\" event while the other is hooked up to the native \"click\" event. Even though only one button is rendered at a time, a single click is triggering both click events.\n\nThis bug can be hit by apps that mix React components with non-React controls (e.g. jQuery UI).\n### Repro Steps\n\nI reproed this in Chrome with React 0.13.2.\n1. Go to http://jsfiddle.net/xzucgepn/\n2. Click the button labeled \"One\"\n\n**Expected:** There's a button rendered labeled \"Two\"\n\n**Actual:** The rendered button still has the label \"One\"\n\nIf you open the console, you'll see \"goToTwo\" and \"goToOne\" which indicates that the \"One\" button's click handler ran and then the \"Two\" button's click handler ran (even though we never saw button \"Two\"\").\n",
        "title": "Bad interaction between React \"click\" event handler and native \"click\" event handler",
        "labels": "Type: Bug",
        "id": 45881
    },
    {
        "body": "ReactBrowserEventEmitter has some handling for `onBlur` and `onFocus`.\n\nSee:\nhttps://github.com/facebook/react/blob/94a3b0f8a304202bb7c4cc32286e404ac3cc9464/src/browser/ReactBrowserEventEmitter.js#L262-L293\n\nReact will first check if it can trap `focus` with a capturing event using `addEventListener`. If it can't and the browser supports `focusin` then it will use `focusin`.\n\nHowever there is a problem with this pattern. Internet Explorer implements `relatedTarget` on `focusin` and `focusout` but it does not implement it in `focus` and `blur`. As of IE 9, IE supports addEventListener and trapping capturing events.\n\nThis means that IE 8 and before React will have `relatedTarget` on `onFocus` and `onBlur` handlers. But in IE 9-11 `relatedTarget` will be null in React's `onFocus` and `onBlur` handlers even though IE would support it if `focusin` and `focusout` had been used.\n",
        "title": "React's blur may not have relatedTarget in IE 9-11 where it is supported.",
        "labels": "Type: Bug",
        "id": 45882
    },
    {
        "body": "You can see the behavior in this fiddle: https://jsfiddle.net/leoasis/0psmxd3t/2/\n\nBasically the thing is that the `<noscript>` tag is always being updated in the DOM (check the Elements view with the Chrome inspector to see the elements updated). This doesn't happen if the component explicitly returns a `<noscript>` instead of `null`.\n",
        "title": "Component rendering null always triggers a DOM update",
        "labels": "Type: Bug",
        "id": 45883
    },
    {
        "body": "Hello, \n\nIt seems like change event is not fired for input type=date in mobile Firefox on Android. \n\nPlease try the following jsFiddle code for example http://jsfiddle.net/adaniliuk/srt6mp0p/\n\nMay be I'm doing something wrong? But the above code works well in Chrome, Safari and desktop Firefox but not in mobile Firefox - tested in Firefox v.37.0.1 on Android 5.1\n\nJust in case vanilla JavaScript works well in this case http://jsfiddle.net/adaniliuk/voueyub9/\n\nThank you in advance,\nAndrei\n",
        "title": "change event is not fired for input type=date",
        "labels": "Type: Bug",
        "id": 45884
    },
    {
        "body": "When I assign null to style attribute to reset it, it works... but only once. Any following changes of this value do nothing. Here's a fiddle demonstrating this - try to push the button several times:\nhttp://jsfiddle.net/bqnhkwju/\n\nThis seems like a strange behaviour to me - I wouldn't be surprised, if my first attempt to set style=null failed, but it doesn't and it silently breaks the style attribute.\n",
        "title": "setting attribute \"style\" to null breaks this attribute",
        "labels": "Type: Bug",
        "id": 45885
    },
    {
        "body": "I'm still learning React, so it's possible I'm misunderstanding something.\n\nI'm trying to use React with Immutable.js, and hit a stumbling block, by upgrading to React 0.13. There is [wiki page](https://github.com/facebook/immutable-js/wiki/Immutable-as-React-state) on the immutable.js repository, that explains how to use immutable as a react state, and it provides the following example (I transpiled it to ES3):\n\n``` js\n'use strict';\n\nvar React = require('react');\nvar Immutable = require('immutable');\n\nvar Component = React.createClass({\n\n  getInitialState: function() {\n    return Immutable.Map({count:0});\n  },\n\n  handleClick: function() {\n    this.replaceState(this.state.update('count', function(v) { return v + 1 }));\n  },\n\n  render: function() {\n    return (\n      <div onClick={this.handleClick}>\n        {this.state.get('count')}\n      </div>\n    );\n  }\n\n});\n\nReact.render(<Component />, document.body);\n```\n\nThis works great in 0.12, but in 0.13, you will receive the following error when clicking on the div:\n\n```\nTypeError: this.state.get is not a function\nthis.state.get('count')\n```\n\nPutting a breakpoint on the error, and inspecting this.state with a debugger reveals that all the methods on this.state have disappeared.\n\nIs this the expected behavior in 0.13?\n",
        "title": "replaceState throws away functions in 0.13",
        "labels": "Type: Bug",
        "id": 45886
    },
    {
        "body": "Demonstrated at http://jsfiddle.net/xnhzvdoa/1/; open the error console and you should see this:\n\n```\nUncaught Error: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref.\n```\n\n---\n\n``` js\nvar Bug = React.createClass({\n    render: function() {\n        var html = React.renderToStaticMarkup(React.DOM.img());\n        return React.DOM.div({ ref: 'ref' }, html);\n    }\n});\nBug = React.createFactory(Bug);\n\nReact.render(Bug(), document.body);\n```\n",
        "title": "Invoking renderToStaticMarkup in render() causes refs to break",
        "labels": "Type: Bug",
        "id": 45887
    },
    {
        "body": "This is tough for me to explain so I created a fiddle to demonstrate it. I have a layer/portal/whatever we are calling this pattern, that renders the children of a component to a new tree off of body via `React.render()`. I would expect context to also be passed, and I've taken special care to make sure the child to be passed to `.render()` is created with the correct owner. It all works fine context is passed, but it is never updated at that point. If I inspect the child element to be passed `._context` is correct but `.context` is never updated on the instance. Not sure if perhaps I just have the wrong expectation here?\n\nHere is an illustration: **(updated with simpler example)**\nhttp://jsfiddle.net/69z2wepo/3772/\n",
        "title": "Context not updated on Component mounted with React.render()",
        "labels": "Type: Bug",
        "id": 45888
    },
    {
        "body": "``` js\nvar Foo = React.createClass({\n  propTypes: {\n    child: React.PropTypes.node\n  },\n\n  render: function() {\n    return <div>parent: {this.props.child}</div>;\n  }\n});\n\nvar Demo = React.createClass({\n  render: function() {\n    return (\n      <Foo child={{a: null}} />\n    );\n  }\n});\n\nReact.render(\n  <Demo />,\n  document.body\n);\n```\n\n> Warning: Failed propType: fragment is null Check the render method of `Demo`.\n> \u2014Firefox\n> \n> Warning: Failed propType: Cannot read property '_reactFragment' of null Check the render method of `Demo`.\n> \u2014 Chrome\n\ncc @kassens \n",
        "title": "node PropType validation hits error with null values",
        "labels": "Type: Bug",
        "id": 45889
    },
    {
        "body": "Expected result: rendered text `There was an error`\nActual result: `Uncaught TypeError: Cannot read property 'unmountComponent' of undefined`\nJSFiddle: http://jsfiddle.net/kb3gN/10167/\n\nThe code:\n\n``` js\nvar Parent = React.createClass({\n    getInitialState: function() {\n        return {error: false};\n    },\n    componentWillMount: function() {\n        var self = this;\n        // window.onerror is only used for brevity\n        window.onerror = function() {\n            if(self.isMounted()) {\n                self.setState({error: true});\n            }\n        };\n    },\n    render: function() {\n        if(this.state.error) {\n            return <div>There was an error</div>;\n        } else {\n            return <Child />;\n        }\n    }\n});\n\nvar Child = React.createClass({\n    componentWillMount: function() {\n        throw new Error(\"test error\");\n    },\n    render: function() {\n        return <div>Child</div>;\n    }\n});\n\nReact.render(<Parent />, document.body);\n```\n",
        "title": "TypeError when parent Component is updated after uncaught exception in child Component's componentWillMount",
        "labels": "Type: Bug",
        "id": 45890
    },
    {
        "body": "The Firefox equivalent of `-webkit-font-smoothing` is `-moz-mac-osx-font-smoothing`. React's serialization of this style prop is incorrect (`-moz-mac-o-s-x-font-smoothing`). See this fiddle in firefox: http://jsfiddle.net/1edozfvt/. If the initial state is supposed to enable font smoothing (via innerHTML) it breaks, but subsequent updates (which use the DOM API) work.\n",
        "title": "MozMacOSXFontSmoothing is rendered incorrectly",
        "labels": "Type: Bug",
        "id": 45891
    },
    {
        "body": "Hi,\n\nWhen trying to unmount my whole app, I got some error.\n\n> Uncaught TypeError: Cannot read property 'firstChild' of undefined \n> ReactMount.js:606ReactMount.findComponentRoot \n> ReactMount.js:606ReactMount.findReactNodeByID ReactMount.js:552getNode \n> ReactMount.js:128executeDispatch EventPluginUtils.js:109SimpleEventPlugin.executeDispatch \n> SimpleEventPlugin.js:305forEachEventDispatch EventPluginUtils.js:95executeDispatchesInOrder \n> EventPluginUtils.js:119executeDispatchesAndRelease EventPluginHub.js:46forEachAccumulated \n> forEachAccumulated.js:25EventPluginHub.processEventQueue \n> EventPluginHub.js:251runEventQueueInBatch \n> ReactEventEmitterMixin.js:18ReactEventEmitterMixin.handleTopLevel \n> ReactEventEmitterMixin.js:44handleTopLevelImpl ReactEventListener.js:80Mixin.perform \n> Transaction.js:134ReactDefaultBatchingStrategy.batchedUpdates \n> ReactDefaultBatchingStrategy.js:66batchedUpdates \n> ReactUpdates.js:109ReactEventListener.dispatchEvent ReactEventListener.js:175\n\nI think it's not a big deal.\n\nAccording to what I see with the debugger, it seems to be because a `SyntheticMouseEvent` is trying to get dispatched. And I guess the target has just been unmounted...\n\nNote that my use case looks like this:\n\n``` javascript\nvar Hello = React.createClass({\n    render: function() {\n        return <div onClick={unmount}>Hello {this.props.name}</div>;\n    }\n});\n```\n\nWhen using an `unmount` synchronous implementation, I get this error.\nWhen adding a setTimeout 0 in the unmount code, I got no error. \n\nI could not reproduce this in a jsfiddle, but I guess it's probably because I don't really know how batching work in React.\n",
        "title": "React fails to unmount component from within event handler",
        "labels": "Type: Bug",
        "id": 45892
    },
    {
        "body": "If JSXTransformer is called with `sourceMap: true` as an option but the JavaScript environment does not have `Object.defineProperty`, the transformation dies here with an \"Object doesn't support property or method 'defineProperty'\" exception:\n\n```\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(SourceMapConsumer.prototype, 'sources', { \n```\n\nThis should degrade more gracefully and simply turn off source maps if not available. If I pass `sourceMap: false` rather than true, everything works fine, so it just seems like some code needs to be gated with an environment check. There does appear to be some logic in JSXTransformer to try and detect this, but it seems like this check is either incomplete or some other code also needs to be wrapped in this check:\n\n```\n// The source-map library relies on Object.defineProperty, but IE8 doesn't\n// support it fully even with es5-sham. Indeed, es5-sham's defineProperty\n// throws when Object.prototype.__defineGetter__ is missing, so we skip building\n// the source map in that case.\nvar supportsAccessors = Object.prototype.hasOwnProperty('__defineGetter__');\n```\n\nAlso see https://github.com/reactjs/React.NET/issues/89\n",
        "title": "JSXTransformer breaks when creating source maps and defineProperty not available",
        "labels": "Type: Bug",
        "id": 45893
    },
    {
        "body": "Apparently we support rendering into iframes (@petehunt), but we always render new markup into the global document and then move rendered elements into the iframe document afterwards. JSDOM throws `Wrong document` if you try to do this but browsers don't seem to mind.\n\nHowever, apart from perhaps not being very nice for various reasons, it seems to affect performance _significantly_: http://jsperf.com/renderdoc2 IE11 drops down to 33% performance and FF drops to about 20% (!) when rendering into the global document and moving rather than rendering directly into the iframe document.\n\nThis is easily solved everywhere except for `processUpdates` as renders into different documents are batched as well?\n\ncc @spicyj @zpao\n",
        "title": "createNodesFromMarkup renders with global document",
        "labels": "Type: Bug",
        "id": 45894
    },
    {
        "body": "If you unmount a currently focused node, `nodeCache` is repopulated after being purged and unless that specific ID is revisited later, it will remain there forever. ~~This is mostly likely due to the focus/selection restoration phase after reconciliation.~~\n\nRepro: http://dev.cetrez.com/jsx/nodecache.html (nodeCache is output into the console)\n",
        "title": "ReactMount.nodeCache is repopulated with purged nodes that are focused at unmount",
        "labels": "Type: Bug",
        "id": 45895
    },
    {
        "body": "tl;dr: If you have a component that returns `null` and it rerenders, the noscript tag is unmounted and a new one is created because shouldUpdateReactComponent gets `<ReactEmptyComponentType />` and `null` and returns false.\n\n---\n\nThis came out of some internal components that were breaking after the most recent update.\n\nI haven't gone to see if this is more widely broken - it might have been before any of the recent updates, just that the empty component is triggering it reliably. I've been some reports of `<img>` having similar weird problems that we couldn't track down. It's use of `LocalEventTrapMixin` is very similar to what's happening in `ReactEmptyComponentType`.\n\nThe trigger here is that we're triggering an update during the mount phase. When we do this `<Child key=\"0\">` works correctly because it's before `<Child key=\"1\">` which is triggering `Parent` to rerender. `<Child key=\"2\">` is the broken one because its `componentDidMount` hasn't been called yet. So we actually call its `componentWillUnmount` first. Then we still call its `componentDidMount`.\n\nThere's also the whole question of _why_ we're trying to unmount anything at all here. It seems like we shouldn't be doing that.\n\ncc @sebmarkbage @spicyj\n\nDrop this into examples/basic-jsx-harmony and debug with pausing on caught exceptions. I added some breakpoints in ReactEmptyComponent to make it super obvious.\n\n``` js\n'use strict';\n\nvar Child = React.createClass({\n  componentDidMount() {\n    this.props.onMount && this.props.onMount();\n  },\n  render() {\n    if (!this.props.visible) {\n      return null;\n    }\n\n    return <div>hello world</div>;\n  }\n})\n\n\nvar Parent = React.createClass({\n  update() {\n    this.forceUpdate();\n  },\n  render() {\n    return (\n      <div>\n        <Child key=\"0\" visible={false} />\n        <Child key=\"1\" visible={true} onMount={this.update} />\n        <Child key=\"2\" visible={false} />\n      </div>\n    );\n  }\n})\n\nReact.render(\n  <Parent/>,\n  document.getElementById('container')\n);\n```\n",
        "title": "When returning null, <noscript /> tag is always rerendered",
        "labels": "Type: Bug",
        "id": 45896
    },
    {
        "body": "The returned error is `<error>` and nothing else. Maybe adding a link to the note in http://facebook.github.io/react/docs/component-specs.html#updating-componentwillupdate would help.\n",
        "title": "setState in componentWillUpdate should return a proper error",
        "labels": "Type: Bug",
        "id": 45897
    },
    {
        "body": "If the contents of the `<option>` element is constructed in special way, it breaks React on component update with \"Unable to find element\" error. Here's an example of `render` method body:\n\n```\n    var v1 = String(Math.random());\n    var v2 = String(Math.random());\n    return <select><option value={v2}>{v1} ({v2})</option></select>;\n```\n\nHere's working jsfiddle (with React 0.12.0): http://jsfiddle.net/rp3fz0nf/1/\n\nAdding `key={v2}` to option props fixes the issue.\n",
        "title": "\"Unable to find element\" error on <option> elements",
        "labels": "Type: Bug",
        "id": 45898
    },
    {
        "body": "I've created a repo to help illustrate what I'm running into: https://github.com/awei01/react-jest-testing-illustration\n\nBasically, developing in pure jsx and using the React.createFactory() are not interchangeable under testing using jest. This makes writing unit tests a little trickier. \n\nAccording to this link: https://gist.github.com/sebmarkbage/d7bce729f38730399d28, non-jsx components must be wrapped in a React.createFactory(). But, when testing these components using Jest, I've found that these are not interchangeable within tests that mock sub-modules.\n\nI'm guessing that the differences stem from using .bind() within React.createFactory:\n\n```\nfunction createFactory(type){\n  return React.createElement.bind(null, type);\n}\n```\n",
        "title": "tests using React 0.12 and Jest-mocked sub-components result in different behavior when using jsx versus React.createFactory()",
        "labels": "Type: Bug",
        "id": 45899
    },
    {
        "body": "I know `this.context` is not officially there but quite a few libraries rely on it, and it seems like it's getting into shape with #2509.\n\nI'm trying to understand how exactly `shouldComponentUpdate` is supposed to be implemented with `context` in mind. I noticed it accepts a third argument (`nextContext`) and I can extend `PureRenderMixin` to also check it:\n\n``` javascript\n  shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n    return !shallowEqual(this.props, nextProps) ||\n           !shallowEqual(this.state, nextState) ||\n           !shallowEqual(this.context, nextContext); // this will throw without context, read on\n  }\n```\n\nComponents that don't opt into `this.context` by not omitting `contextTypes` will not get this third argument, which is understandable.\n\nHowever this presents a problem when we have a `<Middle />` component in between between `<Top />` context owner and `<Bottom />` context consumer. If `<Middle />` implements a restrictive `shouldComponentUpdate`, there is no way for `<Bottom />` to react to `<Top />`'s context updates at all:\n\n(**[fiddle](http://jsbin.com/radakepusi/2/edit?js,output)**)\n\n``` javascript\nvar Bottom = React.createClass({\n  contextTypes: {\n    number: React.PropTypes.number.isRequired\n  },\n\n  render: function () {\n    return <h1>{this.context.number}</h1>\n  }\n});\n\nvar Middle = React.createClass({\n  shouldComponentUpdate: function (nextProps, nextState, nextContext) {\n    return false;\n  },\n\n  render: function () {\n    return <Bottom />;\n  }\n});\n\nvar Top = React.createClass({\n  childContextTypes: {\n    number: React.PropTypes.number.isRequired\n  },\n\n  getInitialState: function () {\n    return { number: 0 };\n  },\n\n  getChildContext: function () {\n    return { number: this.state.number };\n  },\n\n  componentDidMount: function () {\n    setInterval(function () {\n      this.setState({\n        number: this.state.number + 1\n      });\n    }.bind(this), 1000);\n  },\n\n  render: function() {\n    return <Middle />;    \n  }\n});\n\nReact.render(<Top />, document.body);\n```\n\nThe same problem would occur if I tried to give `Middle` a generic context-aware `shouldComponentUpdate` as I wrote above, because `Middle` has no `this.context` unless it opts in.\n\nThis is possible to work around by adding `contextTypes` to `Middle`, but it doesn't look like a good solution. You'd need to explicitly add necessary `contextTypes` on every level with smart `shouldComponentUpdate` so it's too easy to slip up.\n\nWill this be solved by #2112? Is there another solution in the meantime? What is the recommended way?\n",
        "title": "How to implement shouldComponentUpdate with this.context?",
        "labels": "Type: Bug",
        "id": 45900
    },
    {
        "body": "I have an element and depending on some condition, may set it's background. If the condition is first true, and later false the element is left with some \"residual\" styles that were never set in code.\n\nOutput looks like:\n\n``` html\n<!-- condition true -->\n<div style=\"background: #ff0000\"></div>\n\n<!-- then when condition is false -->\n<div style=\"background-attachment: initial; background-size: initial; background-origin: initial; background-clip: initial;\"></div>\n```\n\nThese styles were never set by user code, and are interfering with styles in my CSS. \n\nHere's a fiddle showing the issue: http://jsfiddle.net/tfKYJ/78/\n",
        "title": "Adding and then removing \"background\" from style attribute creates unwanted styles",
        "labels": "Type: Bug",
        "id": 45901
    },
    {
        "body": "I have found a case where two very similar functions that output exactly the same DOM element, work in 2 different ways. Am I missing something? The only difference is I moved the DEFS block from the render function to the renderDefs function.\n\n```\nvar mainView = React.createClass({\n\n  getInitialState: function () {\n    return {\n      showDef: false\n    }\n  },\n\n  changeDefs: function () {\n\n    this.setState({\n      showDef: true\n    })\n  },\n\n  renderDefs: function () {\n    if (!this.state.showDef) return null;\n    return (\n    <defs>\n      <linearGradient id=\"Gradient1\">\n        <stop offset=\"5%\" stopColor=\"white\"/>\n        <stop offset=\"95%\" stopColor=\"blue\"/>\n      </linearGradient>\n    </defs>\n      );\n  },\n\n  render: function () {\n    var fillStyle = this.state.showDef ? {fill: \"url(#Gradient1)\"} : {fill: \"red\"};\n    return (\n      <svg viewBox=\"0 0 1024 700\" onClick={this.changeDefs}>\n          {this.renderDefs()}\n        <rect x=\"0\" y=\"0\" height=\"50\" width=\"50\" style={fillStyle}/>\n      </svg>\n      );\n  }\n\n//  FIXME, THIS VERION DOESN'T WORK\n//  NO CLUES WHY\n//  renderDefs: function () {\n//    if (!this.state.showDef) return null;\n//    return (\n//      <linearGradient id=\"Gradient1\">\n//        <stop offset=\"5%\" stopColor=\"white\"/>\n//        <stop offset=\"95%\" stopColor=\"blue\"/>\n//      </linearGradient>\n//      );\n//  },\n//\n//  render: function () {\n//    var fillStyle = this.state.showDef ? {fill: \"url(#Gradient1)\"} : {fill: \"red\"};\n//    return (\n//      <svg viewBox=\"0 0 1024 700\" onClick={this.changeDefs}>\n//        <defs>\n//          {this.renderDefs()}\n//        </defs>\n//        <rect x=\"0\" y=\"0\" height=\"50\" width=\"50\" style={fillStyle}/>\n//      </svg>\n//      );\n//  }\n});\n```\n",
        "title": "Strange behaviour for SVG defs",
        "labels": "Type: Bug",
        "id": 45902
    },
    {
        "body": "1. Use backspace/delete/paste/cut in the input field\n2. Undo (notice the entire document revert)\n3. Redo or type something\n4. :boom: React will throw an invariant and stop to function as the DOM has mutated\n\nNormally, when the DOM updates IE8 will clear the undo history of all inputs. However that does not happen under these circumstances for some reason. I would assume this is because `onChange` listens to many different events and some of them are broken like this.\n\n```\nvar App = React.createClass({\n  getInitialState: function() {\n    return {changes: 0};\n  },\n  handleChange: function(e) {\n    this.setState({changes: this.state.changes + 1});\n  },\n  render: function() {\n    return (\n      <div>\n        <input onChange={this.handleChange} defaultValue=\"text\" />\n        {this.state.changes ? <div>{this.state.changes}</div> : null}\n      </div>\n    );\n  }\n});\n\nReact.renderComponent(<App />, document.body);\n```\n\nYou can test it yourself here: https://dev.cetrez.com/jsx/2/index12.html\n\ncc @spicyj\n",
        "title": "Nasty IE8 user input bug",
        "labels": "Type: Bug",
        "id": 45903
    },
    {
        "body": "Specific to Safari - breaks update.js addon in this place:\n\n```\n if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n  nextValue[k] = update(value[k], spec[k]);\n}\n```\n\ncan be fixed with\n\n```\nif (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n  if(!(/string|boolean/i).test(typeof value[k])) { \n    nextValue[k] = update(value[k], spec[k]);\n  }\n}\n```\n",
        "title": " Safari 6 bug: Attempted to assign to readonly property.",
        "labels": "Type: Bug",
        "id": 45904
    },
    {
        "body": "We are trying to use React for a SVG document. But we are facing problems for namespaced attributes.\n\nFor instance, this element cant be constructed with React:\n<code>\n\n```\n<image xlink:href=\"firefox.jpg\" x=\"0\" y=\"0\" height=\"50px\" width=\"50px\"/>\n```\n\n</code>\n\nWe cant build a JSX for a xmlns:xlink attribute. Is there any way to solve this?\n",
        "title": "Better SVG Support for namespaced attributes",
        "labels": "Type: Bug",
        "id": 45905
    },
    {
        "body": "[line 66 of setInnerHTML](https://github.com/facebook/react/blob/716742dcd7fc7521737c94e7f0ed9d876658a6b7/src/browser/ui/dom/setInnerHTML.js#L66) `node.innerHTML = '\\uFEFF' + html;` is minified as `e.innerHTML = \"\" + t;` in react.min.js and react-with-addons.min.js. An exception is thrown on on [line 71](https://github.com/facebook/react/blob/716742dcd7fc7521737c94e7f0ed9d876658a6b7/src/browser/ui/dom/setInnerHTML.js#L71) because `textNode.data` is `undefined`.\n\nHere's a repro that's modified from the basic example\n\n``` js\n    <script src=\"../../build/react.min.js\"></script>\n    <script>\n      var Container = React.createClass({\n        render: function(){\n          return React.DOM.div(null, this.props.children);\n        }\n      });\n      var ExampleApplication = React.createClass({\n        render: function() {\n          var elapsed = Math.round(this.props.elapsed  / 100);\n          var seconds = elapsed / 10 + (elapsed % 10 ? '' : '.0' );\n          var message =\n            'React has been successfully running for ' + seconds + ' seconds.';\n\n          return React.DOM.p(null, message);\n        }\n      });\n        React.renderComponent(\n          Container(null,\n            ExampleApplication({elapsed: new Date().getTime()}),\n          document.getElementById('container')\n        ));\n\n    </script>\n```\n",
        "title": "Minified version broken in IE8",
        "labels": "Type: Bug",
        "id": 45906
    },
    {
        "body": "Here the sample http://jsfiddle.net/wheercool/jwvLt99p/1/\n\nThe value of the input should be always empty, but it only works for number values. If I type not numeric values, they appear.\n",
        "title": "html5 input type=number doesn't work with empty value",
        "labels": "Type: Bug",
        "id": 45907
    },
    {
        "body": "There are some inconsistencies between `getEventKey` and the DOM3 keyboard event spec (as well as what Firefox has implemented):\n- `key` property is not correctly set for printable characters on `keydown` and `keyup` events. This works properly in Firefox, and my interpretation of the standard is that Firefox's behaviour is correct here. From the spec: _If the key generates a printable character, and there exists an appropriate Unicode code point, then the KeyboardEvent.key attribute must be a string consisting of the char value of that character._\n- Enter key only fires keydown in Firefox, but fires both keydown and keypress in Chrome. This should be consistent across browsers\n- CapsLock key only fires keydown when it is toggled on. When caps lock is toggled from on to off, no keydown event is fired (this may be a browser limitation in Chrome)\n\nRepro: Test this page in Firefox and compare the result to Chrome: http://jsfiddle.net/63ycmLhe/1/\n",
        "title": "getEventKey implementation inconsistent with DOM3 spec / Firefox implementation",
        "labels": "Type: Bug",
        "id": 45908
    },
    {
        "body": "I don't know if this is an issue with React or IE11 but when an the input initially contains an EN-dash (8211) it fires the change event. \nJSFiddle http://jsfiddle.net/uH539/10/\n",
        "title": "EN-Dash Causes onChange to fire in IE11 on Render",
        "labels": "Type: Bug",
        "id": 45909
    },
    {
        "body": "for what media events there a good place might be http://www.w3schools.com/tags/ref_eventattributes.asp under media events.\n\nIn particular events like oncanplay, oncanplaythrough, and ondurationchange.\n",
        "title": "video component doesnt support media events",
        "labels": "Type: Bug",
        "id": 45910
    },
    {
        "body": "@spicyj, you know what's up.\n",
        "title": "setState callback in componentWillMount should get called",
        "labels": "Type: Bug",
        "id": 45911
    },
    {
        "body": "Expected: All three of the below work:\n\n```\nJSXTransformer.transform('/** @jsx React.DOM*/ <span className=\"o\">=</span>')\nJSXTransformer.transform('/** @jsx React.DOM*/ <span className=\"o\">{'='}</span>')\nJSXTransformer.transform('/** @jsx React.DOM*/ <span className=\"o\">{\"=\"}</span>')\n```\n\nActual: Only the last one works. The other two throw different errors:\n\n```\nJSXTransformer.transform('/** @jsx React.DOM*/ <span className=\"o\">=</span>')\nError: Parse Error: Line 1: Unexpected token >=\n\nJSXTransformer.transform('/** @jsx React.DOM*/ <span className=\"o\">{'='}</span>')\nReferenceError: Invalid left-hand side in assignment\n\nJSXTransformer.transform('/** @jsx React.DOM*/ <span className=\"o\">{\"=\"}</span>')\nObject {code: \"/** @jsx React.DOM*/ React.DOM.span({className: \"o\"}, \"=\")\", extra: Object, sourceMap: SourceMapGenerator, sourceMapFilename: \"source.js\"}\n```\n",
        "title": "JSXTransformer doesn't handle element with \"=\" as content",
        "labels": "Type: Bug",
        "id": 45912
    },
    {
        "body": "[Here is a minimal example that triggers the error](http://jsbin.com/fozabubiruna/5/edit). Removing the whitespace before `key` (from `Options.push(<option> {key}</option>)` to `Options.push(<option>{key}</option>)` makes it work.\n\nI attach a couple of screenshots of the contents of `Options` in `console.log(Options)`:\nWith whitespace (which triggers the error).\n![screen shot 2014-09-03 at 4 05 43 pm](https://cloud.githubusercontent.com/assets/2509809/4135381/63837286-3375-11e4-8022-c3cc661446a9.png)\nWithout whitespace (works fine).\n![screen shot 2014-09-03 at 4 06 05 pm](https://cloud.githubusercontent.com/assets/2509809/4135394/80fcd8c0-3375-11e4-9fd1-e2bdcee714d0.png)\n",
        "title": "Whitespace in option element before property variable triggers \"Invariant Violation\"",
        "labels": "Type: Bug",
        "id": 45913
    },
    {
        "body": "http://jsfiddle.net/9Q2m2/\n\nInternet is more or less unavailable for me right now, so can't test more thoroughly. But thinking about it, it seems that the \"blind-jumps\" we do now to detect and resolve implicitly added elements (mainly `thead`) appears to not actually be safe as-is. Personally I feel like the solution is to not resolve implicitly added elements at all, but rather tell the user of his/her error instead and have them fix it.\n\nRelated PR #1987 (Provide a friendly path for reactID errors in ReactMount)\n",
        "title": "Resolving implicit thead can lead to invariant violation",
        "labels": "Type: Bug",
        "id": 45914
    },
    {
        "body": "https://github.com/facebook/react/blob/master/src/vendor/polyfill/Object.es6.js#L23\nhttps://github.com/facebook/react/blob/master/src/browser/ui/React.js#L23\n\nThis goes against our \"policy\" (AFAIK) for dealing with polyfills/shims, if we want to ship the polyfill it should be returned and not shim the global Object.\n",
        "title": "Object.assign polyfilled in environment",
        "labels": "Type: Bug",
        "id": 45915
    },
    {
        "body": "The effect of this can be seen in this gist which uses react-bootstrap: http://jsfiddle.net/Hhc8z/1/\n\nRelevant excerpts from the source:\nhttps://github.com/react-bootstrap/react-bootstrap/blob/master/src/Navbar.jsx#L80\nhttps://github.com/react-bootstrap/react-bootstrap/blob/master/src/utils/ValidComponentChildren.js#L19\nhttps://github.com/react-bootstrap/react-bootstrap/blob/master/src/utils/cloneWithProps.js#L149\n\nI'm trying to fix this in the boostrap lib, but it does seem like a bit of a gotcha anyway.\n\nIs there a documented way to decide if `cloneWithProps` is safe to do, or is this supposed to just work in the current descriptor scheme of things?\n",
        "title": "ReactTextComponent's string props clashes with cloneWithProps",
        "labels": "Type: Bug",
        "id": 45916
    },
    {
        "body": "https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/reactjs/vjQuIpXL1oY/Hve10Cu8SycJ documents a few things that are confusing and seemingly broken around key events. Let's fix/clarify things here.\n\ncc @syranide @salier \n",
        "title": "Key Event issues",
        "labels": "Type: Bug",
        "id": 45917
    },
    {
        "body": "Maybe we can do something smarter with the root index generation on the client side? Seems like this should work.\n",
        "title": "Running two copies of React on a page can give errors because both use ID '.0'",
        "labels": "Type: Bug",
        "id": 45918
    },
    {
        "body": "Here's the element I have:\n\nReact.DOM.input({onKeyPress: this.onKeyPress});\n\nonKeyPress: function(event) {\n      if (event.keyCode === 13) // Enter key\n        event.preventDefault();\n}\n\nWith react 0.10, preventDefault was working. On 0.11, with the focus on the input, pressing enter does a form submit and reloads the page.\n\nI've also tried doing the preventDefault on the onKeyDown event with no luck.\n",
        "title": "Unexpected behaviour on Input element onKeyPress event",
        "labels": "Type: Bug",
        "id": 45919
    },
    {
        "body": "```\nReact.renderComponent(React.DOM.noscript(null, 1), document.body);\nReact.renderComponent(React.DOM.noscript(null, 2), document.body);\n```\n\nExecute that and it goes boom, IE8 throws away all children of `noscript` after render and violently screams if you in any way try to add children afterwards.\n\nShould you be mutating `noscript`? No, you shouldn't, but I imagine that reality is not quite as simple, where it could look something like:\n\n```\n<noscript>There are {count} items</noscript>\n```\n\nand there you have an error if `count` ever changes.\n\nPractically though, `noscript` content is useless client-side and I see no reason why we shouldn't just discard any children passed to it client-side (for performance gains). If there are children left there from server-rendering, they will stay as-is until the `noscript` is removed from the DOM at a later time.\n\nThis could easily be done by adding a simple `ReactDOMNoScript` component that just returns `noscript(this.props, null)` if it's not for server-rendering. I could whip up a PR if you guys think it's a good idea? @zpao?\n",
        "title": "Mutating <noscript> content on IE8 throws",
        "labels": "Type: Bug",
        "id": 45920
    },
    {
        "body": "@spicyj Knows what's up, this is just a reminder.\n\nCrappy code to reproduce: https://gist.github.com/syranide/16702e83db2b3a19f7ec\n\nPerformance-wise, this should generally be a minor issue as any additional updates will be properly batched (as is demonstrated in the gist above).\n",
        "title": "Updates in componentDidMount not batched for initial render",
        "labels": "Type: Bug",
        "id": 45921
    },
    {
        "body": "If you (presumably accidentally) use the same ref on two components and then remove the second one, you would expect the ref to point to the first one but it doesn't.\n\nEither this test should pass:\n\n``` javascript\nit('should work when removing a ref with a duplicate name', function() {\n  var Component = React.createClass({\n    render: function() {\n      return <div>\n        <div ref=\"dupRef\">A</div>\n        {this.props.showB && <div ref=\"dupRef\">B</div>}\n      </div>;\n    }\n  });\n\n  var instance = ReactTestUtils.renderIntoDocument(\n    <Component showB={true} />\n  );\n  // Second <div /> tramples over the first\n  expect(instance.refs.dupRef.getDOMNode().innerHTML).toBe('B');\n  instance.setProps({showB: false});\n  // Now only the first child <div /> exists so the ref should point to it\n  expect(instance.refs.dupRef.getDOMNode().innerHTML).toBe('A');\n});\n```\n\n\u2026or we should throw an error upon first render when trying to use a single ref in two places.\n",
        "title": "React doesn't handle duplicate refs well",
        "labels": "Type: Bug",
        "id": 45922
    },
    {
        "body": "Calling `setState` in `componentWillMount` doesn't behave as I would expect. [Here](http://jsfiddle.net/kb3gN/3194/)'s a fiddle demonstrating. In short, the callback is invoked before the state has been updated.\n",
        "title": "setState callback in componentWillMount?",
        "labels": "Type: Bug",
        "id": 45923
    },
    {
        "body": "I have the following iframe element rendered in one of my React components:\n\n``` html\n<iframe ref=\"iframe\" src={this.props.url} width=\"100%\" height=\"100%\" frameBorder=\"0\"></iframe>\n```\n\nI have tried adding `onLoad` event as well as attaching `onload` directly to DOM like so:\n\n``` js\nthis.refs.iframe.getDOMNode().setAttribute('onload', this.getUrl);\n```\n\nWhere `getUrl` is the function of my React component:\n\n``` js\ngetUrl: function() {\n    var path = this.refs.iframe.getDOMNode().contentWindow.location.pathname;\n    console.log(path);\n},\n```\n\nExcept that won't work. if I set attribute to `\"getUrl()\"` - IFrame will look for that function in the global scope, if i set it to the above, IFrame won't recognize React component's `this.getUrl` function.\n##### In Short: I want to notify the React component whenever a URL changes inside the iframe.\n",
        "title": "IFrame onLoad event with React",
        "labels": "Type: Bug",
        "id": 45924
    },
    {
        "body": "See http://jsfiddle.net/Bobris/ZZtXn/2/ (try typing at the beginning of the text box).\n",
        "title": "Controlled input cursor jumps when used with layers",
        "labels": "Type: Bug",
        "id": 45925
    },
    {
        "body": "ReactMultiChild doesn't properly handle errors that are thrown when rendering children; if one child throws then the other children being updated at the same time can have inconsistent values stored in _renderedChildren which can cause problems with future updates. It's unclear the best way to solve this.\n",
        "title": "_renderedChildren can get out of sync with DOM when render throws",
        "labels": "Type: Bug",
        "id": 45926
    },
    {
        "body": "https://github.com/facebook/react/blob/master/src/browser/ui/ReactDOMIDOperations.js#L165\n\nCalls `getNode` on an ID which is unmounted and purged.\n\nhttps://github.com/facebook/react/blob/master/src/core/ReactCompositeComponent.js#L1134\n\n@sebmarkbage: @spicyj indicated that you are working on a refactor, perhaps you've already fixed this? (PS. I'm not really sure how to fix this without taking out the big hammer)\n",
        "title": "dangerouslyReplaceNodeWithMarkupByID uses getNode on an unmounted/purged ID",
        "labels": "Type: Bug",
        "id": 45927
    },
    {
        "body": "As the docs state, ReactCSSTransitionGroup keeps DOM elements on the page until an animation completes, thus necessitating a leave transition. If you want an enter animation but no leave animation, you can specify `transitionLeave={false}`. However, DOM elements still seem to stick around and occasionally throw the transitionend warning even when using `transitionLeave={false}`. (`transition(): tried to perform an animation without an animationend or transitionend event after timeout (5000ms). You should either disable this transition in JS or add a CSS animation/transition.`)\n\n**Repro Case**\nhttp://jsfiddle.net/kb3gN/2145/\n\n**Steps to Reproduce**\n- Click `Add All` to add three components to the page.\n- Click `Remove All` to remove the added components.\n  - Notice how some elements are staying on the page instead of removing all as expected\n- Remove `transitionLeave={false}` from the JSX so the supplied leave transition runs\n  - Removal works as expected (but with an undesired leave animation)\n\nThis occurs with both CSS transitions and with keyframe animations (change the `transitionName` from `transition-example` to `key-frame-example`).\n\n**Workaround**\nRemove `transitionLeave={false}` and use a 0sec leave transition.\n_Disclaimer:_ this workaround doesn't seem bullet proof. At least in my more complex view that I'm creating, doing a handful (5-10) of additions/removals (and perhaps doing it fairly rapidly) will produce the transitionend warning, leaving elements in the UI.\n",
        "title": "transitionLeave={false} does not properly bypass the need to have a transition leave animation",
        "labels": "Type: Bug",
        "id": 45928
    },
    {
        "body": "As described on http://facebook.github.io/react/docs/forms.html, the onChange handler of an input should fire when the checked state changes.  However, it actually fires when the radio button is clicked,\n\nIn other words, it fails to fire when a checked radio button is unchecked (by checking a different radio button), and it fires even without a state change when a checked radio button is clicked.\n\nIn short, it's missing checked transtions true->false, and it's reporting spurious transitions true->true.\n",
        "title": "onChange handler for radio buttons does not fire according to spec.",
        "labels": "Type: Bug",
        "id": 45929
    },
    {
        "body": "I'm using static markup for unit testing [newforms](https://github/insin/newforms) output and I'd also like to support using it to render forms as static HTML.\n\nAdding a `value` or `defaultValue` to a `<select>` doesn't generate static HTML with the appropriate `selected` attributes. However, they do get generated if you manually add them to `<option>` components, but then you get warning messages in the console when using the development build of React.\n\nIs it possible to support both use cases without manually setting `selected` attributes, or will I just have to live with the warnings? :)\n\nJSFiddle showing `<select>` static HTML output: http://jsfiddle.net/insin/2tvb7/3/\n",
        "title": "React.renderComponentToStaticMarkup doesn't generate selected attributes from value/defaultValue",
        "labels": "Type: Bug",
        "id": 45930
    },
    {
        "body": "I'm reordering a list of components and changing their refs (to refer to their index) but nothing else about them -- would be nice if the refs updated which they don't appear to do currently.\n",
        "title": "Refs should be updated even if shouldComponentUpdate returns false",
        "labels": "Type: Bug",
        "id": 45931
    },
    {
        "body": "**TL;DR fix** [Load `polymer.js first](https://github.com/facebook/react/issues/1263#issuecomment-38501176)\n\n---\n\nProbably related to #1107\n\nWhen a `select` or `input[type=\"checkbox\"]` is rendered inside an unwrapped Polymer element's child node, the following error is thrown:\n\n```\nError: Invariant Violation: ReactMount: Two valid but unequal nodes with the same `data-reactid`\n```\n\nI would imagine that radio buttons, etc. would also throw.\n\nI am not sure if this is an actual bug or a limitation of React and the ShadowDOM/Polymer. But the error message is... not exactly helpful in determining what to do.\n\nI wrote a simple JSBin that demonstrates the problem: http://jsbin.com/pinijoho/2\n",
        "title": "Error: Invariant Violation: ReactMount: Two valid but unequal nodes with the same `data-reactid`",
        "labels": "Type: Bug",
        "id": 45932
    },
    {
        "body": "When using server rendering, putting an `<img>` in an `<iframe>` seems to invariably cause an invariant violation (it can't find the image).\n\nThis is related to #1252, but not identical. In both cases, the browser isn't aware of the inner elements however, in this case, it's because browsers that support iframes are actually mutating the DOM (by replacing the contents with the document specified in the `src` attribute).\n",
        "title": "iframe contents cause invariant violation",
        "labels": "Type: Bug",
        "id": 45933
    },
    {
        "body": "When using server rendering, putting an `<img>` in a `<noscript>` seems to invariably cause an invariant violation (it can't find the image).\n\nI believe this is because, to the JS enabled browser, the noscript content looks like CDATA.\n\nThis can be worked around by using `dangerouslySetInnerHTML` to actually set the contents to an HTML string, however, you can't nest components with this approach.\n",
        "title": "noscript contents cause invariant violation",
        "labels": "Type: Bug",
        "id": 45934
    },
    {
        "body": "I tripped on a strange error when, in one state, a component uses HTML to specify children (from rendering Markdown) and in another state it uses child components (for interactive content, itself with some inner HTML). I reduced the testcase down to this: http://jsfiddle.net/BCp36/1/\n",
        "title": "Switching from dangerouslySetInnerHTML to children",
        "labels": "Type: Bug",
        "id": 45935
    },
    {
        "body": "Event do not trigger when node do not have \"cursor: pointer\" style on it.\n\nHere you have an example:\nhttp://jsfiddle.net/kb3gN/1345/\n",
        "title": "MobileSafariClickEventPlugin requires touch events to be initialized",
        "labels": "Type: Bug",
        "id": 45936
    },
    {
        "body": "When there's a controlled component for form names that the user has saved in their browser (common with username/password fields), the browser will sometimes render the page with values in those fields without firing onChange events.  If the user submits the form, the component state does not reflect what is showing to the user.\n\nIn experimenting with this, it appears that the data is there on load (tested by logging this.refs.myinput.getDOMNode().value)\n",
        "title": "Provide a way to handle browser-autocompleted form values on controlled components",
        "labels": "Type: Bug",
        "id": 45937
    },
    {
        "body": "At the moment, if there's any whitespace around a pre-rendered component inside it's container, the HTML won't be reused. This is because `getReactRootElementInContainer()` uses `Node.firstChild` which will return a `TEXT_NODE` instead of an `ELEMENT_NODE` in this case.\n\nFor example, this HTML won't be reused:\n\n``` html\n<div class=\"wrapper\">\n    <div class=\"component\" data-reactid=\".r[1wtmm]\" data-react-checksum=\"490228448\">...</div>\n</div>\n```\n\nIf you want, I can send through a pull request that changes `getReactRootElementInContainer()` to look for the first `ELEMENT_NODE` instead of just any `Node`.\n",
        "title": "Ignore whitespace in the container element when reusing markup",
        "labels": "Type: Bug",
        "id": 45938
    },
    {
        "body": "When moving a component with an iframe down within a group of components it reinitialises the iframe. The iframe only reinitialises when moving down, moving upward seems to work fine.\n\nExample: http://jsfiddle.net/pieterv/fnkLf/\n",
        "title": "Iframe's reinitialise when moving down within a group of components",
        "labels": "Type: Bug",
        "id": 45939
    },
    {
        "body": "Right now we run any tests we find in `build/modules/`, which includes tests still sitting around from previous builds that don't currently exist in `src/`.\n\ncc @subtleGradient @spicyj\n",
        "title": "Only run tests built from files that exist in src/",
        "labels": "Type: Bug",
        "id": 45940
    },
    {
        "body": "If we add support for `flex` in #836, we need to support vendor prefixes as well.\n\nRight now we just hard code the list of properties and check the object (https://github.com/facebook/react/blob/master/src/dom/CSSProperty.js#L24) to see if we should allow a numeric value unchanged. `flex` will need to support checking vendor prefixed values, so I think we should change our lookups.\n\nWe should still hard-code the values, but not include all of the possible prefixes. Instead we'll add a method which checks the object and falls back to stripping the prefix (I think `/^-\\w-/` should find the prefix) and then checking.\nI think we should call a method\n",
        "title": "Detect vendor prefixes for CSS numeric value detection",
        "labels": "Type: Bug",
        "id": 45941
    },
    {
        "body": "Firs, it's unitless. I've seen a hack where the value is being specified as `'1;'` to make it pass the `isNaN` check and skip our adding of 'px'.\n\nFurther, `flex` is actually a shorthand property, so we should support the expansion into the right properties.\n",
        "title": "Support flex CSS property better",
        "labels": "Type: Bug",
        "id": 45942
    },
    {
        "body": "```\n$ grunt --verbose --debug 9 --stack test:webdriver:saucelabs:ios\n```\n\n```\nRunning \"webdriver-jasmine:saucelabs_ios6_1\" (webdriver-jasmine) task\n[D] Task source: /Users/aylott/Projects/Facebook/react/Gruntfile.js\nVerifying property webdriver-jasmine.saucelabs_ios6_1 exists in config...OK\nFile: [no files]\ndesiredCapabilities {\"browserName\":\"iphone\",\"version\":\"6.1\",\"platform\":\"OS X 10.8\",\"build\":\"dev1386189377095\",\"tunnel-identifier\":\"my awesome tunnel\"}\n\nDriving the web on session: dc8ba24ae6904c33a6e1e25c99bff55c\n\nStarting WebDriver Test. Watch results here: http://saucelabs.com/tests/dc8ba24ae6904c33a6e1e25c99bff55c\n > POST /session/:sessionID/url { url: 'http://127.0.0.1:9999/test/index.html?debug=9' }\n[D] 2013-12-04 15:37:48,822 - Request started: GET http://127.0.0.1:9999/test/index.html?debug=9\n[D] server GET /test/index.html?debug=9 200 1163 - 4 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189468842] GET /test/index.html?debug=9\n[D] 2013-12-04 15:37:48,857 - GET http://127.0.0.1:9999/test/index.html?debug=9 -> 200 (34ms, 1163 bytes)\n[D] 2013-12-04 15:37:49,206 - Request started: GET http://127.0.0.1:9999/vendor/jasmine/jasmine.js?_=hot1f2dm\n[D] 2013-12-04 15:37:49,207 - Request started: GET http://127.0.0.1:9999/vendor/jasmine/jasmine-support.js?_=hot1f2dm\n[D] server GET /vendor/jasmine/jasmine-support.js?_=hot1f2dm 200 4094 - 2 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189469213] GET /vendor/jasmine/jasmine-support.js?_=hot1f2dm\n[D] 2013-12-04 15:37:49,211 - Request started: GET http://127.0.0.1:9999/node_modules/jasmine-tapreporter/src/tapreporter.js?_=hot1f2dm2013-12-04 15:37:49,211 - Request started: GET http://127.0.0.1:9999/vendor/jasmine-jsreporter/jasmine-jsreporter.js?_=hot1f2dm\n[D] server GET /vendor/jasmine/jasmine.js?_=hot1f2dm 200 70892 - 4 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189469214] GET /vendor/jasmine/jasmine.js?_=hot1f2dm\n[D] 2013-12-04 15:37:49,213 - GET http://127.0.0.1:9999/vendor/jasmine/jasmine-support.js?_=hot1f2dm -> 200 (7ms, 4094 bytes)\n[D] server GET /node_modules/jasmine-tapreporter/src/tapreporter.js?_=hot1f2dm 200 7616 - 2 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189469218] GET /node_modules/jasmine-tapreporter/src/tapreporter.js?_=hot1f2dm\n[D] 2013-12-04 15:37:49,217 - GET http://127.0.0.1:9999/vendor/jasmine/jasmine.js?_=hot1f2dm -> 200 (10ms, 70892 bytes)\n[D] server GET /vendor/jasmine-jsreporter/jasmine-jsreporter.js?_=hot1f2dm 200 6614 - 2 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189469219] GET /vendor/jasmine-jsreporter/jasmine-jsreporter.js?_=hot1f2dm\n[D] 2013-12-04 15:37:49,219 - GET http://127.0.0.1:9999/node_modules/jasmine-tapreporter/src/tapreporter.js?_=hot1f2dm -> 200 (7ms, 7616 bytes)\n[D] 2013-12-04 15:37:49,220 - GET http://127.0.0.1:9999/vendor/jasmine-jsreporter/jasmine-jsreporter.js?_=hot1f2dm -> 200 (8ms, 6614 bytes)\n[D] 2013-12-04 15:37:49,246 - Request started: GET http://127.0.0.1:9999/vendor/jasmine/jasmine-html.js?_=hot1f2dm\n[D] 2013-12-04 15:37:49,246 - Request started: GET http://127.0.0.1:9999/test/lib/reportTestResults.browser.js?_=hot1f2dm\n[D] server GET /vendor/jasmine/jasmine-html.js?_=hot1f2dm 200 20765 - 2 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189469252] GET /vendor/jasmine/jasmine-html.js?_=hot1f2dm\n[D] server GET /test/lib/reportTestResults.browser.js?_=hot1f2dm 200 2389 - 1 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189469252] GET /test/lib/reportTestResults.browser.js?_=hot1f2dm\n[D] 2013-12-04 15:37:49,253 - GET http://127.0.0.1:9999/vendor/jasmine/jasmine-html.js?_=hot1f2dm -> 200 (5ms, 20765 bytes)\n[D] 2013-12-04 15:37:49,253 - GET http://127.0.0.1:9999/test/lib/reportTestResults.browser.js?_=hot1f2dm -> 200 (6ms, 2389 bytes)\n[D] 2013-12-04 15:37:50,362 - Request started: GET http://127.0.0.1:9999/build/react-test.js?_=hot1f2dm\n[D] server GET /build/react-test.js?_=hot1f2dm 200 1028528 - 22 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189470387] GET /build/react-test.js?_=hot1f2dm\n[D] 2013-12-04 15:37:50,391 - GET http://127.0.0.1:9999/build/react-test.js?_=hot1f2dm -> 200 (28ms, 1028528 bytes)\n[D] 2013-12-04 15:37:51,852 - Request started: GET http://127.0.0.1:9999/build/react.js?_=hot1f2dm\n[D] server GET /build/react.js?_=hot1f2dm 200 463169 - 6 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189471861] GET /build/react.js?_=hot1f2dm\n[D] 2013-12-04 15:37:51,865 - GET http://127.0.0.1:9999/build/react.js?_=hot1f2dm -> 200 (13ms, 463169 bytes)\n[D] 2013-12-04 15:37:52,114 - Request started: GET http://127.0.0.1:9999/test/lib/jasmine-execute.js?_=hot1f2dm\n[D] server GET /test/lib/jasmine-execute.js?_=hot1f2dm 200 587 - 2 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189472120] GET /test/lib/jasmine-execute.js?_=hot1f2dm\n[D] 2013-12-04 15:37:52,121 - GET http://127.0.0.1:9999/test/lib/jasmine-execute.js?_=hot1f2dm -> 200 (7ms, 587 bytes)\n[D] 2013-12-04 15:37:52,773 - Request started: GET http://127.0.0.1:9999/test/the-files-to-test.generated.js?_=hot1f2dm\n[D] server GET /test/the-files-to-test.generated.js?_=hot1f2dm 200 3961 - 3 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189472779] GET /test/the-files-to-test.generated.js?_=hot1f2dm\n[D] 2013-12-04 15:37:52,779 - GET http://127.0.0.1:9999/test/the-files-to-test.generated.js?_=hot1f2dm -> 200 (6ms, 3961 bytes)\n[D] 2013-12-04 15:38:08,339 - Request started: GET http://127.0.0.1:9999/vendor/jasmine/jasmine.css?_=hot1fh71\n[D] server GET /vendor/jasmine/jasmine.css?_=hot1fh71 200 6537 - 3 ms\n[Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488345] GET /vendor/jasmine/jasmine.css?_=hot1fh71\n[D] 2013-12-04 15:38:08,345 - GET http://127.0.0.1:9999/vendor/jasmine/jasmine.css?_=hot1fh71 -> 200 (6ms, 6537 bytes)\n[D] 2013-12-04 15:38:08,687 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - 2 ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488693] ok 1 - addons/link/__tests__/LinkedStateMixin-test LinkedStateMixin should create a ReactLink for state.\n[D] 2013-12-04 15:38:08,694 - POST http://127.0.0.1:9999/reportTestResults -> 200 (6ms, 50 bytes)\n[D] 2013-12-04 15:38:08,717 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488721] ok 2 - addons/transitions/__tests__/ReactTransitionGroup-test ReactTransitionGroup should warn after time with no transitionend.\n[D] 2013-12-04 15:38:08,721 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:08,773 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] 2013-12-04 15:38:08,773 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488776] ok 3 - addons/transitions/__tests__/ReactTransitionGroup-test ReactTransitionGroup should keep both sets of DOM nodes around.\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488777] ok 4 - addons/transitions/__tests__/ReactTransitionGroup-test ReactTransitionGroup with an undefined child should fail silently.\n[D] 2013-12-04 15:38:08,776 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:08,776 - POST http://127.0.0.1:9999/reportTestResults -> 200 (5ms, 50 bytes)\n[D] 2013-12-04 15:38:08,816 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] 2013-12-04 15:38:08,816 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - 1 ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488820] ok 6 - addons/transitions/__tests__/ReactTransitionKeySet-test ReactTransitionKeySet should support getKeySet.\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488820] ok 5 - addons/transitions/__tests__/ReactTransitionKeySet-test ReactTransitionKeySet should support getChildMapping.\n[D] 2013-12-04 15:38:08,819 - POST http://127.0.0.1:9999/reportTestResults -> 200 (3ms, 50 bytes)\n[D] 2013-12-04 15:38:08,821 - POST http://127.0.0.1:9999/reportTestResults -> 200 (3ms, 50 bytes)\nwaitForJsCondition has been deprecated, use waitFor + jsCondition asserter instead.\n > POST /session/:sessionID/execute { script: 'var args = Array.prototype.slice.call(arguments, 0);\\nvar code = args[0], fargs = args[1];\\n\\nvar wrap = function() {\\n  return eval(code);\\n};\\n\\nreturn wrap.apply(this, fargs);\\n',\n  args: [ 'typeof window.jasmine != \\'undefined\\'', [] ] }\n[D] 2013-12-04 15:38:08,950 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488955] ok 7 - addons/transitions/__tests__/ReactTransitionKeySet-test ReactTransitionKeySet should support mergeKeySets for adding keys.\n[D] 2013-12-04 15:38:08,954 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:08,967 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - 1 ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189488972] ok 8 - addons/transitions/__tests__/ReactTransitionKeySet-test ReactTransitionKeySet should support mergeKeySets for removing keys.\n[D] 2013-12-04 15:38:08,973 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:09,088 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] 2013-12-04 15:38:09,088 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489091] ok 9 - addons/transitions/__tests__/ReactTransitionKeySet-test ReactTransitionKeySet should support mergeKeySets for adding and removing.\n[D] server POST /reportTestResults 200 - - 1 ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489092] ok 10 - addons/transitions/__tests__/ReactTransitionKeySet-test ReactTransitionKeySet should reconcile overlapping insertions and deletions.\n[D] 2013-12-04 15:38:09,092 - POST http://127.0.0.1:9999/reportTestResults -> 200 (3ms, 50 bytes)\n[D] 2013-12-04 15:38:09,092 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:09,223 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] 2013-12-04 15:38:09,223 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489225] ok 11 - addons/transitions/__tests__/ReactTransitionKeySet-test ReactTransitionKeySet should support mergeKeySets with undefined input.\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489225] ok 12 - addons/transitions/__tests__/ReactTransitionableChild-test ReactTransitionableChild should keep the DOM node around.\n[D] 2013-12-04 15:38:09,226 - POST http://127.0.0.1:9999/reportTestResults -> 200 (3ms, 50 bytes)\n[D] 2013-12-04 15:38:09,226 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:09,364 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] 2013-12-04 15:38:09,364 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489367] ok 13 - addons/transitions/__tests__/ReactTransitionableChild-test ReactTransitionableChild should manage enter css classes correctly.\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489367] ok 14 - addons/transitions/__tests__/ReactTransitionableChild-test ReactTransitionableChild should manage leave css classes correctly.\n[D] 2013-12-04 15:38:09,368 - POST http://127.0.0.1:9999/reportTestResults -> 200 (3ms, 50 bytes)\n[D] 2013-12-04 15:38:09,368 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:09,385 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489388] ok 15 - core/__tests__/ReactBind-test autobinding Holds reference to instance.\n[D] 2013-12-04 15:38:09,388 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:09,506 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489509] ok 17 - core/__tests__/ReactComponent-test ReactComponent should throw on invalid render targets.\n[D] 2013-12-04 15:38:09,509 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:09,635 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] 2013-12-04 15:38:09,637 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489640] ok 18 - core/__tests__/ReactComponent-test ReactComponent should throw when supplying a ref outside of render method.\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489640] ok 20 - core/__tests__/ReactComponent-test ReactComponent should support refs on owned components.\n[D] 2013-12-04 15:38:09,641 - POST http://127.0.0.1:9999/reportTestResults -> 200 (4ms, 50 bytes)\n[D] 2013-12-04 15:38:09,641 - POST http://127.0.0.1:9999/reportTestResults -> 200 (5ms, 50 bytes)\n[D] 2013-12-04 15:38:09,661 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489664] ok 22 - core/__tests__/ReactComponent-test ReactComponent should correctly determine if a component is mounted.\n[D] 2013-12-04 15:38:09,664 - POST http://127.0.0.1:9999/reportTestResults -> 200 (3ms, 50 bytes)\n > POST /session/:sessionID/execute { script: 'var args = Array.prototype.slice.call(arguments, 0);\\nvar code = args[0], fargs = args[1];\\n\\nvar wrap = function() {\\n  return eval(code);\\n};\\n\\nreturn wrap.apply(this, fargs);\\n',\n  args: [ 'typeof window.jasmine.getJSReport != \\'undefined\\'', [] ] }\n[D] 2013-12-04 15:38:09,901 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] 2013-12-04 15:38:09,901 - Request started: POST http://127.0.0.1:9999/reportTestResults\n[D] server POST /reportTestResults 200 - - 1 ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489907] ok 24 - core/__tests__/ReactComponent-test ReactComponent should know its (complicated) mount depth.\n[D] server POST /reportTestResults 200 - - - ms\n>> [Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B141][1386189489907] ok 16 - core/__tests__/ReactBind-test autobinding works with mixins.\n[D] 2013-12-04 15:38:09,907 - POST http://127.0.0.1:9999/reportTestResults -> 200 (5ms, 50 bytes)\n[D] 2013-12-04 15:38:09,907 - POST http://127.0.0.1:9999/reportTestResults -> 200 (6ms, 50 bytes)\n>> Error: Error response status: 13.\n > POST /session/:sessionID/execute { script: 'return document.documentElement.innerText || document.documentElement.textContent;',\n  args: [] }\nClosing the browser window. To keep it open, pass the --webdriver-keep-open flag to grunt.\n > DELETE /session/:sessionID \n\nEnding your web drivage..\n\nFatal error: Error response status: 13. \nError: Error response status: 13. \n    at webdriver._newError (/Users/aylott/Projects/Facebook/react/node_modules/wd/lib/webdriver.js:80:13)\n    at /Users/aylott/Projects/Facebook/react/node_modules/wd/lib/webdriver.js:156:25\n    at /Users/aylott/Projects/Facebook/react/node_modules/wd/lib/webdriver.js:388:5\n    at Request._callback (/Users/aylott/Projects/Facebook/react/node_modules/wd/lib/webdriver.js:278:7)\n    at Request.self.callback (/Users/aylott/Projects/Facebook/react/node_modules/wd/node_modules/request/index.js:148:22)\n    at Request.EventEmitter.emit (events.js:98:17)\n    at Request.<anonymous> (/Users/aylott/Projects/Facebook/react/node_modules/wd/node_modules/request/index.js:876:14)\n    at Request.EventEmitter.emit (events.js:117:20)\n    at IncomingMessage.<anonymous> (/Users/aylott/Projects/Facebook/react/node_modules/wd/node_modules/request/index.js:827:12)\n    at IncomingMessage.EventEmitter.emit (events.js:117:20)\n[D] Trying to kill tunnel\n\n```\n",
        "title": "`grunt test:webdriver:saucelabs:ios` \u2192 Error: Error response status: 13",
        "labels": "Type: Bug",
        "id": 45943
    },
    {
        "body": "```\n>> not ok 382 - utils/__tests__/ImmutableObject-test ImmutableObject should tolerate arrays at deeper levels and prevent mutation on them:DEV.\n```\n\nhttps://travis-ci.org/facebook/react/jobs/14942607#L3829\n\nhttp://saucelabs.com/tests/e516f61322464a97aea25b226103ce0a\n",
        "title": "ImmutableObject should tolerate arrays at deeper levels and prevent mutation on them \u2014 Fails in Safari",
        "labels": "Type: Bug",
        "id": 45944
    },
    {
        "body": "Here's an example: (no jsfiddle because that's broken in IE8)\n\nhttp://playground.zpao.com/react/onscroll.html\n",
        "title": "onScroll doesn't work in IE8",
        "labels": "Type: Bug",
        "id": 45945
    },
    {
        "body": "I'm using the JSX tool in an automated build system and I want to check for errors compiling JSX files, but instead of returning a non-zero error code, the jsx command just writes everything to stderr and exits with a zero error code.\nWhat is even worse, stderr is used when the build is successfull as well, forcing me to parse it's stderr output to check for an error.\n",
        "title": "JSX tool return zero on error",
        "labels": "Type: Bug",
        "id": 45946
    },
    {
        "body": "When the \"key\" prop of a component changes between render passes, React is expected to unmount the previous instance and mount a new one during reconciliation. However, when said component is the root (i.e. whose DOM parent is the mount point) the same component instance is used.\n\nThis JSFiddle demonstrates how a stateful component with a changing \"key\" is not unmounted when it is the root: http://jsfiddle.net/Yd25R/1/\n",
        "title": "Honor instance identity (the \"key\" prop) for the root component",
        "labels": "Type: Bug",
        "id": 45947
    },
    {
        "body": "",
        "title": "input type=range onChange should fire when changing the value using the keyboard arrow keys",
        "labels": "Type: Bug",
        "id": 45948
    },
    {
        "body": "```\nReactMount should destroy a react root upon request.\nTypeError: Object doesn't support property or method 'getElementsByClassName'\n```\n",
        "title": "'getElementsByClassName' doesn't exist in IE8",
        "labels": "Type: Bug",
        "id": 45949
    },
    {
        "body": "```\n   File: test\n   undefined._assertLink: Invariant Violation: Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink\n   undefined.getValue: Invariant Violation: Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink\n   undefined._assertLink: Invariant Violation: Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink\n   undefined.getValue: Invariant Violation: Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink\n```\n\nThis shows in the console when running the tests.\n",
        "title": "Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink",
        "labels": "Type: Bug",
        "id": 45950
    },
    {
        "body": "```\nReactDOMInput should support ReactLink.\n\nExpected 0 to be 1.\n\nTypeError: Unable to get property '0' of undefined or null reference\n```\n",
        "title": "ReactDOMInput should support ReactLink in IE",
        "labels": "Type: Bug",
        "id": 45951
    },
    {
        "body": "```\nReactDOMInput should not set a value for submit buttons unnecessarily.\n\nExpected true to be false.\n```\n",
        "title": "ReactDOMInput should not set a value for submit buttons unnecessarily fails in IE",
        "labels": "Type: Bug",
        "id": 45952
    },
    {
        "body": "```\nReactDOMInput should properly control a value of number `0`.\n\nExpected 'giraffe' to be '0'.\n```\n",
        "title": "ReactDOMInput should properly control a value of number `0` fails in IE",
        "labels": "Type: Bug",
        "id": 45953
    },
    {
        "body": "```\nrendering React components at document should be able to get root component id for document node.\n\nError: Invalid target element for this operation.\n\nrendering React components at document should be able to unmount component from document node.\n\nError: Invalid target element for this operation.\n\nrendering React components at document should be able to switch root constructors via state.\n\nError: Invalid target element for this operation.\n\nrendering React components at document should be able to switch root constructors.\n\nError: Invalid target element for this operation.\n\nrendering React components at document should be able to mount into document.\n\nError: Invalid target element for this operation.\n```\n",
        "title": "Error: Invalid target element for this operation -- IE9",
        "labels": "Type: Bug",
        "id": 45954
    },
    {
        "body": "This throws a syntax error in IE8.\n\n`build/modules/utils/__tests__/ImmutableObject-test.js:62`\n\n``` javascript\n  var testProd = function(message, testFunc) {\n    // Temporarily enter production mode\n    window.true = false;\n    it(message, testFunc);\n    window.true = true;\n  };\n```\n\nI'm not sure which code is doing this transformation, but this is clearly not what should be happening.\n",
        "title": "`window.__DEV__` should not be compiled to `window.true`",
        "labels": "Type: Bug",
        "id": 45955
    },
    {
        "body": "![image](https://f.cloud.github.com/assets/6820/1476656/5a03d00e-464d-11e3-86cb-ebde1869ff3d.png)\n\nPretty sure this can be fixed by replacing `''` with `null` in [ReactDOMInput.js:58](https://github.com/facebook/react/blob/6c1e8e8a668d30f02d423498b248541b938586e1/src/dom/components/ReactDOMInput.js#L58) but I'll check and make sure.\n",
        "title": "<input type=\"submit\" /> gives a button with no text on it",
        "labels": "Type: Bug",
        "id": 45956
    },
    {
        "body": "When using React in a JavaScript-based Windows 8 app, some HTML tags will cause an error to be thrown during mounting. For example an audio tag, as shown [here](http://jsfiddle.net/WPn3A/) causes the following error.\n\n> 0x800c001c - JavaScript runtime error: Unable to add dynamic content. A script attempted to inject dynamic content, or elements previously modified dynamically, that might be unsafe. For example, using the innerHTML property to add script or malformed HTML will generate this exception. Use the toStaticHTML method to filter dynamic content, or explicitly create elements and attributes with a method such as createElement.  For more information, see http://go.microsoft.com/fwlink/?LinkID=247104.\n\nThis is not a hugely pressing issue, but we should probably offer some way of using window.toStaticHTML where it's available.\n",
        "title": "React throws when rendering some HTML tags inside Windows 8 app.",
        "labels": "Type: Bug",
        "id": 45957
    },
    {
        "body": "We use `document` directly a bunch where that might not be the right thing if the event is occurring in an `iframe`. We should do it right. (split from #373)\n",
        "title": "Use the right document in iframe selection events",
        "labels": "Type: Bug",
        "id": 45958
    },
    {
        "body": "We currently listen for `DOMCharacterDataModified`, I think only so that we can make onChange work with contenteditable. Apparently this can be expensive so we should look into replacing it with a [Mutation Observer](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver).\n\nObviously the API will be different (and observers get batched) so we may have to build some abstractions in here to make this work. I think that should be relatively easy with our synthetic events, but haven't looked into it.\n",
        "title": "Use MutationObserver instead of Mutation Events",
        "labels": "Type: Bug",
        "id": 45959
    },
    {
        "body": "Right now we have some inconsistencies which requires cognitive load.\n\nWith the exception of `dangerouslySetInnerHTML`, I don't think there's ever any reason not to allow any sort of type as a prop in the DOM. Otherwise, `{false}` should put \"false\" in the DOM, `{{foo: 'bar'}}` should put \"[object Object]\".\n\nWe still want to special case `null`/`undefined` as those indicate that we should empty the value. Otherwise, `'' + prop` will ensure that we call `toString()` on the object (so you could have a custom Person object if you want).\n\nThis shouldn't be terriblely hard to fix, but we do want to make sure we test the change thoroughly. It will be a breaking change in some specific cases (mostly forms), so we'll also need to communicate this clearly.\n\nTangentially, we'll be inconsistent with the way types work as children. For example `<div>{false}</div>` doesn't have a child with \"false\" as text. We need to do something for children due to the fact that we use objects and arrays as special indicators for mapping.\n",
        "title": "Standardize prop -> DOM attribute process",
        "labels": "Type: Bug",
        "id": 45960
    },
    {
        "body": "`<th rowspan=\"2\"></th>` does not set `rowspan` in the DOM.\n\nComponent:\n\n``` js\nrender: function() {\n  return (\n    <thead>\n      <tr>\n        {this.props.columns.map(this.renderColumnLabel)}\n        <th rowspan=\"2\"></th>\n      </tr>\n      <tr>\n        {this.props.columns.map(this.renderColumnControl)}\n      </tr>\n    </thead>\n  );\n}\n```\n\nOutput:\n\n``` html\n...\n<th data-reactid=\".r[5je1f].[0].[1].[1].[6].[0].[0].[1].[0].[0].[0].[1]\"></th>\n...\n```\n\nCan this be my first PR? :)\n",
        "title": "\"rowspan\" attribute does not appear in DOM",
        "labels": "Type: Bug",
        "id": 45961
    },
    {
        "body": "(`value` works as expected.)\n\nhttp://jsfiddle.net/chenglou/8Z4Bg/\n",
        "title": "`defaultValue` for select not working",
        "labels": "Type: Bug",
        "id": 45962
    },
    {
        "body": "``` js\n  render: function() {\n    return (\n      <div>\n        <input type=\"radio\" name=\"fruit\" value=\"A\" checked={true}/>A\n        <input type=\"radio\" name=\"fruit\" value=\"B\"/>B\n      </div>\n    );\n  }\n```\n\nExpected behavior would be for A to stay checked when B is clicked, but it's not the case.\n\n[jsFiddle](http://jsfiddle.net/chenglou/4TpnG/1/)\n\nSimilarly, [here](http://jsfiddle.net/chenglou/4TpnG/)'s a modified version that works on every subsequent click on B, but not the first time. If this helps, setting a timeout 0 around `this.refs.A.getDOMNode().checked = true` works (except it gives a flash when you click on B, which is less than ideal)\n",
        "title": "Radio buttons not working correctly",
        "labels": "Type: Bug",
        "id": 45963
    },
    {
        "body": "Or so I've been told...\n",
        "title": "Docblock parsing fails with \\r\\n",
        "labels": "Type: Bug",
        "id": 45964
    },
    {
        "body": "Looks like batching broke a couple of our lifecycle methods.\n- `componentWillReceiveProps`\n- `shouldComponentUpdate`\n\nBoth of these get passed in `nextProps` and have access to `this.props` (also, `state`). However, `nextProps` is set to `this.props` before calling these methods, so no comparison can be done.\n\nmaster/0.4: https://github.com/facebook/react/blob/master/src/core/ReactCompositeComponent.js#L635-L673\n0.3: https://github.com/facebook/react/blob/0.3-stable/src/core/ReactCompositeComponent.js#L584-L595\n\nApparently we need more tests...\n",
        "title": "Some lifecycle methods are broken",
        "labels": "Type: Bug",
        "id": 45965
    },
    {
        "body": "The html entity in the following causes a `SyntaxError: Unexpected token ;`  in both current master and React 0.3.\n\n```\n/** @jsx React.DOM */\nvar mylist = ['a', 'b', 'c'];\n// Fails with entity below\nReact.renderComponent(\n    <p>\n        {mylist.map(function (id) {\n            return (<span>{id} &nbsp;</span>);\n        })}\n    </p>, document.body);\n```\n\nJSFiddle: http://jsfiddle.net/VLmQt/\n",
        "title": "Parsing error for HTML entity in nested JSX.",
        "labels": "Type: Bug",
        "id": 45966
    },
    {
        "body": "There's an `EACCES` error because the phantomjs binary is not executable in the latest version of the phantomjs package.\n",
        "title": "Fix tests when using phantomjs 1.9.1-1",
        "labels": "Type: Bug",
        "id": 45967
    },
    {
        "body": "cc @jeffmo\n",
        "title": "Address EMFILE (too many open files) errors for clean `grunt test` runs",
        "labels": "Type: Bug",
        "id": 45968
    },
    {
        "body": "I was trying to implement `useOn`, a hook lets you write the following code:\r\n\r\n```js\r\nuseOn()\r\n  .who(window)\r\n  .when('resize')\r\n  .what(() => {\r\n    console.log('resize!');\r\n  });\r\n```\r\n\r\nMy approach worked in production, but not in development. I discovered some pretty unexpected behavior by React.\r\n\r\nWhen running `useOn` in development, it seemed like the resize event listener isn't being removed when the ResizeComponent gets unmounted (turned out it was actually being added twice).\r\n\r\nSo I added a `console.log`, just above the call to `addEventListener`, but only one log appeared.\r\n\r\nI then added a `debugger` statement just above the call to `console.log` and noticed that it is indeed being called twice, but in the second time it's called, `console.log` is overwritten by React's `disabledLog()`.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n(tip: you can skip checking out the repo (steps 1 to 3), as it can be reproduced in [the repo's CodeSandbox](https://codesandbox.io/s/github/dutzi/use-on))\r\n\r\n1. Check out https://github.com/dutzi/use-on\r\n2. `yarn` then `yarn start`\r\n3. (Chrome will start up)\r\n4. Open the DevTools' Console\r\n5. Click on \"Mount Resize Component\"\r\n6. Resize window\r\n7. (You should see \"resize!\" printed in the console)\r\n8. Click on \"Unmount Resize Component\"\r\n9. \"resize!\" messages should stop showing up in the console, but they don't.\r\n\r\nI did make some un-orthodox stuff in that hook. But I believe this is a bug since when trying this hook in a production build, it worked fine.\r\n\r\nTo test out a production build:\r\n\r\n(tip: you can skip checking out the repo (steps 1 to 2), as it can be reproduced in [the repo's deployed version](https://use-on.vercel.app/))\r\n\r\n1. Check out https://github.com/dutzi/use-on\r\n2. `yarn` then `yarn start:prod`\r\n3. Complete steps 4-9 from above\r\n\r\n\u2764\ufe0f",
        "title": "Bug: Inconsistent behavior between development and production builds",
        "labels": "Type: Question",
        "id": 45969
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Enable strict mode for checking for possible issues in the future concurrent mode\r\n2. create the below component and run the code\r\n```\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst Example = ({ onIncrement }) => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const incrementHandler = useCallback(() => {\r\n    onIncrement(count, count + 1);  // Is count guaranteed to be the latest state here due to including count in the useCallback dependency array?\r\n    setCount((count) => count + 1);\r\n  }, [count, onIncrement]);\r\n\r\n  return (\r\n    <>\r\n      <span>{count}</span>\r\n      <button onClick={incrementHandler}>increment</button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Parent = () => (\r\n  <Example\r\n    onIncrement={(currentCount, incrementedCount) =>\r\n      alert(\r\n        `count before incrementing: ${currentCount}, after increment: ${incrementedCount}`\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nexport default Parent;\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!-- Link to code example: -->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIn this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below:\r\n```\r\nconst incrementHandler = useCallback(() => {\r\n    setCount((count) => {\r\n      onIncrement(count, count + 1);  \r\n      return count + 1\r\n    });\r\n  }, [count, onIncrement]);\r\n```\r\nthen the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation.\r\nand If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else.\r\n\r\nyou may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate.\r\n\r\nyou may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler**\r\n\r\n## The expected behavior\r\nProviding a second callback argument to `setState`  like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below:\r\n```\r\nconst incrementHandler = useCallback(() => {\r\n    let prevCount, nextCount;\r\n    setCount(\r\n      (count) => {\r\n        prevCount = count;\r\n        nextCount = count + 1;\r\n        return nextCount;\r\n      },\r\n      () => onIncrement(prevCount, nextCount)\r\n    );\r\n  }, [onIncrement]);\r\n``` \r\nIn my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented. \r\n\r\nunlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet.\r\n\r\n**wrong solution:**\r\n```\r\nconst [count, setCount, getCount] = useState(0);\r\n\r\n  const incrementHandler = useCallback(() => {\r\n    setCount((count) => count + 1);\r\n    const currentCount = getCount();\r\n    const nextCount = currentCount + 1;\r\n    onIncrement(currentCount, nextCount)\r\n  }, [onIncrement]);\r\n```\r\nor providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState.\r\n\r\nPlease tell me if I'm missing something or I've misunderstood things.\r\n\r\nIf not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state.\r\n\r\nThank you!",
        "title": "Question about getting the latest state value in the concurrent mode",
        "labels": "Type: Question",
        "id": 45970
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go at https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js\r\n2. Then reproduce the famous \"warning\" (**the issue is not about this warning**)\r\n![image](https://user-images.githubusercontent.com/9853656/109627307-298f8500-7b4a-11eb-9330-5ef9d8840094.png)\r\n(type something in the Tool ID)\r\n(the codesandboxe may freeze a little bit, try to reload the page)\r\n3. Open the browser console (chrome in my case) and you will see\r\n![image](https://user-images.githubusercontent.com/9853656/109634512-ff41c580-7b51-11eb-847c-f7cb7ca3754a.png)\r\nThen go to the code (red arrow on the image above)\r\n4. Make a breakpoint here\r\n![image](https://user-images.githubusercontent.com/9853656/109635453-0e754300-7b53-11eb-945b-f1848ac07a53.png)\r\nreload the page and initiate the \"warning\" again (see 2)\r\n4.  Go down the callstack and you can see the \"warning\" is written by this code\r\n![image](https://user-images.githubusercontent.com/9853656/109627844-b6d2d980-7b4a-11eb-9812-440d8d3aa7c3.png)\r\n5.  Now the question.. I'm using the 17.0.1 version and this code shouldn't exist there. Check this out https://github.com/facebook/react/releases/tag/v17.0.1 and you can find only this:\r\n![image](https://user-images.githubusercontent.com/9853656/109628307-45475b00-7b4b-11eb-8a25-61dad589fa8b.png)\r\nAs you can see instead of  `error('A component is changing...` we have `console.error(\r\n        'A component is changing...`.\r\nThe changes were made by this https://github.com/facebook/react/commit/0cf22a56a18790ef34c71bef14f64695c0498619#diff-e94b1d695a508a3bacbab157bbc3035d75e53174bdb82181077d1b374046f9a6 long time ago.\r\n6. Does it mean that 17.0.1 version of react and react-dom packeges were not built from this source code https://github.com/facebook/react/releases/tag/v17.0.1 ? Seems like a big issue then.\r\n7. It happens without Codesandbox as well.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\nLink to code example:\r\nhttps://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nWe keep seeing the word \"Warning\" (which is produced by `warning` function, though it's not a warning but an error)\r\n![image](https://user-images.githubusercontent.com/9853656/109633773-2cda3f00-7b51-11eb-9ab8-93b33316e50b.png)\r\n\r\n## The expected behavior\r\nWe shouldn't see the word \"Warning\" if the packages v.17.0.1 were bilt from https://github.com/facebook/react/releases/tag/v17.0.1 sourcecode (because it calls  `console.error(\r\n        'A component is changing... `  instead of `error('A component is changing... `)\r\n![image](https://user-images.githubusercontent.com/9853656/109636757-a45d9d80-7b54-11eb-8a35-b745b0fa168f.png)\r\n\r\n\r\n",
        "title": "Bug: 17.0.1 npm packages were not built from 17.0.1 source code?",
        "labels": "Type: Question",
        "id": 45971
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nIt seems that the default value in functional React component gets updated after render.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\nI created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:\r\n\r\n\r\n```\r\nconst MyComponent = () => {\r\n\r\n  // Initialise data with a random value:\r\n  const [data, setData] = React.useState(\r\n    () => {\r\n      const data = _.sampleSize(_.range(5), 3)\r\n      // Print data on initialisation:\r\n      console.log('init data in default:', data)\r\n      return data\r\n    }\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    // Print data after the component is rendered:\r\n    console.log('init data after render:', data)\r\n  })\r\n\r\n  return (\r\n    <div>{data}</div>\r\n  );\r\n};\r\n```\r\n\r\nThe output in console is:\r\n\r\n```\r\n[Log] init data in default: \u2013 [0, 3, 1] (3)\r\n[Log] init data after render: \u2013 [2, 1, 3] (3)\r\n```\r\n\r\nMy understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\nhttps://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe output in console before and after render is different.\r\n\r\n## The expected behavior\r\n\r\nThe output in console before and after render should be the same.",
        "title": "Bug: It seems that the default value in functional React component gets updated after render.",
        "labels": "Type: Question",
        "id": 45972
    },
    {
        "body": "@gaearon How would you re-write the following mixins?\r\n\r\nhttps://github.com/gerobit/ivis-core/blob/a51154c8937d4d392f20303caeb8b450ecf9189a/client/src/lib/decorator-\r\nhelpers.js",
        "title": "Mixin rewrite with React and Higher-order-functions",
        "labels": "Type: Question",
        "id": 45973
    },
    {
        "body": "Hi folks,\r\nAt some point w/in the last 5 months or so, the dev tools Chrome extension stopped working properly for me in **non**-incognito Chrome windows.  It's a bit hard to explain, but i'll try: when i use the extension, react components show up, but they are basically just high level wrapper components that we use in our app.  For example, I cannot inspect a button component, a container component, an input component, etc, in the UI.\r\n\r\nThis issue disappears in incognito mode, however, and i can use the extension just fine.\r\n\r\nChrome version: 87.0.4280.141\r\nExtension version: 4.10.1\r\nReact version: 16.13.1\r\n\r\nI've been unable to find anyone else with this issue.  Please let me know if there is other information I can provide you with.  Thank you.",
        "title": "Dev tools Chrome Extension only works properly in Incognito window",
        "labels": "Type: Question",
        "id": 45974
    },
    {
        "body": "Hi guys,\r\nI would really like to join you in order to help with the maintenance of React.\r\n\r\nMy change proposal is to apply the clean code rules to React codebase; for example:\r\n- better name to variables\r\n- single point of return\r\n- have short functions with a single purpose\r\n- ...\r\n\r\nIn order to avoid a long code review process, I would like to make 1 PR for each package that I'm going to edit.\r\n\r\nI've already signed the CLA. \r\n\r\nHope you'll be interested in this,\r\n\r\nMatteo",
        "title": "Can I help?",
        "labels": "Type: Question",
        "id": 45975
    },
    {
        "body": "Since CM mode now runs useEffects' cleanups async. Are we still guaranteed that they'll resolve in order? By that I mean, if a component get's cleanup, re-rendered and cleaned up again. That the first cleanup will resolve, before the second?\r\n\r\nComponentA (1) -> thrown away -> ComponentA (2) -> thrown away. Will that (2) effectively \"await\" on the (1) to cleanup first.",
        "title": "Question: CM mode and useEffect cleanups",
        "labels": "Type: Question",
        "id": 45976
    },
    {
        "body": "Is there any way to hide react version or is it designed to have react versions in the build files which are given in the production\r\n\r\n",
        "title": "React build files contain the version of react being used",
        "labels": "Type: Question",
        "id": 45977
    },
    {
        "body": "First of all, thank you for reading and patience.\r\n\r\nI've been studying the principle of react lanes recently, and its implementation is interesting to me, but I still don't know what the specific problems it solves.\r\n\r\n> This constraint was designed before Suspense was a thing, and it made some sense in that world. When all your work is CPU bound, there's not much reason to work on tasks in any order other than by their priority. But when you introduce tasks that are IO-bound (i.e. Suspense), you can have a scenario where a higher priority IO-bound task blocks a lower-priority CPU-bound task from completing.\r\n\r\nFrom the explanation of @acdlite , it seems to solve the blocking problem of IO operation on low priority tasks.\r\n\r\nBut I couldn't figure out what asynchronous IO blocked\uff1f\r\n\r\n```js\r\n<A/>\r\n<Suspense>\r\n  <B/>\r\n</Susepsne>\r\n<C/>\r\n```\r\nBased on the above example, before lanes, where is blocked, and where is the problem solved after lanes.\r\n\r\nOr do you have a better demo to explain?\r\n\r\nFor developers, the new technology related information is too little, binary is also very abstract, thank you again for your patience.\r\n",
        "title": "Some questions about lanes.",
        "labels": "Type: Question",
        "id": 45978
    },
    {
        "body": "https://samver.org/\r\n\r\nIt's hard to know which one is the latest experimental react version in the `yarn` or `npm`.\r\n\r\n0.0.0-experimental-ede917064\r\n0.0.0-experimental-4c8c98ab9\r\n0.0.0-experimental-7f28234f8\r\n\r\nCan you tell which one is newer without doing querying on the web?\r\n\r\nI suggest adding a release date in the version.\r\n\r\n`0.0.0-experimental-20200802-3d0895557`",
        "title": "Suggestion: Add release date in the experimental (0.0.0) version",
        "labels": "Type: Question",
        "id": 45979
    },
    {
        "body": "I am currently developing a web app that uses both [react-pixi](https://github.com/inlet/react-pixi) and [react-babylonjs](https://github.com/brianzinn/react-babylonjs). Both of these libraries use `react-reconciler` and have a custom renderer. I also use redux in my project, so they share the same Context in the two libraries. \r\n\r\nIt displays a warning on Console after every redux state updating, but everything works well, both renderers can trigger an update.\r\n\r\nI want to know if there is any risk in doing this, or is this just a false warning?\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Using multiple react renderers\r\n2. Using the same context provider between that react renderers\r\n\r\nLink to code example: https://codesandbox.io/s/multiple-reconciler-using-same-context-v8kq1?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nIt will throw a warning message after every state updating:\r\n\r\n> Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported. \r\n\r\nBut everything works well, both renderers can trigger an update.\r\n\r\n## The expected behavior\r\n\r\nDon't show any warning.",
        "title": "Why does React warn about multiple renderers using the same context provider?",
        "labels": "Type: Question",
        "id": 45980
    },
    {
        "body": "Cf the screenshot bellow. I have no `componentWillReceiveProps` in my code, so the warning comes from a library.\r\nI don't know how to quickly identify which library causes this warning and make a fix pull request on the repo of this library.\r\n\r\nAny tips to also remove the warning ?\r\n\r\nThanks a lot \r\n\r\n\r\n![image](https://user-images.githubusercontent.com/25119847/89186329-ebbe8400-d59b-11ea-87f4-47d2f215be72.png)\r\n\r\n\r\n",
        "title": "Bug: can't inspect well react warnings for `componentWillReceiveProps has been renamed`",
        "labels": "Type: Question",
        "id": 45981
    },
    {
        "body": "In JS, Array rendered with ',' in between each element\r\n e.g. ['Piyush', 'Sinha'] \r\n// Piyush,Sinha//\r\nbut in react Array rendered without ',' in between each element\r\n e.g. [ 'Piyush', 'Sinha'] \r\n//PiyushSinha//",
        "title": "Showing an Array in string Format in UI",
        "labels": "Type: Question",
        "id": 45982
    },
    {
        "body": "\r\nLet's say our state is as follows:\r\n```\r\nstate: {\r\n    user: {\r\n        name: 'Dave',\r\n        email: 'Dave@gmail.com'\r\n    }\r\n}\r\n```\r\n\r\nso while getting the user property from the state which one of the following should I do?\r\n\r\n**Case 1:**\r\n\r\n```\r\nconst user = this.state.user\r\n\r\nthis way following is valid\r\nuser == this.state.user //true\r\nuser.name = 'Manny';\r\nconsole.log(this.state.user.name) //Manny\r\n```\r\nthough it won't cause re-render until we use setState() but basically the value of the state variable has changed.\r\n\r\n**Case 2:**\r\n\r\n```\r\nconst user = { ...this.state.user};\r\n\r\nthis way\r\nuser == this.state.user //false\r\nuser.name = 'Manny';\r\nconsole.log(this.state.user.name) //Dave\r\n```\r\n\r\nWhich approach is better or are there any side effects of any of them?",
        "title": "Which approach is better for getting data from state ?",
        "labels": "Type: Question",
        "id": 45983
    },
    {
        "body": "Hi,\r\n\r\nI need to render another React App (i.e. App2) into existing React App (i.e. App1) on run time. I have hosted my \"App2\" on a remote server. I read \"asset-manifest.json\" file from it and on runtime I append those .js chunks in our head tag, this overall code I call from my \"App1\" to load my \"App2\" on runtime. \r\n\r\nBut I am not able to trigger \"App2\". How should I triggered App2 component inside App1 component?\r\n\r\nMy application have lot of other internal dependencies, such redux, redux-thunk etc.\r\n\r\n ",
        "title": "[Micro React Apps] - Need to render another React App into existing React App",
        "labels": "Type: Question",
        "id": 45984
    },
    {
        "body": "<!--\r\nIn a functional component, when waiting for an async action to complete and meanwhile changing any state - at the end of the async action the component stays in the previous lifecycle, thus doesn't know about the state change.\r\n\r\n-->\r\n\r\nReact version:\r\n16.13\r\n## Steps To Reproduce\r\n\r\n1. create a functional component with 2 elements\r\n2. the component will have an Integer - counter prop and is initialised with 0 value.\r\n3. the first element has an \"onClick\" action, which increases the counter. \r\n4. the second element has an \"onClick\" action, which is asynced and waits for a timeout promise and only then increases the counter.\r\n5. press the second element, and while waiting for the async action to complete press the firs element as well.\r\n\r\n```\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function App() {\r\n  const [counter, setCounter] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <button\r\n          onClick={async () => {\r\n            await new Promise(resolve => {\r\n              setTimeout(() => {\r\n                resolve();\r\n              }, 4000);\r\n            });\r\n             setCounter(counter + 1);\r\n          }}\r\n        >\r\n          Async\r\n        </button>\r\n        <label>{counter}</label>\r\n      </div>\r\n      <div>\r\n        <button\r\n          onClick={() => {\r\n            //increases the counter state\r\n            setCounter(counter + 1);\r\n          }}\r\n        >\r\n          Add 1\r\n        </button>\r\n        <label>{counter}</label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/red-bush-7w8yk?file=/src/App.js\r\n\r\n-- A different version of the same issue\r\nhttps://stackoverflow.com/questions/62424530/how-to-get-the-changed-state-after-an-async-action-using-react-functional-hooks\r\n\r\n## The current behavior\r\ncurrent behaviour: the counter value at the end of the async action will equal to 1\r\n\r\n## The expected behavior\r\nexpected behaviour: the counter value at the end of the async action will equal to 2",
        "title": "When waiting for an async action to end, and in the meantime the state changes, there is no way to know about the change",
        "labels": "Type: Question",
        "id": 45985
    },
    {
        "body": "I'm wirte a custimse renderer for render element in canvas(like react-pixi), I want intergrate with react dev tool;\r\nI can hightlight element when click element in react dev tool compoent panel use code:\r\n```ts\r\n__REACT_DEVTOOLS_GLOBAL_HOOK__?.reactDevtoolsAgent?._bridge.addListener('highlightNativeElement', (eleInfo: EleInfo) => {\r\n        const { id, rendererID } = eleInfo;\r\n        const renderer = __REACT_DEVTOOLS_GLOBAL_HOOK__?.rendererInterfaces.get(\r\n            rendererID,\r\n        );\r\n\r\n        const node_list =\r\n            (renderer.findNativeNodesForFiberID(id) as Sprite[]) || [];\r\n\r\n        //... customise render engin hightlight code\r\n    });\r\n```\r\n\r\nI want hightlight ele when mouse move in canvas, I can use `__REACT_DEVTOOLS_GLOBAL_HOOK__.rendererInterfaces.get(1).getFiberIDForNative(node)` find node fiber id, I can use `_bridge` send hightlint msg to backend just like the code\r\nhttps://github.com/facebook/react/blob/6ba25b96df5d4179bf8aba3c3fe1ace3dce28234/packages/react-devtools-shared/src/devtools/views/hooks.js#L311\r\nbut I can't get store object and get enugh infomation send to backend.\r\nmaybe dev tool can expose proper api for this function",
        "title": "devtool Api request : add api for customize renderer inspect element",
        "labels": "Type: Question",
        "id": 45986
    },
    {
        "body": "<!--\r\n The problem is that a random function is getting called up, for no reason, I tried to trace it and looked like there is a problem with react-development. react-development is calling a long ago used function\r\n-->\r\n\r\nReact version: ^16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click on Task 1\r\n2. Check the dsdfdsf tab,and check it\r\n3. Click on Create a new Task \r\n4. create a new task\r\n\r\n\r\n\r\nLink to code example:\r\n\r\n<!--\r\n code --> https://github.com/aman-singal/Recact_todoList\r\n-->\r\n\r\n## The current behavior\r\nWhen adding a new task, The last used function of a different component gets called for no reason. The milestone of the list gets cleared when adding a new Task\r\n\r\n\r\n##  The expected behavior\r\nThe Function shouldn't be called, the already existing List shouldn't be cleared\r\n",
        "title": "Bug: React Function getting called for no Reason",
        "labels": "Type: Question",
        "id": 45987
    },
    {
        "body": "Hello. I'm not sure if this is an issue, but I would like to know a little more about how react developer tools work. \r\n\r\nI want to get reacts props with selenium in order to make easier the debugging of a website. \r\n\r\nI'd be thankful with any kind of help you can give me.\r\n\r\nBest regards",
        "title": "Selenium integration",
        "labels": "Type: Question",
        "id": 45988
    },
    {
        "body": "When I try to batch update all the states with click events, the final render is once. When the state is updated in batch with setTimeout, the result is multiple times. May I ask what is the useStateHook running mechanism inside react? Is the same asynchronous function, but The Times of rendering is not the same?\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Bind a single click event to the DOM and handle multiple state updates in batches\r\n2. After the component is mounted, create a setTimeout timer, which is also a batch update of state\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://codesandbox.io/s/charming-fermat-syi5g?file=/src/App.js](url)\r\n\r\n## The current behavior\r\nClick event batch update and timer batch update rendering times are different\r\n\r\n\r\n## The expected behavior\r\nAlso triggers an update\r\n\r\nWhat is the operation mechanism of useState hook? Why not the same number of asynchronous renderings?\r\n",
        "title": "Click event and setTimeout update state, different times of rendering",
        "labels": "Type: Question",
        "id": 45989
    },
    {
        "body": "```\r\nconst [ html, setHTML ] = useState('');\r\nconst [ script, setScript ] = useState('');\r\n\r\nconst update = (script, html) => {\r\n  setScript(script);\r\n  setHTML(html);\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code works fine, React Hooks will render ONCE and combine setScript & setHTML;\r\n\r\n\r\n```\r\nconst [ html, setHTML ] = useState('');\r\nconst [ script, setScript ] = useState('');\r\n\r\nconst update = async (script, html) => {\r\n  await new Promise(resolve => setTimeout(resolve, 10));\r\n  setScript(script);\r\n  setHTML(html);\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code doesn't work anymore, React Hooks will render TWICE and it doesn't combine setScript & setHTML.\r\n\r\nI can change to the code to:\r\n\r\n```\r\nconst [ state, setState ] = useState({\r\n  html: '',\r\n  script: ''\r\n});\r\n\r\nconst update = async (script, html) => {\r\n  await new Promise(resolve => setTimeout(resolve, 10));\r\n  setState({\r\n    script,\r\n    html\r\n  });\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code only renders ONCE but it has a new bug: the cursor in the textArea (where script and html go) will move to the end of the textArea instead of staying at where it is.",
        "title": "React Hooks will render multiple times after await",
        "labels": "Type: Question",
        "id": 45990
    },
    {
        "body": "When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing.\r\n\r\nReact version: HEAD\r\n\r\nWhile this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one.\r\n\r\n```\r\nfunction TestComponent({ref}) {\r\n  const [state] = React.useState({\r\n    stateField1: 42,\r\n  });\r\n  assignRef(ref, state);\r\n  return (\r\n    <div>\r\n      { state.stateField1 }\r\n    </div>\r\n  );\r\n}\r\n\r\nThis code wont work, caller would never be able to get The Answer. Caller is sad.\r\n```\r\n\r\n## The current behavior\r\nReact giving a warning and making the ref prop defunct.\r\n\r\n## The expected behavior\r\nRemove limitation and let ref on my function component live happily ever after.",
        "title": "Bug: function component cannot have ref property",
        "labels": "Type: Question",
        "id": 45991
    },
    {
        "body": "\r\nreact Developer Tools 4.6.0\r\nGoogle chrome Version 80.0.3987.149\r\nL'outil de d\u00e9veloppement react est inactif sur la console google chrome",
        "title": "Extention React non d\u00e9finie sur chrome",
        "labels": "Type: Question",
        "id": 45992
    },
    {
        "body": " <View style={[styles.box, {\r\n         transform: [{ scale:this.state.scaleNum}]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "title": "{[styles.box, {           transform: [{ scale:this.state.scaleNum}]      }]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "labels": "Type: Question",
        "id": 45993
    },
    {
        "body": "```tsx\r\nfunction useRefCallback<T extends (...args: any) => void>(callback: T) {\r\n  const ref = useRef<T>(callback);\r\n  ref.current = callback;\r\n  return useCallback(function(this: any, ...args: Parameters<T>) {\r\n    return ref.current.apply(this, args);\r\n  } as T, []);\r\n}\r\n```\r\nI think useRefCallback is safe to replace useCallback in any code, and it's better than useCallback because it will never cause recalculation.",
        "title": "Question: Why not useCallback always return static value without deps?",
        "labels": "Type: Question",
        "id": 45994
    },
    {
        "body": "Why all implements of hooks in `react-dom` and we have to import from `react`?\r\nJust I want to know about it",
        "title": "Question: It's not problem just question in my mind",
        "labels": "Type: Question",
        "id": 45995
    },
    {
        "body": "I'm using react hook `useContext`. I have two identical components (siblings), each that use the same context that is a list.\r\n\r\n**Scenario**\r\n1. The first sibling is created, calls `useContext`, and then pushes something into the list. \r\n2. The second sibling is then created, using the same `useContext`, and then pushes something into the list. \r\n\r\n**Issue**\r\nThe second sibling has the current state of list, which has two items, _but the first sibling state is not updated with the second item that was pushed in by the second sibling_\r\n\r\n**Expected**\r\nThat each component that is using the same `useContext` will be updated amongst all components that use the same context.\r\n\r\nIs this a bug or am I misusing this? Any help or guidance is appreciated \ud83d\ude47 ",
        "title": "Question: How to remove dynamic children from Parent State?",
        "labels": "Type: Question",
        "id": 45996
    },
    {
        "body": "Hi. I create `ref` in root component in my app. When i bind `ref` to element, which is a child of another element that is render in the portal, ref \"current\" property is always  `undefined`.\r\n\r\nSandbox with example here:\r\nhttps://codesandbox.io/s/refs-through-portals-test-o5lqr\r\n\r\nHow can i use refs with portals with expected behaviour?",
        "title": "Question: How to use \"useRef\" when it is passed through Portal?",
        "labels": "Type: Question",
        "id": 45997
    },
    {
        "body": "Hi,\r\n\r\nI'm kinda in doubt if this is an error or is just me doing something wrong.\r\n\r\nI am trying the new react experimental in a very simple existing app I have. Although I had installed the react experimental versions in my package.json, it seems it doesn't recognize ReactDOM.createRoot.\r\n\r\nWhen I try to run my project I receive the error message from the console:\r\n```\r\nUncaught TypeError: react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.createRoot is not a function\r\n    at Module../src/client/index.js (main.chunk.js:2437)\r\n    at __webpack_require__ (runtime.bundle.js:786)\r\n    at fn (runtime.bundle.js:151)\r\n    at Object.0 (main.chunk.js:4324)\r\n    at __webpack_require__ (runtime.bundle.js:786)\r\n    at checkDeferredModules (runtime.bundle.js:46)\r\n    at Array.webpackJsonpCallback [as push] (runtime.bundle.js:33)\r\n    at main.chunk.js:1\r\n``` \r\nThis only happens when I try using ``ReactDOM.createRoot``. Using ``ReactDOM.render`` everything works perfectly.\r\n\r\nAny idea why this is happening?\r\n```\r\n\"dependencies\": {\r\n    \"chalk\": \"^3.0.0\",\r\n    \"compression\": \"^1.7.4\",\r\n    \"express\": \"^4.17.1\",\r\n    \"morgan\": \"^1.9.1\",\r\n    \"uuid\": \"^3.4.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/cli\": \"^7.8.4\",\r\n    \"@babel/core\": \"^7.8.4\",\r\n    \"@babel/node\": \"^7.8.4\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-export-namespace-from\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-function-bind\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-nullish-coalescing-operator\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-optional-chaining\": \"^7.7.5\",\r\n    \"@babel/plugin-proposal-pipeline-operator\": \"^7.7.7\",\r\n    \"@babel/plugin-proposal-private-methods\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-throw-expressions\": \"^7.7.4\",\r\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.7.4\",\r\n    \"@babel/preset-env\": \"^7.8.4\",\r\n    \"@babel/preset-react\": \"^7.7.4\",\r\n    \"@babel/preset-typescript\": \"^7.8.3\",\r\n    \"@hot-loader/react-dom\": \"^16.11.0\",\r\n    \"@testing-library/jest-dom\": \"^5.1.1\",\r\n    \"@testing-library/react\": \"^9.4.0\",\r\n    \"autoprefixer\": \"^9.7.4\",\r\n    \"babel-eslint\": \"^11.0.0-beta.2\",\r\n    \"babel-jest\": \"^25.1.0\",\r\n    \"babel-loader\": \"^8.0.6\",\r\n    \"babel-plugin-dynamic-import-node\": \"^2.3.0\",\r\n    \"babel-plugin-styled-components\": \"^1.10.7\",\r\n    \"case-sensitive-paths-webpack-plugin\": \"^2.3.0\",\r\n    \"circular-dependency-plugin\": \"^5.2.0\",\r\n    \"clean-webpack-plugin\": \"^3.0.0\",\r\n    \"connected-react-router\": \"^6.6.1\",\r\n    \"copy-webpack-plugin\": \"^5.1.1\",\r\n    \"core-js\": \"^3.6.2\",\r\n    \"css-hot-loader\": \"^1.4.4\",\r\n    \"css-loader\": \"^3.4.1\",\r\n    \"deep-freeze\": \"^0.0.1\",\r\n    \"eslint\": \"^6.8.0\",\r\n    \"eslint-loader\": \"^3.0.3\",\r\n    \"eslint-plugin-babel\": \"^5.3.0\",\r\n    \"eslint-plugin-import\": \"^2.20.1\",\r\n    \"eslint-plugin-jsx-a11y\": \"^6.2.3\",\r\n    \"eslint-plugin-ramda\": \"^2.5.1\",\r\n    \"eslint-plugin-react\": \"^7.18.3\",\r\n    \"eslint-plugin-react-hooks\": \"^2.3.0\",\r\n    \"eslint-plugin-redux-saga\": \"^1.1.3\",\r\n    \"eslint-watch\": \"^6.0.1\",\r\n    \"file-loader\": \"^5.0.2\",\r\n    \"hard-source-webpack-plugin\": \"^0.13.1\",\r\n    \"history\": \"^4.10.1\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"immer\": \"^5.3.4\",\r\n    \"jest\": \"^25.1.0\",\r\n    \"jest-styled-components\": \"^7.0.0\",\r\n    \"lodash\": \"^4.17.15\",\r\n    \"mini-css-extract-plugin\": \"^0.9.0\",\r\n    \"moment\": \"^2.24.0\",\r\n    \"nock\": \"^11.7.1\",\r\n    \"normalizr\": \"^3.5.0\",\r\n    \"npm-run-all\": \"^4.1.5\",\r\n    \"open\": \"^7.0.2\",\r\n    \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",\r\n    \"pm2\": \"^4.2.3\",\r\n    \"postcss-flexbugs-fixes\": \"^4.2.0\",\r\n    \"postcss-loader\": \"^3.0.0\",\r\n    \"prop-types\": \"^15.7.2\",\r\n    \"ramda\": \"^0.27.0\",\r\n    \"react\": \"^0.0.0-experimental-241c4467e\",\r\n    \"react-dom\": \"^0.0.0-experimental-241c4467e\",\r\n    \"react-hooks-testing-library\": \"^0.6.0\",\r\n    \"react-hot-loader\": \"^4.12.19\",\r\n    \"react-is\": \"^16.12.0\",\r\n    \"react-redux\": \"^7.1.3\",\r\n    \"react-router\": \"^5.1.2\",\r\n    \"react-router-dom\": \"^5.1.2\",\r\n    \"react-test-renderer\": \"^16.12.0\",\r\n    \"redux\": \"^4.0.5\",\r\n    \"redux-actions\": \"^2.6.5\",\r\n    \"redux-devtools-extension\": \"^2.13.8\",\r\n    \"redux-logger\": \"^3.0.6\",\r\n    \"redux-saga\": \"^1.1.3\",\r\n    \"redux-saga-test-plan\": \"^4.0.0-rc.3\",\r\n    \"regenerator-runtime\": \"^0.13.3\",\r\n    \"reselect\": \"^4.0.0\",\r\n    \"source-map-loader\": \"^0.2.4\",\r\n    \"style-loader\": \"^1.1.3\",\r\n    \"styled-components\": \"^5.0.1\",\r\n    \"stylelint\": \"^13.0.0\",\r\n    \"stylelint-bare-webpack-plugin\": \"^2.0.0\",\r\n    \"stylelint-config-recommended\": \"^3.0.0\",\r\n    \"stylelint-config-standard\": \"^19.0.0\",\r\n    \"stylelint-config-styled-components\": \"^0.1.1\",\r\n    \"stylelint-custom-processor-loader\": \"^0.6.0\",\r\n    \"stylelint-order\": \"^4.0.0\",\r\n    \"stylelint-processor-styled-components\": \"^1.9.0\",\r\n    \"stylelint-selector-bem-pattern\": \"^2.1.0\",\r\n    \"thread-loader\": \"^2.1.3\",\r\n    \"typescript\": \"^3.7.5\",\r\n    \"url-loader\": \"^3.0.0\",\r\n    \"webpack\": \"^4.41.4\",\r\n    \"webpack-dev-middleware\": \"^3.7.2\",\r\n    \"webpack-hot-middleware\": \"^2.25.0\",\r\n    \"webpack-manifest-plugin\": \"^2.2.0\",\r\n    \"webpack-merge\": \"^4.2.2\",\r\n    \"webpack-pwa-manifest\": \"^4.1.1\",\r\n    \"workbox-webpack-plugin\": \"^5.0.0\"\r\n  }\r\n```",
        "title": "Webpack can't find ReactDOM.createRoot",
        "labels": "Type: Question",
        "id": 45998
    },
    {
        "body": "You [frequently][1] [see][2] warnings that you shouldn't lie to `useEffect` and `useMemo` about their dependencies.\r\n\r\n\r\nI'm wondering about this special case, which I see throughout the codebase at work:\r\n```\r\nuseEffect(() => {\r\n  // We want effect to run when a changes, but not b\r\n  doStuff(a, b)\r\n, [a])\r\n```\r\n\r\nLet's say `a` changes every 10 seconds, and `b` changes every second, and we want to `doStuff` whenever `a` changes.\r\n\r\nThis works, is simple and elegant. Yet all guides discourage this, suggesting to do this instead:\r\n```\r\nlet bRef = useRef()\r\nuseEffect(() => {\r\n  bRef.current = b\r\n})\r\n\r\nuseEffect(() => {\r\n  doStuff(a, bRef.current)\r\n}, [a])\r\n```\r\nWhy? Aren't those equivalent?\r\n\r\nI could see a potential issue with `useMemo(() => compute(a, b), [a])`. It can be accessed in the entire component, and sometimes it will be stale, which contradicts the meaning of memoization.\r\n\r\nBut what about that useEffect case?\r\n\r\n  [1]: https://overreacted.io/a-complete-guide-to-useeffect/#dont-lie-to-react-about-dependencies\r\n  [2]: https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies",
        "title": "Question: can I lie to useEffect about its dependencies in this case?",
        "labels": "Type: Question",
        "id": 45999
    },
    {
        "body": "Nested setState and unstable_batchedUpdates (are them ignored?)\r\n\r\nReact version: 16.12\r\n\r\n## Steps To Reproduce\r\nhttps://codesandbox.io/s/batchedupdates-uselayouteffect-evj8s\r\n\r\nopen profile after click, you will see 3 commit.\r\n\r\nit seems that even if we use unstable_batchedUpdates, nested setStates called on\r\ndidUpdate/layouteffect do not get batched.\r\n",
        "title": "Bug: Nested setState and unstable_batchedUpdates (are they ignored?)",
        "labels": "Type: Question",
        "id": 46000
    },
    {
        "body": "Hi, just out of curiosity can `useMemo` be used instead of `useRef` when doing it as following:\r\n\r\nExample:\r\n\r\n```javascript\r\nconst ref = useRef(null);\r\nconst ref2 = useMemo(() => { current: null }, []);\r\n```\r\n\r\nIt looks to me that both refs will be working just fine as DOM ref and as mutable value similar to instance fields in classes. Why then `useRef` is implemented differently comparing to `useMemo` considering [ReactFiberHooks.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js) code for `useRef` and `useMemo`?\r\n\r\nThanks!",
        "title": "Question: Can useMemo be used instead of useRef?",
        "labels": "Type: Question",
        "id": 46001
    },
    {
        "body": "const CreateNotificationBase = (props) => {\r\nconst [state, dispatch] = useContext(Store);\r\n const draftData = useRef({});\r\nuseEffect(() => {\r\n        if (state.notificationDetails.draftId) {\r\n            draftData.current = state.notificationDetails;\r\n        }\r\n    }, []);\r\nuseEffect(() => {\r\ndebugger\r\n},[draftData.current])\r\n}\r\n\r\nwhen value in store context changes useEffect of draftData.current also called. Please suggest hwo to resolve.",
        "title": "While using useRef , some data has been updated by context value from reducers, when the context value was updated from some other user event, variable used with useRef also updated, then how to use instance variables in hooks?",
        "labels": "Type: Question",
        "id": 46002
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nAccording to docs, it's possible to see props and state of a component at each commit.\r\nhttps://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html#browsing-commits\r\n\r\nYet, in every project I've tried all I see is the names of changed props, but not their values, like the gif from docs claims.\r\n\r\n\r\nReact version: 16.12.0\r\nextension: 4.4.0 (1/3/2020) ... Created from revision f749045a5 on 1/3/2020\r\n\r\n## Steps To Reproduce\r\n\r\n1. create counter app with CRA or another method\r\n2. open profiler and change state\r\n3. observe how only the name of the prop is visible, but not its value\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n```\r\nfunction App() {\r\n  let [a, setA] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => setA(v => v + 1)}>inc</button>\r\n      <Kid a={a} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Kid() {\r\n  return null;\r\n}\r\n```\r\n\r\n## The current behavior\r\n[current behavior](https://i.imgur.com/9I6rAIf.png)\r\n\r\n## The expected behavior\r\n[expected behavior](https://i.imgur.com/yVf36Ff.png)\r\n\r\nAm I doing something wrong or has this feature been removed? I know you can see props in the inspector, but there it's only the most recent ones.",
        "title": "Bug: react-devtools profiler doesn't show props",
        "labels": "Type: Question",
        "id": 46003
    },
    {
        "body": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8\r\n\r\nAs it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.\r\n\r\n## Coding Questions\r\n\r\nIf you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions.\r\n\r\nhttps://stackoverflow.com/questions/tagged/react\r\n\r\n## Talk to other React developers\r\n\r\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React.\r\n\r\nhttps://reactjs.org/community/support.html#popular-discussion-forums\r\n\r\n## Proposals\r\n\r\nIf you'd like to discuss topics related to the future of React, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.\r\n\r\nhttps://github.com/reactjs/rfcs\r\n",
        "title": "Question:  Just for my app test. Thanks.",
        "labels": "Type: Question",
        "id": 46004
    },
    {
        "body": "Is it a correct form to use the useContext hook without the enclosing provider?\r\n\r\nSee this simple [sandbox](https://codesandbox.io/s/3q2x15l4rm) which uses  the JediContext.Provider.\r\n\r\nIn this modified [sandbox](https://codesandbox.io/s/react-hooks-usecontext-z2ryh) I removed the provider and the useContext hook still works.\r\n\r\nWhat are the consequences of using the useContext hook without a provider?",
        "title": "Question: Can the useContext hook be used without a provider?",
        "labels": "Type: Question",
        "id": 46005
    },
    {
        "body": "I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/KbvYG.png\r\n\r\nI am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.\r\n\r\nIs there any way how can I solve it?\r\n\r\nApollo controller\r\n\r\n    import { useQuery } from \"@apollo/react-hooks\";\r\n    import gql from \"graphql-tag\";\r\n    \r\n    export const useHelloQuery = () => useQuery(\r\n         gql`\r\n             {\r\n                 hello\r\n             }\r\n         `\r\n    )\r\n\r\n\r\nReact component:\r\n\r\n    function Test() {\r\n         const data = useHelloQuery();\r\n    \r\n         return (\r\n              <Text>awesoe</Text>\r\n         );\r\n    }\r\n    \r\n\r\nbefore adding react-native it was exactly same",
        "title": "Question: React apollo hooks fails after adding react-native to monorepo",
        "labels": "Type: Question",
        "id": 46006
    },
    {
        "body": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8\r\n\r\nAs it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.\r\n\r\n## Coding Questions\r\n\r\nIf you have a coding question related to CLOSE THIS PAGE - NOW and CLOSE THIS PAGE - NOW DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using CLOSE THIS PAGE - NOW, as well as ask for help with specific questions.\r\n\r\nhttps://stackoverflow.com/questions/tagged/CLOSE THIS PAGE - NOW\r\n\r\n## Talk to other CLOSE THIS PAGE - NOW developers\r\n\r\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of CLOSE THIS PAGE - NOW.\r\n\r\nhttps://CLOSE THIS PAGE - NOWjs.org/community/support.html#popular-discussion-forums\r\n\r\n## Proposals\r\n\r\nIf you'd like to discuss topics related to the future of CLOSE THIS PAGE - NOW, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.\r\n\r\nhttps://github.com/CLOSE THIS PAGE - NOWjs/rfcs\r\n",
        "title": "Question: I have a lot of very nice and smart vuejs components. is there a way to use it in an react project? ",
        "labels": "Type: Question",
        "id": 46007
    },
    {
        "body": "Hi, I believe that this can potentially be an issue, though I'm not sure.\r\n\r\nI was wondering about good patterns concerning the react context.\r\n\r\nLet's get a public library, for example `react-intl` that exposes a Provider (IntlProvider).\r\nLet's create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`.\r\nNow let's imagine I create a web app and use both `barLib` and `react-intl`.\r\n\r\nI don't expect the `barLib` to ever override my react-intl context, because i'm not aware it uses internally the `react-intl` lib.\r\nBut the `barLib` can accidentally override the react-intl context => https://codesandbox.io/s/embedded-contexts-test-z8e7b\r\n\r\nThis kinda breaks the isolation of libs IMO.\r\n\r\nI see several solutions :\r\n- Don't use an other lib context in the `barLib` (pretty extreme)\r\n- Check that there is not already an intl context in the `barLib`, if so merge the context values ?\r\n\r\nI'm not convinced with either solutions, what do you guys think about it ?",
        "title": "Question: react lib context overrides app context",
        "labels": "Type: Question",
        "id": 46008
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click Button\uff0cView print data\r\n2. Click Button\uff0cView print data\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/kind-fog-mce7w\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nEvery time you click the button, the printed data will change\r\n\r\n## The expected behavior\r\nEvery time I click the button, the printed data should be an empty object",
        "title": "Bug: useRef can not return a persist ref object",
        "labels": "Type: Question",
        "id": 46009
    },
    {
        "body": "\r\n\r\n## Coding Questions\r\ni try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined\r\n```\r\nconst [instance, setInstance] = useState<ECharts | undefined>(undefined);\r\n\r\nconst chartInstance = echarts.init(root.current);\r\n    setInstance(prev => {\r\n        console.log('prev instance', prev); // first time: undefined, then Echarts instance\r\n        return prev || chartInstance;\r\n    });\r\n    console.log('instance: ', instance, chartInstance); // instance is always undefined\r\n```\r\n\r\n\r\n",
        "title": "Question: why cann't I set echarts instance using useState?",
        "labels": "Type: Question",
        "id": 46010
    },
    {
        "body": "language and translation\r\ni'm sure that you translated your react site by google \r\nthe worst result at all \r\ni hope you correct it \r\n\r\nhttps://github.com/reactjs/rfcs\r\n",
        "title": "the worst arabic translation ",
        "labels": "Type: Question",
        "id": 46011
    },
    {
        "body": "hello all.\r\n\r\nI was met a problem when I published a react component, I need to help and discuss with you all \r\nI am going to write a component to load `React Component from CDN` and make it like a wrapper component.\r\n\r\n```jsx\r\nimport React, { Component } from 'react';\r\nimport scriptjs from 'scriptjs';\r\n\r\nconst DEV_SCRIPT =\r\n  'https://dev/cdn/resource/phoenix-header.js';\r\nconst PROD_SCRIPT =\r\n  'https://cdn/resource/phoenix-header.js';\r\n\r\nclass PhoenixHeaderWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.type = null;\r\n    this.scriptUrl =\r\n      props.scriptUrl || (props.env !== 'PROD' ? DEV_SCRIPT : PROD_SCRIPT);\r\n    this.state = {\r\n      cmp: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    scriptjs(this.scriptUrl, () => {\r\n      this.type = window.PhoenixHeader;\r\n      this.createOrUpdateComponent();\r\n    });\r\n  }\r\n\r\n  createOrUpdateComponent() {\r\n    const { scriptUrl, ...otherProps } = this.props;\r\n    if (!this.type) {\r\n      console.error('load component failed');\r\n      return;\r\n    }\r\n    const cmp = React.createElement(this.type, otherProps || {});  // this is point\r\n    this.setState({ cmp });\r\n  }\r\n\r\n  render() {\r\n    const { cmp } = this.state;\r\n    return cmp;\r\n  }\r\n}\r\n\r\nPhoenixHeaderWrapper.defaultProps = {\r\n  scriptUrl: '',\r\n  env: 'PROD',\r\n};\r\n\r\nexport default PhoenixHeaderWrapper;\r\n\r\n```\r\n\r\nand then, I do it just like do a normal react component that I was set the webpack config like below:\r\n\r\n```js\r\n// PhoenixHeader\r\n  output: {\r\n    publicPath: './',\r\n    filename: 'phoenix-header.js',\r\n    path: paths.appBuild,\r\n    library: 'PhoenixHeader',\r\n    libraryTarget: 'commonjs2',\r\n    libraryExport: 'default',\r\n  },\r\n  mode: 'production',\r\n  externals: {\r\n    react: {\r\n      commonjs: 'react',\r\n      commonjs2: 'react',\r\n      amd: 'react',\r\n      root: 'React',\r\n    },\r\n    ['react-dom']: {\r\n      commonjs: 'react-dom',\r\n      commonjs2: 'react-dom',\r\n      amd: 'react-dom',\r\n      root: 'ReactDom',\r\n    },\r\n  },\r\n```\r\n\r\nand then, I run the `npm run build && npm publish` to publish it.\r\n\r\nIn my own object which use the PhoenixHeader component as a npm package. \r\n\r\n```jsx\r\n// app.jsx\r\nimport React from 'react';\r\nimport PhoenixHeader from 'phoenix-header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PhoenixHeader />\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n```\r\nafter `npm start`, it show me a error:\r\n![image](https://user-images.githubusercontent.com/12051024/72236068-4d270180-3610-11ea-9e62-7a69a2972e15.png)\r\n\r\n**That it is my confusion is, why `createElement` not in this scope.**\r\n\r\nso I try to make react set into global:\r\n```js\r\nwindow.React = React;\r\n```\r\n\r\nYes, it's work for me.\r\n\r\n**But someone would like to tell me why need to make React set into global?**\r\n\r\n**And am I need to build this wrapper component which do not external the react when I was build?**\r\n\r\nlet's discuss or give me more suggest about this wrapper component please  \ud83d\ude4f",
        "title": "help~When I use React.createElement directly and How to pack the component?",
        "labels": "Type: Question",
        "id": 46012
    },
    {
        "body": "I am trying to upgrade my Reactjs and react-dom versions from v15.6.2 to ^v16.0.0 and am getting the above error.\r\n\r\nClicking through the error in the console, I see that the _React$DOM is undefined. I have followed all the migration instructions on the React.org site and looked extensively, but cannot seem to get rid of this error on versions of react and react-dom of v16 and above.\r\n\r\nAny ideas on what that issue is and how I can resolve it?\r\n\r\nBelow are my package.json and webpack.config. They are pre-upgrade to v16, but I have tried adding core-js per Reactjs.org.\r\n\r\n```\r\nvar _React$DOM = _react2.default.DOM,\r\n    input = _React$DOM.input, <<< Here is the highlighted error\r\n    select = _React$DOM.select,\r\n    textarea = _React$DOM.textarea;\r\nMy dependencies in package.json:\r\n```\r\n\r\n\r\n ```\r\n \"devDependencies\": {\r\n    \"babel-loader\": \"^7.1.5\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-preset-react\": \"^6.1.18\",\r\n    \"babel-preset-stage-0\": \"^6.24.1\",\r\n    \"chai\": \"^4.1.2\",\r\n    \"chai-jquery\": \"^2.0.0\",\r\n    \"css-loader\": \"^1.0.0\",\r\n    \"eslint-config-rallycoding\": \"^3.2.0\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"react-addons-test-utils\": \"^15.0.1\",\r\n    \"style-loader\": \"^0.21.0\",\r\n    \"webpack-cli\": \"^3.1.0\",\r\n    \"webpack-dev-server\": \"^3.1.8\"\r\n  },\r\n  \"dependencies\": {\r\n    \"actioncable\": \"^5.2.4\",\r\n    \"axios\": \"^0.18.0\",\r\n    \"babel-core\": \"^6.2.1\",\r\n    \"babel-polyfill\": \"^6.26.0\",\r\n    \"babel-preset-stage-1\": \"^6.1.18\",\r\n    \"cloudinary-core\": \"^2.5.0\",\r\n    \"cloudinary-react\": \"^1.0.6\",\r\n    \"dotenv-webpack\": \"^1.5.5\",\r\n    \"file-loader\": \"^2.0.0\",\r\n    \"jquery\": \"^3.3.1\",\r\n    \"jsdom\": \"^12.0.0\",\r\n    \"lodash\": \"^4.1.0\",\r\n    \"prop-types\": \"^15.6.1\",\r\n    \"react\": \"^15.6.2\",\r\n    \"react-bootstrap\": \"^0.32.1\",\r\n    \"react-day-picker\": \"^7.1.6\",\r\n    \"react-dom\": \"^15.6.2\",\r\n    \"react-dropzone\": \"^5.0.1\",\r\n    \"react-helmet\": \"^5.2.0\",\r\n    \"react-redux\": \"^5.0.7\",\r\n    \"react-router-dom\": \"^4.3.1\",\r\n    \"react-stripe-elements\": \"^2.0.1\",\r\n    \"redux\": \"^4.0.0\",\r\n    \"redux-form\": \"^7.4.2\",\r\n    \"redux-thunk\": \"^2.2.0\",\r\n    \"sha1\": \"^1.1.1\",\r\n    \"webpack\": \"^4.17.2\"\r\n  }\r\n```\r\nMy webpack.config:\r\n\r\n```\r\nconst webpack = require('webpack');\r\nconst Dotenv = require('dotenv-webpack');\r\nconst raf = require('raf')\r\n\r\nconst path = require('path');\r\n\r\n\r\nmodule.exports = {\r\n  mode: 'none',\r\n  watch: false,\r\n  entry: [\r\n    'babel-polyfill', './src/index.js'\r\n  ],\r\n  output: {\r\n    path: __dirname,\r\n    publicPath: '/',\r\n    filename: 'bundle.js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(jpg|png|svg)$/,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[path][name].[hash].[ext]'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.js?$/,\r\n        exclude: /node_modules/,\r\n        use:\r\n          { loader: 'babel-loader',\r\n        options: {\r\n         presets: ['react', 'es2015', 'stage-0']\r\n       }\r\n      }\r\n    }\r\n\r\n    ] // end of loaders\r\n\r\n  devServer: {\r\n    historyApiFallback: true,\r\n    contentBase: './'\r\n  },\r\n  plugins: [\r\n    new webpack.DefinePlugin({\r\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\r\n    }),\r\n    new Dotenv()\r\n  ]\r\n};\r\n```",
        "title": "In React and react-dom 16 Upgrade, getting error: Uncaught TypeError: Cannot read property 'input' of undefined",
        "labels": "Type: Question",
        "id": 46013
    },
    {
        "body": "My React application has a list of to do lists like this:\r\n\r\n<img width=\"1082\" alt=\"figma_canvases\" src=\"https://user-images.githubusercontent.com/12554095/71749785-47206c00-2e2b-11ea-8d0c-5a82ceba1b05.png\">\r\n\r\n> Replace the Figma canvas preview images with todo lists above.\r\n\r\nIn the list of todo lists, I'd like to include a preview of each list as well as its name.\r\n\r\nHere's what I thought of to achieve this:\r\n- Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`.\r\n- Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page\r\n\r\nHowever, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won't work?\r\n\r\nI've looked at `repng` [1] so far but it hasn't worked for the components I tested it with.\r\n\r\n[1] https://github.com/jxnblk/repng",
        "title": "Rendering React component on server to take a screenshot of it",
        "labels": "Type: Question",
        "id": 46014
    },
    {
        "body": "Hi, I'm Newbie for Web Dev. I'm starting learning React and next.js and i got issue now i have to do a Navbar so I use Navbar from reactstrap to my next.js project it work fine but nextday I open my project and then my project kaboom.\r\n\r\n==\r\n\r\nError: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\r\n1. You might have mismatching versions of React and the renderer (such as React DOM)\r\n2. You might be breaking the Rules of Hooks\r\n3. You might have more than one copy of React in the same app\r\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\r\n\u25b6 2 stack frames were collapsed.\r\nExample\r\n./components/MainNav.js:19\r\n  16 | import 'bootstrap/dist/css/bootstrap.min.css'\r\n  17 | \r\n  18 | const Example = (props) => {\r\n> 19 |   const [isOpen, setIsOpen] = useState(false);\r\n  20 | \r\n  21 |   const toggle = () => setIsOpen(!isOpen);\r\n  22 | \r\nView compiled\r\n\u25b6 11 stack frames were collapsed.\r\n\r\n==\r\n\r\nThis is my Navbar Code\r\n\r\n==\r\n```\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst Example = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">HOME</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/\">WHAT</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHO</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">BRANCH</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHERE</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHEN</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">FAQS</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">GAME</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <NavbarText>Simple Text</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Example;\r\n```\r\n==\r\n\r\nWhat wrong is it and what should i do to resolve this. Thank.\r\n",
        "title": "My Navbar work fine until next day",
        "labels": "Type: Question",
        "id": 46015
    },
    {
        "body": "I try to get the latest state value in the initialization method, but the result is not satisfactory\u3002\r\nAll this happens in function components\u3002\r\n\r\n1.react version is 16.12.0\uff1b\r\n2.react-dom version is 16.12.0\uff1b\r\n\r\nthis is my demo code :\r\n\r\n```\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst App=()=>{\r\n\t/*button click*/\r\n\tconst btnClick = ()=>{\r\n\t\tconsole.log(\"initButton getting state is====>\",nowState); //can't get now state ,all is init value\r\n\t}\r\n\t/*init a button*/ \r\n\tconst initTitle = ()=>{\r\n\t\treturn (\r\n\t\t\t<button onClick={btnClick}>click</button>\r\n\t\t)\r\n\t}\r\n\tconst [title, settitle] = useState();\r\n\r\n\t/*now state*/\r\n\tconst [nowState, setNowState] = useState(0);\r\n\tconsole.log(\"now state is====>\",nowState);\r\n\r\n\tuseEffect(()=>{\r\n\t\tsettitle(initTitle());\r\n\t},[])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{title}\r\n\t\t\t<button onClick={()=>setNowState(nowState + 1)}>change now state</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n```\r\n",
        "title": "I can't get the latest status value in the initialization method",
        "labels": "Type: Question",
        "id": 46016
    },
    {
        "body": "When I get 401 status code from backend I run refreshToken method with passing the function where expired token occurred. In refreshToken method I get new token and set in refreshTokenLastFunc property function from parameter.\r\n\r\nThen I watch when refreshTokenLastFunc was updated using React useEffect and run once again the function where expired token occurred.\r\n\r\nThe problem is while I run store.refreshTokenLastFunc() in useEffect, the function in refreshTokenLastFunc property uses old Context API store(so it uses old token not the new one). You can read my comment in useEffect for store.refreshTokenLastFunc.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI don't actually know if it is a React bug or I don't understand JS properly\r\n\r\n**What is the current behavior?**\r\nIf I ran **store.refreshTokenLastFunc**  function in useEffect it takes old store, not the new one\r\n\r\n**What is the expected behavior?**\r\nI want **store.refreshTokenLastFunc**  function to run with new store, because store was modified before this function run\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact verison: 16.12.0\r\nBrowser: Google Chrome: 79\r\n\r\nMy code:\r\n```js\r\nexport const StoreProvider = props => {\r\n  const getToken = () => localStorage.getItem(\"token\");\r\n\r\n  const initState = () => ({\r\n    token: getToken(),\r\n    isAuth: false,\r\n    userRole: \"old role\",\r\n    mainUrl: MainUrl,\r\n    apiUrl: ApiUrl,\r\n    refreshTokenLastFunc: () => {}\r\n  });\r\n\r\n  const [store, setStore] = useState(initState());\r\n\r\n  const getUserInfo = async () => {\r\n    if (getToken()) {\r\n      try {\r\n        const apiConfig = {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${store.token}`\r\n          }\r\n        };\r\n\r\n        const response = await fetch(`${store.apiUrl}get-me`, apiConfig);\r\n        const responseJson = await response.json();\r\n\r\n        if (response.ok) {\r\n          // Update Context API\r\n          setStore({\r\n            ...store,\r\n            userRole: responseJson.role,\r\n            userName: responseJson.name,\r\n            userGroupId: responseJson.group_id,\r\n            isAuth: true\r\n          });\r\n        } else if (response.status === 401) {\r\n          refreshToken(getUserInfo);\r\n        } else {\r\n          throw new Error(`Some error occurred`);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const refreshToken = async func => {\r\n    try {\r\n      const apiConfig = {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          Authorization: `Bearer ${store.token}`\r\n        }\r\n      };\r\n\r\n      const response = await fetch(`${store.mainUrl}refresh-token`, apiConfig);\r\n      const responseJson = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Update token in local storage\r\n        localStorage.setItem(\"token\", responseJson.token);\r\n        // Update Context API\r\n        setStore({\r\n          ...store,\r\n          userRole: \"new role\",\r\n          token: responseJson.token,\r\n          refreshTokenLastFunc: func\r\n        });\r\n      } else {\r\n        throw new Error(`Some error...`);\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserInfo();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // If I console log my store before calling function, store is correctly updated, but the function uses old store.\r\n    console.log(\"store from useEffect: \", store); // store.userRole = 'new role' which is correct\r\n    store.refreshTokenLastFunc(); // store.userRole = 'old role' which should be 'new role'\r\n  }, [store.refreshTokenLastFunc]);\r\n\r\n  return (\r\n    <StoreContext.Provider value={[store, setStore, logout, getUserInfo]}>\r\n      {props.children}\r\n    </StoreContext.Provider>\r\n  );\r\n};\r\n```",
        "title": "Function passed as parameter and saved in Context API store takes old store from Context API",
        "labels": "Type: Question",
        "id": 46017
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nIf there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "title": "[TypeScript]Is there any way to define the state variables when using functional component? ",
        "labels": "Type: Question",
        "id": 46018
    },
    {
        "body": "i saw react package have `cjs` and `umd` folder\r\nand `index.js` in react output `cjs` version \r\n\r\nso if i want to use `umd` how can i change?\r\n\r\n![image](https://user-images.githubusercontent.com/20965813/71428891-b0eb9800-26fe-11ea-8887-691e69203855.png)\r\n",
        "title": "How can i change react umd version  in node_modules? ",
        "labels": "Type: Question",
        "id": 46019
    },
    {
        "body": "Ideally getDerivedStateFromProps  should not be called due to current component's setState. But it is behaving so. Can someone explain?\r\n\r\nCouldn't find solution in [#13015](https://github.com/facebook/react/issues/13015)",
        "title": "getDerivedStateFromProps is executed after setState #13015",
        "labels": "Type: Question",
        "id": 46020
    },
    {
        "body": "Hello, \r\n\r\nFeasibility of making a project in ionic reaction.\r\n\r\nI am interested in knowing more about Ionic react.\r\n\r\nAnd I would like to know if it is advisable to do a project with Ionic React.\r\n\r\nHow scalable the project would be.\r\n\r\nAnd you can use all the tools that have both ionic and rea, example: camera, maps, notifications, routes, among others.\r\n\r\nI appreciate if you can advise me.\r\n\r\nThank you",
        "title": "Opinions on Ionic Reac",
        "labels": "Type: Question",
        "id": 46021
    },
    {
        "body": "  I called two render methods to same root div .\r\n```\r\nRenderDOM.render( < Navigation /> ,document.getElementById(' root ')); \r\nRenderDOM.render( < App /> ,document.getElementById(' root '));\r\n```\r\nAnd what i get rendered on my screen is only a  App component.\r\nJust want to know that the one render method override the previous  render method?\r\n\r\n\r\n",
        "title": "Why only one component can be render at root div?",
        "labels": "Type: Question",
        "id": 46022
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*question*\r\n\r\n**What is the current behavior?**\r\n\r\n``` typescript\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Child() {\r\n  console.log(\"Child render\");\r\n  return null;\r\n}\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  console.log(\"Render\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"count changed\", count);\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>UseState</h2>\r\n      <p>clicked: {count}</p>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count + 1);\r\n        }}\r\n      >\r\n        +1\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count);\r\n        }}\r\n      >\r\n        +0\r\n      </button>\r\n      <Child />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n```\r\n\r\nThere are two button in this count example. Clicking one makes count +1\uff0canother makes count no change. If clicking the no change button first, \"Render\" will not be logged. But if clicking the +1 button first and then clicking anthor\uff0c\"Render\" will show twice, but \"\"Child render\" will only show once.\r\n\r\nI found the explain in document.\r\n\r\n> If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\r\n\r\nDoes React only promise that Children component will not be rendered in this situation? The current component may still be rendered?\r\n\r\nThis is an example in sandbox.\r\n\r\nhttps://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.12.0\",\r\n\"react-dom\": \"^16.12.0\",\r\n\r\n\r\n\r\n\r\n",
        "title": "Unexpected function component call using useState",
        "labels": "Type: Question",
        "id": 46023
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nHello,\r\nI am new in React and I am trying to create a simple react table to display data from db with login for user authentication. \r\nUntil I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls. \r\n\r\nFirst, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nEdit: login, password: admin, admin\r\n\r\nhttps://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\r\nhttps://codesandbox.io/embed/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\r\n[![Edit black-voice-2z6y5](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark)\r\n![error_message](https://user-images.githubusercontent.com/26010477/70700296-cf976b00-1cca-11ea-9c65-e2ba84d25d51.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nnodejs version v8.10.0\r\nnpm version 6.13.3\r\nubuntu/chrome\r\n\r\nPlease give me any advice. Thank you in advance :) \r\n",
        "title": "Bug: React table - Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.",
        "labels": "Type: Question",
        "id": 46024
    },
    {
        "body": "Here is my question:\r\nThere is a multiselect child component, the  value is maintained in its parent component [this.state.values] like this:\r\n\r\nParent {\r\n state={\r\n  values:[]\r\n }\r\n  render(){\r\n    return(\r\n     Multiselect value={this.state.values}\r\n    )\r\n  }\r\n}\r\n\r\nin the multiselect 's [onChange] function I control the multiselect value in two ways and two different render results:\r\n\r\nFirst:\r\n  onChange= ()=>{\r\n    this.setState({ values:this.handleValue(this.state.values)});\r\n  }\r\n\r\n  handleValues = (values)=>{\r\n    //here to add or splice, eg:\r\n    values.push('treeNode1');\r\n    return values\r\n  }\r\n\r\n  when I print this.state.values in the render() function, the 'treeNode1' is added, however ths multiselect component's 'treeNode1' option wasn,t selected;\r\n\r\nbut if change the onChange() function like this, it works right:\r\n  onChange= ()=>{\r\n    this.setState({ values:this.handleValue(Object.assign([],this.state.values))});\r\n  }\r\n\r\nI pass the copy of the [this.state.values] rather than [this.state.values].\r\n\r\nI,m confused.\r\n\r\nI know that we can,t change varibles in the state directly, however in the first way, [this.state.values] in the render() function is added by 'treeNode1', it looks correctly .\r\n\r\nHere is my guess :  React maintains a real state.  When React renders it can get the 'real' state of [this.state.values] which works actually rather than the [this.state.values] that I changed directly in the onChange function by adding 'treeNode1'. The state value[this.state.values] printed in the render() function looks correct ,because the directly change in the handleValues () function rather than changed by this.setState().\r\n\r\nI wonder how and why this happens and is my guess right? :)\r\n",
        "title": "question about this.state and this.setState",
        "labels": "Type: Question",
        "id": 46025
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nAsk a question\r\n\r\n**What is the current behavior?**\r\nWith `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens:\r\n\r\n1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');`\r\n2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component. \r\n3. The hook returns a [`RemoteData<Pick<Foo, 'name' | 'amount' | 'discounts'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, \"I haven't asked for this data yet\"\r\n4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.\r\n\r\nAt no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete.\r\n\r\nThrowing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component.\r\n\r\nThe only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \"maybe not ready the first time\" case.\r\n\r\nNote: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon ",
        "title": "How do suspense and subscriptions interact?",
        "labels": "Type: Question",
        "id": 46026
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nAPI design question about `useEffect`\r\n\r\n**What is the current behavior?**\r\nCurrently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once? \r\n",
        "title": "Why useEffect's default behavior is to run on every render?",
        "labels": "Type: Question",
        "id": 46027
    },
    {
        "body": "\r\nRefs never seem to work, is this a broken feature?\r\n\r\nWhy not remove them and just let people use \r\ndocument.querySelector('#id').action like normal people.\r\n\r\nalso, what does this mean? \r\n\r\n Function components cannot have refs. Did you mean to use React.forwardRef()?",
        "title": "Why include refs as a feature? -- seems broken and unnecessary",
        "labels": "Type: Question",
        "id": 46028
    },
    {
        "body": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component. \r\n\r\n**What is the expected behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML\r\n\r\n**What is the current behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.\r\n\r\nI've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.\r\n\r\nWhat I'm doing wrong?\r\n",
        "title": "Static rendering strategy doesn't work on codesplitted routes",
        "labels": "Type: Question",
        "id": 46029
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\nIn DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.)\r\n\r\n**What is the expected behavior?**\r\nAt least some components be filtered out.\r\nIt would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact DevTools 4.2.0 on Firefox 69.0.3.",
        "title": "DevTools component filter does not work with location",
        "labels": "Type: Question",
        "id": 46030
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no React tab in my chrome dev toolbar anymore.  I have deleted and reinstalled the react extension but the issue was not resolved.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nThere use to be a React tab in the chrome dev console toolbar\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using ios on google chrome.",
        "title": "Missing React tab in chrome dev tools",
        "labels": "Type: Question",
        "id": 46031
    },
    {
        "body": "I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below:\r\n\r\n**Container**\r\n``` typescript\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { GridSpacing } from '@material-ui/core/Grid';\r\n\r\nimport Course from '../components/Course/Course';\r\n\r\nimport { courseModels } from '../redux/features/course';\r\nimport { courseSelectors } from '../redux/features/course';\r\nimport { fetchCoursesAsync } from '../redux/features/course/actions';\r\nimport { RootState } from 'ReduxTypes';\r\n\r\ntype ErrorReport = { hasError: boolean; error?: Error };\r\ntype StateProps = {\r\n  isLoading: boolean;\r\n  courses: courseModels.Course[];\r\n  error: ErrorReport;\r\n};\r\n\r\n/**\r\n * Redux dispatch and state mappings\r\n */\r\nconst dispatchProps = {\r\n  fetchCourses: fetchCoursesAsync.request,\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): StateProps => ({\r\n  isLoading: state.courses.isLoadingCourses,\r\n  courses: courseSelectors.getReduxCourses(state.courses),\r\n  error: courseSelectors.getReduxCoursesError(state.courses),\r\n});\r\n\r\n/**\r\n * Component property type definitions\r\n */\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\n/**\r\n * CourseList component\r\n */\r\nconst CourseList = ({\r\n  courses = [],\r\n  error,\r\n  fetchCourses,\r\n  isLoading,\r\n}: Propas): JSX.Element => {\r\n  // fetch course action on mount\r\n  useEffect(() => {\r\n    console.log('COURSELIST FETCHING COURSES');\r\n    fetchCourses();\r\n  }, [fetchCourses]);\r\n\r\n  if (isLoading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error && error.hasError && error.error) {\r\n    throw error.error;\r\n    // if throw an error then encapsulating error boundary catches and displays.\r\n    // However when the container is loaded again via clicking on a Navbar link the useEffect\r\n    // action does not trigger. \r\n    \r\n    // Alternatively, if the error is rendered inside the container then the useEffect hook is \r\n    // still activated if the container is loaded again (e.g. via clicking on a Navbar link).\r\n    // return <p>{JSON.stringify(error.error, null, 2)}</p>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginTop: 20, padding: 30 }}>\r\n      {\r\n        <Grid container spacing={2 as GridSpacing} justify=\"center\">\r\n          {courses.map(element => (\r\n            <Grid item key={element.courseID}>\r\n              <Course course={element} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Exports\r\n */\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatchProps,\r\n)(CourseList);\r\n```\r\n\r\nIf I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect\r\naction does not trigger. Subsequently, the fetchCourses action is not dispatched.\r\n\r\nWhy is the _useEffect_ hook not triggered on second load after it previously threw an error?\r\n\r\nMy ErrorBoundary component includes a home button for navigating to '/'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to '/courses' shouldn't this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused?\r\n\r\nWhat is best practice for resetting a component that threw an error for surrounding ErrorBoundary?",
        "title": "Why is useEffect hook not activating when a component is reloaded after previously throwing an error?",
        "labels": "Type: Question",
        "id": 46032
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nAfter starting react-devtools, I get the following error message:\r\n```\r\nDevTools v4 is incompatible with this version of React\r\nEither upgrade React or install React DevTools v3:\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n* Use expo cli to initialize an expo app\r\n* run `yarn add react@latest` to ensure the most recent version of React is installed (currently v16.11.0)\r\n* run `yarn add react-devtools` to install react-devtools\r\n* run `yarn start` to start the app\r\n* run `npx react-devtools` to open react-devtools\r\n\r\n**What is the expected behavior?**\r\nreact-devtools should work with React Native and the latest version of React\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.11.0\r\nReact Native 0.59.3\r\nFedora 30",
        "title": "\"DevTools v4 is incompatible with this version of React\" with React Native & latest version of React",
        "labels": "Type: Question",
        "id": 46033
    },
    {
        "body": "With Concurrent mode getting finalized, I went to try to solve an old problem I have.\r\n\r\nThe app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.\r\n\r\nI've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i\r\n\r\nThe first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.\r\n\r\nThe last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here.",
        "title": "Utilize Suspense to express app init loader",
        "labels": "Type: Question",
        "id": 46034
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nOutdated README (maybe?)\r\n\r\n**What do the docs currently say?**\r\n\r\n> use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.\r\n\r\nIn the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.\r\n\r\nWould this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?",
        "title": "\"de-opting to synchronous mode\" in use-subscription README",
        "labels": "Type: Question",
        "id": 46035
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n```React : '16.9.0'```\r\n\r\nsample code \r\n```javascript\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction OptionOne(){\r\n  return <div>Blue pill</div>\r\n}\r\n\r\nconst OptionTwo = React.memo(function OptionTwo(){\r\n  return <div>Red pill</div>\r\n});\r\n\r\n\r\nfunction App() {\r\n  const [ Option, setOption ] = React.useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={e=>setOption(OptionOne)}>Option one</button>\r\n        <button onClick={e=>setOption(OptionTwo)}>Option two</button>\r\n      </div>\r\n      { Option && <Option/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\nWell the expected behavior was Option one wasn't suppose to throw an error;\r\nsetState in class components didn't mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug.\r\nSo is the useState hook working like its suppose to \"A rule not to pass a pure functional component as a value to the setValue of the useState hook\" or a bug? \r\n",
        "title": "Weird behavior with functional components and useState, A bug or \"Another rule!\"",
        "labels": "Type: Question",
        "id": 46036
    },
    {
        "body": "I've recently come across [this tweet](https://twitter.com/brian_d_vaughn/status/1113200027835310080) and saw that the new DevTools profiler apparently would be able to capture images of the DOM after each commit and display them on the right side (below the commit information). \r\n\r\nWas this feature indeed added to DevTools 4.2.0? Or is it coming out in a future version?\r\n\r\nJust asking because I didn't manage to get it working while trying with my projects.\r\n\r\n**React**: 16.10.2\r\n**Browser:** Google Chrome 77.0.3865.90\r\n**DevTools:** 4.2.0-a8b8ffb89",
        "title": "Can't get the profiler screenshot feature working in the React DevTools",
        "labels": "Type: Question",
        "id": 46037
    },
    {
        "body": "```js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction FriendStatus(props) {\r\n  const [isOnline, setIsOnline] = useState(null);\r\n\r\n  function handleStatusChange(status) {\r\n    setIsOnline(status.isOnline);\r\n  }\r\n\r\n  useEffect(() => {\r\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\r\n\r\n    return () => {\r\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\r\n    };\r\n  });\r\n\r\n  if (isOnline === null) {\r\n    return 'Loading...';\r\n  }\r\n  return isOnline ? 'Online' : 'Offline';\r\n}\r\n```",
        "title": "i was trying to pass through Hook effect, and the codes used are declared no where. like ChatApi ",
        "labels": "Type: Question",
        "id": 46038
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nelements not reconized\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nonly use components tab in console of chrome.\r\n\r\n**What is the expected behavior?**\r\n\r\nsee any elements react\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWindow 10 64bit\r\nreact ^16.8.1\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)\r\n\r\nThis is my console component visualizzation, the same page visualizated with linux&chrome not have any issue",
        "title": "Components not correctly displayed",
        "labels": "Type: Question",
        "id": 46039
    },
    {
        "body": "I thought it was always the case, that first, child's `componentDidMount` would be called, and then, parent's.\r\n\r\nHowever, in this example: https://codesandbox.io/s/tender-jones-gpkz3\r\n\r\nFirst parent's `componentDidMount` is called, then Child's (check the logs).\r\n\r\nThis happens _after_ I use this in child:\r\n\r\n```\r\nexport default compose(\r\n  withStyles(styles),\r\n  withWidth()\r\n)(Child);\r\n\r\n```\r\n\r\nDoes anyone have explanation why this happens?",
        "title": "Why does parent's componentDidMount gets called first, then child's?",
        "labels": "Type: Question",
        "id": 46040
    },
    {
        "body": "I wonder whether is it in the plan to do the inverse of hiding components that match the filters, which is \"show only components where match the filters\"?\r\n\r\nI am currently doing a negative lookahead regex filter to achieve the behavior: https://twitter.com/lihautan/status/1174239606612647941. \r\n\r\nI am willing to work on it if this is a good feature to have.",
        "title": "DevTools: \"Show only components where...\" instead of just \"Hide components where\"",
        "labels": "Type: Question",
        "id": 46041
    },
    {
        "body": "In one of talks about react Suspense [dan mentioned](https://youtu.be/6g3g0Q_XVb4?t=1650) that `<div hidden={true} />` would be deprioritized by react but still rendered if it has the time.\r\n\r\nIn his example he used it to prerender content that was seemingly part of another page. However in another talk by andrew it was used to [prerender tabs](https://youtu.be/ByBPyMBTzM0?t=1742). The second showcase is incorrect according to the [living standard for this attribute](https://html.spec.whatwg.org/multipage/interaction.html#the-hidden-attribute):\r\n\r\n> The hidden attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use hidden to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation \u2014 one could equally well just show all the form controls in one big page with a scrollbar.\r\n\r\nI don't necessarily agree with the reasoning given in the spec but I'm more interested if the core team is aware of this conflict and if there are plans to resolve this somehow or simply ignore it.",
        "title": "Plans for handling `hidden` differently",
        "labels": "Type: Question",
        "id": 46042
    },
    {
        "body": "I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here.\r\n\r\nImagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**:\r\n\r\n    onClick(){\r\n    \r\n      let data = this.state.data;\r\n      API.makeRequest(\"URL\", data);\r\n    \r\n    }\r\n\r\n[Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date).\r\nHowever he says this applies to react 16.\r\n\r\nOtherwise he suggests to use functional `setState` to get current state.\r\n\r\nI have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don't want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn't be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this:\r\n\r\n \r\n\r\n    onClick(){\r\n        \r\n       this.setState(ps=>{ \r\n            // using this form only to read current state in event handler which works for 16 and onwards versions probably\r\n            // but this breaks purity of this function\r\n            API.makeRequest(\"URL\", ps.data);\r\n            return {};\r\n       })\r\n        \r\n    }\r\n\r\nbut then I would violate that the function passed to functional `setState` must be pure.\r\n\r\nIs there a solution to the question I asked?\r\n\r\n  [1]: https://stackoverflow.com/a/43440790/3963067",
        "title": "Read latest state value in event handler",
        "labels": "Type: Question",
        "id": 46043
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nIf you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "title": "Add third parameter to useState to get current value",
        "labels": "Type: Question",
        "id": 46044
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhere is no way to collapse/expand component tree or it subtrees. \r\n\r\nIf I pick element with \"Select element\" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don't found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels. \r\n\r\nMaybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand. \r\n\r\n![image](https://user-images.githubusercontent.com/848985/64634574-396f5280-d406-11e9-9cb8-1630e2edef5e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/848985/64634564-307e8100-d406-11e9-8d3d-1a97c9f3b77b.png)\r\n\r\nAlso I guess it maybe good place to add https://github.com/facebook/react/issues/16463\r\n",
        "title": "DevTools: Component tree navigation",
        "labels": "Type: Question",
        "id": 46045
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nThe following command fails\r\n```\r\nyarn run test:chrome \r\n```\r\nerror message:\r\n```                                                                               \ue0b2 \r\nyarn run v1.17.3\r\n$ node ./shells/chrome/test\r\ninternal/validators.js:112\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'string', value);\r\n    ^\r\n\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"file\" argument must be of type string. Received type object\r\n    at validateString (internal/validators.js:112:11)\r\n    at normalizeSpawnArguments (child_process.js:398:3)\r\n    at spawn (child_process.js:534:16)\r\n    at launchChrome (/home/andrei/src/react-devtools/node_modules/chrome-launch/index.js:27:12)\r\n    at Object.<anonymous> (/home/andrei/src/react-devtools/shells/chrome/test.js:9:1)\r\n    at Module._compile (internal/modules/cjs/loader.js:936:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)\r\n    at Module.load (internal/modules/cjs/loader.js:790:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:703:12)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:999:10)\r\nerror Command failed with exit code 1.\r\n```\r\n\r\n**What is the expected behavior?**\r\nLaunch a new browser window. The following command works\r\n```\r\nyarn run test:firefox \r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing Version 76.0.3809.100 (Official Build) (64-bit), /usr/bin/google-chrome-stable is aliased to chrome.\r\n\r\nAny help is appreciated, we're running a old version of React at work and upgrading it would be nontrivial. Hence I need the old version of the React DevTools.",
        "title": "React DevTools downgrade not working for Chrome.",
        "labels": "Type: Question",
        "id": 46046
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "title": "There is no 'rendered by' section in my extension",
        "labels": "Type: Question",
        "id": 46047
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I get a component stack trace, the log trace comes from the dev tools extension:\r\n\r\n![image](https://user-images.githubusercontent.com/12100/64210499-4d401500-ce58-11e9-87f5-b0c9115fe62f.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nI use that trace usually to click and set a debugger so I can debug some React internals.\r\n",
        "title": "[Dev Tools] Chrome component console errors get output from \"backend.js\"",
        "labels": "Type: Question",
        "id": 46048
    },
    {
        "body": "Hi.\r\n\r\nI have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.\r\n\r\nHow do I change the default browser for devtools to Firefox?",
        "title": "React devtools always launches in Chrome",
        "labels": "Type: Question",
        "id": 46049
    },
    {
        "body": "Reporting a bug:\r\n\r\nThe current behaviour is that setTimeout, inside a render method, is producing a random number, for no explained reason. The number persist after the setTimeout has gone off, and the setTimeout still produces the desired effect, for example, if it was to log something the console, it would still do that.\r\n```jsx\r\n// sample code\r\n\r\n(not the original code in which the problem occurred, but I was able to reproduce the problem in codesandbox.io):\r\n\r\n** start of code example **\r\n(styles.css = \r\n    .App {\r\n        font-family: sans-serif;\r\n        text-align: center;\r\n    }\r\n)\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n      {setTimeout(() => console.log(\"hello world\"), 3000)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n/* (output of webpage) */\r\n\r\nHello CodeSandbox\r\nStart editing to see some magic happen!\r\n5\r\n\r\n** end of code **\r\n\r\nThe expected behaviour was that the setTimeout function would produce no trace of any text, whilst still working.\r\n\r\nIt is present in react version 16.9.0",
        "title": "Inline setTimeout within the render causes a random number to appear on screen.",
        "labels": "Type: Question",
        "id": 46050
    },
    {
        "body": "This isn't technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead.\r\n\r\nI have a fairly \"edgy\" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively).\r\n\r\nExample:\r\n```jsx\r\n<Accordion> <!-- provided by host app -->\r\n    <!-- provided by separate plugin -->\r\n    <AccordionItem label=\"item 1\">Content</AccordionItem>\r\n    //...\r\n</Accordion>\r\n```\r\n\r\nThus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user.\r\n\r\nThis worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do.\r\n\r\nAs stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I'd like to avoid being stuck on React 16, when that happens.\r\n",
        "title": "Limitations of context API compared to legacy implementation",
        "labels": "Type: Question",
        "id": 46051
    },
    {
        "body": "I am experimenting with migrating some of my class components to Hooks. My use case is explained in detail [here](https://stackoverflow.com/questions/57722818/idiomatic-react-with-heavy-dom-manipulation-mathjax), but I can quickly explain the idea.\r\n\r\nI have a class component `<MJX>` which exposes a `.ready` Promise. Since `<MJX>` produces a `<span>` element, I guess I can use the `useImperativeHandle` hook to attach `.ready` to the ref I use for the `<span>`. This is no problem.\r\n\r\nHowever, I also have a class component `<RenderGroup>` which uses `React.Children` to collect the `.ready` Promises from all its `<MJX>` descendants, and exposes `Promise.all` of that array of Promises as its own `.ready` value. Since `<RenderGroup>` does not produce any markup of its own, and you can't place refs on `<React.Fragment>`, I don't see how to use`useImperativeHandle` here: there's nowhere to attach the ref.\r\n\r\nHere is the relevant code:\r\n\r\n```tsx\r\nexport class RenderGroup extends React.Component {\r\n  private promises: Promise<void>[];\r\n\r\n  ready: Promise<void>;\r\n\r\n  componentDidMount() {\r\n    this.ready = Promise.all(this.promises).then(() => {});\r\n  }\r\n\r\n  render() {\r\n    this.promises = [];\r\n\r\n    return recursiveMap(this.props.children, node => {\r\n      if (shouldInspect(node)) {\r\n        const originalRef = node.ref;\r\n        return React.cloneElement(node, {\r\n          ref: (ref: MJX) => {\r\n            if (!ref) return;\r\n            this.promises.push(ref.ready);\r\n            if (typeof originalRef === \"function\") {\r\n              originalRef(ref);\r\n            } else if (originalRef && typeof originalRef === \"object\") {\r\n              (originalRef as React.MutableRefObject<MJX>).current = ref;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n}\r\n\r\nfunction shouldInspect(node: ReactNode): node is React.ReactElement & React.RefAttributes<MJX> {\r\n  return React.isValidElement(node) && typeof node.type === \"function\" && node.type.prototype instanceof MJX;\r\n}\r\n\r\nexport function recursiveMap(\r\n  children: ReactNode,\r\n  fn: (child: ReactNode) => ReactNode\r\n) {\r\n  return React.Children.map(children, (child) => {\r\n    if (!React.isValidElement(child)) {\r\n      return child;\r\n    }\r\n\r\n    if (\"children\" in child.props) {\r\n      child = React.cloneElement(child, {\r\n        children: recursiveMap(child.props.children, fn)\r\n      });\r\n    }\r\n\r\n    return fn(child);\r\n  });\r\n}\r\n```",
        "title": "Can't use instance values without refs",
        "labels": "Type: Question",
        "id": 46052
    },
    {
        "body": "This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nerror message of `batch.commit()` is confusing\r\n\r\n**What is the current behavior?**\r\n\r\nI was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit [which doesn't seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`\r\n\r\n```js\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = ReactDOM.unstable_createRoot(rootElement);\r\n\r\nroot.render(<App />).then(() => {\r\n  const batch = root.createBatch();\r\n\r\n  batch.render(<App />);\r\n  // bad\r\n  batch.commit();\r\n  setTimeout(() => {\r\n    // good\r\n    //batch.commit()\r\n  }, 0);\r\n  batch.then(() => {\r\n    // good\r\n    //batch.commit();\r\n  });\r\n});\r\n\r\n```\r\n\r\nThree things I noticed:\r\n1. seems like I need to call batch.commit after the batch is complete. Changing it to \r\n```\r\nbatch.then(() => {\r\n  // good\r\n  batch.commit();\r\n});\r\n```\r\ngot rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.\r\n\r\n2. \"lifecycle\" should be replaced with something different before these APIs get stable since we try to get away from this mental model. \r\n\r\nFor example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would've expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.\r\n\r\n3. Not all lifecycles are \"during rendering\" as far as I know. `componentDidUpdate` is called during commit.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/dreamy-wood-dvzrp\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm basically asking when it's safe to call `batch.commit`: \r\n* [ ] during render phase\r\n* [ ] during commit phase \r\n* [ ] outside of these phases e.g. in some `onComplete` callback \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react(-dom)@16.9.0`\r\n",
        "title": "Error message when calling work.commit in commit phase",
        "labels": "Type: Question",
        "id": 46053
    },
    {
        "body": "Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20\r\n\r\n> **Me:**\r\n> I have this hook:\r\n> ```require(\"react-reconciler\")(hostConfig).injectIntoDevTools(opts);```\r\n> But HMR has always worked completely without it. Is this now a new requirement?\r\n\r\n> **Dan:**\r\n> Yes, that's what the new mechanism uses. The new mechanism doesn't need \"react-hot-loader\" so by the time you update, you'd want to remove that package. (It's pretty invasive)\r\n\r\nI can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(\"react-hot-loader/root\").hot` method), how should we set up apps for HMR in:\r\n\r\n* React DOM apps\r\n* React Native apps\r\n* React custom renderer apps\r\n\r\nI'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`.\r\n\r\nAlso, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?",
        "title": "How should we set up apps for HMR now that Fast Refresh replaces react-hot-loader?",
        "labels": "Type: Question",
        "id": 46054
    },
    {
        "body": "**Request for feature**\r\nThe older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn't find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?\r\n",
        "title": "Devtools V4: Breadcrumbs are removed?",
        "labels": "Type: Question",
        "id": 46055
    },
    {
        "body": "### issue type\r\nbug\r\n\r\n### issue description\r\nlook at the code blow (it is very very very simple).\r\n```jsx\r\nimport React, { useState } from 'react';\r\n\r\nexport default function DemoCounter() {\r\n  const [fnWrapper] = useState('fn');\r\n  const [count, setCount] = useState(0);\r\n  fnWrapper.__proto__.setCount = s => {\r\n    setCount(s);\r\n  }\r\n\r\n // assign fnWrapper.__proto__.setCount to callSetCount\r\n  const callSetCount = fnWrapper.__proto__.setCount;\r\n\r\n  return (\r\n    <div style={{ border: '1px solid blue', margin: '8px' }}>\r\n      count: {count}\r\n      {/* this does not work if I open react-dev-tool and click the dom node */}\r\n      <input value={count} onChange={e => fnWrapper.__proto__.setCount(e.currentTarget.value)} />\r\n\r\n       {/* this always works not matter I open react-dev-tool and click the dom node or not */}\r\n      <input value={count} onChange={e => callSetCount(e.currentTarget.value)} />\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n### why callSetCount always works but `fnWrapper.__proto__.setCount` not if and only if after I open the react-dev-tool and click the dom node ~~~~(>_<)~~~~\uff0c\r\n\r\n### please tell me the truth.\r\n",
        "title": "hook component can not been clicked in react-dev-tool if you want it works well.",
        "labels": "Type: Question",
        "id": 46056
    },
    {
        "body": "I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history. \r\n\r\nI couldn't find any explanations or reference in the changelog, so I opened this issue.",
        "title": "Why does DevTool Chrome Extension need access to history?",
        "labels": "Type: Question",
        "id": 46057
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nbug: highlight element is no available in ver 4+ react debugger\r\nfeature: new version of react develop is good, bug sometimes i need legacy version of develop tool(i jest need BOTH of them), can you provide both of them?\r\n",
        "title": "is that possible to get legacy version of react debugger?",
        "labels": "Type: Question",
        "id": 46058
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReporting a bug, or at least trying to understand some spooky behavior \ud83d\udc7b\r\n\r\n**What is the current behavior?**\r\n\r\nI have a simple component which reads from a toy suspense-enabled cache. The dummy cache simply waits 100ms before responding to anything.  The cache key is based on some component state (managed with the useState hook). This component is wrapped with `<Suspense>` and rendered in a React root with concurrent mode enabled. \r\n\r\n```javascript\r\nfunction MyApp(){\r\n    let [text, setText] = React.useState('stuff')\r\n    return <div>\r\n        Data: {readCacheSuspense(text)}\r\n        <button onClick={e => setText('B-A-N-A-N-A-S')}>Update text from button</button>\r\n        <input type=\"text\" value={text} onChange={e => setText(e.target.value)} />\r\n    </div>\r\n}\r\n\r\nReactDOM.unstable_createRoot(document.getElementById('root')).render(<React.Suspense fallback={<div>cause i ain't no fall-a-back div</div>}>\r\n    <MyApp />\r\n</React.Suspense>)\r\n```\r\n\r\nThe component has a text field whose value is set to the current cache key (with an onChange handler that updates the useState hook when the text changes). It also has a button which updates the state to some fixed string \"asdf\" when clicked. \r\n\r\nClicking the button does what I would expect\u2014 the page doesn't respond for a fraction of a second (while the data is being \"fetched\") and then updates with a view of the loaded data. \r\n\r\n**Editing the text however (for instance, typing a single letter in the field) immediately causes the fallback UI to load and unfocuses the text input**. This happens even if the `setTimeout` is changed to 0ms, or `requestAnimationFrame`, or a `setImmediate` polyfill. \r\n\r\nRather than directly calling `setText` within the `onChange` handler\u2014\u00a0if I call it within a `setTimeout(..., 0)`, it behaves the way I would expect (i.e. without unfocusing the field and loading fallback). \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/competent-goldwasser-yhmxo\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that it shouldn't really matter whether I'm updating state from an `onChange` versus an `onClick`. \r\n\r\nI would expect that the fallback UI doesn't show up until its max duration is met.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using React 16.8.6. I tested it on Chrome 75 on macOS 10.14.",
        "title": "Suspense + Concurrent Mode immediately shows fallback when updated from onChange",
        "labels": "Type: Question",
        "id": 46059
    },
    {
        "body": "First attempt was:\r\n```javascript\r\nconst setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n}\r\n\r\nuseEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            setField(args);\r\n        });\r\n}, []);\r\n```\r\n\r\nI have  the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'setField'. Either include it or remove the dependency array\r\n\r\nIf I follow what the lint says:\r\n```javascript\r\nconst setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n}\r\n\r\nuseEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            setField(args);\r\n        });\r\n }, [setField]);\r\n```\r\n\r\nI have another error:\r\n\r\n> Line 58:  The 'setField' function makes the dependencies of useEffect Hook (at line 72) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook\r\n\r\nThen I follow the advise again:\r\n\r\n```javascript\r\n    const setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n    }\r\n\r\n    const myCallback = useCallback(() => setField, []);\r\n\r\n    useEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            myCallback(args);\r\n        });\r\n    }, [myCallback]);\r\n```\r\n\r\nThen the error is:\r\n\r\n> Line 68:  React Hook useCallback has a missing dependency: 'setField'. Either include it or remove the dependency array\r\n\r\nAnd then the code:\r\n\r\n```javascript\r\n    const setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n    }\r\n\r\n    const myCallback = useCallback(() => setField, [setField]);\r\n\r\n    useEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            myCallback(args);\r\n        });\r\n    }, [myCallback]);\r\n```\r\n\r\nthen the error\r\n\r\n> Line 58:  The 'setField' function makes the dependencies of useCallback Hook (at line 68) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook\r\n\r\nAm I doing something wrong?\r\n\r\nThanks!\r\n",
        "title": "Infinite lint error of react-hooks/exhaustive-deps",
        "labels": "Type: Question",
        "id": 46060
    },
    {
        "body": "Wrapping a component in a function, returning the component.\r\n\r\n\r\ntl;dr\r\n```javascript\r\nexport function Home() {\r\n    return function() {\r\n        const [ items, setItems ] = useState([])\r\n        return <div>nothing</div>\r\n    } \r\n}\r\n\r\nconst root = document.getElementById('root')\r\nReactDOM.render(React.createElement(Home()), root)\r\n```\r\n\r\nResults in the following error:\r\n\r\n```\r\nReact Hook \"useState\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function\r\n```\r\n\r\nHowever this works:\r\n\r\n```javascript\r\nexport function Home() {\r\n        const [ items, setItems ] = useState('')\r\n        return <div>nothing</div>\r\n}\r\n\r\nconst root = document.getElementById('root')\r\nReactDOM.render(React.createElement(Home), root)\r\n```\r\n\r\n",
        "title": "[eslint-plugin-react-hooks]: Can't call hooks on component returned from function",
        "labels": "Type: Question",
        "id": 46061
    },
    {
        "body": " I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am \"doing it wrong\".\r\n\r\n**What is the current behavior?**\r\n\r\nThe only way I can observe the results of state changes I initiate is by using a timeout.\r\n\r\n**Paste the link to your JSFiddle or CodeSandbox example below:**\r\n\r\nhttps://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1\r\n\r\n**What is the expected behavior?**\r\n\r\nWhat I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous. \r\n\r\nI created an example (https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1) wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`.\r\n\r\nBelow is a log of the [steps I take](https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1), showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view. \r\n\r\n```\r\n1. before act/render:   seenByRender: null, calculated: null, seenByEffect: null\r\n2. after act/render:    seenByRender: 0,    calculated: null, seenByEffect: 0\r\n3. ---incrementing with act/setState---\r\n4. after act/increment: seenByRender: 0,    calculated: 1,    seenByEffect: 0\r\n5. after timeout:       seenByRender: 1,    calculated: 1,    seenByEffect: 1\r\n```\r\n\r\nWhat I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6, using unstable_ConcurrentMode\r\n",
        "title": "Understanding `act` behaviour",
        "labels": "Type: Question",
        "id": 46062
    },
    {
        "body": "Hi. I have a recurring scenario that I\u2019ve been struggling with since the good old days of `componentWillReceiveProps`, and now I\u2019ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is.\r\n\r\n### Problem description - starting point\r\n\r\nI have a list of items. Every item has an Edit button next to it. Clicking it opens an \u201cEditor\u201d, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The \u201cparent\u201d component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on \u201cEdit\u201d for a specific item would set the `itemUnderEdit` to the clicked item.\r\n\r\n![usecase](https://user-images.githubusercontent.com/5010901/56883590-6cbcd080-6a67-11e9-9401-bd44e1747bc2.gif)\r\n\r\nHere is the full example with all 3 solutions on CodeSandbox: https://codesandbox.io/s/2oz2nzynpy\r\n\r\n### Solution 1\r\n\r\nMake the \u201cEditor\u201d component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard \u201ckeep your state close to where it is used\u201d advice, which also seems reasonable, since I don\u2019t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props.\r\n\r\n### Solution 2\r\n\r\nMake the \u201cEditor\u201d component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the \u201cReact\u201d way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful \u201cblackbox\u201d-component that tracks its own state seems reasonable.\r\n\r\nIn order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea:\r\n```\r\nconst [name, setName] = useState(props.item.name);\r\nconst [description, setDescription] = useState(props.item.description);\r\n```\r\n\r\nMoreover, this solution is buggy from the start, since clicking on Edit for a different item doesn\u2019t \u201cre-sync\u201d the props with the state - it only works if I close the Editor and then reopen it:\r\n\r\n![stateful_editor1](https://user-images.githubusercontent.com/5010901/56877667-e2b53d80-6a4f-11e9-8f4c-6a52fa175abd.gif)\r\n\r\nWhich brings us to Solution 3.\r\n\r\n### Solution 3\r\n\r\nThis one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this).\r\nThe \u201cold\u201d ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the \u201cdependency\u201d, since I want to run it when the item changes.\r\n\r\n```\r\nuseEffect(() => {\r\n  if (props.item.name !== name) {\r\n    setName(props.item.name);\r\n  }\r\n  if (props.item.description !== description) {\r\n    setDescription(props.item.description);\r\n  }\r\n}, [props.item]);\r\n```\r\n\r\nThis seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array  react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn\u2019t be able to change anything in the inputs, so how come I get this warning?\r\n\r\n### Summary\r\n\r\nThis is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it\u2019s difficult to know how to implement correctly and safely in a consistent way*.\r\n\r\nLifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a \u201ctemporary\u201d solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle.\r\n\r\nThe second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug? ",
        "title": "useEffect for synchronizing state and props",
        "labels": "Type: Question",
        "id": 46063
    },
    {
        "body": "\r\nWhat is the license for the tutorials and examples on https://reactjs.org?",
        "title": "License for Source Code Examples & Tutorials on https://reactjs.org",
        "labels": "Type: Question",
        "id": 46064
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n   bug\r\n**What is the current behavior?**\r\n `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps`\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16\r\n\r\n\r\nHi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully`\r\n\r\nbelow is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work \r\n\r\nhow can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)\r\n\r\n[jsfiddle working example ](https://jsfiddle.net/munsp36f/)\r\nrequirement:\r\n\r\n  On click of the button show `Notificationcard`\r\n  On click on close hide `Notificationcard`\r\n\r\n```jsx\r\nclass Notification extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: true\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState({ open: props.show });\r\n    // setTimeout(this.handleClick.bind(this), 8000);\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    //setTimeout(this.handleClick.bind(this), 8000);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.open) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        <div>Item saved successfully</div>\r\n        <div className=\"cls--btn\" onClick={() => this.handleClick()}>\r\n          &#10006;\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Test extends React.Component {\r\n  handleClick() {\r\n    this.setState({ show: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.handleClick.bind(this)}>click</button>\r\n        <Notification show={true} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<Test name=\"World\" />, document.getElementById(\"container\"));\r\n```",
        "title": "`static getDerivedStateFromProps()` does not works same as componentWillReceiveProps  ",
        "labels": "Type: Question",
        "id": 46065
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**bug**\r\n\r\n**What is the current behavior?**\r\n\r\nThe hooks created in children function provided in defaultProps populates error `react-hooks/rules-of-hooks`.\r\n\r\n```js\r\nconst App = props => props.children(props);\r\n\r\nApp.defaultProps = {\r\n  children: props => {\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n      <>\r\n        count: {count}\r\n        <button onClick={() => setCount(count + 1)}>Increment</button>\r\n      </>\r\n    );\r\n  },\r\n};\r\n```\r\n\r\n`React Hook \"useState\" is called in function \"children\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks\r\n`\r\n\r\nhttps://codesandbox.io/s/v60mm6yvx0\r\n\r\n**What is the expected behavior?**\r\n\r\nHooks inside children function in defaultProps should not create an error when hook is used. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nSame as in the codesandbox.\r\n```\r\n\"dependencies\": {\r\n  \"react\": \"16.8.6\",\r\n  \"react-dom\": \"16.8.6\",\r\n  \"react-scripts\": \"3.0.0\"\r\n},\r\n```",
        "title": "[eslint-plugin-react-hooks]: bug React Hook \"XXX\" is called in function \"children\"",
        "labels": "Type: Question",
        "id": 46066
    },
    {
        "body": "_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._\r\n\r\nConsider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback.\r\n\r\nNotifying the user can be done imperatively:\r\n\r\n```js\r\nfunction Component(props) {\r\n  const [ data, setData ] = useState(null);\r\n\r\n  useApi(\"/api/data\")\r\n    .then(setData)\r\n    .then(props.onFetched);\r\n\r\n  return dataToElements(data);\r\n}\r\n```\r\n\r\nor declaratively using an effect hook:\r\n\r\n```js\r\nfunction Component(props) {\r\n  const [ data, setData ] = useState(null);\r\n\r\n  useApi(\"/api/data\")\r\n    .then(setData);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      props.onFetched();\r\n    }\r\n  }, [ data ]);\r\n\r\n  return dataToElements(data);\r\n}\r\n```\r\n\r\nReact seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around.\r\n\r\nI would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better. ",
        "title": "Declarative vs. imperative coding style using Hooks",
        "labels": "Type: Question",
        "id": 46067
    },
    {
        "body": "```jsx\r\nexport const useConfigStateHook = () => {\r\n  const [visible, setVisible] = useState('hidden')\r\n  const [cofigVisible, setCofigVisible] = useState(false)\r\n  const [card, setCard] = useState(<div />)\r\n\r\n  useEffect(() => {\r\n    eventProxy.on('setConfigBtn', (value) => {\r\n      setVisible(value)\r\n    })\r\n    eventProxy.on('setConfigOpen', (value) => {\r\n      setCofigVisible(value ? false : !cofigVisible)\r\n    })\r\n    eventProxy.on('setCard', (card) => {\r\n      const { Ichart, props } = card\r\n\r\n      if (!Ichart) return setCard(<div />)\r\n\r\n      setCard(\r\n        <Ichart\r\n          ref={(e) => {\r\n            e && eventProxy.trigger('chartref', e)\r\n            e &&\r\n              setTimeout(() => {\r\n                eventProxy.trigger('setConfigView', e.renderConfig())\r\n              }, 200)\r\n          }}\r\n          {...props}\r\n        />\r\n      )\r\n    })\r\n    return () => {\r\n      eventProxy.off('setCard')\r\n      eventProxy.off('setConfigBtn')\r\n      eventProxy.off('setConfigOpen')\r\n      eventProxy.off('setConfigView')\r\n    }\r\n  })\r\n\r\n  return { visible, cofigVisible, card }\r\n}\r\n```\r\n",
        "title": "why useffect  run  return( )  at  frist",
        "labels": "Type: Question",
        "id": 46068
    },
    {
        "body": "I was trying to implement `useOn`, a hook lets you write the following code:\r\n\r\n```js\r\nuseOn()\r\n  .who(window)\r\n  .when('resize')\r\n  .what(() => {\r\n    console.log('resize!');\r\n  });\r\n```\r\n\r\nMy approach worked in production, but not in development. I discovered some pretty unexpected behavior by React.\r\n\r\nWhen running `useOn` in development, it seemed like the resize event listener isn't being removed when the ResizeComponent gets unmounted (turned out it was actually being added twice).\r\n\r\nSo I added a `console.log`, just above the call to `addEventListener`, but only one log appeared.\r\n\r\nI then added a `debugger` statement just above the call to `console.log` and noticed that it is indeed being called twice, but in the second time it's called, `console.log` is overwritten by React's `disabledLog()`.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n(tip: you can skip checking out the repo (steps 1 to 3), as it can be reproduced in [the repo's CodeSandbox](https://codesandbox.io/s/github/dutzi/use-on))\r\n\r\n1. Check out https://github.com/dutzi/use-on\r\n2. `yarn` then `yarn start`\r\n3. (Chrome will start up)\r\n4. Open the DevTools' Console\r\n5. Click on \"Mount Resize Component\"\r\n6. Resize window\r\n7. (You should see \"resize!\" printed in the console)\r\n8. Click on \"Unmount Resize Component\"\r\n9. \"resize!\" messages should stop showing up in the console, but they don't.\r\n\r\nI did make some un-orthodox stuff in that hook. But I believe this is a bug since when trying this hook in a production build, it worked fine.\r\n\r\nTo test out a production build:\r\n\r\n(tip: you can skip checking out the repo (steps 1 to 2), as it can be reproduced in [the repo's deployed version](https://use-on.vercel.app/))\r\n\r\n1. Check out https://github.com/dutzi/use-on\r\n2. `yarn` then `yarn start:prod`\r\n3. Complete steps 4-9 from above\r\n\r\n\u2764\ufe0f",
        "title": "Bug: Inconsistent behavior between development and production builds",
        "labels": "Type: Question",
        "id": 46069
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Enable strict mode for checking for possible issues in the future concurrent mode\r\n2. create the below component and run the code\r\n```\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst Example = ({ onIncrement }) => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const incrementHandler = useCallback(() => {\r\n    onIncrement(count, count + 1);  // Is count guaranteed to be the latest state here due to including count in the useCallback dependency array?\r\n    setCount((count) => count + 1);\r\n  }, [count, onIncrement]);\r\n\r\n  return (\r\n    <>\r\n      <span>{count}</span>\r\n      <button onClick={incrementHandler}>increment</button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Parent = () => (\r\n  <Example\r\n    onIncrement={(currentCount, incrementedCount) =>\r\n      alert(\r\n        `count before incrementing: ${currentCount}, after increment: ${incrementedCount}`\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nexport default Parent;\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!-- Link to code example: -->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIn this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below:\r\n```\r\nconst incrementHandler = useCallback(() => {\r\n    setCount((count) => {\r\n      onIncrement(count, count + 1);  \r\n      return count + 1\r\n    });\r\n  }, [count, onIncrement]);\r\n```\r\nthen the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation.\r\nand If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else.\r\n\r\nyou may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate.\r\n\r\nyou may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler**\r\n\r\n## The expected behavior\r\nProviding a second callback argument to `setState`  like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below:\r\n```\r\nconst incrementHandler = useCallback(() => {\r\n    let prevCount, nextCount;\r\n    setCount(\r\n      (count) => {\r\n        prevCount = count;\r\n        nextCount = count + 1;\r\n        return nextCount;\r\n      },\r\n      () => onIncrement(prevCount, nextCount)\r\n    );\r\n  }, [onIncrement]);\r\n``` \r\nIn my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented. \r\n\r\nunlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet.\r\n\r\n**wrong solution:**\r\n```\r\nconst [count, setCount, getCount] = useState(0);\r\n\r\n  const incrementHandler = useCallback(() => {\r\n    setCount((count) => count + 1);\r\n    const currentCount = getCount();\r\n    const nextCount = currentCount + 1;\r\n    onIncrement(currentCount, nextCount)\r\n  }, [onIncrement]);\r\n```\r\nor providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState.\r\n\r\nPlease tell me if I'm missing something or I've misunderstood things.\r\n\r\nIf not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state.\r\n\r\nThank you!",
        "title": "Question about getting the latest state value in the concurrent mode",
        "labels": "Type: Question",
        "id": 46070
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go at https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js\r\n2. Then reproduce the famous \"warning\" (**the issue is not about this warning**)\r\n![image](https://user-images.githubusercontent.com/9853656/109627307-298f8500-7b4a-11eb-9330-5ef9d8840094.png)\r\n(type something in the Tool ID)\r\n(the codesandboxe may freeze a little bit, try to reload the page)\r\n3. Open the browser console (chrome in my case) and you will see\r\n![image](https://user-images.githubusercontent.com/9853656/109634512-ff41c580-7b51-11eb-847c-f7cb7ca3754a.png)\r\nThen go to the code (red arrow on the image above)\r\n4. Make a breakpoint here\r\n![image](https://user-images.githubusercontent.com/9853656/109635453-0e754300-7b53-11eb-945b-f1848ac07a53.png)\r\nreload the page and initiate the \"warning\" again (see 2)\r\n4.  Go down the callstack and you can see the \"warning\" is written by this code\r\n![image](https://user-images.githubusercontent.com/9853656/109627844-b6d2d980-7b4a-11eb-9812-440d8d3aa7c3.png)\r\n5.  Now the question.. I'm using the 17.0.1 version and this code shouldn't exist there. Check this out https://github.com/facebook/react/releases/tag/v17.0.1 and you can find only this:\r\n![image](https://user-images.githubusercontent.com/9853656/109628307-45475b00-7b4b-11eb-8a25-61dad589fa8b.png)\r\nAs you can see instead of  `error('A component is changing...` we have `console.error(\r\n        'A component is changing...`.\r\nThe changes were made by this https://github.com/facebook/react/commit/0cf22a56a18790ef34c71bef14f64695c0498619#diff-e94b1d695a508a3bacbab157bbc3035d75e53174bdb82181077d1b374046f9a6 long time ago.\r\n6. Does it mean that 17.0.1 version of react and react-dom packeges were not built from this source code https://github.com/facebook/react/releases/tag/v17.0.1 ? Seems like a big issue then.\r\n7. It happens without Codesandbox as well.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\nLink to code example:\r\nhttps://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nWe keep seeing the word \"Warning\" (which is produced by `warning` function, though it's not a warning but an error)\r\n![image](https://user-images.githubusercontent.com/9853656/109633773-2cda3f00-7b51-11eb-9ab8-93b33316e50b.png)\r\n\r\n## The expected behavior\r\nWe shouldn't see the word \"Warning\" if the packages v.17.0.1 were bilt from https://github.com/facebook/react/releases/tag/v17.0.1 sourcecode (because it calls  `console.error(\r\n        'A component is changing... `  instead of `error('A component is changing... `)\r\n![image](https://user-images.githubusercontent.com/9853656/109636757-a45d9d80-7b54-11eb-8a35-b745b0fa168f.png)\r\n\r\n\r\n",
        "title": "Bug: 17.0.1 npm packages were not built from 17.0.1 source code?",
        "labels": "Type: Question",
        "id": 46071
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nIt seems that the default value in functional React component gets updated after render.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\nI created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:\r\n\r\n\r\n```\r\nconst MyComponent = () => {\r\n\r\n  // Initialise data with a random value:\r\n  const [data, setData] = React.useState(\r\n    () => {\r\n      const data = _.sampleSize(_.range(5), 3)\r\n      // Print data on initialisation:\r\n      console.log('init data in default:', data)\r\n      return data\r\n    }\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    // Print data after the component is rendered:\r\n    console.log('init data after render:', data)\r\n  })\r\n\r\n  return (\r\n    <div>{data}</div>\r\n  );\r\n};\r\n```\r\n\r\nThe output in console is:\r\n\r\n```\r\n[Log] init data in default: \u2013 [0, 3, 1] (3)\r\n[Log] init data after render: \u2013 [2, 1, 3] (3)\r\n```\r\n\r\nMy understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\nhttps://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe output in console before and after render is different.\r\n\r\n## The expected behavior\r\n\r\nThe output in console before and after render should be the same.",
        "title": "Bug: It seems that the default value in functional React component gets updated after render.",
        "labels": "Type: Question",
        "id": 46072
    },
    {
        "body": "@gaearon How would you re-write the following mixins?\r\n\r\nhttps://github.com/gerobit/ivis-core/blob/a51154c8937d4d392f20303caeb8b450ecf9189a/client/src/lib/decorator-\r\nhelpers.js",
        "title": "Mixin rewrite with React and Higher-order-functions",
        "labels": "Type: Question",
        "id": 46073
    },
    {
        "body": "Hi folks,\r\nAt some point w/in the last 5 months or so, the dev tools Chrome extension stopped working properly for me in **non**-incognito Chrome windows.  It's a bit hard to explain, but i'll try: when i use the extension, react components show up, but they are basically just high level wrapper components that we use in our app.  For example, I cannot inspect a button component, a container component, an input component, etc, in the UI.\r\n\r\nThis issue disappears in incognito mode, however, and i can use the extension just fine.\r\n\r\nChrome version: 87.0.4280.141\r\nExtension version: 4.10.1\r\nReact version: 16.13.1\r\n\r\nI've been unable to find anyone else with this issue.  Please let me know if there is other information I can provide you with.  Thank you.",
        "title": "Dev tools Chrome Extension only works properly in Incognito window",
        "labels": "Type: Question",
        "id": 46074
    },
    {
        "body": "Hi guys,\r\nI would really like to join you in order to help with the maintenance of React.\r\n\r\nMy change proposal is to apply the clean code rules to React codebase; for example:\r\n- better name to variables\r\n- single point of return\r\n- have short functions with a single purpose\r\n- ...\r\n\r\nIn order to avoid a long code review process, I would like to make 1 PR for each package that I'm going to edit.\r\n\r\nI've already signed the CLA. \r\n\r\nHope you'll be interested in this,\r\n\r\nMatteo",
        "title": "Can I help?",
        "labels": "Type: Question",
        "id": 46075
    },
    {
        "body": "Since CM mode now runs useEffects' cleanups async. Are we still guaranteed that they'll resolve in order? By that I mean, if a component get's cleanup, re-rendered and cleaned up again. That the first cleanup will resolve, before the second?\r\n\r\nComponentA (1) -> thrown away -> ComponentA (2) -> thrown away. Will that (2) effectively \"await\" on the (1) to cleanup first.",
        "title": "Question: CM mode and useEffect cleanups",
        "labels": "Type: Question",
        "id": 46076
    },
    {
        "body": "Is there any way to hide react version or is it designed to have react versions in the build files which are given in the production\r\n\r\n",
        "title": "React build files contain the version of react being used",
        "labels": "Type: Question",
        "id": 46077
    },
    {
        "body": "First of all, thank you for reading and patience.\r\n\r\nI've been studying the principle of react lanes recently, and its implementation is interesting to me, but I still don't know what the specific problems it solves.\r\n\r\n> This constraint was designed before Suspense was a thing, and it made some sense in that world. When all your work is CPU bound, there's not much reason to work on tasks in any order other than by their priority. But when you introduce tasks that are IO-bound (i.e. Suspense), you can have a scenario where a higher priority IO-bound task blocks a lower-priority CPU-bound task from completing.\r\n\r\nFrom the explanation of @acdlite , it seems to solve the blocking problem of IO operation on low priority tasks.\r\n\r\nBut I couldn't figure out what asynchronous IO blocked\uff1f\r\n\r\n```js\r\n<A/>\r\n<Suspense>\r\n  <B/>\r\n</Susepsne>\r\n<C/>\r\n```\r\nBased on the above example, before lanes, where is blocked, and where is the problem solved after lanes.\r\n\r\nOr do you have a better demo to explain?\r\n\r\nFor developers, the new technology related information is too little, binary is also very abstract, thank you again for your patience.\r\n",
        "title": "Some questions about lanes.",
        "labels": "Type: Question",
        "id": 46078
    },
    {
        "body": "https://samver.org/\r\n\r\nIt's hard to know which one is the latest experimental react version in the `yarn` or `npm`.\r\n\r\n0.0.0-experimental-ede917064\r\n0.0.0-experimental-4c8c98ab9\r\n0.0.0-experimental-7f28234f8\r\n\r\nCan you tell which one is newer without doing querying on the web?\r\n\r\nI suggest adding a release date in the version.\r\n\r\n`0.0.0-experimental-20200802-3d0895557`",
        "title": "Suggestion: Add release date in the experimental (0.0.0) version",
        "labels": "Type: Question",
        "id": 46079
    },
    {
        "body": "I am currently developing a web app that uses both [react-pixi](https://github.com/inlet/react-pixi) and [react-babylonjs](https://github.com/brianzinn/react-babylonjs). Both of these libraries use `react-reconciler` and have a custom renderer. I also use redux in my project, so they share the same Context in the two libraries. \r\n\r\nIt displays a warning on Console after every redux state updating, but everything works well, both renderers can trigger an update.\r\n\r\nI want to know if there is any risk in doing this, or is this just a false warning?\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Using multiple react renderers\r\n2. Using the same context provider between that react renderers\r\n\r\nLink to code example: https://codesandbox.io/s/multiple-reconciler-using-same-context-v8kq1?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nIt will throw a warning message after every state updating:\r\n\r\n> Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported. \r\n\r\nBut everything works well, both renderers can trigger an update.\r\n\r\n## The expected behavior\r\n\r\nDon't show any warning.",
        "title": "Why does React warn about multiple renderers using the same context provider?",
        "labels": "Type: Question",
        "id": 46080
    },
    {
        "body": "Cf the screenshot bellow. I have no `componentWillReceiveProps` in my code, so the warning comes from a library.\r\nI don't know how to quickly identify which library causes this warning and make a fix pull request on the repo of this library.\r\n\r\nAny tips to also remove the warning ?\r\n\r\nThanks a lot \r\n\r\n\r\n![image](https://user-images.githubusercontent.com/25119847/89186329-ebbe8400-d59b-11ea-87f4-47d2f215be72.png)\r\n\r\n\r\n",
        "title": "Bug: can't inspect well react warnings for `componentWillReceiveProps has been renamed`",
        "labels": "Type: Question",
        "id": 46081
    },
    {
        "body": "In JS, Array rendered with ',' in between each element\r\n e.g. ['Piyush', 'Sinha'] \r\n// Piyush,Sinha//\r\nbut in react Array rendered without ',' in between each element\r\n e.g. [ 'Piyush', 'Sinha'] \r\n//PiyushSinha//",
        "title": "Showing an Array in string Format in UI",
        "labels": "Type: Question",
        "id": 46082
    },
    {
        "body": "\r\nLet's say our state is as follows:\r\n```\r\nstate: {\r\n    user: {\r\n        name: 'Dave',\r\n        email: 'Dave@gmail.com'\r\n    }\r\n}\r\n```\r\n\r\nso while getting the user property from the state which one of the following should I do?\r\n\r\n**Case 1:**\r\n\r\n```\r\nconst user = this.state.user\r\n\r\nthis way following is valid\r\nuser == this.state.user //true\r\nuser.name = 'Manny';\r\nconsole.log(this.state.user.name) //Manny\r\n```\r\nthough it won't cause re-render until we use setState() but basically the value of the state variable has changed.\r\n\r\n**Case 2:**\r\n\r\n```\r\nconst user = { ...this.state.user};\r\n\r\nthis way\r\nuser == this.state.user //false\r\nuser.name = 'Manny';\r\nconsole.log(this.state.user.name) //Dave\r\n```\r\n\r\nWhich approach is better or are there any side effects of any of them?",
        "title": "Which approach is better for getting data from state ?",
        "labels": "Type: Question",
        "id": 46083
    },
    {
        "body": "Hi,\r\n\r\nI need to render another React App (i.e. App2) into existing React App (i.e. App1) on run time. I have hosted my \"App2\" on a remote server. I read \"asset-manifest.json\" file from it and on runtime I append those .js chunks in our head tag, this overall code I call from my \"App1\" to load my \"App2\" on runtime. \r\n\r\nBut I am not able to trigger \"App2\". How should I triggered App2 component inside App1 component?\r\n\r\nMy application have lot of other internal dependencies, such redux, redux-thunk etc.\r\n\r\n ",
        "title": "[Micro React Apps] - Need to render another React App into existing React App",
        "labels": "Type: Question",
        "id": 46084
    },
    {
        "body": "<!--\r\nIn a functional component, when waiting for an async action to complete and meanwhile changing any state - at the end of the async action the component stays in the previous lifecycle, thus doesn't know about the state change.\r\n\r\n-->\r\n\r\nReact version:\r\n16.13\r\n## Steps To Reproduce\r\n\r\n1. create a functional component with 2 elements\r\n2. the component will have an Integer - counter prop and is initialised with 0 value.\r\n3. the first element has an \"onClick\" action, which increases the counter. \r\n4. the second element has an \"onClick\" action, which is asynced and waits for a timeout promise and only then increases the counter.\r\n5. press the second element, and while waiting for the async action to complete press the firs element as well.\r\n\r\n```\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function App() {\r\n  const [counter, setCounter] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <button\r\n          onClick={async () => {\r\n            await new Promise(resolve => {\r\n              setTimeout(() => {\r\n                resolve();\r\n              }, 4000);\r\n            });\r\n             setCounter(counter + 1);\r\n          }}\r\n        >\r\n          Async\r\n        </button>\r\n        <label>{counter}</label>\r\n      </div>\r\n      <div>\r\n        <button\r\n          onClick={() => {\r\n            //increases the counter state\r\n            setCounter(counter + 1);\r\n          }}\r\n        >\r\n          Add 1\r\n        </button>\r\n        <label>{counter}</label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/red-bush-7w8yk?file=/src/App.js\r\n\r\n-- A different version of the same issue\r\nhttps://stackoverflow.com/questions/62424530/how-to-get-the-changed-state-after-an-async-action-using-react-functional-hooks\r\n\r\n## The current behavior\r\ncurrent behaviour: the counter value at the end of the async action will equal to 1\r\n\r\n## The expected behavior\r\nexpected behaviour: the counter value at the end of the async action will equal to 2",
        "title": "When waiting for an async action to end, and in the meantime the state changes, there is no way to know about the change",
        "labels": "Type: Question",
        "id": 46085
    },
    {
        "body": "I'm wirte a custimse renderer for render element in canvas(like react-pixi), I want intergrate with react dev tool;\r\nI can hightlight element when click element in react dev tool compoent panel use code:\r\n```ts\r\n__REACT_DEVTOOLS_GLOBAL_HOOK__?.reactDevtoolsAgent?._bridge.addListener('highlightNativeElement', (eleInfo: EleInfo) => {\r\n        const { id, rendererID } = eleInfo;\r\n        const renderer = __REACT_DEVTOOLS_GLOBAL_HOOK__?.rendererInterfaces.get(\r\n            rendererID,\r\n        );\r\n\r\n        const node_list =\r\n            (renderer.findNativeNodesForFiberID(id) as Sprite[]) || [];\r\n\r\n        //... customise render engin hightlight code\r\n    });\r\n```\r\n\r\nI want hightlight ele when mouse move in canvas, I can use `__REACT_DEVTOOLS_GLOBAL_HOOK__.rendererInterfaces.get(1).getFiberIDForNative(node)` find node fiber id, I can use `_bridge` send hightlint msg to backend just like the code\r\nhttps://github.com/facebook/react/blob/6ba25b96df5d4179bf8aba3c3fe1ace3dce28234/packages/react-devtools-shared/src/devtools/views/hooks.js#L311\r\nbut I can't get store object and get enugh infomation send to backend.\r\nmaybe dev tool can expose proper api for this function",
        "title": "devtool Api request : add api for customize renderer inspect element",
        "labels": "Type: Question",
        "id": 46086
    },
    {
        "body": "<!--\r\n The problem is that a random function is getting called up, for no reason, I tried to trace it and looked like there is a problem with react-development. react-development is calling a long ago used function\r\n-->\r\n\r\nReact version: ^16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click on Task 1\r\n2. Check the dsdfdsf tab,and check it\r\n3. Click on Create a new Task \r\n4. create a new task\r\n\r\n\r\n\r\nLink to code example:\r\n\r\n<!--\r\n code --> https://github.com/aman-singal/Recact_todoList\r\n-->\r\n\r\n## The current behavior\r\nWhen adding a new task, The last used function of a different component gets called for no reason. The milestone of the list gets cleared when adding a new Task\r\n\r\n\r\n##  The expected behavior\r\nThe Function shouldn't be called, the already existing List shouldn't be cleared\r\n",
        "title": "Bug: React Function getting called for no Reason",
        "labels": "Type: Question",
        "id": 46087
    },
    {
        "body": "Hello. I'm not sure if this is an issue, but I would like to know a little more about how react developer tools work. \r\n\r\nI want to get reacts props with selenium in order to make easier the debugging of a website. \r\n\r\nI'd be thankful with any kind of help you can give me.\r\n\r\nBest regards",
        "title": "Selenium integration",
        "labels": "Type: Question",
        "id": 46088
    },
    {
        "body": "When I try to batch update all the states with click events, the final render is once. When the state is updated in batch with setTimeout, the result is multiple times. May I ask what is the useStateHook running mechanism inside react? Is the same asynchronous function, but The Times of rendering is not the same?\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Bind a single click event to the DOM and handle multiple state updates in batches\r\n2. After the component is mounted, create a setTimeout timer, which is also a batch update of state\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://codesandbox.io/s/charming-fermat-syi5g?file=/src/App.js](url)\r\n\r\n## The current behavior\r\nClick event batch update and timer batch update rendering times are different\r\n\r\n\r\n## The expected behavior\r\nAlso triggers an update\r\n\r\nWhat is the operation mechanism of useState hook? Why not the same number of asynchronous renderings?\r\n",
        "title": "Click event and setTimeout update state, different times of rendering",
        "labels": "Type: Question",
        "id": 46089
    },
    {
        "body": "```\r\nconst [ html, setHTML ] = useState('');\r\nconst [ script, setScript ] = useState('');\r\n\r\nconst update = (script, html) => {\r\n  setScript(script);\r\n  setHTML(html);\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code works fine, React Hooks will render ONCE and combine setScript & setHTML;\r\n\r\n\r\n```\r\nconst [ html, setHTML ] = useState('');\r\nconst [ script, setScript ] = useState('');\r\n\r\nconst update = async (script, html) => {\r\n  await new Promise(resolve => setTimeout(resolve, 10));\r\n  setScript(script);\r\n  setHTML(html);\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code doesn't work anymore, React Hooks will render TWICE and it doesn't combine setScript & setHTML.\r\n\r\nI can change to the code to:\r\n\r\n```\r\nconst [ state, setState ] = useState({\r\n  html: '',\r\n  script: ''\r\n});\r\n\r\nconst update = async (script, html) => {\r\n  await new Promise(resolve => setTimeout(resolve, 10));\r\n  setState({\r\n    script,\r\n    html\r\n  });\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code only renders ONCE but it has a new bug: the cursor in the textArea (where script and html go) will move to the end of the textArea instead of staying at where it is.",
        "title": "React Hooks will render multiple times after await",
        "labels": "Type: Question",
        "id": 46090
    },
    {
        "body": "When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing.\r\n\r\nReact version: HEAD\r\n\r\nWhile this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one.\r\n\r\n```\r\nfunction TestComponent({ref}) {\r\n  const [state] = React.useState({\r\n    stateField1: 42,\r\n  });\r\n  assignRef(ref, state);\r\n  return (\r\n    <div>\r\n      { state.stateField1 }\r\n    </div>\r\n  );\r\n}\r\n\r\nThis code wont work, caller would never be able to get The Answer. Caller is sad.\r\n```\r\n\r\n## The current behavior\r\nReact giving a warning and making the ref prop defunct.\r\n\r\n## The expected behavior\r\nRemove limitation and let ref on my function component live happily ever after.",
        "title": "Bug: function component cannot have ref property",
        "labels": "Type: Question",
        "id": 46091
    },
    {
        "body": "\r\nreact Developer Tools 4.6.0\r\nGoogle chrome Version 80.0.3987.149\r\nL'outil de d\u00e9veloppement react est inactif sur la console google chrome",
        "title": "Extention React non d\u00e9finie sur chrome",
        "labels": "Type: Question",
        "id": 46092
    },
    {
        "body": " <View style={[styles.box, {\r\n         transform: [{ scale:this.state.scaleNum}]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "title": "{[styles.box, {           transform: [{ scale:this.state.scaleNum}]      }]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "labels": "Type: Question",
        "id": 46093
    },
    {
        "body": "```tsx\r\nfunction useRefCallback<T extends (...args: any) => void>(callback: T) {\r\n  const ref = useRef<T>(callback);\r\n  ref.current = callback;\r\n  return useCallback(function(this: any, ...args: Parameters<T>) {\r\n    return ref.current.apply(this, args);\r\n  } as T, []);\r\n}\r\n```\r\nI think useRefCallback is safe to replace useCallback in any code, and it's better than useCallback because it will never cause recalculation.",
        "title": "Question: Why not useCallback always return static value without deps?",
        "labels": "Type: Question",
        "id": 46094
    },
    {
        "body": "Why all implements of hooks in `react-dom` and we have to import from `react`?\r\nJust I want to know about it",
        "title": "Question: It's not problem just question in my mind",
        "labels": "Type: Question",
        "id": 46095
    },
    {
        "body": "I'm using react hook `useContext`. I have two identical components (siblings), each that use the same context that is a list.\r\n\r\n**Scenario**\r\n1. The first sibling is created, calls `useContext`, and then pushes something into the list. \r\n2. The second sibling is then created, using the same `useContext`, and then pushes something into the list. \r\n\r\n**Issue**\r\nThe second sibling has the current state of list, which has two items, _but the first sibling state is not updated with the second item that was pushed in by the second sibling_\r\n\r\n**Expected**\r\nThat each component that is using the same `useContext` will be updated amongst all components that use the same context.\r\n\r\nIs this a bug or am I misusing this? Any help or guidance is appreciated \ud83d\ude47 ",
        "title": "Question: How to remove dynamic children from Parent State?",
        "labels": "Type: Question",
        "id": 46096
    },
    {
        "body": "Hi. I create `ref` in root component in my app. When i bind `ref` to element, which is a child of another element that is render in the portal, ref \"current\" property is always  `undefined`.\r\n\r\nSandbox with example here:\r\nhttps://codesandbox.io/s/refs-through-portals-test-o5lqr\r\n\r\nHow can i use refs with portals with expected behaviour?",
        "title": "Question: How to use \"useRef\" when it is passed through Portal?",
        "labels": "Type: Question",
        "id": 46097
    },
    {
        "body": "Hi,\r\n\r\nI'm kinda in doubt if this is an error or is just me doing something wrong.\r\n\r\nI am trying the new react experimental in a very simple existing app I have. Although I had installed the react experimental versions in my package.json, it seems it doesn't recognize ReactDOM.createRoot.\r\n\r\nWhen I try to run my project I receive the error message from the console:\r\n```\r\nUncaught TypeError: react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.createRoot is not a function\r\n    at Module../src/client/index.js (main.chunk.js:2437)\r\n    at __webpack_require__ (runtime.bundle.js:786)\r\n    at fn (runtime.bundle.js:151)\r\n    at Object.0 (main.chunk.js:4324)\r\n    at __webpack_require__ (runtime.bundle.js:786)\r\n    at checkDeferredModules (runtime.bundle.js:46)\r\n    at Array.webpackJsonpCallback [as push] (runtime.bundle.js:33)\r\n    at main.chunk.js:1\r\n``` \r\nThis only happens when I try using ``ReactDOM.createRoot``. Using ``ReactDOM.render`` everything works perfectly.\r\n\r\nAny idea why this is happening?\r\n```\r\n\"dependencies\": {\r\n    \"chalk\": \"^3.0.0\",\r\n    \"compression\": \"^1.7.4\",\r\n    \"express\": \"^4.17.1\",\r\n    \"morgan\": \"^1.9.1\",\r\n    \"uuid\": \"^3.4.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/cli\": \"^7.8.4\",\r\n    \"@babel/core\": \"^7.8.4\",\r\n    \"@babel/node\": \"^7.8.4\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-export-namespace-from\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-function-bind\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-nullish-coalescing-operator\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-optional-chaining\": \"^7.7.5\",\r\n    \"@babel/plugin-proposal-pipeline-operator\": \"^7.7.7\",\r\n    \"@babel/plugin-proposal-private-methods\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-throw-expressions\": \"^7.7.4\",\r\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.7.4\",\r\n    \"@babel/preset-env\": \"^7.8.4\",\r\n    \"@babel/preset-react\": \"^7.7.4\",\r\n    \"@babel/preset-typescript\": \"^7.8.3\",\r\n    \"@hot-loader/react-dom\": \"^16.11.0\",\r\n    \"@testing-library/jest-dom\": \"^5.1.1\",\r\n    \"@testing-library/react\": \"^9.4.0\",\r\n    \"autoprefixer\": \"^9.7.4\",\r\n    \"babel-eslint\": \"^11.0.0-beta.2\",\r\n    \"babel-jest\": \"^25.1.0\",\r\n    \"babel-loader\": \"^8.0.6\",\r\n    \"babel-plugin-dynamic-import-node\": \"^2.3.0\",\r\n    \"babel-plugin-styled-components\": \"^1.10.7\",\r\n    \"case-sensitive-paths-webpack-plugin\": \"^2.3.0\",\r\n    \"circular-dependency-plugin\": \"^5.2.0\",\r\n    \"clean-webpack-plugin\": \"^3.0.0\",\r\n    \"connected-react-router\": \"^6.6.1\",\r\n    \"copy-webpack-plugin\": \"^5.1.1\",\r\n    \"core-js\": \"^3.6.2\",\r\n    \"css-hot-loader\": \"^1.4.4\",\r\n    \"css-loader\": \"^3.4.1\",\r\n    \"deep-freeze\": \"^0.0.1\",\r\n    \"eslint\": \"^6.8.0\",\r\n    \"eslint-loader\": \"^3.0.3\",\r\n    \"eslint-plugin-babel\": \"^5.3.0\",\r\n    \"eslint-plugin-import\": \"^2.20.1\",\r\n    \"eslint-plugin-jsx-a11y\": \"^6.2.3\",\r\n    \"eslint-plugin-ramda\": \"^2.5.1\",\r\n    \"eslint-plugin-react\": \"^7.18.3\",\r\n    \"eslint-plugin-react-hooks\": \"^2.3.0\",\r\n    \"eslint-plugin-redux-saga\": \"^1.1.3\",\r\n    \"eslint-watch\": \"^6.0.1\",\r\n    \"file-loader\": \"^5.0.2\",\r\n    \"hard-source-webpack-plugin\": \"^0.13.1\",\r\n    \"history\": \"^4.10.1\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"immer\": \"^5.3.4\",\r\n    \"jest\": \"^25.1.0\",\r\n    \"jest-styled-components\": \"^7.0.0\",\r\n    \"lodash\": \"^4.17.15\",\r\n    \"mini-css-extract-plugin\": \"^0.9.0\",\r\n    \"moment\": \"^2.24.0\",\r\n    \"nock\": \"^11.7.1\",\r\n    \"normalizr\": \"^3.5.0\",\r\n    \"npm-run-all\": \"^4.1.5\",\r\n    \"open\": \"^7.0.2\",\r\n    \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",\r\n    \"pm2\": \"^4.2.3\",\r\n    \"postcss-flexbugs-fixes\": \"^4.2.0\",\r\n    \"postcss-loader\": \"^3.0.0\",\r\n    \"prop-types\": \"^15.7.2\",\r\n    \"ramda\": \"^0.27.0\",\r\n    \"react\": \"^0.0.0-experimental-241c4467e\",\r\n    \"react-dom\": \"^0.0.0-experimental-241c4467e\",\r\n    \"react-hooks-testing-library\": \"^0.6.0\",\r\n    \"react-hot-loader\": \"^4.12.19\",\r\n    \"react-is\": \"^16.12.0\",\r\n    \"react-redux\": \"^7.1.3\",\r\n    \"react-router\": \"^5.1.2\",\r\n    \"react-router-dom\": \"^5.1.2\",\r\n    \"react-test-renderer\": \"^16.12.0\",\r\n    \"redux\": \"^4.0.5\",\r\n    \"redux-actions\": \"^2.6.5\",\r\n    \"redux-devtools-extension\": \"^2.13.8\",\r\n    \"redux-logger\": \"^3.0.6\",\r\n    \"redux-saga\": \"^1.1.3\",\r\n    \"redux-saga-test-plan\": \"^4.0.0-rc.3\",\r\n    \"regenerator-runtime\": \"^0.13.3\",\r\n    \"reselect\": \"^4.0.0\",\r\n    \"source-map-loader\": \"^0.2.4\",\r\n    \"style-loader\": \"^1.1.3\",\r\n    \"styled-components\": \"^5.0.1\",\r\n    \"stylelint\": \"^13.0.0\",\r\n    \"stylelint-bare-webpack-plugin\": \"^2.0.0\",\r\n    \"stylelint-config-recommended\": \"^3.0.0\",\r\n    \"stylelint-config-standard\": \"^19.0.0\",\r\n    \"stylelint-config-styled-components\": \"^0.1.1\",\r\n    \"stylelint-custom-processor-loader\": \"^0.6.0\",\r\n    \"stylelint-order\": \"^4.0.0\",\r\n    \"stylelint-processor-styled-components\": \"^1.9.0\",\r\n    \"stylelint-selector-bem-pattern\": \"^2.1.0\",\r\n    \"thread-loader\": \"^2.1.3\",\r\n    \"typescript\": \"^3.7.5\",\r\n    \"url-loader\": \"^3.0.0\",\r\n    \"webpack\": \"^4.41.4\",\r\n    \"webpack-dev-middleware\": \"^3.7.2\",\r\n    \"webpack-hot-middleware\": \"^2.25.0\",\r\n    \"webpack-manifest-plugin\": \"^2.2.0\",\r\n    \"webpack-merge\": \"^4.2.2\",\r\n    \"webpack-pwa-manifest\": \"^4.1.1\",\r\n    \"workbox-webpack-plugin\": \"^5.0.0\"\r\n  }\r\n```",
        "title": "Webpack can't find ReactDOM.createRoot",
        "labels": "Type: Question",
        "id": 46098
    },
    {
        "body": "You [frequently][1] [see][2] warnings that you shouldn't lie to `useEffect` and `useMemo` about their dependencies.\r\n\r\n\r\nI'm wondering about this special case, which I see throughout the codebase at work:\r\n```\r\nuseEffect(() => {\r\n  // We want effect to run when a changes, but not b\r\n  doStuff(a, b)\r\n, [a])\r\n```\r\n\r\nLet's say `a` changes every 10 seconds, and `b` changes every second, and we want to `doStuff` whenever `a` changes.\r\n\r\nThis works, is simple and elegant. Yet all guides discourage this, suggesting to do this instead:\r\n```\r\nlet bRef = useRef()\r\nuseEffect(() => {\r\n  bRef.current = b\r\n})\r\n\r\nuseEffect(() => {\r\n  doStuff(a, bRef.current)\r\n}, [a])\r\n```\r\nWhy? Aren't those equivalent?\r\n\r\nI could see a potential issue with `useMemo(() => compute(a, b), [a])`. It can be accessed in the entire component, and sometimes it will be stale, which contradicts the meaning of memoization.\r\n\r\nBut what about that useEffect case?\r\n\r\n  [1]: https://overreacted.io/a-complete-guide-to-useeffect/#dont-lie-to-react-about-dependencies\r\n  [2]: https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies",
        "title": "Question: can I lie to useEffect about its dependencies in this case?",
        "labels": "Type: Question",
        "id": 46099
    },
    {
        "body": "Nested setState and unstable_batchedUpdates (are them ignored?)\r\n\r\nReact version: 16.12\r\n\r\n## Steps To Reproduce\r\nhttps://codesandbox.io/s/batchedupdates-uselayouteffect-evj8s\r\n\r\nopen profile after click, you will see 3 commit.\r\n\r\nit seems that even if we use unstable_batchedUpdates, nested setStates called on\r\ndidUpdate/layouteffect do not get batched.\r\n",
        "title": "Bug: Nested setState and unstable_batchedUpdates (are they ignored?)",
        "labels": "Type: Question",
        "id": 46100
    },
    {
        "body": "Hi, just out of curiosity can `useMemo` be used instead of `useRef` when doing it as following:\r\n\r\nExample:\r\n\r\n```javascript\r\nconst ref = useRef(null);\r\nconst ref2 = useMemo(() => { current: null }, []);\r\n```\r\n\r\nIt looks to me that both refs will be working just fine as DOM ref and as mutable value similar to instance fields in classes. Why then `useRef` is implemented differently comparing to `useMemo` considering [ReactFiberHooks.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js) code for `useRef` and `useMemo`?\r\n\r\nThanks!",
        "title": "Question: Can useMemo be used instead of useRef?",
        "labels": "Type: Question",
        "id": 46101
    },
    {
        "body": "const CreateNotificationBase = (props) => {\r\nconst [state, dispatch] = useContext(Store);\r\n const draftData = useRef({});\r\nuseEffect(() => {\r\n        if (state.notificationDetails.draftId) {\r\n            draftData.current = state.notificationDetails;\r\n        }\r\n    }, []);\r\nuseEffect(() => {\r\ndebugger\r\n},[draftData.current])\r\n}\r\n\r\nwhen value in store context changes useEffect of draftData.current also called. Please suggest hwo to resolve.",
        "title": "While using useRef , some data has been updated by context value from reducers, when the context value was updated from some other user event, variable used with useRef also updated, then how to use instance variables in hooks?",
        "labels": "Type: Question",
        "id": 46102
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nAccording to docs, it's possible to see props and state of a component at each commit.\r\nhttps://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html#browsing-commits\r\n\r\nYet, in every project I've tried all I see is the names of changed props, but not their values, like the gif from docs claims.\r\n\r\n\r\nReact version: 16.12.0\r\nextension: 4.4.0 (1/3/2020) ... Created from revision f749045a5 on 1/3/2020\r\n\r\n## Steps To Reproduce\r\n\r\n1. create counter app with CRA or another method\r\n2. open profiler and change state\r\n3. observe how only the name of the prop is visible, but not its value\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n```\r\nfunction App() {\r\n  let [a, setA] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => setA(v => v + 1)}>inc</button>\r\n      <Kid a={a} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Kid() {\r\n  return null;\r\n}\r\n```\r\n\r\n## The current behavior\r\n[current behavior](https://i.imgur.com/9I6rAIf.png)\r\n\r\n## The expected behavior\r\n[expected behavior](https://i.imgur.com/yVf36Ff.png)\r\n\r\nAm I doing something wrong or has this feature been removed? I know you can see props in the inspector, but there it's only the most recent ones.",
        "title": "Bug: react-devtools profiler doesn't show props",
        "labels": "Type: Question",
        "id": 46103
    },
    {
        "body": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8\r\n\r\nAs it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.\r\n\r\n## Coding Questions\r\n\r\nIf you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions.\r\n\r\nhttps://stackoverflow.com/questions/tagged/react\r\n\r\n## Talk to other React developers\r\n\r\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React.\r\n\r\nhttps://reactjs.org/community/support.html#popular-discussion-forums\r\n\r\n## Proposals\r\n\r\nIf you'd like to discuss topics related to the future of React, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.\r\n\r\nhttps://github.com/reactjs/rfcs\r\n",
        "title": "Question:  Just for my app test. Thanks.",
        "labels": "Type: Question",
        "id": 46104
    },
    {
        "body": "Is it a correct form to use the useContext hook without the enclosing provider?\r\n\r\nSee this simple [sandbox](https://codesandbox.io/s/3q2x15l4rm) which uses  the JediContext.Provider.\r\n\r\nIn this modified [sandbox](https://codesandbox.io/s/react-hooks-usecontext-z2ryh) I removed the provider and the useContext hook still works.\r\n\r\nWhat are the consequences of using the useContext hook without a provider?",
        "title": "Question: Can the useContext hook be used without a provider?",
        "labels": "Type: Question",
        "id": 46105
    },
    {
        "body": "I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/KbvYG.png\r\n\r\nI am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.\r\n\r\nIs there any way how can I solve it?\r\n\r\nApollo controller\r\n\r\n    import { useQuery } from \"@apollo/react-hooks\";\r\n    import gql from \"graphql-tag\";\r\n    \r\n    export const useHelloQuery = () => useQuery(\r\n         gql`\r\n             {\r\n                 hello\r\n             }\r\n         `\r\n    )\r\n\r\n\r\nReact component:\r\n\r\n    function Test() {\r\n         const data = useHelloQuery();\r\n    \r\n         return (\r\n              <Text>awesoe</Text>\r\n         );\r\n    }\r\n    \r\n\r\nbefore adding react-native it was exactly same",
        "title": "Question: React apollo hooks fails after adding react-native to monorepo",
        "labels": "Type: Question",
        "id": 46106
    },
    {
        "body": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8\r\n\r\nAs it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.\r\n\r\n## Coding Questions\r\n\r\nIf you have a coding question related to CLOSE THIS PAGE - NOW and CLOSE THIS PAGE - NOW DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using CLOSE THIS PAGE - NOW, as well as ask for help with specific questions.\r\n\r\nhttps://stackoverflow.com/questions/tagged/CLOSE THIS PAGE - NOW\r\n\r\n## Talk to other CLOSE THIS PAGE - NOW developers\r\n\r\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of CLOSE THIS PAGE - NOW.\r\n\r\nhttps://CLOSE THIS PAGE - NOWjs.org/community/support.html#popular-discussion-forums\r\n\r\n## Proposals\r\n\r\nIf you'd like to discuss topics related to the future of CLOSE THIS PAGE - NOW, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.\r\n\r\nhttps://github.com/CLOSE THIS PAGE - NOWjs/rfcs\r\n",
        "title": "Question: I have a lot of very nice and smart vuejs components. is there a way to use it in an react project? ",
        "labels": "Type: Question",
        "id": 46107
    },
    {
        "body": "Hi, I believe that this can potentially be an issue, though I'm not sure.\r\n\r\nI was wondering about good patterns concerning the react context.\r\n\r\nLet's get a public library, for example `react-intl` that exposes a Provider (IntlProvider).\r\nLet's create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`.\r\nNow let's imagine I create a web app and use both `barLib` and `react-intl`.\r\n\r\nI don't expect the `barLib` to ever override my react-intl context, because i'm not aware it uses internally the `react-intl` lib.\r\nBut the `barLib` can accidentally override the react-intl context => https://codesandbox.io/s/embedded-contexts-test-z8e7b\r\n\r\nThis kinda breaks the isolation of libs IMO.\r\n\r\nI see several solutions :\r\n- Don't use an other lib context in the `barLib` (pretty extreme)\r\n- Check that there is not already an intl context in the `barLib`, if so merge the context values ?\r\n\r\nI'm not convinced with either solutions, what do you guys think about it ?",
        "title": "Question: react lib context overrides app context",
        "labels": "Type: Question",
        "id": 46108
    },
    {
        "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click Button\uff0cView print data\r\n2. Click Button\uff0cView print data\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/kind-fog-mce7w\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nEvery time you click the button, the printed data will change\r\n\r\n## The expected behavior\r\nEvery time I click the button, the printed data should be an empty object",
        "title": "Bug: useRef can not return a persist ref object",
        "labels": "Type: Question",
        "id": 46109
    },
    {
        "body": "\r\n\r\n## Coding Questions\r\ni try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined\r\n```\r\nconst [instance, setInstance] = useState<ECharts | undefined>(undefined);\r\n\r\nconst chartInstance = echarts.init(root.current);\r\n    setInstance(prev => {\r\n        console.log('prev instance', prev); // first time: undefined, then Echarts instance\r\n        return prev || chartInstance;\r\n    });\r\n    console.log('instance: ', instance, chartInstance); // instance is always undefined\r\n```\r\n\r\n\r\n",
        "title": "Question: why cann't I set echarts instance using useState?",
        "labels": "Type: Question",
        "id": 46110
    },
    {
        "body": "language and translation\r\ni'm sure that you translated your react site by google \r\nthe worst result at all \r\ni hope you correct it \r\n\r\nhttps://github.com/reactjs/rfcs\r\n",
        "title": "the worst arabic translation ",
        "labels": "Type: Question",
        "id": 46111
    },
    {
        "body": "hello all.\r\n\r\nI was met a problem when I published a react component, I need to help and discuss with you all \r\nI am going to write a component to load `React Component from CDN` and make it like a wrapper component.\r\n\r\n```jsx\r\nimport React, { Component } from 'react';\r\nimport scriptjs from 'scriptjs';\r\n\r\nconst DEV_SCRIPT =\r\n  'https://dev/cdn/resource/phoenix-header.js';\r\nconst PROD_SCRIPT =\r\n  'https://cdn/resource/phoenix-header.js';\r\n\r\nclass PhoenixHeaderWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.type = null;\r\n    this.scriptUrl =\r\n      props.scriptUrl || (props.env !== 'PROD' ? DEV_SCRIPT : PROD_SCRIPT);\r\n    this.state = {\r\n      cmp: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    scriptjs(this.scriptUrl, () => {\r\n      this.type = window.PhoenixHeader;\r\n      this.createOrUpdateComponent();\r\n    });\r\n  }\r\n\r\n  createOrUpdateComponent() {\r\n    const { scriptUrl, ...otherProps } = this.props;\r\n    if (!this.type) {\r\n      console.error('load component failed');\r\n      return;\r\n    }\r\n    const cmp = React.createElement(this.type, otherProps || {});  // this is point\r\n    this.setState({ cmp });\r\n  }\r\n\r\n  render() {\r\n    const { cmp } = this.state;\r\n    return cmp;\r\n  }\r\n}\r\n\r\nPhoenixHeaderWrapper.defaultProps = {\r\n  scriptUrl: '',\r\n  env: 'PROD',\r\n};\r\n\r\nexport default PhoenixHeaderWrapper;\r\n\r\n```\r\n\r\nand then, I do it just like do a normal react component that I was set the webpack config like below:\r\n\r\n```js\r\n// PhoenixHeader\r\n  output: {\r\n    publicPath: './',\r\n    filename: 'phoenix-header.js',\r\n    path: paths.appBuild,\r\n    library: 'PhoenixHeader',\r\n    libraryTarget: 'commonjs2',\r\n    libraryExport: 'default',\r\n  },\r\n  mode: 'production',\r\n  externals: {\r\n    react: {\r\n      commonjs: 'react',\r\n      commonjs2: 'react',\r\n      amd: 'react',\r\n      root: 'React',\r\n    },\r\n    ['react-dom']: {\r\n      commonjs: 'react-dom',\r\n      commonjs2: 'react-dom',\r\n      amd: 'react-dom',\r\n      root: 'ReactDom',\r\n    },\r\n  },\r\n```\r\n\r\nand then, I run the `npm run build && npm publish` to publish it.\r\n\r\nIn my own object which use the PhoenixHeader component as a npm package. \r\n\r\n```jsx\r\n// app.jsx\r\nimport React from 'react';\r\nimport PhoenixHeader from 'phoenix-header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PhoenixHeader />\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n```\r\nafter `npm start`, it show me a error:\r\n![image](https://user-images.githubusercontent.com/12051024/72236068-4d270180-3610-11ea-9e62-7a69a2972e15.png)\r\n\r\n**That it is my confusion is, why `createElement` not in this scope.**\r\n\r\nso I try to make react set into global:\r\n```js\r\nwindow.React = React;\r\n```\r\n\r\nYes, it's work for me.\r\n\r\n**But someone would like to tell me why need to make React set into global?**\r\n\r\n**And am I need to build this wrapper component which do not external the react when I was build?**\r\n\r\nlet's discuss or give me more suggest about this wrapper component please  \ud83d\ude4f",
        "title": "help~When I use React.createElement directly and How to pack the component?",
        "labels": "Type: Question",
        "id": 46112
    },
    {
        "body": "I am trying to upgrade my Reactjs and react-dom versions from v15.6.2 to ^v16.0.0 and am getting the above error.\r\n\r\nClicking through the error in the console, I see that the _React$DOM is undefined. I have followed all the migration instructions on the React.org site and looked extensively, but cannot seem to get rid of this error on versions of react and react-dom of v16 and above.\r\n\r\nAny ideas on what that issue is and how I can resolve it?\r\n\r\nBelow are my package.json and webpack.config. They are pre-upgrade to v16, but I have tried adding core-js per Reactjs.org.\r\n\r\n```\r\nvar _React$DOM = _react2.default.DOM,\r\n    input = _React$DOM.input, <<< Here is the highlighted error\r\n    select = _React$DOM.select,\r\n    textarea = _React$DOM.textarea;\r\nMy dependencies in package.json:\r\n```\r\n\r\n\r\n ```\r\n \"devDependencies\": {\r\n    \"babel-loader\": \"^7.1.5\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-preset-react\": \"^6.1.18\",\r\n    \"babel-preset-stage-0\": \"^6.24.1\",\r\n    \"chai\": \"^4.1.2\",\r\n    \"chai-jquery\": \"^2.0.0\",\r\n    \"css-loader\": \"^1.0.0\",\r\n    \"eslint-config-rallycoding\": \"^3.2.0\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"react-addons-test-utils\": \"^15.0.1\",\r\n    \"style-loader\": \"^0.21.0\",\r\n    \"webpack-cli\": \"^3.1.0\",\r\n    \"webpack-dev-server\": \"^3.1.8\"\r\n  },\r\n  \"dependencies\": {\r\n    \"actioncable\": \"^5.2.4\",\r\n    \"axios\": \"^0.18.0\",\r\n    \"babel-core\": \"^6.2.1\",\r\n    \"babel-polyfill\": \"^6.26.0\",\r\n    \"babel-preset-stage-1\": \"^6.1.18\",\r\n    \"cloudinary-core\": \"^2.5.0\",\r\n    \"cloudinary-react\": \"^1.0.6\",\r\n    \"dotenv-webpack\": \"^1.5.5\",\r\n    \"file-loader\": \"^2.0.0\",\r\n    \"jquery\": \"^3.3.1\",\r\n    \"jsdom\": \"^12.0.0\",\r\n    \"lodash\": \"^4.1.0\",\r\n    \"prop-types\": \"^15.6.1\",\r\n    \"react\": \"^15.6.2\",\r\n    \"react-bootstrap\": \"^0.32.1\",\r\n    \"react-day-picker\": \"^7.1.6\",\r\n    \"react-dom\": \"^15.6.2\",\r\n    \"react-dropzone\": \"^5.0.1\",\r\n    \"react-helmet\": \"^5.2.0\",\r\n    \"react-redux\": \"^5.0.7\",\r\n    \"react-router-dom\": \"^4.3.1\",\r\n    \"react-stripe-elements\": \"^2.0.1\",\r\n    \"redux\": \"^4.0.0\",\r\n    \"redux-form\": \"^7.4.2\",\r\n    \"redux-thunk\": \"^2.2.0\",\r\n    \"sha1\": \"^1.1.1\",\r\n    \"webpack\": \"^4.17.2\"\r\n  }\r\n```\r\nMy webpack.config:\r\n\r\n```\r\nconst webpack = require('webpack');\r\nconst Dotenv = require('dotenv-webpack');\r\nconst raf = require('raf')\r\n\r\nconst path = require('path');\r\n\r\n\r\nmodule.exports = {\r\n  mode: 'none',\r\n  watch: false,\r\n  entry: [\r\n    'babel-polyfill', './src/index.js'\r\n  ],\r\n  output: {\r\n    path: __dirname,\r\n    publicPath: '/',\r\n    filename: 'bundle.js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(jpg|png|svg)$/,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[path][name].[hash].[ext]'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.js?$/,\r\n        exclude: /node_modules/,\r\n        use:\r\n          { loader: 'babel-loader',\r\n        options: {\r\n         presets: ['react', 'es2015', 'stage-0']\r\n       }\r\n      }\r\n    }\r\n\r\n    ] // end of loaders\r\n\r\n  devServer: {\r\n    historyApiFallback: true,\r\n    contentBase: './'\r\n  },\r\n  plugins: [\r\n    new webpack.DefinePlugin({\r\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\r\n    }),\r\n    new Dotenv()\r\n  ]\r\n};\r\n```",
        "title": "In React and react-dom 16 Upgrade, getting error: Uncaught TypeError: Cannot read property 'input' of undefined",
        "labels": "Type: Question",
        "id": 46113
    },
    {
        "body": "My React application has a list of to do lists like this:\r\n\r\n<img width=\"1082\" alt=\"figma_canvases\" src=\"https://user-images.githubusercontent.com/12554095/71749785-47206c00-2e2b-11ea-8d0c-5a82ceba1b05.png\">\r\n\r\n> Replace the Figma canvas preview images with todo lists above.\r\n\r\nIn the list of todo lists, I'd like to include a preview of each list as well as its name.\r\n\r\nHere's what I thought of to achieve this:\r\n- Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`.\r\n- Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page\r\n\r\nHowever, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won't work?\r\n\r\nI've looked at `repng` [1] so far but it hasn't worked for the components I tested it with.\r\n\r\n[1] https://github.com/jxnblk/repng",
        "title": "Rendering React component on server to take a screenshot of it",
        "labels": "Type: Question",
        "id": 46114
    },
    {
        "body": "Hi, I'm Newbie for Web Dev. I'm starting learning React and next.js and i got issue now i have to do a Navbar so I use Navbar from reactstrap to my next.js project it work fine but nextday I open my project and then my project kaboom.\r\n\r\n==\r\n\r\nError: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\r\n1. You might have mismatching versions of React and the renderer (such as React DOM)\r\n2. You might be breaking the Rules of Hooks\r\n3. You might have more than one copy of React in the same app\r\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\r\n\u25b6 2 stack frames were collapsed.\r\nExample\r\n./components/MainNav.js:19\r\n  16 | import 'bootstrap/dist/css/bootstrap.min.css'\r\n  17 | \r\n  18 | const Example = (props) => {\r\n> 19 |   const [isOpen, setIsOpen] = useState(false);\r\n  20 | \r\n  21 |   const toggle = () => setIsOpen(!isOpen);\r\n  22 | \r\nView compiled\r\n\u25b6 11 stack frames were collapsed.\r\n\r\n==\r\n\r\nThis is my Navbar Code\r\n\r\n==\r\n```\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst Example = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">HOME</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/\">WHAT</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHO</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">BRANCH</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHERE</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHEN</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">FAQS</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">GAME</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <NavbarText>Simple Text</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Example;\r\n```\r\n==\r\n\r\nWhat wrong is it and what should i do to resolve this. Thank.\r\n",
        "title": "My Navbar work fine until next day",
        "labels": "Type: Question",
        "id": 46115
    },
    {
        "body": "I try to get the latest state value in the initialization method, but the result is not satisfactory\u3002\r\nAll this happens in function components\u3002\r\n\r\n1.react version is 16.12.0\uff1b\r\n2.react-dom version is 16.12.0\uff1b\r\n\r\nthis is my demo code :\r\n\r\n```\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst App=()=>{\r\n\t/*button click*/\r\n\tconst btnClick = ()=>{\r\n\t\tconsole.log(\"initButton getting state is====>\",nowState); //can't get now state ,all is init value\r\n\t}\r\n\t/*init a button*/ \r\n\tconst initTitle = ()=>{\r\n\t\treturn (\r\n\t\t\t<button onClick={btnClick}>click</button>\r\n\t\t)\r\n\t}\r\n\tconst [title, settitle] = useState();\r\n\r\n\t/*now state*/\r\n\tconst [nowState, setNowState] = useState(0);\r\n\tconsole.log(\"now state is====>\",nowState);\r\n\r\n\tuseEffect(()=>{\r\n\t\tsettitle(initTitle());\r\n\t},[])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{title}\r\n\t\t\t<button onClick={()=>setNowState(nowState + 1)}>change now state</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n```\r\n",
        "title": "I can't get the latest status value in the initialization method",
        "labels": "Type: Question",
        "id": 46116
    },
    {
        "body": "When I get 401 status code from backend I run refreshToken method with passing the function where expired token occurred. In refreshToken method I get new token and set in refreshTokenLastFunc property function from parameter.\r\n\r\nThen I watch when refreshTokenLastFunc was updated using React useEffect and run once again the function where expired token occurred.\r\n\r\nThe problem is while I run store.refreshTokenLastFunc() in useEffect, the function in refreshTokenLastFunc property uses old Context API store(so it uses old token not the new one). You can read my comment in useEffect for store.refreshTokenLastFunc.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI don't actually know if it is a React bug or I don't understand JS properly\r\n\r\n**What is the current behavior?**\r\nIf I ran **store.refreshTokenLastFunc**  function in useEffect it takes old store, not the new one\r\n\r\n**What is the expected behavior?**\r\nI want **store.refreshTokenLastFunc**  function to run with new store, because store was modified before this function run\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact verison: 16.12.0\r\nBrowser: Google Chrome: 79\r\n\r\nMy code:\r\n```js\r\nexport const StoreProvider = props => {\r\n  const getToken = () => localStorage.getItem(\"token\");\r\n\r\n  const initState = () => ({\r\n    token: getToken(),\r\n    isAuth: false,\r\n    userRole: \"old role\",\r\n    mainUrl: MainUrl,\r\n    apiUrl: ApiUrl,\r\n    refreshTokenLastFunc: () => {}\r\n  });\r\n\r\n  const [store, setStore] = useState(initState());\r\n\r\n  const getUserInfo = async () => {\r\n    if (getToken()) {\r\n      try {\r\n        const apiConfig = {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${store.token}`\r\n          }\r\n        };\r\n\r\n        const response = await fetch(`${store.apiUrl}get-me`, apiConfig);\r\n        const responseJson = await response.json();\r\n\r\n        if (response.ok) {\r\n          // Update Context API\r\n          setStore({\r\n            ...store,\r\n            userRole: responseJson.role,\r\n            userName: responseJson.name,\r\n            userGroupId: responseJson.group_id,\r\n            isAuth: true\r\n          });\r\n        } else if (response.status === 401) {\r\n          refreshToken(getUserInfo);\r\n        } else {\r\n          throw new Error(`Some error occurred`);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const refreshToken = async func => {\r\n    try {\r\n      const apiConfig = {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          Authorization: `Bearer ${store.token}`\r\n        }\r\n      };\r\n\r\n      const response = await fetch(`${store.mainUrl}refresh-token`, apiConfig);\r\n      const responseJson = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Update token in local storage\r\n        localStorage.setItem(\"token\", responseJson.token);\r\n        // Update Context API\r\n        setStore({\r\n          ...store,\r\n          userRole: \"new role\",\r\n          token: responseJson.token,\r\n          refreshTokenLastFunc: func\r\n        });\r\n      } else {\r\n        throw new Error(`Some error...`);\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserInfo();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // If I console log my store before calling function, store is correctly updated, but the function uses old store.\r\n    console.log(\"store from useEffect: \", store); // store.userRole = 'new role' which is correct\r\n    store.refreshTokenLastFunc(); // store.userRole = 'old role' which should be 'new role'\r\n  }, [store.refreshTokenLastFunc]);\r\n\r\n  return (\r\n    <StoreContext.Provider value={[store, setStore, logout, getUserInfo]}>\r\n      {props.children}\r\n    </StoreContext.Provider>\r\n  );\r\n};\r\n```",
        "title": "Function passed as parameter and saved in Context API store takes old store from Context API",
        "labels": "Type: Question",
        "id": 46117
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nIf there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "title": "[TypeScript]Is there any way to define the state variables when using functional component? ",
        "labels": "Type: Question",
        "id": 46118
    },
    {
        "body": "i saw react package have `cjs` and `umd` folder\r\nand `index.js` in react output `cjs` version \r\n\r\nso if i want to use `umd` how can i change?\r\n\r\n![image](https://user-images.githubusercontent.com/20965813/71428891-b0eb9800-26fe-11ea-8887-691e69203855.png)\r\n",
        "title": "How can i change react umd version  in node_modules? ",
        "labels": "Type: Question",
        "id": 46119
    },
    {
        "body": "Ideally getDerivedStateFromProps  should not be called due to current component's setState. But it is behaving so. Can someone explain?\r\n\r\nCouldn't find solution in [#13015](https://github.com/facebook/react/issues/13015)",
        "title": "getDerivedStateFromProps is executed after setState #13015",
        "labels": "Type: Question",
        "id": 46120
    },
    {
        "body": "Hello, \r\n\r\nFeasibility of making a project in ionic reaction.\r\n\r\nI am interested in knowing more about Ionic react.\r\n\r\nAnd I would like to know if it is advisable to do a project with Ionic React.\r\n\r\nHow scalable the project would be.\r\n\r\nAnd you can use all the tools that have both ionic and rea, example: camera, maps, notifications, routes, among others.\r\n\r\nI appreciate if you can advise me.\r\n\r\nThank you",
        "title": "Opinions on Ionic Reac",
        "labels": "Type: Question",
        "id": 46121
    },
    {
        "body": "  I called two render methods to same root div .\r\n```\r\nRenderDOM.render( < Navigation /> ,document.getElementById(' root ')); \r\nRenderDOM.render( < App /> ,document.getElementById(' root '));\r\n```\r\nAnd what i get rendered on my screen is only a  App component.\r\nJust want to know that the one render method override the previous  render method?\r\n\r\n\r\n",
        "title": "Why only one component can be render at root div?",
        "labels": "Type: Question",
        "id": 46122
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*question*\r\n\r\n**What is the current behavior?**\r\n\r\n``` typescript\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Child() {\r\n  console.log(\"Child render\");\r\n  return null;\r\n}\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  console.log(\"Render\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"count changed\", count);\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>UseState</h2>\r\n      <p>clicked: {count}</p>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count + 1);\r\n        }}\r\n      >\r\n        +1\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count);\r\n        }}\r\n      >\r\n        +0\r\n      </button>\r\n      <Child />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n```\r\n\r\nThere are two button in this count example. Clicking one makes count +1\uff0canother makes count no change. If clicking the no change button first, \"Render\" will not be logged. But if clicking the +1 button first and then clicking anthor\uff0c\"Render\" will show twice, but \"\"Child render\" will only show once.\r\n\r\nI found the explain in document.\r\n\r\n> If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\r\n\r\nDoes React only promise that Children component will not be rendered in this situation? The current component may still be rendered?\r\n\r\nThis is an example in sandbox.\r\n\r\nhttps://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.12.0\",\r\n\"react-dom\": \"^16.12.0\",\r\n\r\n\r\n\r\n\r\n",
        "title": "Unexpected function component call using useState",
        "labels": "Type: Question",
        "id": 46123
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nHello,\r\nI am new in React and I am trying to create a simple react table to display data from db with login for user authentication. \r\nUntil I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls. \r\n\r\nFirst, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nEdit: login, password: admin, admin\r\n\r\nhttps://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\r\nhttps://codesandbox.io/embed/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\r\n[![Edit black-voice-2z6y5](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark)\r\n![error_message](https://user-images.githubusercontent.com/26010477/70700296-cf976b00-1cca-11ea-9c65-e2ba84d25d51.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nnodejs version v8.10.0\r\nnpm version 6.13.3\r\nubuntu/chrome\r\n\r\nPlease give me any advice. Thank you in advance :) \r\n",
        "title": "Bug: React table - Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.",
        "labels": "Type: Question",
        "id": 46124
    },
    {
        "body": "Here is my question:\r\nThere is a multiselect child component, the  value is maintained in its parent component [this.state.values] like this:\r\n\r\nParent {\r\n state={\r\n  values:[]\r\n }\r\n  render(){\r\n    return(\r\n     Multiselect value={this.state.values}\r\n    )\r\n  }\r\n}\r\n\r\nin the multiselect 's [onChange] function I control the multiselect value in two ways and two different render results:\r\n\r\nFirst:\r\n  onChange= ()=>{\r\n    this.setState({ values:this.handleValue(this.state.values)});\r\n  }\r\n\r\n  handleValues = (values)=>{\r\n    //here to add or splice, eg:\r\n    values.push('treeNode1');\r\n    return values\r\n  }\r\n\r\n  when I print this.state.values in the render() function, the 'treeNode1' is added, however ths multiselect component's 'treeNode1' option wasn,t selected;\r\n\r\nbut if change the onChange() function like this, it works right:\r\n  onChange= ()=>{\r\n    this.setState({ values:this.handleValue(Object.assign([],this.state.values))});\r\n  }\r\n\r\nI pass the copy of the [this.state.values] rather than [this.state.values].\r\n\r\nI,m confused.\r\n\r\nI know that we can,t change varibles in the state directly, however in the first way, [this.state.values] in the render() function is added by 'treeNode1', it looks correctly .\r\n\r\nHere is my guess :  React maintains a real state.  When React renders it can get the 'real' state of [this.state.values] which works actually rather than the [this.state.values] that I changed directly in the onChange function by adding 'treeNode1'. The state value[this.state.values] printed in the render() function looks correct ,because the directly change in the handleValues () function rather than changed by this.setState().\r\n\r\nI wonder how and why this happens and is my guess right? :)\r\n",
        "title": "question about this.state and this.setState",
        "labels": "Type: Question",
        "id": 46125
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nAsk a question\r\n\r\n**What is the current behavior?**\r\nWith `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens:\r\n\r\n1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');`\r\n2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component. \r\n3. The hook returns a [`RemoteData<Pick<Foo, 'name' | 'amount' | 'discounts'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, \"I haven't asked for this data yet\"\r\n4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.\r\n\r\nAt no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete.\r\n\r\nThrowing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component.\r\n\r\nThe only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \"maybe not ready the first time\" case.\r\n\r\nNote: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon ",
        "title": "How do suspense and subscriptions interact?",
        "labels": "Type: Question",
        "id": 46126
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nAPI design question about `useEffect`\r\n\r\n**What is the current behavior?**\r\nCurrently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once? \r\n",
        "title": "Why useEffect's default behavior is to run on every render?",
        "labels": "Type: Question",
        "id": 46127
    },
    {
        "body": "\r\nRefs never seem to work, is this a broken feature?\r\n\r\nWhy not remove them and just let people use \r\ndocument.querySelector('#id').action like normal people.\r\n\r\nalso, what does this mean? \r\n\r\n Function components cannot have refs. Did you mean to use React.forwardRef()?",
        "title": "Why include refs as a feature? -- seems broken and unnecessary",
        "labels": "Type: Question",
        "id": 46128
    },
    {
        "body": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component. \r\n\r\n**What is the expected behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML\r\n\r\n**What is the current behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.\r\n\r\nI've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.\r\n\r\nWhat I'm doing wrong?\r\n",
        "title": "Static rendering strategy doesn't work on codesplitted routes",
        "labels": "Type: Question",
        "id": 46129
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\nIn DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.)\r\n\r\n**What is the expected behavior?**\r\nAt least some components be filtered out.\r\nIt would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact DevTools 4.2.0 on Firefox 69.0.3.",
        "title": "DevTools component filter does not work with location",
        "labels": "Type: Question",
        "id": 46130
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no React tab in my chrome dev toolbar anymore.  I have deleted and reinstalled the react extension but the issue was not resolved.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nThere use to be a React tab in the chrome dev console toolbar\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using ios on google chrome.",
        "title": "Missing React tab in chrome dev tools",
        "labels": "Type: Question",
        "id": 46131
    },
    {
        "body": "I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below:\r\n\r\n**Container**\r\n``` typescript\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { GridSpacing } from '@material-ui/core/Grid';\r\n\r\nimport Course from '../components/Course/Course';\r\n\r\nimport { courseModels } from '../redux/features/course';\r\nimport { courseSelectors } from '../redux/features/course';\r\nimport { fetchCoursesAsync } from '../redux/features/course/actions';\r\nimport { RootState } from 'ReduxTypes';\r\n\r\ntype ErrorReport = { hasError: boolean; error?: Error };\r\ntype StateProps = {\r\n  isLoading: boolean;\r\n  courses: courseModels.Course[];\r\n  error: ErrorReport;\r\n};\r\n\r\n/**\r\n * Redux dispatch and state mappings\r\n */\r\nconst dispatchProps = {\r\n  fetchCourses: fetchCoursesAsync.request,\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): StateProps => ({\r\n  isLoading: state.courses.isLoadingCourses,\r\n  courses: courseSelectors.getReduxCourses(state.courses),\r\n  error: courseSelectors.getReduxCoursesError(state.courses),\r\n});\r\n\r\n/**\r\n * Component property type definitions\r\n */\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\n/**\r\n * CourseList component\r\n */\r\nconst CourseList = ({\r\n  courses = [],\r\n  error,\r\n  fetchCourses,\r\n  isLoading,\r\n}: Propas): JSX.Element => {\r\n  // fetch course action on mount\r\n  useEffect(() => {\r\n    console.log('COURSELIST FETCHING COURSES');\r\n    fetchCourses();\r\n  }, [fetchCourses]);\r\n\r\n  if (isLoading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error && error.hasError && error.error) {\r\n    throw error.error;\r\n    // if throw an error then encapsulating error boundary catches and displays.\r\n    // However when the container is loaded again via clicking on a Navbar link the useEffect\r\n    // action does not trigger. \r\n    \r\n    // Alternatively, if the error is rendered inside the container then the useEffect hook is \r\n    // still activated if the container is loaded again (e.g. via clicking on a Navbar link).\r\n    // return <p>{JSON.stringify(error.error, null, 2)}</p>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginTop: 20, padding: 30 }}>\r\n      {\r\n        <Grid container spacing={2 as GridSpacing} justify=\"center\">\r\n          {courses.map(element => (\r\n            <Grid item key={element.courseID}>\r\n              <Course course={element} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Exports\r\n */\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatchProps,\r\n)(CourseList);\r\n```\r\n\r\nIf I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect\r\naction does not trigger. Subsequently, the fetchCourses action is not dispatched.\r\n\r\nWhy is the _useEffect_ hook not triggered on second load after it previously threw an error?\r\n\r\nMy ErrorBoundary component includes a home button for navigating to '/'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to '/courses' shouldn't this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused?\r\n\r\nWhat is best practice for resetting a component that threw an error for surrounding ErrorBoundary?",
        "title": "Why is useEffect hook not activating when a component is reloaded after previously throwing an error?",
        "labels": "Type: Question",
        "id": 46132
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nAfter starting react-devtools, I get the following error message:\r\n```\r\nDevTools v4 is incompatible with this version of React\r\nEither upgrade React or install React DevTools v3:\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n* Use expo cli to initialize an expo app\r\n* run `yarn add react@latest` to ensure the most recent version of React is installed (currently v16.11.0)\r\n* run `yarn add react-devtools` to install react-devtools\r\n* run `yarn start` to start the app\r\n* run `npx react-devtools` to open react-devtools\r\n\r\n**What is the expected behavior?**\r\nreact-devtools should work with React Native and the latest version of React\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.11.0\r\nReact Native 0.59.3\r\nFedora 30",
        "title": "\"DevTools v4 is incompatible with this version of React\" with React Native & latest version of React",
        "labels": "Type: Question",
        "id": 46133
    },
    {
        "body": "With Concurrent mode getting finalized, I went to try to solve an old problem I have.\r\n\r\nThe app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.\r\n\r\nI've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i\r\n\r\nThe first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.\r\n\r\nThe last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here.",
        "title": "Utilize Suspense to express app init loader",
        "labels": "Type: Question",
        "id": 46134
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nOutdated README (maybe?)\r\n\r\n**What do the docs currently say?**\r\n\r\n> use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.\r\n\r\nIn the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.\r\n\r\nWould this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?",
        "title": "\"de-opting to synchronous mode\" in use-subscription README",
        "labels": "Type: Question",
        "id": 46135
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n```React : '16.9.0'```\r\n\r\nsample code \r\n```javascript\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction OptionOne(){\r\n  return <div>Blue pill</div>\r\n}\r\n\r\nconst OptionTwo = React.memo(function OptionTwo(){\r\n  return <div>Red pill</div>\r\n});\r\n\r\n\r\nfunction App() {\r\n  const [ Option, setOption ] = React.useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={e=>setOption(OptionOne)}>Option one</button>\r\n        <button onClick={e=>setOption(OptionTwo)}>Option two</button>\r\n      </div>\r\n      { Option && <Option/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\nWell the expected behavior was Option one wasn't suppose to throw an error;\r\nsetState in class components didn't mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug.\r\nSo is the useState hook working like its suppose to \"A rule not to pass a pure functional component as a value to the setValue of the useState hook\" or a bug? \r\n",
        "title": "Weird behavior with functional components and useState, A bug or \"Another rule!\"",
        "labels": "Type: Question",
        "id": 46136
    },
    {
        "body": "I've recently come across [this tweet](https://twitter.com/brian_d_vaughn/status/1113200027835310080) and saw that the new DevTools profiler apparently would be able to capture images of the DOM after each commit and display them on the right side (below the commit information). \r\n\r\nWas this feature indeed added to DevTools 4.2.0? Or is it coming out in a future version?\r\n\r\nJust asking because I didn't manage to get it working while trying with my projects.\r\n\r\n**React**: 16.10.2\r\n**Browser:** Google Chrome 77.0.3865.90\r\n**DevTools:** 4.2.0-a8b8ffb89",
        "title": "Can't get the profiler screenshot feature working in the React DevTools",
        "labels": "Type: Question",
        "id": 46137
    },
    {
        "body": "```js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction FriendStatus(props) {\r\n  const [isOnline, setIsOnline] = useState(null);\r\n\r\n  function handleStatusChange(status) {\r\n    setIsOnline(status.isOnline);\r\n  }\r\n\r\n  useEffect(() => {\r\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\r\n\r\n    return () => {\r\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\r\n    };\r\n  });\r\n\r\n  if (isOnline === null) {\r\n    return 'Loading...';\r\n  }\r\n  return isOnline ? 'Online' : 'Offline';\r\n}\r\n```",
        "title": "i was trying to pass through Hook effect, and the codes used are declared no where. like ChatApi ",
        "labels": "Type: Question",
        "id": 46138
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nelements not reconized\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nonly use components tab in console of chrome.\r\n\r\n**What is the expected behavior?**\r\n\r\nsee any elements react\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWindow 10 64bit\r\nreact ^16.8.1\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)\r\n\r\nThis is my console component visualizzation, the same page visualizated with linux&chrome not have any issue",
        "title": "Components not correctly displayed",
        "labels": "Type: Question",
        "id": 46139
    },
    {
        "body": "I thought it was always the case, that first, child's `componentDidMount` would be called, and then, parent's.\r\n\r\nHowever, in this example: https://codesandbox.io/s/tender-jones-gpkz3\r\n\r\nFirst parent's `componentDidMount` is called, then Child's (check the logs).\r\n\r\nThis happens _after_ I use this in child:\r\n\r\n```\r\nexport default compose(\r\n  withStyles(styles),\r\n  withWidth()\r\n)(Child);\r\n\r\n```\r\n\r\nDoes anyone have explanation why this happens?",
        "title": "Why does parent's componentDidMount gets called first, then child's?",
        "labels": "Type: Question",
        "id": 46140
    },
    {
        "body": "I wonder whether is it in the plan to do the inverse of hiding components that match the filters, which is \"show only components where match the filters\"?\r\n\r\nI am currently doing a negative lookahead regex filter to achieve the behavior: https://twitter.com/lihautan/status/1174239606612647941. \r\n\r\nI am willing to work on it if this is a good feature to have.",
        "title": "DevTools: \"Show only components where...\" instead of just \"Hide components where\"",
        "labels": "Type: Question",
        "id": 46141
    },
    {
        "body": "In one of talks about react Suspense [dan mentioned](https://youtu.be/6g3g0Q_XVb4?t=1650) that `<div hidden={true} />` would be deprioritized by react but still rendered if it has the time.\r\n\r\nIn his example he used it to prerender content that was seemingly part of another page. However in another talk by andrew it was used to [prerender tabs](https://youtu.be/ByBPyMBTzM0?t=1742). The second showcase is incorrect according to the [living standard for this attribute](https://html.spec.whatwg.org/multipage/interaction.html#the-hidden-attribute):\r\n\r\n> The hidden attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use hidden to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation \u2014 one could equally well just show all the form controls in one big page with a scrollbar.\r\n\r\nI don't necessarily agree with the reasoning given in the spec but I'm more interested if the core team is aware of this conflict and if there are plans to resolve this somehow or simply ignore it.",
        "title": "Plans for handling `hidden` differently",
        "labels": "Type: Question",
        "id": 46142
    },
    {
        "body": "I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here.\r\n\r\nImagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**:\r\n\r\n    onClick(){\r\n    \r\n      let data = this.state.data;\r\n      API.makeRequest(\"URL\", data);\r\n    \r\n    }\r\n\r\n[Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date).\r\nHowever he says this applies to react 16.\r\n\r\nOtherwise he suggests to use functional `setState` to get current state.\r\n\r\nI have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don't want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn't be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this:\r\n\r\n \r\n\r\n    onClick(){\r\n        \r\n       this.setState(ps=>{ \r\n            // using this form only to read current state in event handler which works for 16 and onwards versions probably\r\n            // but this breaks purity of this function\r\n            API.makeRequest(\"URL\", ps.data);\r\n            return {};\r\n       })\r\n        \r\n    }\r\n\r\nbut then I would violate that the function passed to functional `setState` must be pure.\r\n\r\nIs there a solution to the question I asked?\r\n\r\n  [1]: https://stackoverflow.com/a/43440790/3963067",
        "title": "Read latest state value in event handler",
        "labels": "Type: Question",
        "id": 46143
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nIf you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "title": "Add third parameter to useState to get current value",
        "labels": "Type: Question",
        "id": 46144
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhere is no way to collapse/expand component tree or it subtrees. \r\n\r\nIf I pick element with \"Select element\" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don't found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels. \r\n\r\nMaybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand. \r\n\r\n![image](https://user-images.githubusercontent.com/848985/64634574-396f5280-d406-11e9-9cb8-1630e2edef5e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/848985/64634564-307e8100-d406-11e9-8d3d-1a97c9f3b77b.png)\r\n\r\nAlso I guess it maybe good place to add https://github.com/facebook/react/issues/16463\r\n",
        "title": "DevTools: Component tree navigation",
        "labels": "Type: Question",
        "id": 46145
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nThe following command fails\r\n```\r\nyarn run test:chrome \r\n```\r\nerror message:\r\n```                                                                               \ue0b2 \r\nyarn run v1.17.3\r\n$ node ./shells/chrome/test\r\ninternal/validators.js:112\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'string', value);\r\n    ^\r\n\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"file\" argument must be of type string. Received type object\r\n    at validateString (internal/validators.js:112:11)\r\n    at normalizeSpawnArguments (child_process.js:398:3)\r\n    at spawn (child_process.js:534:16)\r\n    at launchChrome (/home/andrei/src/react-devtools/node_modules/chrome-launch/index.js:27:12)\r\n    at Object.<anonymous> (/home/andrei/src/react-devtools/shells/chrome/test.js:9:1)\r\n    at Module._compile (internal/modules/cjs/loader.js:936:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)\r\n    at Module.load (internal/modules/cjs/loader.js:790:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:703:12)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:999:10)\r\nerror Command failed with exit code 1.\r\n```\r\n\r\n**What is the expected behavior?**\r\nLaunch a new browser window. The following command works\r\n```\r\nyarn run test:firefox \r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing Version 76.0.3809.100 (Official Build) (64-bit), /usr/bin/google-chrome-stable is aliased to chrome.\r\n\r\nAny help is appreciated, we're running a old version of React at work and upgrading it would be nontrivial. Hence I need the old version of the React DevTools.",
        "title": "React DevTools downgrade not working for Chrome.",
        "labels": "Type: Question",
        "id": 46146
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "title": "There is no 'rendered by' section in my extension",
        "labels": "Type: Question",
        "id": 46147
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I get a component stack trace, the log trace comes from the dev tools extension:\r\n\r\n![image](https://user-images.githubusercontent.com/12100/64210499-4d401500-ce58-11e9-87f5-b0c9115fe62f.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nI use that trace usually to click and set a debugger so I can debug some React internals.\r\n",
        "title": "[Dev Tools] Chrome component console errors get output from \"backend.js\"",
        "labels": "Type: Question",
        "id": 46148
    },
    {
        "body": "Hi.\r\n\r\nI have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.\r\n\r\nHow do I change the default browser for devtools to Firefox?",
        "title": "React devtools always launches in Chrome",
        "labels": "Type: Question",
        "id": 46149
    },
    {
        "body": "Reporting a bug:\r\n\r\nThe current behaviour is that setTimeout, inside a render method, is producing a random number, for no explained reason. The number persist after the setTimeout has gone off, and the setTimeout still produces the desired effect, for example, if it was to log something the console, it would still do that.\r\n```jsx\r\n// sample code\r\n\r\n(not the original code in which the problem occurred, but I was able to reproduce the problem in codesandbox.io):\r\n\r\n** start of code example **\r\n(styles.css = \r\n    .App {\r\n        font-family: sans-serif;\r\n        text-align: center;\r\n    }\r\n)\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n      {setTimeout(() => console.log(\"hello world\"), 3000)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n/* (output of webpage) */\r\n\r\nHello CodeSandbox\r\nStart editing to see some magic happen!\r\n5\r\n\r\n** end of code **\r\n\r\nThe expected behaviour was that the setTimeout function would produce no trace of any text, whilst still working.\r\n\r\nIt is present in react version 16.9.0",
        "title": "Inline setTimeout within the render causes a random number to appear on screen.",
        "labels": "Type: Question",
        "id": 46150
    },
    {
        "body": "This isn't technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead.\r\n\r\nI have a fairly \"edgy\" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively).\r\n\r\nExample:\r\n```jsx\r\n<Accordion> <!-- provided by host app -->\r\n    <!-- provided by separate plugin -->\r\n    <AccordionItem label=\"item 1\">Content</AccordionItem>\r\n    //...\r\n</Accordion>\r\n```\r\n\r\nThus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user.\r\n\r\nThis worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do.\r\n\r\nAs stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I'd like to avoid being stuck on React 16, when that happens.\r\n",
        "title": "Limitations of context API compared to legacy implementation",
        "labels": "Type: Question",
        "id": 46151
    },
    {
        "body": "I am experimenting with migrating some of my class components to Hooks. My use case is explained in detail [here](https://stackoverflow.com/questions/57722818/idiomatic-react-with-heavy-dom-manipulation-mathjax), but I can quickly explain the idea.\r\n\r\nI have a class component `<MJX>` which exposes a `.ready` Promise. Since `<MJX>` produces a `<span>` element, I guess I can use the `useImperativeHandle` hook to attach `.ready` to the ref I use for the `<span>`. This is no problem.\r\n\r\nHowever, I also have a class component `<RenderGroup>` which uses `React.Children` to collect the `.ready` Promises from all its `<MJX>` descendants, and exposes `Promise.all` of that array of Promises as its own `.ready` value. Since `<RenderGroup>` does not produce any markup of its own, and you can't place refs on `<React.Fragment>`, I don't see how to use`useImperativeHandle` here: there's nowhere to attach the ref.\r\n\r\nHere is the relevant code:\r\n\r\n```tsx\r\nexport class RenderGroup extends React.Component {\r\n  private promises: Promise<void>[];\r\n\r\n  ready: Promise<void>;\r\n\r\n  componentDidMount() {\r\n    this.ready = Promise.all(this.promises).then(() => {});\r\n  }\r\n\r\n  render() {\r\n    this.promises = [];\r\n\r\n    return recursiveMap(this.props.children, node => {\r\n      if (shouldInspect(node)) {\r\n        const originalRef = node.ref;\r\n        return React.cloneElement(node, {\r\n          ref: (ref: MJX) => {\r\n            if (!ref) return;\r\n            this.promises.push(ref.ready);\r\n            if (typeof originalRef === \"function\") {\r\n              originalRef(ref);\r\n            } else if (originalRef && typeof originalRef === \"object\") {\r\n              (originalRef as React.MutableRefObject<MJX>).current = ref;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n}\r\n\r\nfunction shouldInspect(node: ReactNode): node is React.ReactElement & React.RefAttributes<MJX> {\r\n  return React.isValidElement(node) && typeof node.type === \"function\" && node.type.prototype instanceof MJX;\r\n}\r\n\r\nexport function recursiveMap(\r\n  children: ReactNode,\r\n  fn: (child: ReactNode) => ReactNode\r\n) {\r\n  return React.Children.map(children, (child) => {\r\n    if (!React.isValidElement(child)) {\r\n      return child;\r\n    }\r\n\r\n    if (\"children\" in child.props) {\r\n      child = React.cloneElement(child, {\r\n        children: recursiveMap(child.props.children, fn)\r\n      });\r\n    }\r\n\r\n    return fn(child);\r\n  });\r\n}\r\n```",
        "title": "Can't use instance values without refs",
        "labels": "Type: Question",
        "id": 46152
    },
    {
        "body": "This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nerror message of `batch.commit()` is confusing\r\n\r\n**What is the current behavior?**\r\n\r\nI was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit [which doesn't seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`\r\n\r\n```js\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = ReactDOM.unstable_createRoot(rootElement);\r\n\r\nroot.render(<App />).then(() => {\r\n  const batch = root.createBatch();\r\n\r\n  batch.render(<App />);\r\n  // bad\r\n  batch.commit();\r\n  setTimeout(() => {\r\n    // good\r\n    //batch.commit()\r\n  }, 0);\r\n  batch.then(() => {\r\n    // good\r\n    //batch.commit();\r\n  });\r\n});\r\n\r\n```\r\n\r\nThree things I noticed:\r\n1. seems like I need to call batch.commit after the batch is complete. Changing it to \r\n```\r\nbatch.then(() => {\r\n  // good\r\n  batch.commit();\r\n});\r\n```\r\ngot rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.\r\n\r\n2. \"lifecycle\" should be replaced with something different before these APIs get stable since we try to get away from this mental model. \r\n\r\nFor example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would've expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.\r\n\r\n3. Not all lifecycles are \"during rendering\" as far as I know. `componentDidUpdate` is called during commit.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/dreamy-wood-dvzrp\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm basically asking when it's safe to call `batch.commit`: \r\n* [ ] during render phase\r\n* [ ] during commit phase \r\n* [ ] outside of these phases e.g. in some `onComplete` callback \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react(-dom)@16.9.0`\r\n",
        "title": "Error message when calling work.commit in commit phase",
        "labels": "Type: Question",
        "id": 46153
    },
    {
        "body": "Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20\r\n\r\n> **Me:**\r\n> I have this hook:\r\n> ```require(\"react-reconciler\")(hostConfig).injectIntoDevTools(opts);```\r\n> But HMR has always worked completely without it. Is this now a new requirement?\r\n\r\n> **Dan:**\r\n> Yes, that's what the new mechanism uses. The new mechanism doesn't need \"react-hot-loader\" so by the time you update, you'd want to remove that package. (It's pretty invasive)\r\n\r\nI can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(\"react-hot-loader/root\").hot` method), how should we set up apps for HMR in:\r\n\r\n* React DOM apps\r\n* React Native apps\r\n* React custom renderer apps\r\n\r\nI'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`.\r\n\r\nAlso, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?",
        "title": "How should we set up apps for HMR now that Fast Refresh replaces react-hot-loader?",
        "labels": "Type: Question",
        "id": 46154
    },
    {
        "body": "**Request for feature**\r\nThe older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn't find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?\r\n",
        "title": "Devtools V4: Breadcrumbs are removed?",
        "labels": "Type: Question",
        "id": 46155
    },
    {
        "body": "### issue type\r\nbug\r\n\r\n### issue description\r\nlook at the code blow (it is very very very simple).\r\n```jsx\r\nimport React, { useState } from 'react';\r\n\r\nexport default function DemoCounter() {\r\n  const [fnWrapper] = useState('fn');\r\n  const [count, setCount] = useState(0);\r\n  fnWrapper.__proto__.setCount = s => {\r\n    setCount(s);\r\n  }\r\n\r\n // assign fnWrapper.__proto__.setCount to callSetCount\r\n  const callSetCount = fnWrapper.__proto__.setCount;\r\n\r\n  return (\r\n    <div style={{ border: '1px solid blue', margin: '8px' }}>\r\n      count: {count}\r\n      {/* this does not work if I open react-dev-tool and click the dom node */}\r\n      <input value={count} onChange={e => fnWrapper.__proto__.setCount(e.currentTarget.value)} />\r\n\r\n       {/* this always works not matter I open react-dev-tool and click the dom node or not */}\r\n      <input value={count} onChange={e => callSetCount(e.currentTarget.value)} />\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n### why callSetCount always works but `fnWrapper.__proto__.setCount` not if and only if after I open the react-dev-tool and click the dom node ~~~~(>_<)~~~~\uff0c\r\n\r\n### please tell me the truth.\r\n",
        "title": "hook component can not been clicked in react-dev-tool if you want it works well.",
        "labels": "Type: Question",
        "id": 46156
    },
    {
        "body": "I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history. \r\n\r\nI couldn't find any explanations or reference in the changelog, so I opened this issue.",
        "title": "Why does DevTool Chrome Extension need access to history?",
        "labels": "Type: Question",
        "id": 46157
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nbug: highlight element is no available in ver 4+ react debugger\r\nfeature: new version of react develop is good, bug sometimes i need legacy version of develop tool(i jest need BOTH of them), can you provide both of them?\r\n",
        "title": "is that possible to get legacy version of react debugger?",
        "labels": "Type: Question",
        "id": 46158
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReporting a bug, or at least trying to understand some spooky behavior \ud83d\udc7b\r\n\r\n**What is the current behavior?**\r\n\r\nI have a simple component which reads from a toy suspense-enabled cache. The dummy cache simply waits 100ms before responding to anything.  The cache key is based on some component state (managed with the useState hook). This component is wrapped with `<Suspense>` and rendered in a React root with concurrent mode enabled. \r\n\r\n```javascript\r\nfunction MyApp(){\r\n    let [text, setText] = React.useState('stuff')\r\n    return <div>\r\n        Data: {readCacheSuspense(text)}\r\n        <button onClick={e => setText('B-A-N-A-N-A-S')}>Update text from button</button>\r\n        <input type=\"text\" value={text} onChange={e => setText(e.target.value)} />\r\n    </div>\r\n}\r\n\r\nReactDOM.unstable_createRoot(document.getElementById('root')).render(<React.Suspense fallback={<div>cause i ain't no fall-a-back div</div>}>\r\n    <MyApp />\r\n</React.Suspense>)\r\n```\r\n\r\nThe component has a text field whose value is set to the current cache key (with an onChange handler that updates the useState hook when the text changes). It also has a button which updates the state to some fixed string \"asdf\" when clicked. \r\n\r\nClicking the button does what I would expect\u2014 the page doesn't respond for a fraction of a second (while the data is being \"fetched\") and then updates with a view of the loaded data. \r\n\r\n**Editing the text however (for instance, typing a single letter in the field) immediately causes the fallback UI to load and unfocuses the text input**. This happens even if the `setTimeout` is changed to 0ms, or `requestAnimationFrame`, or a `setImmediate` polyfill. \r\n\r\nRather than directly calling `setText` within the `onChange` handler\u2014\u00a0if I call it within a `setTimeout(..., 0)`, it behaves the way I would expect (i.e. without unfocusing the field and loading fallback). \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/competent-goldwasser-yhmxo\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that it shouldn't really matter whether I'm updating state from an `onChange` versus an `onClick`. \r\n\r\nI would expect that the fallback UI doesn't show up until its max duration is met.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using React 16.8.6. I tested it on Chrome 75 on macOS 10.14.",
        "title": "Suspense + Concurrent Mode immediately shows fallback when updated from onChange",
        "labels": "Type: Question",
        "id": 46159
    },
    {
        "body": "First attempt was:\r\n```javascript\r\nconst setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n}\r\n\r\nuseEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            setField(args);\r\n        });\r\n}, []);\r\n```\r\n\r\nI have  the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'setField'. Either include it or remove the dependency array\r\n\r\nIf I follow what the lint says:\r\n```javascript\r\nconst setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n}\r\n\r\nuseEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            setField(args);\r\n        });\r\n }, [setField]);\r\n```\r\n\r\nI have another error:\r\n\r\n> Line 58:  The 'setField' function makes the dependencies of useEffect Hook (at line 72) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook\r\n\r\nThen I follow the advise again:\r\n\r\n```javascript\r\n    const setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n    }\r\n\r\n    const myCallback = useCallback(() => setField, []);\r\n\r\n    useEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            myCallback(args);\r\n        });\r\n    }, [myCallback]);\r\n```\r\n\r\nThen the error is:\r\n\r\n> Line 68:  React Hook useCallback has a missing dependency: 'setField'. Either include it or remove the dependency array\r\n\r\nAnd then the code:\r\n\r\n```javascript\r\n    const setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n    }\r\n\r\n    const myCallback = useCallback(() => setField, [setField]);\r\n\r\n    useEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            myCallback(args);\r\n        });\r\n    }, [myCallback]);\r\n```\r\n\r\nthen the error\r\n\r\n> Line 58:  The 'setField' function makes the dependencies of useCallback Hook (at line 68) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook\r\n\r\nAm I doing something wrong?\r\n\r\nThanks!\r\n",
        "title": "Infinite lint error of react-hooks/exhaustive-deps",
        "labels": "Type: Question",
        "id": 46160
    },
    {
        "body": "Wrapping a component in a function, returning the component.\r\n\r\n\r\ntl;dr\r\n```javascript\r\nexport function Home() {\r\n    return function() {\r\n        const [ items, setItems ] = useState([])\r\n        return <div>nothing</div>\r\n    } \r\n}\r\n\r\nconst root = document.getElementById('root')\r\nReactDOM.render(React.createElement(Home()), root)\r\n```\r\n\r\nResults in the following error:\r\n\r\n```\r\nReact Hook \"useState\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function\r\n```\r\n\r\nHowever this works:\r\n\r\n```javascript\r\nexport function Home() {\r\n        const [ items, setItems ] = useState('')\r\n        return <div>nothing</div>\r\n}\r\n\r\nconst root = document.getElementById('root')\r\nReactDOM.render(React.createElement(Home), root)\r\n```\r\n\r\n",
        "title": "[eslint-plugin-react-hooks]: Can't call hooks on component returned from function",
        "labels": "Type: Question",
        "id": 46161
    },
    {
        "body": " I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am \"doing it wrong\".\r\n\r\n**What is the current behavior?**\r\n\r\nThe only way I can observe the results of state changes I initiate is by using a timeout.\r\n\r\n**Paste the link to your JSFiddle or CodeSandbox example below:**\r\n\r\nhttps://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1\r\n\r\n**What is the expected behavior?**\r\n\r\nWhat I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous. \r\n\r\nI created an example (https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1) wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`.\r\n\r\nBelow is a log of the [steps I take](https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1), showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view. \r\n\r\n```\r\n1. before act/render:   seenByRender: null, calculated: null, seenByEffect: null\r\n2. after act/render:    seenByRender: 0,    calculated: null, seenByEffect: 0\r\n3. ---incrementing with act/setState---\r\n4. after act/increment: seenByRender: 0,    calculated: 1,    seenByEffect: 0\r\n5. after timeout:       seenByRender: 1,    calculated: 1,    seenByEffect: 1\r\n```\r\n\r\nWhat I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6, using unstable_ConcurrentMode\r\n",
        "title": "Understanding `act` behaviour",
        "labels": "Type: Question",
        "id": 46162
    },
    {
        "body": "Hi. I have a recurring scenario that I\u2019ve been struggling with since the good old days of `componentWillReceiveProps`, and now I\u2019ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is.\r\n\r\n### Problem description - starting point\r\n\r\nI have a list of items. Every item has an Edit button next to it. Clicking it opens an \u201cEditor\u201d, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The \u201cparent\u201d component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on \u201cEdit\u201d for a specific item would set the `itemUnderEdit` to the clicked item.\r\n\r\n![usecase](https://user-images.githubusercontent.com/5010901/56883590-6cbcd080-6a67-11e9-9401-bd44e1747bc2.gif)\r\n\r\nHere is the full example with all 3 solutions on CodeSandbox: https://codesandbox.io/s/2oz2nzynpy\r\n\r\n### Solution 1\r\n\r\nMake the \u201cEditor\u201d component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard \u201ckeep your state close to where it is used\u201d advice, which also seems reasonable, since I don\u2019t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props.\r\n\r\n### Solution 2\r\n\r\nMake the \u201cEditor\u201d component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the \u201cReact\u201d way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful \u201cblackbox\u201d-component that tracks its own state seems reasonable.\r\n\r\nIn order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea:\r\n```\r\nconst [name, setName] = useState(props.item.name);\r\nconst [description, setDescription] = useState(props.item.description);\r\n```\r\n\r\nMoreover, this solution is buggy from the start, since clicking on Edit for a different item doesn\u2019t \u201cre-sync\u201d the props with the state - it only works if I close the Editor and then reopen it:\r\n\r\n![stateful_editor1](https://user-images.githubusercontent.com/5010901/56877667-e2b53d80-6a4f-11e9-8f4c-6a52fa175abd.gif)\r\n\r\nWhich brings us to Solution 3.\r\n\r\n### Solution 3\r\n\r\nThis one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this).\r\nThe \u201cold\u201d ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the \u201cdependency\u201d, since I want to run it when the item changes.\r\n\r\n```\r\nuseEffect(() => {\r\n  if (props.item.name !== name) {\r\n    setName(props.item.name);\r\n  }\r\n  if (props.item.description !== description) {\r\n    setDescription(props.item.description);\r\n  }\r\n}, [props.item]);\r\n```\r\n\r\nThis seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array  react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn\u2019t be able to change anything in the inputs, so how come I get this warning?\r\n\r\n### Summary\r\n\r\nThis is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it\u2019s difficult to know how to implement correctly and safely in a consistent way*.\r\n\r\nLifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a \u201ctemporary\u201d solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle.\r\n\r\nThe second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug? ",
        "title": "useEffect for synchronizing state and props",
        "labels": "Type: Question",
        "id": 46163
    },
    {
        "body": "\r\nWhat is the license for the tutorials and examples on https://reactjs.org?",
        "title": "License for Source Code Examples & Tutorials on https://reactjs.org",
        "labels": "Type: Question",
        "id": 46164
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n   bug\r\n**What is the current behavior?**\r\n `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps`\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16\r\n\r\n\r\nHi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully`\r\n\r\nbelow is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work \r\n\r\nhow can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)\r\n\r\n[jsfiddle working example ](https://jsfiddle.net/munsp36f/)\r\nrequirement:\r\n\r\n  On click of the button show `Notificationcard`\r\n  On click on close hide `Notificationcard`\r\n\r\n```jsx\r\nclass Notification extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: true\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState({ open: props.show });\r\n    // setTimeout(this.handleClick.bind(this), 8000);\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    //setTimeout(this.handleClick.bind(this), 8000);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.open) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        <div>Item saved successfully</div>\r\n        <div className=\"cls--btn\" onClick={() => this.handleClick()}>\r\n          &#10006;\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Test extends React.Component {\r\n  handleClick() {\r\n    this.setState({ show: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.handleClick.bind(this)}>click</button>\r\n        <Notification show={true} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<Test name=\"World\" />, document.getElementById(\"container\"));\r\n```",
        "title": "`static getDerivedStateFromProps()` does not works same as componentWillReceiveProps  ",
        "labels": "Type: Question",
        "id": 46165
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**bug**\r\n\r\n**What is the current behavior?**\r\n\r\nThe hooks created in children function provided in defaultProps populates error `react-hooks/rules-of-hooks`.\r\n\r\n```js\r\nconst App = props => props.children(props);\r\n\r\nApp.defaultProps = {\r\n  children: props => {\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n      <>\r\n        count: {count}\r\n        <button onClick={() => setCount(count + 1)}>Increment</button>\r\n      </>\r\n    );\r\n  },\r\n};\r\n```\r\n\r\n`React Hook \"useState\" is called in function \"children\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks\r\n`\r\n\r\nhttps://codesandbox.io/s/v60mm6yvx0\r\n\r\n**What is the expected behavior?**\r\n\r\nHooks inside children function in defaultProps should not create an error when hook is used. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nSame as in the codesandbox.\r\n```\r\n\"dependencies\": {\r\n  \"react\": \"16.8.6\",\r\n  \"react-dom\": \"16.8.6\",\r\n  \"react-scripts\": \"3.0.0\"\r\n},\r\n```",
        "title": "[eslint-plugin-react-hooks]: bug React Hook \"XXX\" is called in function \"children\"",
        "labels": "Type: Question",
        "id": 46166
    },
    {
        "body": "_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._\r\n\r\nConsider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback.\r\n\r\nNotifying the user can be done imperatively:\r\n\r\n```js\r\nfunction Component(props) {\r\n  const [ data, setData ] = useState(null);\r\n\r\n  useApi(\"/api/data\")\r\n    .then(setData)\r\n    .then(props.onFetched);\r\n\r\n  return dataToElements(data);\r\n}\r\n```\r\n\r\nor declaratively using an effect hook:\r\n\r\n```js\r\nfunction Component(props) {\r\n  const [ data, setData ] = useState(null);\r\n\r\n  useApi(\"/api/data\")\r\n    .then(setData);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      props.onFetched();\r\n    }\r\n  }, [ data ]);\r\n\r\n  return dataToElements(data);\r\n}\r\n```\r\n\r\nReact seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around.\r\n\r\nI would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better. ",
        "title": "Declarative vs. imperative coding style using Hooks",
        "labels": "Type: Question",
        "id": 46167
    },
    {
        "body": "```jsx\r\nexport const useConfigStateHook = () => {\r\n  const [visible, setVisible] = useState('hidden')\r\n  const [cofigVisible, setCofigVisible] = useState(false)\r\n  const [card, setCard] = useState(<div />)\r\n\r\n  useEffect(() => {\r\n    eventProxy.on('setConfigBtn', (value) => {\r\n      setVisible(value)\r\n    })\r\n    eventProxy.on('setConfigOpen', (value) => {\r\n      setCofigVisible(value ? false : !cofigVisible)\r\n    })\r\n    eventProxy.on('setCard', (card) => {\r\n      const { Ichart, props } = card\r\n\r\n      if (!Ichart) return setCard(<div />)\r\n\r\n      setCard(\r\n        <Ichart\r\n          ref={(e) => {\r\n            e && eventProxy.trigger('chartref', e)\r\n            e &&\r\n              setTimeout(() => {\r\n                eventProxy.trigger('setConfigView', e.renderConfig())\r\n              }, 200)\r\n          }}\r\n          {...props}\r\n        />\r\n      )\r\n    })\r\n    return () => {\r\n      eventProxy.off('setCard')\r\n      eventProxy.off('setConfigBtn')\r\n      eventProxy.off('setConfigOpen')\r\n      eventProxy.off('setConfigView')\r\n    }\r\n  })\r\n\r\n  return { visible, cofigVisible, card }\r\n}\r\n```\r\n",
        "title": "why useffect  run  return( )  at  frist",
        "labels": "Type: Question",
        "id": 46168
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWith the new `act` function, I'm unsure how to test state transitions that occur _during_ an event handler processing. For example if I have this handler that is called on form submission:\r\n\r\n```\r\nconst [isSubmitting, setIsSubmitting] = useState(false);\r\nconst handleSubmit = async () => {\r\n  setIsSubmitting(true);\r\n  await fetcher();\r\n  setIsSubmitting(false);\r\n};\r\n\r\n```\r\nthen I want to be able to test that `isSubmitting` state is indeed set to true before `fetcher` is called.\r\n\r\nDue to the nature of `act` (I believe it defers all state changes until after its provided function has been run) I'm not sure that this is currently possible?\r\n\r\nPreviously I've been testing using `await new Promise(setTimeout)` to flush the current runtime task queue, which works fine for this use case.\r\n\r\nI _have_ found a way to make this work without triggering the `act` warning, but it feels like a hack. I have to wrap `act` around my expectation, not the submit.\r\n\r\n```\r\nit('displays indicator when form is submitting', async () => {\r\n  ReactTestUtils.Simulate.submit(form());\r\n  await act(async () => {\r\n    expect(container.querySelector('.submittingIndicator')).not.toBeNull();\r\n  });\r\n});\r\n```\r\n\r\nI've provided this test in a repo together with a couple of other tests which complete the feature - see the link below.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://github.com/dirv/react-act-toggle-state\r\n\r\n**What is the expected behavior?**\r\nThere's a way for me to test this which doesn't feel like a hack.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.9.0-alpha.0",
        "title": "How to test multiple state changes with act?",
        "labels": "Type: Question",
        "id": 46169
    },
    {
        "body": "I am currently using workbox along with webpack. The app shell url is /app-shell. I tried following 2 approaches:\r\n\r\n1. In server.js, I created a dedicated route to handle /app-shell URL.\u2028\u2028\r\n\r\n   ```javascript\r\n   server.get('/app-shell', (request, response) => {\r\n  \tresponse.set('content-type', 'text/html');\r\n\tresponse.write(`<!DOCTYPE html>\r\n\t     \u2026\u2028\r\n            <body>\r\n               <div id=\"root\"></div>\r\n               <script src=\"js/client.js\"></script>\r\n               <script src=\"js/vendor.js\"></script>\r\n              <script>\r\n                 if ('serviceWorker' in navigator) {\r\n                    window.addEventListener('load', () => {\r\n                   navigator.serviceWorker\r\n                  .register('/service-worker.js', { scope: '/' })\r\n                  .then((registration) => {\r\n                      console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n                })\r\n                .catch((registrationError) => {\r\n                    console.log('SW registration failed: ', registrationError);   \r\n                });\r\n            });\r\n          }\r\n         </script>\r\n      </body>\t\t\r\n       `);\r\n   });\u2028\u2028\r\n   ```\r\n2. Second approach, I created a route /app-shell which corresponds to an element with content \u201cLoading\u2026\u201d.\u2028\u2028\r\n\r\n  ```javascript\r\n   const AppShellComponent: React.FC<{}> = (): JSX.Element => (\r\n  \t<main>\r\n   \t     Loading...\r\n        </main>\r\n  );\r\n  ```\r\n\r\n\u2028\u2028In both cases, I get the above mismatch warning. If I make AppShellComponent exactly same as HomeComponent i.e. path /, then the error goes away if the app is invoked from the home page path i.e. / . However, if any other route is invoked, the warning comes back again. Please suggest a better approach. Thanks.\r\n",
        "title": "Using app shell architecture throws Warning: Expected server HTML to contain a matching <div> in <div>.",
        "labels": "Type: Question",
        "id": 46170
    },
    {
        "body": "It seems that in react@16 every React element children contains cyclic property `._owner.alternate.alternate.alternate.alternate`....\r\n\r\n![image](https://user-images.githubusercontent.com/19988985/56009001-c2c41100-5d10-11e9-839f-b4a4a608cf86.png)\r\n\r\nSo it is easy to cause \"Maximum call stack exceeded\" error when developer compares `props.children` in deep way(like [deep-equal](https://www.npmjs.com/package/deep-equal)).\r\n\r\nThis caused bugs for community libraries like [react-helmet](https://github.com/nfl/react-helmet): \r\nhttps://github.com/nfl/react-helmet/issues/441\r\n\r\nI am extremely curious about:\r\nWhy React has `_owner.alternate`, and what it stands for?\r\nAs it is named as \u201c_owner\u201d, could it be better if we make \u201cowner\u201d not enumerable?\r\n\r\nI tried to search source code and but still can\u2019t find any clue.\r\n\r\nThanks in advance.",
        "title": "[Question] about \"._owner.alternate\"",
        "labels": "Type: Question",
        "id": 46171
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nI want to report a bug.\r\n\r\n**What is the current behavior?**\r\nCurrently when valid functional component is passed to **TestUtils.renderIntoDocument** it returns a **null** and raise no error.\r\n\r\n**Demo**\r\nThis behavior was reproduced in a sandbox: https://codesandbox.io/s/1zpvll4j24\r\n\r\nCheck the console, to see **TestUtils.renderIntoDocument** output of prepared sample components.\r\n\r\n**Workarounds**\r\nWorkaround that satisfies both SFC and FC is wrapping component into container:\r\n```\r\nconst FCCounter = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <div>{count}</div>\r\n      <button onClick={() => setCount(count + 1)}>+1</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nTestUtils.renderIntoDocument(\r\n  <div>\r\n    <FCCounter />\r\n  </div>\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n- To render a functional component.\r\n- In worst case - providing an error.\r\n\r\n**Which versions of React are affected by this issue?**\r\nReact version: 16.8.6\r\n",
        "title": "TestUtils.renderIntoDocument returns `null` when valid functional component passed.",
        "labels": "Type: Question",
        "id": 46172
    },
    {
        "body": "*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nI have a hook that is supposed to call a callback after a `setTimeout`. When I render a list of children with this hook, the callback behaves differently when its in a function component with `useState` than it does if its in a class component.\r\n\r\nTo see this in action, checkout the codesandbox below. The demo should show children components being added to the page and then after 2 seconds the child is mounted, it should be removed. Both the examples use the same child components, only difference is the parent component being a class vs functional component.\r\n[CodeSandbox](https://codesandbox.io/s/01yo61v6m0)\r\n\r\n**What is the expected behavior?**\r\n\r\nThe function component should behave like the class component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.6\r\nLatest Chrome\r\n\r\nUnsure if this worked with previous versions of hooks.\r\n",
        "title": "useState causing children to re-mount?",
        "labels": "Type: Question",
        "id": 46173
    },
    {
        "body": "1) When using useEffect, can not get latest state. \r\n\r\nFor example, I add a event listener in componentDidMount.\r\n```\r\nconst App = () => {\r\n    const [state1, setState1] = useState('state1');\r\n    const [state2, setState2] = useState('state2');\r\n    useEffect(() => {\r\n        function handler() {\r\n            // can't get the latest state1 and state2 because of the scope.\r\n        }\r\n        document.addEventListener('click', handler);\r\n        return () => document.removeEventListener('click', handler);\r\n    }, [])\r\n}\r\n```\r\nI have to change code into this:\r\n```\r\nconst App = () => {\r\n    const [state1, setState1] = useState('state1');\r\n    const [state2, setState2] = useState('state2');\r\n    useEffect(() => {\r\n        function handler() {\r\n            // for the reason of scope, can't get the latest state1 and state2.\r\n        }\r\n        document.addEventListener('click', handler);\r\n        return () => document.removeEventListener('click', handler);\r\n    }, [state1, state2])\r\n    ....\r\n}\r\n```\r\nproblem solved, but the effect executes again. (wasteful ???)\r\n\r\n2) functional props cause updating subComponent every time.\r\n\r\n```\r\nconst App = () => {\r\n    const [state, useState] = useState(0)\r\n\r\n    function handleChange() {\r\n      // do something\r\n    }\r\n    return (\r\n        <SubComponent  onChange={handleChange} />\r\n    );\r\n}\r\n```\r\nIn this case, SubComponent will update every time App rerender, because the onChange prop is Changed. If we need to use state or props in handleChange, we have nothing to do with it.(If we useCallback, see No.1, the lastest state issue).\r\n",
        "title": "react hooks: a few inconveniences",
        "labels": "Type: Question",
        "id": 46174
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n### onAnimationEnd creates unexpected behavior\r\n\r\nIn the following example, I am creating a simple notification component from an array. Each element in the array is used to generate a html element with a class that has a css animation on it. The generated div has an \"onAnimationEnd\" binding which will remove them from the array of notifications. The basic idea is that the notification will fade away (using a CSS animation) and then be removed from the array, or alternatively, I am also allowing the user to manually click on the notification element to remove it.\r\n\r\nThe interesting bug is as follows. If you add two notifications, the first one will trigger its onAnimationEnd and remove itself. The remaining notification will suddenly jump to the end of its css animation and never trigger its own onAnimationEnd. \r\n\r\nEven more curiously if you add four notifications, exactly two of them will have the above bug, while the other two function properly. In fact exactly half of the added elements will trigger onAnimationEnd properly, while the other half will not.\r\n\r\nThe onClick functionality to remove the notifications from the array does NOT cause any unexpected behavior, and thus I am forced to conclude that the fault lies with onAnimationEnd, since they both run the exact same function.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codepen.io/msorrentino/pen/xeVrwz\r\n\r\nClick the \"add notification\" button. Then press it again before the first element has faded (7 seconds) . You will notice that the second notification element gets \"fast forwarded\" to the end of its animation when the first notification is removed by its onAnimationEnd trigger. The second notification will then be stuck there, never triggering its own onAnimationEnd.\r\n\r\n**What is the expected behavior?**\r\n\r\nonAnimationEnd should trigger for each element in the loop properly.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCurrent version of 16.8.6 displays this behavior.\r\n",
        "title": "onAnimationEnd/onTransitionEnd Issues",
        "labels": "Type: Question",
        "id": 46175
    },
    {
        "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n  feature\r\n**What is the current behavior?**\r\nToday we use forwardRef as a HOC around functional component, like this:\r\n```js\r\nconst MyComponent = React.forwardRef((props, ref) => {\r\n  return (<div {...props} ref={ref}>Some text</div>);\r\n});\r\n\r\nMyComponent.displayName = 'MyComponent';\r\n```\r\n\r\n**What is the expected behavior?**\r\nIs it possible to use hooks to forward ref? For example, something like this:\r\n```js\r\nconst MyComponent = (props) => {\r\n  // will return ref that was passed from parent component\r\n  const forwardedRef = useForwardredRef(); \r\n  return (<div {...props} ref={forwardedRef}>Some text</div>);\r\n}\r\n```\r\nWith this approach we don't need to manually set displayName all the time, also this would be great for libraries, as you still export same component, not a forwardRef HOC.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8 and upper",
        "title": "Hook for forwardRef",
        "labels": "Type: Question",
        "id": 46176
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n bug\r\n**What is the current behavior?**\r\nUseEffect how to solve conditional paging list:\r\n    1. Reset the page number to 1 when the condition changes\r\n![image](https://user-images.githubusercontent.com/26135370/55459099-4c912180-5621-11e9-827c-1760fec8aa6b.png)\r\n    2. Request to return the current page and keep the current state\r\n![image](https://user-images.githubusercontent.com/26135370/55459127-5ca90100-5621-11e9-97a4-ba5ea642900f.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nProperly handle paging and conditions\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8    Previously treated in class form",
        "title": "UseEffect how to solve conditional paging list",
        "labels": "Type: Question",
        "id": 46177
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature (I believe)\r\n**What is the current behavior?**\r\nRight now, the effects in useEffect fire children-first. I know this makes sense, since the behaviour of the first render has a close correlation to cDm. However, I cannot seem to find a way to fire events parent-first. Before, I could do it with cWm, and after that was deprecated, in the constructor. How can I accomplish that with hooks?\r\n**CodeSandbox example:**\r\nhttps://codesandbox.io/s/035lqnozzl?fontsize=14\r\n**What is the use case?**\r\nImagine I want to post to an external server when two components were first rendered, to measure a sort of meaningful paint.\r\n```\r\n- Component A -> post(\"first render\"\", component: A)\r\n----\r\n--------\r\n------------ Component B -> post(\"first render\", component: B)\r\n```\r\nHow could I accomplish this with hooks?",
        "title": "useEffect firing in children before parent",
        "labels": "Type: Question",
        "id": 46178
    },
    {
        "body": "We are trying to use Hooks and we want to mimic componentDidMount but our eslint is responding with \"React Hook React.useEffect has a missing dependency: '_checkUser'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\"\r\n\r\nIf we add checkUser to the dependency in the useEffect we get: \"The '_checkUser' function makes the dependencies of useEffect Hook change on every render. Move it inside the useEffect callback. Alternatively, wrap the '_checkUser' definition into its own useCallback() Hook  react-hooks/exhaustive-deps\".\r\n\r\nIf we change the _checkUser to use useCallback eslint is responding with: \"React Hook React.useCallback has a missing dependency: '_handleUserState'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\".\r\n\r\nWhat is the correct way to solve this? Or should we ignore the warnings?\r\n\r\n```javascript\r\nfunction _handleUserState(respons) {\r\n      // Some code\r\n}\r\n\r\nfunction _checkUser() {\r\n       const response = someExternalFunction();\r\n       _handleUserState(response);\r\n}\r\n\r\nReact.useEffect(\r\n        () => {\r\n            _checkUser();\r\n        },\r\n        [] // Run once\r\n);\r\n```\r\n",
        "title": "Mimic componentDidMount but with hooks",
        "labels": "Type: Question",
        "id": 46179
    },
    {
        "body": "I have an object which is created via useMemo\r\n\r\nI do not want this object to be recreated every time a certain dependency changes, and yet I want it to always see the latest version of that dependency (not just what it was upon initial creation)\r\n\r\nCurrently, I'm doing something like this:\r\n\r\n```\r\n//bar changes between renders\r\nconst latestFoo = useRef(bar); \r\n\r\n//obj will only be created once, yet it sees the updated latestFoo\r\nconst obj = useMemo(() => ({\r\n doSomething: () => { \r\n    //use and/or set latestFoo.current \r\n  }\r\n}), [latestFoo]);\r\n```\r\n\r\nThis feels like a little bit of a lie... because it kindof depends on an updated `latestFoo.current`... not really `latestFoo` the ref, if that makes sense.\r\n\r\nYet it works fine as far as I can see....\r\n\r\nNot sure if I should feel bad about lying to `useMemo` about its deps, or if it's not really a lie at all and this is actually a totally expected use case of `useRef`\r\n\r\nAny tips are appreciated.\r\n\r\nP.S. this was prompted by refactoring my code after reading this page, which was an _enourmous_ help in understanding hooks and writing code that uses them more consciously:  https://overreacted.io/a-complete-guide-to-useeffect/\r\n\r\n@gaearon would you rather me post questions like this somewhere else? Didn't see a comment section on the site and I don't use twitter...",
        "title": "is passing a ref to useMemo considered cheating?",
        "labels": "Type: Question",
        "id": 46180
    },
    {
        "body": "After digging deeper with [this question](https://stackoverflow.com/questions/52553580/react-children-with-non-element-children), I have found `function as a child` is not being considered as **children**.\r\n\r\nTake this example:\r\n```\r\nclass CountExpression extends React.Component {\r\n  render() {\r\n    const children = React.Children.toArray(this.props.children)\r\n    console.log(children)\r\n    return <p>{React.Children.count(children)}</p>\r\n  }\r\n}\r\n<CountExpression>\r\n   {'one'}\r\n   {'two'}\r\n   { () => <p>Still, this will be ignored as child. Why?</p>}\r\n   <p>This will be included in array - that's fine</p>\r\n</CountExpression>\r\n```\r\n\r\nSo, I would like know why is it so? Is it a bug or an expected behavior?",
        "title": "Why function as child is not considered as children?",
        "labels": "Type: Question",
        "id": 46181
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n\r\n**What is the current behavior?**\r\nI'm creating a component swapper triggeredd by a interval. I had to use the useRef hook to keep the index state between renders, but it only gets updated when I keep a useState (the setCurrentIndex) is with it. When the setCurrentIndex at line 17 is removed, the swapper doesn't works.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nPlease check it out https://codesandbox.io/s/ooy2xrvxky\r\n\r\n**What is the expected behavior?**\r\nI tought that the indexRef wouldn't depend on the state hook to be updated.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.4, Chrome 72.0, Os Ubuntu 16.04.",
        "title": "useRef only updates with a useState together",
        "labels": "Type: Question",
        "id": 46182
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n- maybe bug?\r\n\r\n**What is the current behavior?**\r\n\r\nMy case is that I want to update state n times by adding different types of fields to the state and then render them. \r\nEvery updating of dom(adding new field) I have to check whether I should do something more by checking the hight of added elements, for example, add a break between elements. \r\nFields are represented by the tree structure of data, so I created the class which helps me with going through the tree of fields and I keep it in the class property.\r\n\r\nI know how many times I have to modify the DOM so It will be a fully controlled way of state update and it will finish after all fields are added to DOM but before I render all fields I am getting the error \"Maximum update depth exceeded\".\r\n\r\nDo you know How I can handle with such a problem? \r\nI found a solution by adding setTimeout on the way but I am not sure that is the clean solution?(commented code)\r\nIs it ok that I keep in component class property more complex class to manage structure of data?\r\n\r\nI am providing a simple example in codepage which shows the problem and throw the error.\r\n\r\nhttps://codesandbox.io/s/93w2lp37xw\r\n",
        "title": "\u00d7 Maximum update depth exceeded in controled way",
        "labels": "Type: Question",
        "id": 46183
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nHooks Clarification\r\n\r\n**What is the current behavior?**\r\nI'm trying to understand the lifecycle of `useState`.\r\n\r\nI have a mock application using a mock websocket. Every second, it sends a new message from the backend. The new message is meant to be appended to an array using `useState`. \r\n\r\nHere are a few different examples that highlight my confusion:\r\n\r\n**Example 1**\r\n[In this example](https://codesandbox.io/s/zz2lj8knyp), if I set the websocket's `onmessage` function once in `useEffect`, then whenever I call `setMessages` to update the `messages` array, the `messages` array I receive as an input is empty.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(messages.concat(JSON.parse(msg.data)));\r\n}\r\n\r\nuseEffect(function() {\r\n    if (_.isUndefined(socket)) {\r\n      let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n      ws.onmessage = receiveMsg;\r\n    }\r\n});\r\n```\r\n\r\nThe effect of this is that I only ever get the latest message in my array.\r\n\r\n**Example 2**\r\nIf, however, I set the `onmessage` function on every render [as in this example](https://codesandbox.io/s/73kr25mkrj), then I get my full array with data appended as I would expect.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(messages.concat(JSON.parse(msg.data)));\r\n}\r\n\r\nif (!_.isUndefined(socket)) {\r\n  socket.onmessage = receiveMsg;\r\n}\r\n\r\nuseEffect(function() {\r\n  if (_.isUndefined(socket)) {\r\n    let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n    ws.onmessage = receiveMsg;\r\n  }\r\n});\r\n```\r\n\r\nIn the `receiveMessage` function, my `messages` array is the whole array instead of an empty one in this example.\r\n\r\n**Example 3**\r\nBUT, if I assign a new reference to `messages`, [as in this example](https://codesandbox.io/s/j1n0py5zz3), and re-assign the value inside `receiveMsg`, then I don't have to re-assign the `onmessage` function over and over.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\nlet msgRef = messages;\r\n\r\nfunction receiveMsg(msg) {\r\n  msgRef = msgRef.concat(JSON.parse(msg.data));\r\n  setMessages(msgRef);\r\n}\r\n\r\nuseEffect(function() {\r\n  if (_.isUndefined(socket)) {\r\n    let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n    ws.onmessage = receiveMsg;\r\n  }\r\n});\r\n```\r\n\r\n**Example 4**\r\nBut, if I assign a new reference and don't re-assign to it, [as in this example](https://codesandbox.io/s/8pkwr86p29), I continue ending up with an empty array. This suggests it's the assignment back to `msgRef` that is keeping the entire array within the closure.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\nlet msgRef = messages;\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(msgRef.concat(JSON.parse(msg.data)));\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nMy original expectation was that example #1 would work. I can tell there's something I'm not totally understanding about the way the assignment of variables to closure works with this hook, but I'm struggling to define what exactly's going on. Can someone shed some light on why this works this way?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8",
        "title": "React Hooks useState updating an array",
        "labels": "Type: Question",
        "id": 46184
    },
    {
        "body": "This bug is pretty confusing:\r\n\r\nhttps://twitter.com/kentcdodds/status/1102659818660102145\r\n\r\nI think it happens because `fn` scheduled by `setInterval(fn, 0)` jumps in front of the `[running]` effect cleanup caused by `setRunning(false)`. So the interval still fires, overwriting `setLapse(0)` that happened during the event with its `setLapse(someValue)`.\r\n\r\nThis reminds me of the issue described in https://github.com/facebook/react/issues/14750#issuecomment-460409609, or at least a part of it:\r\n\r\n>In fact, this problem exists even for regular React keystrokes (and other \u201cdiscrete\u201d events). The solution to that would be to flush passive effects before we get a discrete event.\r\n\r\nBut here, it seems like this wouldn\u2019t be sufficient because the effect flips *as a result* of the click, not before it. So should `setState` inside a discrete event *also* flush passive effect? Seems like not. (That would defeat the purpose of delaying them.)\r\n\r\nSo this is working as designed, and the fix is just `useLayoutEffect` when the timing matters? Or the rAF solution?",
        "title": "Should setting state inside discrete events cause cleanup to run?",
        "labels": "Type: Question",
        "id": 46185
    },
    {
        "body": "Maybe it's antipattern and maybe it isn't. Note how I leverage deps for createdAt subselect.\r\n\r\n```ts\r\nconst TaskLists: FunctionComponent = () => {\r\n  const taskLists = useAppState(state => state.taskLists);\r\n  const sortedTaskLists = useMemo(() => {\r\n    return Object.values(taskLists).sort((a, b) => a.createdAt - b.createdAt);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, Object.values(taskLists).map(item => item.createdAt));\r\n\r\n  const children = useMemo(() => {\r\n    return (\r\n      <>\r\n        {sortedTaskLists.map(taskList => (\r\n          <TaskListLink id={taskList.id} key={taskList.id} />\r\n        ))}\r\n      </>\r\n    );\r\n  }, [sortedTaskLists]);\r\n\r\n  return children;\r\n};\r\n```",
        "title": "exhaustive-deps support for dynamic array",
        "labels": "Type: Question",
        "id": 46186
    },
    {
        "body": "Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?\r\n\r\nhttps://codesandbox.io/s/oo47nj9mk9\r\n\r\n_Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_",
        "title": "useLayoutEffect in ssr",
        "labels": "Type: Question",
        "id": 46187
    },
    {
        "body": "Hello,\r\n\r\nI have the following problem :\r\n\r\n\u2014 When I drag/drop item to an another `array()` > it re-renders the item I moved \u2014 (Why?)\r\n\r\n\u2014 When I drag/drop in the **same** `array()` > it's not renders. So it's GOOD !\r\n\r\nThe problem is my deepest child, I have a little `fetch()` to retrieve some additional data. \r\nThese data are already fetched.\r\nSo when I drag/drop **I don't want** another fetch. \r\nEvent `React.memo()` solve the problem.\r\n\r\nYou can check the console of CodeSandbox to see the problem :\r\n\r\n\r\n###  [https://codesandbox.io/s/03on3k75xw](https://codesandbox.io/s/03on3k75xw)\r\n\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nNo re-render of the item, since React already displays it, I just moved to another array. It's still the same item.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\nReact 16.8.1\r\nMacOS 10.14.2\r\n```\r\n\r\nReact Beautiful Dnd : https://github.com/atlassian/react-beautiful-dnd\r\n\r\n",
        "title": "Why moving item to another array fire re-rendering for itself (the item)?",
        "labels": "Type: Question",
        "id": 46188
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nQuestion / feature\r\n\r\nI've been trying to handle a case where I need to execute a piece of code right after the state is set at a particular place in the code. I do understand I'm supposed to use `useEffect` to respond to changes in state, like so:\r\n\r\n```javascript\r\nconst [val, setVal] = useState(null);\r\nuseEffect(() => { /* handle changes to val here */ }, [val])\r\n```\r\n\r\nBut the problem is, it will run on all changes made to `val` anywhere in the code. Without the second argument of `setVal` being a callback that'll run after the state is set, how can I execute something after a specific `setVal` function call sets the state ? \r\n\r\n\r\n\r\n\r\n\r\n",
        "title": "Hooks: useState one-off callbacks",
        "labels": "Type: Question",
        "id": 46189
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**bug**\r\n\r\n**What is the current behavior?**\r\n\r\nI'm trying to extract the initial HTML from react code on the server side. To do this, I'm using the official react-dom/server library function `renderToStaticMarkup()` referenced here: https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup\r\n\r\nI'm reading a react source file, transpiling the JSX and ES6 syntax to CommonJS using Babel and then parsing the evaluated CommonJS to `renderToStaticMarkup()`.\r\n\r\n## React code:\r\n```jsx\r\nimport React from 'react';\r\n\r\nclass Test extends React.Component {\r\n    render() {\r\n        return <p>Hello World!</p>;\r\n    }\r\n}\r\n\r\nexport default Test;\r\n```\r\n\r\n## Server-side code:\r\n```javascript\r\nconst { renderToStaticMarkup } = require( 'react-dom/server');\r\nconst Babel = require( '@babel/core' );\r\nconst Fsp = require( 'fs' ).promises;\r\n\r\n(async () => {\r\n    let fileContent = await Fsp.readFile( 'test.js', 'utf-8' );\r\n\r\n    let code = Babel.transform( \r\n        fileContent, \r\n        { \r\n            presets: [ '@babel/preset-env', '@babel/preset-react' ],\r\n            comments: false,\r\n            minified: true\r\n        }).code;\r\n\r\n    let result = renderToStaticMarkup( code );\r\n\r\n    console.log( result );\r\n})();\r\n```\r\n\r\n## package.json:\r\n```json\r\n{\r\n  \"dependencies\": {\r\n    \"@babel/core\": \"^7.3.3\",\r\n    \"@babel/preset-env\": \"^7.3.1\",\r\n    \"@babel/preset-react\": \"^7.0.0\",\r\n    \"react\": \"^16.8.2\",\r\n    \"react-dom\": \"^16.8.2\"\r\n  }\r\n}\r\n```\r\n\r\n**What is the output?**\r\n`&quot;use strict&quot;;Object.defineProperty(exports,&quot;__esModule&quot;,{value:true});exports.default=void 0;var _re act=_interopRequireDefault(require(\"react\"));function...`\r\n\r\n**What is the expected output?**\r\n`<p>Hello World!</p>`\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n```json\r\n\"react\": \"^16.8.2\",\r\n\"react-dom\": \"^16.8.2\"\r\n```",
        "title": "`react-dom/server.renderStaticMarkup()` returns empty string server-side",
        "labels": "Type: Question",
        "id": 46190
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nProp reassignment in components\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Have a parent component that passes a prop to a child\r\n2. Have a child assign the prop to the state default\r\n3. Unpack the state value and use a`.push` to alter it\r\n4. Watch in horror as both the prop and the state changes.\r\n\r\nhttps://codesandbox.io/s/61x9k76v8w\r\nCheck child.js\r\n\r\n**What is the expected behavior?**\r\nProps should not be reassignable within mounted components\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll browsers all OS's React: 16.7.0\r\n",
        "title": "Prop reassignment in components",
        "labels": "Type: Question",
        "id": 46191
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nI am trying to figure out where is the best place to put a module mock according to the new react version 16.8.1.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n``` javascript\r\nimport React from 'react';\r\nimport { act } from 'react-dom/test-utils';\r\nimport { mount } from 'enzyme';\r\nimport { getPointsFromGroupID } from './utils/getPointsFromGroupID';\r\nimport { TDashBody } from '.';\r\n\r\njest.mock('./utils/getPointsFromGroupID', () => ({\r\n  getPointsFromGroupID: jest.fn(() => Promise.resolve({})),\r\n}));\r\n\r\nconst getDefaultProps = () => ({\r\n  currentGroup: 0,\r\n});\r\ndescribe('DashBody', () => {\r\n  let component;\r\n  beforeEach(() => {\r\n    act(() => {\r\n      const props = getDefaultProps();\r\n      component = mount(<TDashBody {...props} />);\r\n    });\r\n  });\r\n  describe('rendering', () => {\r\n    it('Should render without exploding', () => {\r\n      expect(component).toBeDefined();\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n**What is the expected behavior?**\r\nThis test passes, but the placement of the mock module call gives me the act() error\r\n```\r\nWarning: An update to TDashBody inside a test was not wrapped in act(...).\r\n\r\n      When testing, code that causes React state updates should be wrapped into act(...):\r\n\r\n      act(() => {\r\n        /* fire events that update state */\r\n      });\r\n      /* assert on the output */\r\n\r\n      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb\r\n\r\n.me/react-wrap-tests-with-act\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nv16.8.1 running chrome on windows 10",
        "title": "Module mock yields unexpected act() error",
        "labels": "Type: Question",
        "id": 46192
    },
    {
        "body": "In Scheduler.js, \r\n```\r\nfunction unstable_shouldYield() {\r\n  return (\r\n    !currentDidTimeout &&\r\n    ((firstCallbackNode !== null &&\r\n      firstCallbackNode.expirationTime < currentExpirationTime) ||\r\n      shouldYieldToHost())\r\n  );\r\n}\r\n```\r\nunstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why?\r\n```\r\nshouldYieldToHost = function() {\r\n  return frameDeadline <= getCurrentTime();\r\n};\r\n```\r\nshouldYieldToHost() return true means there's no time left in this idle period\r\ncurrentDidTimeout is false means the schedule is not timeout\r\nwhat relationship between them, why does unstable_shouldYield() depend on them?\r\n",
        "title": "Under what circumstances, unstable_shouldYield will return true\uff1f",
        "labels": "Type: Question",
        "id": 46193
    },
    {
        "body": "> `react-cache` was not published with 16.8.1 like the rest of the react packages.\r\nThis means that the platform's Suspense stuff will not work.\r\n\r\n_Originally posted by @jaredpalmer in https://github.com/palmerhq/the-platform/pull/70#issuecomment-461170282_\r\n",
        "title": "react-cache alphas don't work with 16.8+",
        "labels": "Type: Question",
        "id": 46194
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component performs a second (non user triggered) update, `act` cannot detect it and warns about the update.\r\n\r\nFor example, a button is clicked and updates its text. After a second, the button resets and its text reverts to its original state.\r\n\r\nhttps://codesandbox.io/s/6xkyl37x7k?previewwindow=tests\r\n\r\n(The reproduction is a bit contrived, but demonstrates the issue.)\r\n\r\n**What is the expected behavior?**\r\n\r\nThe test runs without warning about being wrapped in `act`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact & React DOM @ `16.8.0`",
        "title": "act cannot detect secondary updates",
        "labels": "Type: Question",
        "id": 46195
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\n`react-test-renderer` emits a warning to wrap code inside `act` even though it is.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere is a [CodeSandbox](https://codesandbox.io/s/wwopxr137k?expanddevtools=1&previewwindow=tests) with a component using `useState` that toggles a div on/off on a button click. The test finds the button, calls the `onClick` on the props. This would be followed by a snapshot test. However, no matter how I try and wrap the code in `act`, the warning persists.\r\n\r\nMake sure to open the tests tab on the right, and to expand the console at the bottom:\r\n\r\n![image](https://user-images.githubusercontent.com/433409/52360399-ac50bf00-2a1a-11e9-9cf1-ba34b642102f.png)\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no warning.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.8\r\nreact-dom@16.8\r\nreact-test-renderer@16.8\r\njest@24.1.0\r\n\r\nThis worked fine with react*@16.7.0-alpha.2, snapshot and all.",
        "title": "Warning for `act` even when code is wrapped inside it",
        "labels": "Type: Question",
        "id": 46196
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nNot sure if it is a bug or a feature yet. This relates to Hooks.\r\n\r\nIt could also be that this is all expected behaviour and one of the workarounds mentioned is required.\r\n\r\n**What is the current behavior?**\r\n\r\nI have a hook that depends on the `useContext` hook. Using it as follows works perfectly:\r\n\r\n```\r\nconst MyHookedComponent = () => {\r\n    const contextValue = useContext(DemoContext);\r\n\r\n    return (\r\n       //Do something with contextValue\r\n    )\r\n}\r\n\r\nconst MyContextProviderComponent = () => {\r\n\r\n   return (\r\n        <DemoContext.Provider value={someContextValue}>\r\n                <MyHookedComponent />\r\n         </DemoContext.Provider>\r\n   )\r\n}\r\n```\r\n\r\nWhat if I want to use the `getContext` hook inline in the same component that declares the `DemoContext.Provider` ?\r\n\r\n```\r\nconst MyContextProviderComponent = () => {\r\n       const contextValue = useContext(DemoContext); //Of course this fails due to the Context hierarchy.\r\n   return (\r\n        <DemoContext.Provider value={someContextValue}>\r\n                     //Do something with contextValue\r\n         </DemoContext.Provider>\r\n   )\r\n}\r\n```\r\n\r\nI seem to be unable to get this working.\r\n\r\n**Please note**:\r\n- I have a very good reason for solving my issue with Context and not passing props.\r\n- The implementation I show above looks trivial and dumb but it is the simplest way to illustrate what the use case is. In my implementation the `Provider` sits in a complex component that does a lot of data management which I really want to happen at this level.\r\n- The usual way to use this will be the first working version I noted above, it is only in the case where the user would want to use the hook inline inside the `Provider`.\r\n- I have searched for a couple of hours and tried various configurations without success, so my apologies if this is a duplicate of another issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nAny method to consume context inline in the provider using the same re-usable hook without having to revert back to render props.\r\n\r\nI know I can solve this with **render props** but I am trying to convert an implementation using render props to hooks. I also know I can hoist the Context Provider higher up but in my implementation it would quadruple the code complexity to develop and maintain while introducing extra complexity into the user interface.\r\n\r\nAlso, by extracting the body inside the `Provider` to a new component I can also solve this but ideally I would not like to have a user do this for this use case.\r\n",
        "title": "Unable to use useContext hook inline in Context.Provider",
        "labels": "Type: Question",
        "id": 46197
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nseems it's a **bug**. \ud83d\ude15 \r\n\r\n**What is the current behavior?**\r\n\r\nNested context provider and `useContext` hooks seems to be conflicting, updates get discarded.\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen connecting to a context, it should update whenever it's `value` changes.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- **react**: `18.8.0-alpha.1` (also reproduced on `16.7.0-alpha.0`)\r\n- **browser**: `chrome 71`\r\n- **os**: macOS Sierra\r\n\r\n---\r\n\r\n### more details\r\n\r\nWhile working on a cleanup of a localStorage \"connection\",\r\nI tried to mix 2 articles ([`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) & [`[2]`](https://reactjs.org/docs/context.html#updating-context-from-a-nested-component)) from the official react documentation, I've implemented it with hooks, but the value seems not to be passing through.\r\n\r\nI've put up a streamlined demo on [codesandbox `[3]`](https://codesandbox.io/s/0yzjr8vnrv).\r\n\r\nThe actual implementation is only a couple of lines more (parsing it from and stringifying it to JSON).\r\n\r\nWorkarounds that I found:\r\n- If I create a new function on each render around the `setValue` function, it actually works. \r\n  - but this goes against the advice on [`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) about avoiding creating  new values.\r\n- Migrate it to a class and use `componentDidUpdate` instead of `useEffect`.\r\n  - I'm actually using this right now, as it works. Including saving a reference to the function in the state.\r\n\r\n---\r\n\r\nIs there anything that shouldn't work on the code below? the effect gets triggered with the changes,\r\nbut the value doesn't get updated on the components that consume via hook. see repro code [`[3]`](https://codesandbox.io/s/0yzjr8vnrv)\r\n\r\n```javascript\r\nconst createLocalStorage = key => {\r\n    const initialValue = localStorage.getItem(key)\r\n    const ValueContext = createContext(initialValue)\r\n    const SetterContext = createContext(() => {})\r\n\r\n    const useStorage = () => [ValueContext, SetterContext].map(useContext)\r\n\r\n    const Provider = ({children}) => {\r\n        const [value, setValue] = useState(initialValue)\r\n\r\n        useEffect(\r\n            () => {\r\n                console.log('effect', value)\r\n                localStorage.setItem(key, value)\r\n            },\r\n            [value],\r\n        )\r\n\r\n        return (\r\n            <ValueContext.Provider value={value}>\r\n                <SetterContext.Provider value={setValue}>\r\n                    {children}\r\n                </SetterContext.Provider>\r\n            </ValueContext.Provider>\r\n        )\r\n    }\r\n\r\n    return [Provider, useStorage]\r\n}\r\n```\r\n\r\n`[1]`: https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\r\n`[2]`: https://reactjs.org/docs/context.html#updating-context-from-a-nested-component\r\n`[3]`: https://codesandbox.io/s/0yzjr8vnrv\r\n\r\n---\r\n\r\n![hlcecpq](https://user-images.githubusercontent.com/8649362/51789871-bea63f80-2174-11e9-9288-151510494a7e.gif)\r\n",
        "title": "hooks: useContext with useState not updating",
        "labels": "Type: Question",
        "id": 46198
    },
    {
        "body": "This is actually an issue of react-router https://github.com/ReactTraining/react-router/issues/6555 but since it's the major routing lib I want to make you aware that there are issues when you want to pass custom hooks via props through your component tree.\r\n\r\nSince routing (with react-router) is a regular use case and React Hooks is an easy/elegant way to manage state through the app they should work together. Otherwise React Hooks is about creating Hooks limited to just one component and you cannot share state/hooks component-wide. Maybe I didn't get something right and there is a way...",
        "title": "react-router can't pass Hooks",
        "labels": "Type: Question",
        "id": 46199
    },
    {
        "body": "Hi,\r\n\r\nI have a very weird memory leak that seems to be related to componentDidMount declaration. Memory is not freed after unmounting component.\r\n\r\n### Used code\r\nVersion: react 16.7\r\nMode: developper or production (same behaviour)\r\n\r\n\r\n\r\nHere is the code I use to hide or display a list of items  \r\n```\r\nclass Item extends React.Component {\r\n     componentDidMount() {\r\n\r\n    }\r\n      render() {\r\n            return <div>test item</div>;\r\n      }\r\n}\r\n\r\nclass Items extends React.Component {\r\n      constructor(props) {\r\n            super(props);\r\n            this.state =  {};\r\n      }\r\n\r\n      renderList() {\r\n            let items = [];\r\n            for(var i = 0; i < 4000; i++) {\r\n                  items.push( <Item key={i} />);\r\n            };\r\n\r\n            return items;\r\n      }\r\n\r\n      onDisplay = ()=>{\r\n            this.setState({display: true});\r\n      }\r\n      onHide = ()=>{\r\n            this.setState({display: false});\r\n      }\r\n\r\n      render() {      \r\n            return <div>\r\n                  <div key=\"display\" onClick={this.onDisplay}>Display</div>\r\n                  <div key=\"hide\" onClick={this.onHide}>Hide</div>\r\n                  {this.state.display ? this.renderList() : null}\r\n            </div>\r\n      }\r\n}\r\nReactDOM.render(<Items />, document.getElementById(\"app\"));\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nCASE 1\r\nUse google chrome and display the performance monitor to study JS Heap size and Dom Nodes.\r\n1) Click on display => the list of 4000 items is displayed\r\n2) Click on \"hide\" => the list is unmounted\r\nWhen you look at performance monitor, you can see that around 8000 nodes are still in memory (and JS Heap is higher than before mounting components as well).\r\nIf you redo 1) and 2) multiple times, you will see nodes going to 16000 then going back to 8000, ... etc.\r\n\r\nThus, memory is freed after the first unmount operation, but the first one is not. The weird thing is that if you do 1), 2), 2), 2), then it is freed.\r\n\r\nCASE 2\r\nUse the same code but remove the \"componentDidMount\" function in the class.\r\nDo 1) and 2), then after few secondes memory is freed automatically (nodes and js heap)  => expected behaviour\r\n\r\n### Behaviour expected\r\n\r\nI was expected that the memory would be freed after unmounting a component, like in the 2nd case. That's a real issue when you mount.unmount big list multiple times, then js heap is going very high.\r\n\r\n\r\n",
        "title": "componentDidMount inside a class causing a memory leak",
        "labels": "Type: Question",
        "id": 46200
    },
    {
        "body": "I have lots of contexts and I have got to write in this way, so ugly! It hinders my work now. Such design makes it almost unusable.\r\n```js\r\n<context1.Provider value={value1}>\r\n  <context2.Provider value={value2}>\r\n    <context3.Provider value={value3}>\r\n      <context4.Provider value={value4}>\r\n        <context5.Provider value={value5}>\r\n\r\n        </context5.Provider>\r\n      </context4.Provider>\r\n    </context3.Provider>\r\n  </context2.Provider>\r\n</context1.Provider>\r\n```\r\n```js\r\n<context1.Consumer>\r\n  {value1 => <context2.Consumer>\r\n    {value2 => <context3.Consumer>\r\n      {value3 => <context4.Consumer>\r\n        {value4 => <context5.Consumer>\r\n          {value5 => (\r\n            null\r\n          )}\r\n        </context5.Consumer>}\r\n      </context4.Consumer>}\r\n    </context3.Consumer>}\r\n  </context2.Consumer>}\r\n</context1.Consumer>\r\n```",
        "title": "How will react solve nested contexts?",
        "labels": "Type: Question",
        "id": 46201
    },
    {
        "body": "Since performance of react 16 boosts so much and thanks to those aweosome talks on YouTube explained fiber so detailed, I hardly figured out even the latest version of react 16 is still in sync mode, no features like time slicing are turned on by default.\r\n\r\nThen I wondered why the perfmance is pretty good compared with react 15 even though? \r\n\r\nTrying to get some info on google, but it seems like no one really looked into this question. Even react 16 is shipped with this \u201cfake\u201d fiber mode for such a long time, it is not well documented or explained on the official website.\r\n\r\nCan someone give me some ideas about this please? ",
        "title": "What\u2019s the difference between fiber reconciler sync mode and the old react 15 stack reconciler? Why does performance boosts so much?",
        "labels": "Type: Question",
        "id": 46202
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug report.\r\n\r\n**What is the current behavior?**\r\nError boundary handles `Error` emitted in `componentDidMount` and somewhy **rethrows** it.\r\n\r\n```javascript\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {error: null, errorInfo: null};\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n    \treturn (\r\n      \t    <div>Ive handled an error!</div>\r\n        );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nclass MyComponent extends React.Component {\r\n  componentDidMount(){\r\n  \tthis.setState(()=>{\r\n    \t    throw new Error('This error somewhy was rethrown!')\r\n        });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    \t<div>This component is awesome</div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render((<ErrorBoundary><MyComponent/></ErrorBoundary>), document.getElementById('AppRoot'));\r\n```\r\n\r\nhttps://jsfiddle.net/xobotyi/96eqo8zp/\r\n\r\n**What is the expected behavior?**\r\nIt should not rethrow the error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.7.0\r\nOS: Win 10 x64\r\nBrowser: Chromium 71.0.3578",
        "title": "Unable to catch Error emitted in componentDidMount",
        "labels": "Type: Question",
        "id": 46203
    },
    {
        "body": " when I try to update react from 15.4.1 to 16.7.0\uff0cwhat's wrong with this?\r\n",
        "title": "warn:It looks like Index is reassigning its own `this.props` while rendering,This is not supported and can lead to confusing bugs.",
        "labels": "Type: Question",
        "id": 46204
    },
    {
        "body": "Currently we can pass an array as second argument when using `useCallback` or `useEffect` like below:\r\n\r\n```js\r\nuseCallback(()=> {\r\n  doSth(a, b)\r\n}, [a, b]) // how to do deep equal if a is an object ?\r\n```\r\n\r\nThe problem is it only compare array items with `===`,  it there any way to compare complex object ? \r\n\r\nSupport custom comparator as third argument looks not bad:\r\n\r\n```js\r\nuseCallback(()=> {\r\n  doSth(a, b)\r\n  }, \r\n  [complexObject], \r\n  (item, previousItem)=> { //custom compare logic, return true || false here }\r\n)\r\n```\r\n",
        "title": "useCallback/useEffect support custom comparator",
        "labels": "Type: Question",
        "id": 46205
    },
    {
        "body": "I've been playing around with React 16.6.0 recently and I love the idea of React Memo, but I've been unable to find anything regarding scenarios best suited to implement it. The React docs (https://reactjs.org/docs/react-api.html#reactmemo) don't seem to suggest any implications from just throwing it on all of your functional components. Because it does a shallow comparison to figure out if it needs to re-render, **is there ever going to be a situation that negatively impacts performance**?\r\n\r\nAnd second question: as long as everything remains pure, is there ever a situation to not wrap a functional component with React Memo?\r\n\r\nThank you.",
        "title": "Q: When should you NOT use React memo?",
        "labels": "Type: Question",
        "id": 46206
    },
    {
        "body": "**BUG**\r\n\r\n**What is the current behavior?**\r\n\r\nExample: https://codesandbox.io/s/6y1x2zr21n clicking on OK button cause `Warning: Can't perform a React state update on an unmounted component.`\r\n\r\nThe problem that unsubscribe is called during B event `setVisible(v => false);` call, see logs:\r\n\r\n```\r\nSET VISIBLE BEFORE \r\nUNSUBSCRIBE \r\nWarning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n    in Child (created by Holder)\r\nSET VISIBLE AFTER \r\n```\r\n\r\nIn our case we have this even without RAF call, but on `transitionend` DOM event.\r\n(It's occurred randomly and rare in our codebase as transitionend event should be called exactly at needed time, but example showed what happens)\r\nSeems like it occurred only if you have a `setState` call during useEffect callback like `setRefresh(v => v + 1);` (_inside provided code_) (_after rewriting our codebase to avoid setState calls in useEffect the error has gone_)\r\n\r\n\r\nCode\r\n```javascript\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport mitt from \"mitt\";\r\n\r\nconst emitter = mitt();\r\n\r\nconst Child = () => {\r\n  const [visible, setVisible] = React.useReducer((s, a) => a, true);\r\n  React.useEffect(() => {\r\n    const handle = () => {\r\n      console.log(\"SET VISIBLE BEFORE\");\r\n      setVisible(v => false); // <--- THIS CALL CAUSES UNSUBSCRIBE AND WARNING ABOUT STATE\r\n      console.log(\"SET VISIBLE AFTER\");\r\n    };\r\n    emitter.on(\"B\", handle);\r\n    return () => {\r\n      console.log(\"UNSUBSCRIBE\");\r\n      emitter.off(\"B\", handle);\r\n    };\r\n  }, []);\r\n\r\n  return <div>{visible && <h1>CHILD TEXT</h1>}</div>;\r\n};\r\n\r\nconst Holder = () => {\r\n  const [refresh, setRefresh] = React.useState(0);\r\n  const visible = React.useRef(true);\r\n  React.useEffect(() => {\r\n    if (refresh === 1) {\r\n      visible.current = false;\r\n      setRefresh(v => v + 1); // <--- This state change from effect caused problems\r\n    }\r\n    const handle = () => {\r\n      setRefresh(v => v + 1);\r\n    };\r\n    emitter.on(\"A\", handle);\r\n    return () => {\r\n      emitter.off(\"A\", handle);\r\n    };\r\n  });\r\n\r\n  return <div>{visible.current && <Child />}</div>;\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Holder />\r\n      <button\r\n        onClick={() => {\r\n          emitter.emit(\"A\", {});\r\n\r\n          requestAnimationFrame(() => {\r\n            emitter.emit(\"B\", {});\r\n          });\r\n        }}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nDo not provide warning if unsubscription is called during \"setState\" call.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.7.0-alpha.2\r\n",
        "title": "setState hook inside useEffect can cause unavoidable warning  Can't perform a React state update",
        "labels": "Type: Question",
        "id": 46207
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "title": "\u8bf7\u95ee\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0creact\u53ef\u4ee5\u517c\u5bb9\u5230IE\u591a\u5c11",
        "labels": "Type: Question",
        "id": 46208
    },
    {
        "body": "So I think `getDerivedStateFromProps` as designed turns out to be user-hostile. The short summary is that it makes the pattern described in the docs, https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns, impossible for non-trivial cases. \r\n\r\nImagine implementing an HOC that listens to change events on a DataSource, but where a simple shallowEqual() on the resultant state isn't sufficient to prevent rendering. I.e., what if you need more complex logic to determine if new data from the DataSource should be applied? \r\n\r\nIn my case, I have a DataSource that doesn't guarantee that it will give out objects of the same identity, so a `===` check will always return false and cause a re-render. BUT, I can do a little bookkeeping on the side and determine whether the data is actually new and should therefore be loaded into state. \r\n\r\nThis leads to some problems: \r\n1) Because `getDerivedStateFromProps` is static, it's not possible to store some internal bookkeeping data on the Component instance that gets used to determine whether to query the DataSource. Worst case, this bookkeeping information could be stuffed in the state object, but that's unnecessarily constraining and a bit ugly from a code organization perspective. \r\n2) More importantly, it's not possible to determine why `getDerivedStateFromProps` is being called. Is it because of a props change? Or is it because of a \"change\" event firing on the `DataSource`? \r\n\r\nThis matters because if props have changed, data must be fetched and the Component re-rendered unconditionally, but if the props haven't changed, then it's possible all the data loaded is the same as last time, and so `render()` can be skipped. \r\n\r\nHere's an example using the deprecated API that's no longer possible, lightly edited from the HOC example I mention above: \r\n```\r\nfunction withDataLoading(Component, DataSource, getDataFunc) {\r\n\r\n  return class extends React.PureComponent {\r\n    componentDidMount() {\r\n      // Subscribe to changes\r\n      DataSource.addChangeListener(this.handleChange);\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      // Clean up listener\r\n      DataSource.removeChangeListener(this.handleChange);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n      //Unconditionally update state and rerender since the props changed\r\n      const possiblyNewData = getDataFunc(DataSource, props, this)\r\n      this.setState(possiblyNewData);\r\n      //Remember some metadata about what we fetched for next time\r\n      this.bookkeeping = DataSource.bookkeepingData();\r\n    }\r\n  \r\n    handleChange() {\r\n      // Update component state whenever the data source changes\r\n      const possiblyNewData = getDataFunc(DataSource, this.props, this)\r\n      if(DataSource.didIFetchNewData(this.bookkeeping)) {\r\n        //The DataSource had updated data in it, so rerender\r\n        this.setState(possiblyNewData);\r\n        //Remember some metadata about what we fetched for next time\r\n        this.bookkeeping = DataSource.bookkeepingData();\r\n      } else {\r\n        //No new data was fetched, so don't update State and don't rerender\r\n        //Do nothing\u2026\r\n      }\r\n    }\r\n\r\n    render() {\r\n      <Component data={this.state}/>\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNotice that the behavior is different between `componentWillReceiveProps` and `handleChange`. There's no way to make that distinction with the new API. ",
        "title": "getDerivedStateFromProps is user-hostile",
        "labels": "Type: Question",
        "id": 46209
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nQuestion\r\n\r\n**What is the current behavior?**\r\nThe SetStateAction returned from useState hook dose not accept a second callback argument. It cannot works like Class Componet's 'setState'  method, which receives a callback param, and can perform the callback after this setState action updates;\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/93mkr1ywpr\r\n\r\n**What is the expected behavior?**\r\nHopes the SetStateAction function can receive a second callback argument, and can used like 'setState' method callback. \r\n\r\nI have read the official note: \r\n\r\n>     // this technically does accept a second argument, but it's already under a deprecation warning\r\n>     // and it's not even released so probably better to not define it.\r\n\r\nIf instead it's working as intended, how can I perform special action after this SetStateAction called ? \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.7.0-alpha.0\r\n\r\n",
        "title": "SetStateAction returned from useState hook dose not accept a second callback argument",
        "labels": "Type: Question",
        "id": 46210
    },
    {
        "body": "(unsure if this is the right place, so trying it out)\r\n\r\nI've noticed that the new React Hooks feature is aiming at providing an alternative composition pattern to HOC and render functions, but I believe that many of the use cases solved by HOC (at the framework level) cannot currently be addressed by the new hooks API. \r\n\r\nSpecifically, there is not way to incorporate React Hooks with React.memo. Unless I am incorrect, this means that any system that would like to implement optimisations based on external context, such as the react-redux `connect` function (that uses `mapStateToProps` to implement an efficient `shouldComponentUpdate`) will still need to rely on a HOC/render-prop to automate this optimisation.\r\n\r\nThe reason I am bringing this up is because one of the main benefits stated in the documentation is to reduce framework level use of HOC that \"pollute\" the tree, of which the react-redux connect HOC is probably the most prevalent use case. \r\n\r\nAdditionally redux (and `useRedux`) are specifically brought up as an exemplary use case, although with the current system it will cause large optimisation issues (since with no optimised `shouldComponentUpdate`, every \"connected\" component will re-render on every state change).\r\n(Although this might fit into the documentation repo, this is a discussion / opinion and I do not feel it is a \"mistake\" that I should report, but rather a discussion on importance).\r\n\r\nAn example solution for this could be if there was a way to use contexts in `React.memo` (which unless I'm incorrect only have access to `props` and `prevProps`)",
        "title": "Cases where hooks don't currently provide a good answer vs HOC",
        "labels": "Type: Question",
        "id": 46211
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe current behavior requires end users to use `createContext` in the module scope. To my understanding, it's not currently possible to use a default value derived from the state of a component (a stateful Provider in my case).\r\n\r\nThis [StackOverflow post](https://stackoverflow.com/questions/51448291/how-to-create-a-generic-react-component-with-a-typed-context-provider) hits the issue right on IMO.\r\n\r\nI feel like this is the classic use case for replacing Redux, and it doesn't work out of the box with static types.\r\n\r\nI think it's quite telling that `react-redux` is doing something similar [here](https://github.com/reduxjs/react-redux/pull/995/files#diff-0d7275a0771455b7118505dedef42772R3) in their PR to move to React 16 context. I would expect the default value to be `this.state` of the Provider component instead of `null`.\r\n\r\nMy knowledge of React internals is naive, but I didn't see anyone else bringing up this issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the desired behavior?**\r\n\r\nMaybe a JSX API for context creation? I imagine it's not quite that simple.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3+",
        "title": "Limitations of React.createContext",
        "labels": "Type: Question",
        "id": 46212
    },
    {
        "body": "There seems to be no way to implement class methods such as `getDerivedStateFromProps` and a few others.\r\n\r\nAm I overlooking something?\r\n\r\nThere is no mention of it here either: https://reactjs.org/docs/react-without-es6.html",
        "title": "[npm:create-react-class] No way to implement getDerivedStateFromProps",
        "labels": "Type: Question",
        "id": 46213
    },
    {
        "body": "Currently, it's not very straight forward to get your hands on a components full DOM - in particular if it returns multiple elements. In that case `ReactDOM.findDomNode` just won't work. So you're left with refs, but you'll never get the whole dom *at once* - instead you get one element at a time. You can of course do something along the lines of this:\r\n\r\n```js\r\nclass CityList extends Component {\r\n  render() {\r\n    this.childElements = []; \r\n    let store = this.childElements.push.bind(this.childElements);\r\n    return this.props.cities.map(p => <li class=\"city\" ref={store}>...</li>);\r\n  }\r\n  componentDidMount() {\r\n    //access this.childElements here\r\n  }\r\n}\r\n```\r\n\r\nBut that feels a bit awkward.\r\n\r\nHence my question is: how about adding the DOM nodes rendered for a given component at the end of the argument list of the relevant life cycle events? If I'm not mistaken, those would be `componentDidMount`, `getSnapshotBeforeUpdate`, `componentDidUpdate` and `componentWillUnmount` (as well as *perhaps* `shouldComponentUpdate` although I'm not sure why that would be a good time to access the DOM). I haven't dug too deep into React's internals, but my naive guess would be that this information should be available when those life cycle hooks are being called.\r\n\r\nOn a more \"philosophical\" note: It seems to me that storing references to the DOM in the component just isn't all that clean. In event handlers, you can use the event to reach into the DOM and it seems to me that life cycle hooks are practically destined to allow the same.\r\n\r\nThanks for your consideration :)",
        "title": "[feature request] Add DOM to life cycle hooks.",
        "labels": "Type: Question",
        "id": 46214
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn some historical reason, i am still using obsolete tag `frameset` in my project. And when i render my component which includes `frameset` tag in react, some attributes are ignored, like `rows`, `cols`.\r\nCould anyone tell me why and how to solve it by no hacking way? Thx.\r\n\r\n**input**\r\n```javascript\r\nexport default class obsoleteElment extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <html>\r\n      <head>\r\n        <meta httpEquiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n          <title>old page</title>\r\n      </head>\r\n      <frameset id=\"frame-container\" rows='60,*' frameBorder=\"0\" border=\"0\"  cols=\"180,11,*\">\r\n      </frameset>\r\n      </html>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\n**output**\r\n```javascript\r\n      <html>\r\n      <head>\r\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n          <title>old page</title>\r\n      </head>\r\n      <frameset id=\"frame-container\" frameBorder=\"0\" border=\"0\">\r\n      </frameset>\r\n      </html>\r\n```\r\n\r\n**expect**\r\n```javascript\r\n      <html>\r\n      <head>\r\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n          <title>old page</title>\r\n      </head>\r\n      <frameset id=\"frame-container\" rows='60,*' frameBorder=\"0\" border=\"0\"  cols=\"180,11,*\">\r\n      </frameset>\r\n      </html>\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n**react version**\r\n![image](https://user-images.githubusercontent.com/17465046/45526873-9b08db00-b80b-11e8-980b-86407da1934c.png)\r\n\r\n**node environment**\r\n![image](https://user-images.githubusercontent.com/17465046/45526918-ca1f4c80-b80b-11e8-911d-cf0bb3ab9b32.png)\r\n![image](https://user-images.githubusercontent.com/17465046/45526934-d905ff00-b80b-11e8-87d4-306ca3a998c3.png)\r\n\r\n**OS**\r\n![image](https://user-images.githubusercontent.com/17465046/45526979-18cce680-b80c-11e8-8928-ee784a5f0a7d.png)\r\n",
        "title": "Element attributes be removed silently in frameset tag",
        "labels": "Type: Question",
        "id": 46215
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nQuestion.\r\n\r\n**What is the current behavior?**\r\nIMO, from the naming, `isBatchingUpdates` should always equals `!isUnbatchingUpdates`, I wonder why we need both of them.\r\n\r\nIn [81224b](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-7a9f2b48de4b0ffcf7b436798ce9aaabR198) we add the `isUnbatchingUpdates` variable, the comment says it's just \"for the weird case where the initial mount is synchronous\"(and add [a test](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-c06dcc21e6553eb98915ab0eb50e4c7eR314) for it). But in a [follow up PR](https://github.com/facebook/react/pull/11264/files#diff-24152ba0b2ac251decb6a12f41bdf116L211) we just delete the comment but don't remove the `isUnbatchingUpdates`. I don't know why we remove the comment, seems the weird case which the before comment said doesn't be solved in this PR.\r\n\r\n**What is the expected behavior?**\r\nI try to remove `isUnbatchingUpdates` and use `!isUnbatchingUpdates` instead just like before we did. But encounter many tests fails(I thought just few tests would fails before try).\r\n\r\nSo, could you give some clarifications about this? Do we still need this now? Thanks!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster branch\r\n",
        "title": "Why we need both isBatchingUpdates and isUnbatchingUpdates?",
        "labels": "Type: Question",
        "id": 46216
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nForm component has \"form field\" children (Input(), Checkbox(), etc) that are validated against some custom rules when form is submitted. Validation works fine.\r\n\r\n**What is the expected behavior?**\r\n If the form is invalid, I would like to scroll the page to the first invalid element after the form is submitted but unfortunately components do not expose the underlying DOM three (except via the Fiber object) and I cannot get the \"ref\" of any component, which makes scrolling not possible since I don't have the DOM reference.\r\n\r\nI am trying to avoid ref forwarding on \"form field\" components because I would like the Form to handle all validation related code (for encapsulation purposes and in case I want to publish this as a library, for instance).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact: \"^16.4.0\"\r\n\r\nIs there any way to achieve this?\r\n",
        "title": "Access React component underlying DOM tree",
        "labels": "Type: Question",
        "id": 46217
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** Feature request / question\r\n\r\nAccording to React docs, there are 2 ways to avoid passing props through many levels:\r\n1. (New) context API\r\n2. Composition (Inversion of control)\r\n\r\nWhen using the new context API, a consumer component must know, and explicitly import, a context.\r\nThis raises a quite big disadvantage comparing to the legacy context API:\r\nSuch component can't be reusable with different contexts (unless making a prop only version of this component, and wrapping it with another one that uses the context directly). \r\nIn fact, it means that a component can't be \"contextual\" and reusable (by different contexts) at the same time.\r\n\r\nUsing composition in many cases feels wrong for solving this, quoting the docs:\r\n_However, this isn\u2019t the right choice in every case: moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want._\r\n\r\nExample of a component I struggle to understand why it should now import a context:\r\n```JavaScript\r\nimport * as React from \"react\"\r\nimport * as propsTypes from \"prop-types\"\r\n\r\nexport class Link extends React.PureComponent {\r\n  static contextTypes = {\r\n    navTo: propsTypes.any\r\n  }\r\n  \r\n  handleClick = (e) => {\r\n    e.preventDefault()\r\n    const {path} = this.props\r\n    this.context.navTo(path)\r\n  }\r\n\r\n  render() {\r\n    const {path, ...props} = this.props\r\n    return <a href={path} onClick={this.handleClick} {...props} />\r\n  }\r\n}\r\n```\r\n\r\nIf it was already discussed or answered, I apologize, couldn't find any related issues.",
        "title": "Consider keeping legacy context API for non-state usages",
        "labels": "Type: Question",
        "id": 46218
    },
    {
        "body": " I think I understood reconciliation in react however there is one thing I would like to clarify.\r\nLet's say on first render, we render:\r\n\r\n```\r\n<ul>\r\n  <li>Duke</li> // key 0\r\n  <li>Villanova</li> // key 1\r\n</ul>\r\n```\r\n\r\nAnd on next render\r\n\r\n\r\n```\r\n<ul>\r\n  <li>Connecticut</li> // key 0\r\n  <li>Duke</li> // key 1\r\n  <li>Villanova</li> // key 2\r\n</ul>\r\n```\r\n\r\nIf I understood reconciliation correctly on the second render, react will check that **types (e.g. `<li>`) and keys of first two items from first and second render match**, hence it will add only the new item with key 2 to the new output, hence generate following result:\r\n\r\n```\r\n<ul>\r\n  <li>Duke</li> // key 0\r\n  <li>Villanova</li> // key 1\r\n  <li>Villanova</li> // key 2\r\n</ul>\r\n```\r\n\r\nHowever I think this is not what react will generate and it seems then there is some issue with my understanding (especially the bold part in the previous paragraph). Can someone explain what I missed in my understanding?",
        "title": "Question on reconciliation",
        "labels": "Type: Question",
        "id": 46219
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nQuestion\r\n\r\n**What is the current behavior?**\r\n\r\nI am trying to use `react-test-renderer` and I notice that the lifecycles methods (ex: `componentDidMount`) need to be fired manually - `rendered.getInstance().componentDidMount()`, what solves my problem but reveals an other: I want to use shallow render, to test only the component under test, but then `react-test-renderer/shallow` API is minimal for rendering.\r\n\r\n**What is the expected behavior?**\r\n\r\nI was expecting that `react-test-renderer` would support testing my component reaction to the different lifecycles and be capable to use `shallow` rendering. Is there some way to use `react-test-renderer` in this scenario? Or is better I move to another library like `enzyme`?\r\n",
        "title": "react-test-renderer: is possible to test lifecycle functions?",
        "labels": "Type: Question",
        "id": 46220
    },
    {
        "body": "I am struggling to implement reusable views on mobile platforms and to make it i need to get key values (explicitly set and generated) in react-reconciler to match two different view trees somewhere outside react.\r\n\r\nIs there a way to achieve this?\r\n\r\nThanks!",
        "title": "Get keys in react-reconciler",
        "labels": "Type: Question",
        "id": 46221
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n```Component.prototype.setState()```'s callback is not receiving any parameters, though line 47 in `/packages/react/src/ReactBaseClasses.js` states, that: `It will be called with the up to date component arguments (state, props, context).`\r\n\r\nhttps://github.com/facebook/react/blob/aeda7b745d9c080150704feb20ea576238a1b9a1/packages/react/src/ReactBaseClasses.js#L45-L47\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/n5u2wwjg/145295/\r\n\r\nPlease check the console after clicking the button, as it will display an empty array, indicating that it doesn't get called with any parameters.\r\n\r\n**What is the expected behavior?**\r\n\r\nAs the comment mentions, we should get the updated state and props and context as arguments.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm checking this behaviour in React v16.4.2 using Chrome 68, Mac OS High Sierra 10.13.6 and it also didn't seem to work in previous versions, though I didn't go back in the version history.\r\n",
        "title": "Component.prototype.setState() callback is not receiving any arguments",
        "labels": "Type: Question",
        "id": 46222
    },
    {
        "body": "  \r\n **What is the current behavior?**\r\n   react16+ support return array components, for example:\r\n   render() {\r\n      return [\r\n          \u300aLi\u300b1\u300a/Li\u300b\r\n          \u300aLi\u300b2\u300a/Li\u300b\r\n          \u300aLi\u300b3\u300a/Li\u300b\r\n      ]\r\n   }\r\n   export default ArrayDemo\r\n   ----------------\r\n   i want to map it with React.Children.map,\r\n  for example:\r\n  import ArrayDemo from 'xxx/xxx';\r\n  ....\r\n  React.Children.map(ArrayDemo,(item, index) => {\r\n      return \u300aCol span={6}\u300b{item}\u300a/Col\u300b\r\n  })\r\n  ....\r\n\r\n  -------------------\r\n  but ArrayDemo has become a single element; React.Children.toArray got [0] only;\r\n\r\n**What is the expected behavior?**\r\n\r\n  i expected since React can return array;  how can i map it? for sometimes i want to wrap each\r\n element in array ;\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n   16.4+\r\n\r\n\r\n---------------------------------------\r\nor am i missing something important?    thx a lot!\r\n\r\n",
        "title": "how map ? render An Array Of Elements ",
        "labels": "Type: Question",
        "id": 46223
    },
    {
        "body": "This may be a question moreso than a feature request, but I can't seem to find the answer around the web. It seems most people are working on small apps or just ignoring this as an issue.\r\n\r\nI am working on a large react application, and seeing some issues with end-to-end testing. We have a webdriverio/selenium setup which seems to be rather common from what I understand. We use these tools to click some buttons, type some text, etc., and then find the affected DOM elements and do some assertions.\r\n\r\nHowever, and here is where the problem is, React does not synchronously perform all operations on the read DOM. It will use various methods to schedule work, which will be done asynchronously at some later time. I have found that in our tests, a few assertions at random will see that the real DOM is still in the previous state (rather than the new state that results from having clicked the button and whatnot) in every large test run.\r\n\r\nI have not seen many posts on the internet even acknowledge this as an issue. The one that I found that does only suggests adding timeouts throughout the tests. However, for obvious reasons, this is slow and non-deterministic.\r\n\r\nIs there a suggested way to know that a React application has finished performing all scheduled work? And if not, is there a discussion about this happening somewhere?\r\n",
        "title": "tools for end-to-end testing",
        "labels": "Type: Question",
        "id": 46224
    },
    {
        "body": "Hello. I want to ask a question about a way to avoid reconciliation process.\r\n\r\nToday I can see the following process:\r\n\r\n1. Component wants to re-render.\r\n2. Component render method provides new virtual dom.\r\n3. Some react diff library tries to find some non-optimal way to morph old virtual dom into new one.\r\n\r\nPlease fix me if I am wrong, I am not familiar with react codebase.\r\n\r\nI can see an information in [docs](https://reactjs.org/docs/reconciliation.html):\r\n\r\n> you don\u2019t have to worry about exactly what changes on every update\r\n\r\nBut your solution has complexity about O(n) or even worse, so user should care about what changes sometimes. When user knows what changed he will be able to provide O(log n) or even O(1) solution.\r\n\r\nFor example I am working with huge data list and I am receiving information from websocket about how to morph my list: append/prepend, remove, swap items, etc. I don't want to render huge component list and run reconciliation process for each mutation. I can tell virtual dom how to morph efficiently.\r\n\r\n![append](https://user-images.githubusercontent.com/941925/44114154-05201870-a013-11e8-9c7a-2e5ed890e372.jpg)\r\n\r\nIs there a way for user to provide morph method? I can imagine some api like:\r\n\r\n```\r\n// render is not defined\r\n\r\nmorph(component) {\r\n  if (...) {\r\n    component.append(<Item />);\r\n  } else {\r\n    (<Item />).prependTo(component.find({ key: '5' }));\r\n  }\r\n}\r\n\r\n```\r\n\r\nDo you have any plans to implement it? Thank you. Please feel free to ask any questions.",
        "title": "Avoid reconciliation, alternative component interface",
        "labels": "Type: Question",
        "id": 46225
    },
    {
        "body": "What is meant within the [`README.md` of `create-subscription`](https://github.com/facebook/react/tree/master/packages/create-subscription) by async limitations?\r\n\r\n> For full compatibility with asynchronous rendering, including both time-slicing and React Suspense, the suggested longer term solution is to move to one of the patterns described in the previous section.\r\n\r\nThe patterns described above are:\r\n\r\n> * Redux/Flux stores should use the context API instead.\r\n> * I/O subscriptions (e.g. notifications) that update infrequently should use simple-cache-provider instead.\r\n> * Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage.\r\n\r\nI don't think any of these suit our use case: a high performance WebSocket stream that produces price quotes which are rendered directly into components. The application domain is a realtime trading application for an investment bank I am consulting for.\r\n\r\nIdeally, we want the price quotes to be passed straight into the component with as little ceremony as possible. This state will be transient, so:\r\n\r\n* I don't see why I need to use some kind of state management solution to store it somewhere.\r\n* I don't think I should need to use `react#Context` and to then pass the data down the tree, since I can just import the service wherever I want in my code and pass callbacks into this to begin receiving data. The latter seems simpler, with less ceremony and will make it easier to differentiate between different streams of price updates.\r\n\r\nIt seems to me that `create-subscription` is exactly what I need, however the comment about async limitations worries me. Is there something I'm missing? Could this be clarified in the README?\r\n\r\nIs it because of priority? I think ideally we wish the price updates to be treated as if they are high priority, because we would prefer to decrease the likelihood of clients interacting with stale data.",
        "title": "What is meant within the README of `create-subscription` by async limitations? Can it be clarified?",
        "labels": "Type: Question",
        "id": 46226
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature : componentWillUpdate Discussion\r\n\r\n**What is the current behavior?**\r\n\r\nThe current behavior calls the function before re-rendering the render target however there is no indication for when the re-render method should be called\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behavior should call the function before re-rendering the render target if there is no returned conditional statement and if there is, true should trigger the re-render and false should not\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.4.0\r\n\r\nI have a few questions before I try to solve this problem and it gets rejected. I'm assuming that the team has decided to move in the direction of removing \"Will-Updates\" from React all together and have labeled them \"Unsafe\". I've seen a lot of issues with those functionalities before as well. I was curious if providing a conditional statement inside those functions would satisfy the unexpected renders. \"shouldComponentUpdate\" does trigger when to call these functions however in those functions that \"will\" run before the render can always be controlled with a conditional statement of it's own. I'm getting comfortable with the code base however I'm curious if the team is removing that functionality all together and using the \"static\" function \"getDerivedStateFromProps\" instead. Has a React lover it is a little confusing and may break a lot of legacy code when updating versions. I believe that may solve the problem of unexpected renders after a \"will\" change lifecycle event.\r\n\r\nI was curious if that was the case, and removing \"will\" lifecycles is the next steps for React then how will the \"did\" lifecycles work instead?\r\n\r\nI love React and I'm just curious about the future for React as a whole. I'd love to tackle any bugs or feature requests when I have time. I will be writing clean code and create tests for new features or bugs as well.",
        "title": "componentWillUpdate discussion",
        "labels": "Type: Question",
        "id": 46227
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nmore like a feature.\r\n\r\n**What is the current behavior?**\r\n\r\nSo I am currently using the legacy context api very heavily.\r\nA typical \"component tree\" in my app might look a bit like this:\r\n```js\r\n<App>\r\n  <Component1> // provides 3 Objects via context all children might need at some point\r\n    <Component2> // might need one of the 3 Objects passed via context\r\n      <Foo> // additionally provides 2 Functions via context\r\n        <SomeList> // needs some Objects from <Component1>\r\n          <ListItem>\r\n            <SomeChild> // needs both functions from <Foo> and maybe some Objects from <Component1>\r\n              // ... and so on and so forth - you get the idea\r\n            </SomeChild>\r\n          </ListItem>\r\n        </SomeList>\r\n      </Foo>\r\n    </Component2>\r\n  </Component1>\r\n</App>\r\n```\r\n\r\nSo I Have a heavily nested component tree, where I use context all the time to pass functions, booleans, objects or whatever without having to use props all the time - I am trying to avoid \"prop drilling\" as much as possible.\r\n\r\nAdditionally, some of these context vars might be set in lifecycle methods after a first render or maybe after some HOC provided some data. It is basically all over the place.\r\n\r\n**What is the expected behavior?**\r\n\r\nMy question now is: I can't see any **proper** solution to achieve all this with the next context api. It will be a huge pain in the a** to achieve it and make some of my code completely unreadable.\r\n\r\nIs there any way to keep using the legacy context api? Maybe the React team could provide a extra package for that? Or maybe someone has a better idea on how to achieve this without having pretty bad prop drilling all over the place.\r\n\r\nLooking forward to your answers! best, Patrick\r\n",
        "title": "Keep using legacy Context API - or how to achieve this with new API",
        "labels": "Type: Question",
        "id": 46228
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nCode for reproducing is [here](https://github.com/alexeyraspopov/react-suspense-sandbox/tree/cb3b60be69523de8f720a474c965face2b521b9b). I've also deployed an example to Zeit Now: https://suspense-fpwoufdzfv.now.sh/.\r\n\r\nThis is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary.\r\n\r\nI can see my use of `<Timeout />` doesn't really care about `ms` I'm passing \u2014 it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has.\r\n\r\nThere is content that is placed next to an async component (the one that's going to be suspended).\r\n\r\nhttps://github.com/alexeyraspopov/react-suspense-sandbox/blob/cb3b60be69523de8f720a474c965face2b521b9b/src/index.js#L51-L56\r\n\r\nLooking at React Suspense tests, it is assumed that sibling elements can be rendered in any way.\r\n\r\n**What is the expected behavior?**\r\n\r\n`<Timeout />` component only shows placehold when expired, sibling content is shown even if an async component was suspended.\r\n\r\nI built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `<unstable_AsyncMode />` but it didn't seem to make any difference.\r\n\r\nI overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug. ",
        "title": "Suspense: timeout expiration and siblings rendering issues",
        "labels": "Type: Question",
        "id": 46229
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nJust questions\r\n\r\n### Some questions regarding props.children\r\n\r\nIn the official React documentation of [React.Children](https://reactjs.org/docs/react-api.html#reactchildren) you can read that ```this.props.children``` is an \"opaque data structure\".\r\nWhat does that mean EXACTLY?\r\n\r\nI think there are in general three possibilities for the transparency of the data structure of ```props.children```:\r\n\r\n#### Case 1: EVERY aspect of the ```props.children```data structure is open and well defined.\r\n\r\n  If this was right then the term \"opaque data structure\" would be completely wrong.\r\n  Therefore \"Case 1\" obviously is not the case.\r\n  \r\n#### Case 2: NO aspect of the ```props.children``` data structure is open or clear.\r\n\r\n   That would mean that whenever you use ```props.children``` you ALWAYS HAVE to use it in combination with ```React.Children``` as ```React.Children``` is the only one (mmmh, is it really the only one?) who knows about the actual data structure of ```props.children```.\r\n   \r\nBut that would imply that it should neither be allowed to use\r\n   \r\n ```javascript\r\n // This is used almost everywhere (even in the official React documentation)\r\n <div>{this.props.children}</div>\r\n ```\r\n\r\n nor\r\n\r\n ```javascript\r\n  // This is often seen with the \"Function as child\" pattern\r\n  MyComponent.propTypes = {\r\n    children: PropTypes.func.isRequired,\r\n  };\r\n  ```\r\n   \r\n As both examples are very common, it seems that \"Case 2\" is obviously also not the case.\r\n\t\r\n#### Case 3: SOME aspects of the ```props.children``` data structure are open and well defined.\r\n\r\nThat would open the possibility that one or even both of the examples in \"Case 2\" are valid.\r\nBut then it would mean that there should be an exact specification what aspects of ```props.children``` is well and openly defined and which aspects are really opaque.\r\nMaybe I've missed something in the React documentation, but I think it's not really exactly specified there, is it?\r\n\r\n#### And last but not least a further question:\r\n\r\nWhy exactly isn't ```props.children``` in case there are some children (one ore more) just always an array (as it is done in \"Preact\" for example)? That would make things so much easier, wouldn't it?\r\n\r\nMany thanks in advance for the clarifications.\r\n",
        "title": "Questions regarding \"props.children\"",
        "labels": "Type: Question",
        "id": 46230
    },
    {
        "body": "This is a question, so I apologize if this isn't the best place to ask.\r\nI'm trying to work with a component's internal state within a setInterval function and I know there are some asynchronous problems I need to be aware of. I also know that I can pass setState a function which would help me protect against async problems... but I can't because I need to use the changed state within the setInterval function? Is what I'm doing safe or should I be working a different way around this problem.\r\n\r\nI've seen the following that nearly answers my question and am having trouble visualizing / adapting this (or maybe the behavior I have is fine?):\r\n[Stackoverflow Answer](https://stackoverflow.com/questions/43428456/do-i-need-to-use-setstatefunction-overload-in-this-case?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)\r\n```\r\nsectionTimerHandler = () => {\r\n    const elapsedSectionTimeMs = this.state.elapsedSectionTimeMs + 1000;\r\n    // Do some stuff with elapsedSectionTimeMs\r\n    this.setState({elapsedSectionTimeMs});\r\n}\r\n\r\nrestartSectionTimer = () => {\r\n    if (this.sectionTimeIntervalId !== 0) {\r\n        window.clearInterval(this.sectionTimeIntervalId);\r\n    }\r\n    this.sectionTimeIntervalId = window.setInterval(this.sectionTimerHandler, 1000);\r\n    this.setState({ elapsedSectionTimeMs: 0 });\r\n}\r\n```\r\n\r\nor would something like the following be better/safer even though I'm using `this.state.elapsedSectionTimeMs + 1000` earlier in the function?\r\n\r\n```\r\n this.setState((prevState: AssessmentState) => {\r\n      return {\r\n          elapsedSectionTimeMs: prevState.elapsedSectionTimeMs + 1000\r\n      };\r\n});\r\n```",
        "title": "Use and set a component's state within setInterval function",
        "labels": "Type: Question",
        "id": 46231
    },
    {
        "body": "Is there a higher meaning for 1) `Consumer` and `Provider` both being properties of `Consumer`?\r\n2) And `Consumer` being of type `Symbol(react.context)` _(and not react.consumer)_ while `Provider` is of type `Symbol(react.provider)`?\r\n\r\n```jsx\r\nconst MyContext = React.createContext('value')\r\nMyContext === MyContext.Consumer === MyContext.Consumer.Consumer\r\n```\r\n\r\nWhile this _**IS**_ **convenient**, because I usually only use Provider once as\r\n```jsx\r\nimport MyContext from './MyContext'\r\n\r\n<MyContext.Provider>\r\n  ...\r\n</MyContext.Provider>\r\n```\r\n... and then I can do less typing by simply using, \r\n```jsx\r\nimport MyContext from './MyContext'\r\n\r\n<MyContext>\r\n  ...\r\n</MyContext>\r\n```\r\n\r\nI would be interested in knowing where _(if)_ this is documented and what is the preferred way? Whether to use the full `<MyContext.Consumer>` or if it is legit to just simplify to `<MyContext>`.",
        "title": "Why are the Consumer and Provider properties of Consumer?",
        "labels": "Type: Question",
        "id": 46232
    },
    {
        "body": "I'm playing with Context API bitmask feature to bail out unwanted re-render.\r\n\r\nI have a dynamic model ( a JSON object) as context value. By dynamic i meant , the number of keys and structure of the JSON object is unknown. But when the JSON object changed , i know which key is changed. It seems difficult to turn the unknown keys to static pre-defined bitmasks. But I thought such use case is very common, and the bail-out feature should handle it easily by just matching the key. \r\n\r\nAlso I notice default changedBits and observedBits is MAX_SIGNED_31_BIT_INT. Does this mean it has a limitation up to 31 type of context change?",
        "title": "Context API bitmask related questions",
        "labels": "Type: Question",
        "id": 46233
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nthis is a bug, or at least a request for more precise warnings and error messages.\r\n\r\n**What is the current behavior?**\r\n\r\nI was cloning children to add some properties and I overlooked that the context Consumer subtree should  not be cloned...\r\n\r\n```\r\nimport React from 'react';\r\nimport {render} from 'react-dom';\r\n\r\nconst { Provider, Consumer} = React.createContext();\r\n\r\nconst Comp = ({children})=> <Provider>{cloneKids(children)}</Provider>;\r\n\r\nconst cloneKids=(children)=>React.Children.map(children, child =>\r\n\t\t\t\t\t       React.cloneElement(child, child.props,\r\n\t\t\t\t\t\t\t\t  child.props.children&&\r\n\t\t\t\t\t\t\t\t  cloneKids(child.props.children)));\r\nrender(\r\n\t<Comp><Consumer>{console.log}</Consumer></Comp>,\r\n    document.getElementById('root')\r\n);\r\n```\r\n\r\nThe code produces the warning and error introduced with #12241\r\n\r\n> Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\n\r\nand (even more confusing)\r\n\r\n> TypeError: render is not a function\r\n\r\n**What is the expected behavior?**\r\n\r\nMaybe React.cloneElement should not attempt to clone functions? Whatever it does, the result is not a function.\r\n\r\nThe warning part \"a child that isn't a function\" should be separated from the other warnings. There can't be multiple children and one child that is not a function at the same time, so a more precise warning can be issued.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with react 16.3.0 in Stackblitz/Chrome 65 and react 16.3.2 in Chrome 65 and Firefox 59",
        "title": "Cloning the child of a context Consumer produces confusing warning and error",
        "labels": "Type: Question",
        "id": 46234
    },
    {
        "body": "Consider a component wrapping a context provider:\r\n\r\n```js\r\nclass ValueWrapper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: null,\r\n      setValue: this.setValue,\r\n    };\r\n  }\r\n\r\n  setValue = (value) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  render = () => (\r\n    <Context.Provider value={this.state}>\r\n      {this.props.children}\r\n    </Context.Provider>\r\n  );\r\n}\r\n```\r\n\r\nA consumer then might want to set a default value when it is first mounted. The only way I can see to do this using the new API is to check for an existing value on first render:\r\n\r\n```js\r\nclass ValueUpdater extends React.Component {\r\n  state = {\r\n    inputValue: 0,\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  render = () => (\r\n    <Context.Consumer>\r\n      {({ value, setValue }) => {\r\n        if (!value) {\r\n          setValue(this.state.inputValue);\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            <input type=\"text\" value={value} onChange={handleInputChange}/>\r\n            <button onClick={() => setValue(this.state.inputValue)}>Update value</button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Context.Consumer>\r\n  )\r\n};\r\n```\r\n\r\nBut this seems to break the golden rule of updating state in the render method (`setValue(this.state.inputValue)`), as this would immediately cause a re-render. Ideally I would be able to call the `setValue` from the context in the `componentDidMount` method of the `ValueUpdater` component, but with context as a render prop, that's not possible, as far as I can tell. The docs suggest passing props down to another component:\r\n\r\n```js\r\n  render = () => (\r\n    <Context.Consumer>\r\n      {({ value, setValue }) => (\r\n          <ValueUpdaterInput setValue={ setValue } value={ value } />\r\n      )}\r\n    </Context.Consumer>\r\n  )\r\n```\r\n\r\nBut if I tried to do the initialisation in the `ValueUpdaterInput` component's `componentDidMount` method, it would be called on every render, surely, as `ValueUpdaterInput` would be re-rendered each time?\r\n\r\nIs there a better pattern than this, or am I trying to use context inappropriately?",
        "title": "[Question] Context provider state initialisation.",
        "labels": "Type: Question",
        "id": 46235
    },
    {
        "body": "I have been unable to find out what the license for the React logo is. Does anyone know under which license it is?",
        "title": "ReactJS Logo License",
        "labels": "Type: Question",
        "id": 46236
    },
    {
        "body": "We are building a react mapbox gl module and we use clone and inject props today.\r\n\r\nWe were looking into using the 16.2.0 context api but I saw that it will have a new one on 16.3.0 but I can\u2019t seem to find a way to read context details\r\nOn componentDidMount lifecycle (which makes sense for me to use on the map implementation).\r\n\r\nIs there a way around this ?",
        "title": "Is there a way to access new context api within ComponentDidMount?",
        "labels": "Type: Question",
        "id": 46237
    },
    {
        "body": "Hi,\r\n\r\nI'm trying to do something like this:\r\n\r\n```\r\nconst Container = (props) => props.someCondition? (\r\n    <ContainerType1>\r\n        {props.children}\r\n    </ContainerType1>\r\n) : (\r\n    <ContainerType2>\r\n        {props.children}\r\n    </ContainerType2>\r\n);\r\n\r\nconst App = (props) => (\r\n    <Container someCondition={props.someCondition} >\r\n        <ComponentThatDoesAsyncFetches1 />\r\n        <ComponentThatDoesAsyncFetches2 />\r\n        <ComponentThatDoesAsyncFetches3 />\r\n    </Container>\r\n);\r\n```\r\n\r\nBasically what I want is a situation where App is rerendering on a changing boolean prop (Imagine someCondition has an actual changing value), and a different container will render depending on its value, while maintaining the same children inside. Problem is, that those children are doing async fetches (on DidMount), but they re-mount and lose their state while the containers change. \r\n\r\nAny idea how can I achieve this with the children still mounted even if their parent changed?\r\n\r\nThanks in advance!\r\n",
        "title": "Keep the children mounted but replace the parent",
        "labels": "Type: Question",
        "id": 46238
    },
    {
        "body": "**Bug**\r\n\r\n**Current behavior**\r\nReact currently normalizes keyboard events cross-browser by falling back on the native KeyboardEvent.keyCode property and using a dictionary object to normalize the key. As noted in the source, getEventKey is used for \"Normalization of deprecated HTML5 `key` values\".\r\n\r\nEdge currently does not implement the correct key values and this normalization will fall back to KeyboardEvent.keyCode. KeyboardEvent.keyCode is deprecated and may be dropped at any time.\r\n\r\nMicrosoft as per https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15907408/ have fixed this issue, but it has not yet been released to insider preview releases. This means there is the potential for the KeyboardEvent.keyCode to be removed from Edge before the fix is made public. It may be a good idea to not rely on keyCode in this instance.\r\n\r\nRefer to https://github.com/facebook/react/blob/5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784/packages/react-dom/src/events/getEventKey.js Line 103\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact-dom version 16.2.0, potentially affects future versions of Edge.\r\n",
        "title": "Potential Future Bug in getEventKey for Edge with Synthetic Event normalization.",
        "labels": "Type: Question",
        "id": 46239
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen subscribing to DOM events it's possible to use capturing. However it seems that capturing takes place after the vanilla JavaScript bubbling phase. This results in an incorrect order of events unless all events are subscribed to via React which isn't always possible.\r\n\r\nHere's an example that mimicks one of our use cases: https://jsbin.com/zuleceg/1/\r\n\r\n**What is the expected behavior?**\r\nA capturing event subscribed to within React, should take place before bubbling events subscribed to via vanilla JavaScript.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue?**\r\nDevelopment edition, Chrome v64 x64\r\n",
        "title": "Capturing events trigger after vanilla bubbling events",
        "labels": "Type: Question",
        "id": 46240
    },
    {
        "body": "Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.\r\n\r\nFollowing is sample the code :\r\n\r\nWorking code :\r\n`<tr key={id}> `\r\n`<td> <input  value={this.state.price[id]}/> </td>`\r\n\r\nFailing code :\r\n`<tr key={id}> `\r\n`<td> {this.state.price[id]} </td>`",
        "title": "state change in td element",
        "labels": "Type: Question",
        "id": 46241
    },
    {
        "body": "",
        "title": "Why can't we use both prevstate (function) + callback as parameters in setState()?",
        "labels": "Type: Question",
        "id": 46242
    },
    {
        "body": "I just came back to react after about a year or so of not using it and now the getting started docs are pretty much not helpful in the slightest. All the docs are now is just links to other websites without any instructions on how to get a react project running. I remember a year ago back in react 15 the docs had a step by step walkthrough for how to set up and get a project running from scratch and now they are just links to websites without react specific instructions. What happened to the docs, when did they become so useless?\r\n\r\nThere needs to be a step by step guide added back to the docs, a guide that will get you from having nothing to running it in the browser instead of just links to other websites that don't have anything to do with react. I remember back in react 15, you could run through the guide and have a hello world app running within 10 minutes no problems, I have been trying to figure it out with these new docs for over an hour now and still 0 luck getting this running. The instructions used to actually be instructions, basically saying, install this, then that, then run this command in terminal, then do this and so on. The docs now just say, well you can use this, then has a link to a site that has nothing to do with react, there is not even any sort of instruction on the react website on what to do with that, just the link without any context around it. Can these docs please be reverted to the old versions or actually create a proper getting started page to get you from nothing to running?",
        "title": "Getting started docs are terrible",
        "labels": "Type: Question",
        "id": 46243
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI think this is just a question.\r\n\r\nAs I understand it, React's newer *Fiber* architecture introduces an asynchronous rendering pipeline, which allows for better prioritisation of work.  I'm also aware that in version 16, React is still expected to render synchronously.\r\n\r\nLooking forward though, when using `react-test-renderer` (especially the [ReactTestInstance](https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactTestRenderer.js#L466-L512) helper APIs), what guarantees are safe for a developer to lean on?\r\n\r\nAfter creating a test-renderer instance, is it safe to immediately introspect the instance to look for a child node with a given type?  Does this differ from components with user-space asynchrony?\r\n\r\nFor instance, if I have a class component with a child node that I want to make a test assertion against, is this safe?  If not, is there a safe way to flush pending reconciler changes, or check for pending work?\r\n\r\n```\r\nconst renderer = ReactTestRenderer.create(<MyComponent />);\r\nconst childInstance = renderer.root.findByType(ChildNode).instance;\r\n```\r\n\r\nCurrently I am experiencing intermittent (1 in 50 or so) failures in test assertions that look like this.  The error output looks like:\r\n\r\n```\r\nFAIL path/to/MyComponent/test.jsx (8.116s)\r\n\u25cf MyComponent \u203a test assertion against child node instance\r\n\r\nNo instances found with node type: \"ChildNode\"\r\n\r\nat expectOne (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8161:9)\r\nat ReactTestInstance.findByType (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8009:12)\r\n...\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI am seeing this failure when running `react@16.0.0` with `react-test-renderer@16.0.0`, in `jest@22.1.4` while running in `node@8.3.0`.",
        "title": "react-test-renderer: Asynchronous rendering guarantees?",
        "labels": "Type: Question",
        "id": 46244
    },
    {
        "body": "Hi.\r\n\r\nI want to use many libraries and frameworks in my project.\r\n\r\nCan I concat React with other framework like angular, vue, ember...?\r\n\r\n",
        "title": "Concating react with other resources",
        "labels": "Type: Question",
        "id": 46245
    },
    {
        "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nExcerpt from documentation:\r\n\r\n>componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().\r\n\r\nhttps://reactjs.org/docs/react-component.html\r\n\r\nThe docs don't mention if `setState` can be used in `componentWillUnmount`. \r\n\r\nConsider the following example where the `state.showGreeting` is undone by timer over time. But since the timer has to be invalidated in `componentWillUnmount` there no other place to reset the state:\r\n\r\n```\r\nclass HelloWorld extends Component {\r\n  state = {\r\n    showGreeting: false\r\n  };\r\n\r\n  onClick() {\r\n    this.setState({ showGreeting: true })\r\n\r\n    this._timer = setTimeout(() => this.setState({ showGreeting: false }), 3000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this._timer)\r\n\r\n    // is it legal?\r\n    this.setState({ showGreeting: false })\r\n  }\r\n}\r\n```\r\n\r\nIs it legal to call `setState` from `componentWillUnmount`? Given that it can be asynchronous it feels that `setState` may not be invoked until after component is actually unmounted which may produce a warning in my understanding, until.. `componentWillUnmount` actually pumps up the state's dispatch queue manually to ensure that all state changes land in component before it's too late.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nNot sure\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2 / Webkit",
        "title": "Document the use of setState in componentWillUnmount",
        "labels": "Type: Question",
        "id": 46246
    },
    {
        "body": "Hello,\r\nI can't edit the wiki to add my website to the list there, is editing disabled?",
        "title": "can't edit the wiki",
        "labels": "Type: Question",
        "id": 46247
    },
    {
        "body": "I am creating a [small, generic state management](https://github.com/franciscop/state) based on the `Proxy()` object. Now I am writing a React helper, but I've found an issue: to create the HOC I need access to `Component` from React. Looking at the [source code for Component](https://github.com/facebook/react/blob/master/packages/react/src/ReactBaseClasses.js) it doesn't seem like it can/should be a standalone function. This library should be able to be used independently, so making everyone download React is not feasible.\r\n\r\nI have navigated through the [official HOC documentation](https://reactjs.org/docs/higher-order-components.html), past issues and Google but couldn't find any way to retrieve `Component` from the passed component to my HOC. This is the code I am working with (not yet in the repo linked above):\r\n\r\n```js\r\n// This will load the whole React independently of the project type\r\nimport { Component } from 'react';\r\n\r\nconst connect = (opts) => (Passed) => {\r\n  return class WithState extends Component {\r\n    // ...\r\n  }\r\n};\r\n\r\nexport default connect;\r\n```\r\n\r\n```js\r\n// Note: assume this for Passed.js\r\nimport React, { Component } from 'react';\r\nclass Passed extends Component { ... }\r\nexport default connect()(Passed);\r\n```\r\n\r\nNow, I *did* find a hack to make this work, but it seems like one of the most fragile pieces of code I've ever written, relying on the differences between ES7 modules and CommonJS:\r\n\r\n```js\r\nconst connect = (opts) => (Passed) => {\r\n  const React = require('react');\r\n  return class WithState extends React.Component {\r\n    // ...\r\n  }\r\n};\r\n\r\nexport default connect;\r\n```\r\n\r\nThis way it will only import React once the `connect()` is used, and `connect()` is the *React-exclusive* helper from my library. So my question/feature request is this: is it possible to access its constructor's parent (not just the child)? Could we make it possible somehow? Something like this would be ideal:\r\n\r\n```js\r\n// Is something like this possible?\r\nconst Component = Passed.super;\r\n// or\r\nconst Component = Passed.constructor.super;\r\n// or even (since a class is syntax sugar)\r\nconst Component = Passed.prototype.super;\r\n```\r\n\r\nI think that is not the way Javascript/React works, but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not.\r\n\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature I think",
        "title": "Access Component from child's instance?",
        "labels": "Type: Question",
        "id": 46248
    },
    {
        "body": "I am currently attempting to create a button which is red with the text \"Yes\" that when you click on it the button changes to a green color with the text \"Confirm?\" before the final stage in which an action takes place. Where I am currently at is defining `buttonColor` as a state which changes on the click of the button; the initial color should be `#FD8F83` and the final color after the click should be `#A4D87C`. However, I am currently getting the error \"TypeError: Cannot read property 'state' of undefined\" pointing to the `style={{backgroundColor: this.state.buttonColor}} ` line whenever the code is compiled on the webpage. \r\n\r\n**Defining initial state and behavior on click:**\r\n```\r\ngetInitialState: function() {\r\n    \treturn {\r\n    \t\tbuttonColor: \"#FD8F83\"\r\n    \t};\r\n},\r\nhandleClick(color) {\r\n    \tthis.setState({\r\n\t\tbuttonColor: color\r\n\t}); \r\n}\r\n```\r\n\r\n**Code inside table in render():** \r\n```\r\n<td>\r\n\t<button \r\n\t\tclassName=\"removeButton\" \r\n\t\tstyle={{backgroundColor: this.state.buttonColor}} \r\n\t\tonClick={function(){this.handleClick(\"#A4D87C\")}}>\r\n\t\tYes\r\n\t</button>\r\n</td>\r\n```\r\n\r\nDoes anyone have any ideas why this is? I am brand new to React so I apologize if it's obvious. I also learned React using createClass so I've been trying to piece together how to make this work with the new `create-react-class` package. Any advice is greatly appreciated! \r\n\r\nReact: `^16.2.0`\r\nChrome: `Version 63.0.3239.132 (Official Build) (64-bit)`\r\n",
        "title": "TypeError: Cannot read property 'state' of undefined with create-react-class",
        "labels": "Type: Question",
        "id": 46249
    },
    {
        "body": "Hello! I've scoured through other issues and can't figure out why the warning is still around because it feels like I've done everything. Here's the setup:\r\n\r\nBuild scripts\r\n```\r\n    \"heroku-postbuild\": \"npm run build:prod\",\r\n    \"build:webpack\": \"webpack --progress --display-error-details --bail\",\r\n    \"build:dev\": \"npm run build:webpack -- --config config/webpack/development.config.js\",\r\n    \"build:prod\": \"NODE_ENV=production npm run build:webpack -- --config config/webpack/production.config.js\",\r\n```\r\n\r\n`base.config.js`:\r\n```\r\nconfig.plugins = [\r\n  new webpack.optimize.OccurenceOrderPlugin(),\r\n  new webpack.DefinePlugin({\r\n    //sets up some other constants on process.env\r\n  }),\r\n];\r\n```\r\n\r\n`production.config.js`:\r\n```\r\nvar config = extend({}, baseConfig);\r\n\r\nconfig.plugins.push(\r\n  new webpack.DefinePlugin({\r\n    \"process.env.NODE_ENV\": JSON.stringify(\"production\"),\r\n  }),\r\n  new webpack.optimize.UglifyJsPlugin({\r\n    mangle: true,\r\n    compress: { warnings: false },\r\n    output: { comments: false },\r\n    exclude: [/\\.min\\.js$/gi]\r\n  }),\r\n  new webpack.optimize.DedupePlugin(),\r\n//some more plugins\r\n```\r\n\r\nUsing React v15.4.2 and Webpack v1.14.0. I'm not sure what I'm missing -- DefinePlugin and UglifyJsPlugin seem to be declared properly, and the `NODE_ENV` is set to production up in the script. Any help would be greatly appreciated! Thank you!",
        "title": "Getting minification warnings even with DefinePlugin and UglifyJSPlugin",
        "labels": "Type: Question",
        "id": 46250
    },
    {
        "body": "So I'm creating an application with real-time streaming data in a table using react (v16.1.1). The number of rows shown at a time can be rather large (400+ rows) and when those situations occur, the scrolling behavior on browsers (desktop & mobile) really takes a hit and staggers when attempting to browse the content. Has anybody experienced this kind of scrolling behavior when rendering large data sets in a table? \r\n\r\nI'm expecting React to be able to efficiently draw/redraw these elements with ease but that doesn't appear to be the case. I tried using JSFiddle to recreate the scenario but did not have much success.\r\n",
        "title": "Sluggish scrolling when rendering table with large dataset in React",
        "labels": "Type: Question",
        "id": 46251
    },
    {
        "body": " With the goal to better understand react reconciliation I created this example\r\n\r\n\r\n```\r\n// Just a simple timer component basically which shows each second passed\r\nclass Stateful extends React.Component{\r\n constructor(props){\r\n   super(props)\r\n     this.state={timer:0}\r\n   }\r\n    \r\n  componentDidMount(){\r\n    let that = this;\r\n    setInterval(function(){\r\n    that.setState(function(prevState){return {timer: prevState.timer+1}})\r\n    }, 1000);\r\n  }\r\n  render(){\r\n    return <p>{this.state.timer}</p>\r\n  }\r\n}\r\n\r\n// Just a demo class for understanding reconciliation\r\nclass Demo extends React.Component {\r\n   constructor(props){\r\n     super(props)\r\n     this.state={}\r\n   }\r\n  componentDidMount(){\r\n    let that = this;\r\n    setTimeout(function(){\r\n    that.setState({showWarning: true})\r\n  }, 3000);\r\n  }\r\n  render() {\r\n    if (this.state.showWarning) {\r\n      return (\r\n        <div>\r\n          <Stateful /> // I was hoping this would create a new instance of Stateful Component after 3 seconds\r\n        </div>\r\n    );\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <Stateful />\r\n      </div>\r\n    );\r\n}\r\n}\r\n\r\nReactDOM.render(\r\n  <Demo />,\r\n  document.getElementById('container')\r\n);\r\n\r\n\r\n```\r\nYou can see after three seconds `showWarning `is set to true. **So I was believing that after three seconds I would get a new instance of `<Stateful>` component (because it lives in a different div than the one rendered already)**  - hence I would see the output of `Stateful `component starting from 0 again, but the timer just continued to increase on the screen....  So the output basically is:\r\n0...1...2...3...4....(and so on each second).\r\nWhereas I expected it to show 0...1..2.. and on third second do a restart basically and start 0...1...2...3...etc.\r\nWhat did I miss from reconciliation docs that led me believe in this? (I have a feeling the react docs on this misses to highlight this, or it might be I missed something?)",
        "title": "Question from react reconciliation",
        "labels": "Type: Question",
        "id": 46252
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, maybe\r\n\r\n**What is the current behavior?**\r\n\r\nOn calling forceUpdate ref callbacks called again. So, doing forceUpdate in ref callback makes infinite loop.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codepen.io/TrySound/pen/mqKqeB?editors=0012\r\n\r\n**What is the expected behavior?**\r\n\r\nDo not recall refs\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact 16.1.1\r\nchrome 62",
        "title": "forceUpdate recalls all ref callbacks",
        "labels": "Type: Question",
        "id": 46253
    },
    {
        "body": "Hello,\r\n\r\nif I am totally out of place asking this here I am sorry, please close this issue. I work at a German newspaper and we are publishing some smaller npm packages publically as open source and some for our own purposes privately.\r\n\r\nCurrently, we are not quite sure of our workflow and we want to learn from the best (YOU \ud83c\udf89 ). We are wondering how you manage to publish new releases of React. I see you have [some release sh scripts](https://github.com/facebook/react/tree/master/scripts/release). We have an npm script that basically builds our package, bumps the version and publishes the lib to npm. So far this seems quite similar, correct me if I am wrong. Also, when we want to publish a new release, someone just runs that npm script from their laptop. This seems somewhat unsettling, it feels like there should be more this.\r\n\r\nSo I am wondering, if you care to answer, how do you do it at Facebook?",
        "title": "Question: What is your workflow to release a new version",
        "labels": "Type: Question",
        "id": 46254
    },
    {
        "body": "I know this is not related to react directly but didn't know where to turn to.\r\nAm I the only one who can't access/login to discuss.reactjs.org? (for quite some time already)\r\nI get error:\r\n_This page isn\u2019t working. discuss.reactjs.org is currently unable to handle this request. HTTP ERROR 500_\r\nand sometimes when I retry this error:\r\n_Sorry, there was an error authorizing your account. Perhaps you did not approve authorization?_",
        "title": "can't access discuss react",
        "labels": "Type: Question",
        "id": 46255
    },
    {
        "body": "Bug in documentation\r\n\r\n**What is the current behavior?**\r\nReact's spread operator was removed in React 16, but it is still in the documentation https://reactjs.org/docs/jsx-in-depth.html#spread-attributes\r\n\r\n**What is the expected behavior?**\r\nA word of caution should be included that this does not include React 16+. Maybe also add other ways of spreading props.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16+. It worked in previous releases.",
        "title": "React spread operator is still in the official documentation",
        "labels": "Type: Question",
        "id": 46256
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug?\r\n\r\n**What is the current behavior?**\r\n\r\nRendering a portal to `document.head` on the server causes React to log a Warning on unexpected markup while hydrating server markup. Currently this happens when using [react-head](https://github.com/tizmagik/react-head)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nI'm not sure if it's possible to simulate this in jsfiddle, since it requires server-rendering and access to `document.head`, but a fairly minimal repro case is in [react-head's example app](https://github.com/tizmagik/react-head/tree/master/example), which you can clone and run via doing the following:\r\n\r\n```\r\ngit clone git@github.com:tizmagik/react-head.git\r\ncd react-head\r\nnpm install\r\nnpm run dev\r\nopen http://localhost:3000\r\n```\r\nYou'll then see the React warning logged.\r\n\r\nIf you have thoughts on a simpler way to repro this, happy to do that as well!\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's entirely possible that this is just a usage of React Portals that wasn't anticipated, but i'm not sure if this is an invalid use case? Would like to get your thoughts and if there's a better approach than what I'm currently doing with react-head?\r\n\r\nBesides the warning, the module/app seems to function exactly as expected.\r\n\r\n_At a high level, this is how react-head works:_\r\n\r\nDuring server-rendering `<head />` tags (e.g. `<meta />` etc) are [collected in an array](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L41), which are [`renderToString()`d and placed in the server template `<head />`](https://github.com/tizmagik/react-head/blob/master/example/src/server.js#L39), then on the client, these server-rendered tags are [querySelected and removed](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L20-L30), to be replaced by [ReactDOM.createPortal()](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L38) in order to support SPA functionality from then on.\r\n\r\nHere's the issue in react-head: https://github.com/tizmagik/react-head/issues/1\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16\r\n",
        "title": "React 16: Mismatched HTML Warning logged when hydrating Portals rendered to document.head",
        "labels": "Type: Question",
        "id": 46257
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nTrying to run a simple Jest snapshot test but failing on react-test-renderer\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nimport * as React from 'react';\r\nimport Header from './../../components/Header/HeaderContainer';\r\nimport renderer from 'react-test-renderer';\r\n\r\ntest('Header is loaded correctly', () => {\r\n    const component = renderer.create(\r\n       <Header/>\r\n    );\r\n    let tree = component.toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nWhen running Jest throws the following error:\r\n\r\n \u25cf Header is loaded correctly\r\n\r\n    TypeError: Cannot read property 'create' of undefined\r\n\r\n      at Object.<anonymous> (src/__tests__/unit/Header.test.tsx:6:31)\r\n          at Promise (<anonymous>)\r\n          at <anonymous>\r\n      at process._tickCallback (internal/process/next_tick.js:188:7)\r\n\r\n  \u2715 Header is loaded correctly (144ms)\r\n\r\n**What is the expected behavior?**\r\nSnpashot test should pass\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react-test-renderer\": \"=16.0.0\",\r\n\"react\": \"=16.0\",\r\n\"react-dom\": \"=16.0\",\r\n\r\n",
        "title": "TypeError: Cannot read property 'create' of undefined when using 'react-test-renderer'",
        "labels": "Type: Question",
        "id": 46258
    },
    {
        "body": "Given an instance which contains some object, attempts to update that object in `commitUpdate()` result in an error since the object is frozen\r\n\r\nWhat is the correct approach to set the new props to an instance in commitUpdate()?\r\n\r\nI see in the ART renderer for example, it sets the properties on the instance directly (e.g. https://github.com/facebook/react/blob/master/src/renderers/art/ReactARTFiberEntry.js#L152)\r\n\r\nIs that the correct approach? Is there no ability to wrap these changing properties in a container object?",
        "title": "update props in commitUpdate()",
        "labels": "Type: Question",
        "id": 46259
    },
    {
        "body": "**In React 15**, `ComponentWillUnmount` called first before the rendering of next component in DOM. **In the current version (v16)**, `ComponentWillUnmount` was called after the mounting of next component.\r\n\r\nIt creates an issue with my existing code, since I reuse the same component after the history changes so it invokes the `componentWillMount` with new props and change in URL and thereafter, it invokes the `ComponentWillUnmount` of same component. \r\n\r\nIs there still a way to do this in a **_synchronous_** way?\r\n",
        "title": "Asynchronous ComponentWillUnmount in React 16",
        "labels": "Type: Question",
        "id": 46260
    },
    {
        "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nReactDevTools is showing the red icon for my deployed application even though I am using the webpack uglifyjs plugin and the webpack DefinePlugin with process.env.NODE_ENV': JSON.stringify('production').\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\n**What is the expected behavior?**\r\nThat react DevTools would show me a black icon indicating production quality code.\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI am using  the latest version of Google Chrome, Version 61.0.3163.100 (Official Build) (64-bit) and this app is running with \"react\": \"^15.6.1\" and \"react-dom\": \"^15.6.1\".\r\n",
        "title": "Even Though I am using the webpack uglifyjs plugin for minification ReactDevTools is telling me that I have unminified code that is not production quality",
        "labels": "Type: Question",
        "id": 46261
    },
    {
        "body": "This is highly related to https://github.com/facebook/react/issues/10950\r\n\r\nWhen I call ReactDOM.render() - or more accurately updateContainer() from within a renderer, it seems the `callback` param is called somewhere in between \"updating\" and \"rendered\"\r\n\r\nSpecifically, if the callback is itself is a call to `updateContainer()`, e.g. a recursive approach, I get an error of:\r\n\r\n> flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.`\r\n\r\n_tangential note - this happens even if `updateContainer()` was triggered elsewhere like `deferredUpdates()` - `flushSync()` may be a bit misleading_\r\n\r\nCan someone please explain this a little more- what does the order look like between updateContainer() and the callback?\r\n\r\nMy use case is as described in the other issue, but for the sake of clarity, I'd like to \r\n\r\n1. Call the top-level render() when the components have all finished rendering\r\n2. Rely on React's requestAnimationFrame timing rather than inject another one for triggering prop changes\r\n3. Do all this without making the root node manage it via setState() + componentDidUpdate()\r\n\r\nReal-world scenario is using React to drive animation via a custom renderer\r\n\r\nThanks!",
        "title": "Relationship between render()/updateContainer() and requestAnimationFrame()?",
        "labels": "Type: Question",
        "id": 46262
    },
    {
        "body": "The New York Times is [rebuilding its website](https://open.nytimes.com/react-relay-and-graphql-under-the-hood-of-the-times-website-redesign-22fb62ea9764) using React. Currently, it\u2019s an isomorphic app that has both server- and client-side renders. \r\n\r\n**Our question: What's the best way to include a non-React interactive graphic \u2014 maps, charts and other visualizations created by custom code \u2014 within a fully React page?**\r\n\r\nOur ideal scenario: \r\n\r\n* Server-side React renders the initial HTML for a graphic, using `dangerouslySetInnerHTML`, as part of a React page\r\n* Client-side React never touches those elements again, even during component mounting\r\n\r\nWe thought React 16 might solve this with `hydrate` method, but it still removes nodes that it doesn't expect, such as nodes generated by D3 or other client-side code. None of the options in [Integrating with Other Libraries](https://facebook.github.io/react/docs/integrating-with-other-libraries.html) seem to be an exact match either.\r\n\r\nThe classic use case is a graphic with a D3 map. The server-side HTML includes text and a placeholder <div> for the map, as well as the map JS. On page load, the map is immediately drawn by D3 but gets erased when React mounts client-side. The D3 nodes aren\u2019t included in the server-side output, because they often vary based on viewport, device, etc.\r\n\r\nHere\u2019s a [trivial example](https://jsfiddle.net/6zdhrych/), showing React 16\u2019s `hydrate` removing client-created nodes after one second. On mobile devices, loading the React library and potentially other dependencies could take some seconds.\r\n\r\nThe simplest solution I can think of is a `shouldComponentMount` function, where we could return false. The rest of the React components on the page would mount, but leave the interactive graphic part alone. There are probably other solutions.\r\n \r\nConstraints:\r\n\r\n* We need to use dangerouslySetInnerHTML, because we need to deploy graphics outside of site releases\r\n* We need to render the initial HTML server-side for performance and simplicity\r\n* We can\u2019t use iFrames for everything, as they\u2019re not flexible enough\r\n* We can\u2019t re-render or reattach elements, as that causes many problems \u2014 CSS animations restart, media playback is interrupted, input cursors and text selections are lost, etc.\r\n\r\nAny guidance is appreciated.\r\n\r\ncc @gaearon @leeb \r\n",
        "title": "How to prevent React from modifying elements manipulated by external code?  ",
        "labels": "Type: Question",
        "id": 46263
    },
    {
        "body": "For performance reasons I have a child element whose data is stored in its state and only its state (instead of being passed up the hierarchal chain using callbacks passed in props).\r\n\r\nThere then comes a time where an action in the parent element dictates that I now need that data, what is the correct pattern for fetching it in the child?\r\n\r\nDo I use refs and call a child.fetchData() method via a saved reference?\r\n\r\nDo I change a prop flag causing the child to call a prop callback with the data?",
        "title": "Pattern for Parent Initiated fetch of Child data?",
        "labels": "Type: Question",
        "id": 46264
    },
    {
        "body": "This isn't necessarily a bug or a feature, more so asking for why it is implemented as it currently is.\r\nWhen inside of a component, `this.key` is undefined, however `child.key` is defined and has a value within `React.Children.map`. I realize these point to different instances, just demonstrating the difference.\r\n\r\nExample:\r\n```Javascript\r\n\r\nclass Example extends React.Component {\r\n  render() {\r\n    console.log(this.key); // undefined\r\n    return (\r\n      <div>\r\n       {React.Children.map(this.props.children, child => {\r\n          console.log(child.key); // defined\r\n          return child;\r\n       })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\nI expect `child.key` to not be readable/writeable within `React.Children.map`, however it is both which seems counterintuitive to the idea that `this.key` is undefined within the component.\r\n\r\n\r\n",
        "title": "Referencing `key` within `React.Children.map` *is* defined.",
        "labels": "Type: Question",
        "id": 46265
    },
    {
        "body": "There are two elements on the same level and they are both have onBlur handler. When one element loses focus, in his callback I try to dispatch blur event for the second element and I have \"Maximum call stack size exceeded\" error in console. \r\n\r\nTry example in JSFiddle. Click on second element and press \"tab\" button to lose focus.\r\n\r\nExample link: https://jsfiddle.net/0Lhqrjbq/2/\r\n\r\nVersion: 15.5.4",
        "title": "Dispatch blur event on siblings",
        "labels": "Type: Question",
        "id": 46266
    },
    {
        "body": "I'm implementing a i18n library, and would like to render a object with custom toString like this:\r\n\r\n```\r\nconst i18nObject = {\r\n  toString() {\r\n    return 'xxx';\r\n  }\r\n};\r\n```\r\n\r\n```\r\nrender() {\r\n  return {i18nObject}\r\n}\r\n```\r\n\r\nBut got the error:\r\n\r\ninvariant.js:44 Uncaught Error: Objects are not valid as a React child (found: xxx). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of `App`. at invariant (invariant.js:44)\r\n\r\nDoes anyone know if there's any method to do this?",
        "title": "How to render object with custom toString?",
        "labels": "Type: Question",
        "id": 46267
    },
    {
        "body": "After some research, the following modules in the React codebase have some form of direct dependency on a React Stack module. Ideally, we want to move away form using internal module requires and use public API requires where possible.\r\n\r\nReactTestUtils:\r\n- `src/test/ReactShallowRenderer.js` \r\n  * There is a PR already open that should resolve this @lelandrichardson #8982\r\n  @spicyj says: \ud83d\udc4d\r\n\r\nRenderers:\r\n- `src/renderers/__tests__/ReactUpdates-test.js`\r\n  * Only one test makes use of `ReactUpdates` directly. Move the `require` to be inline within the test itself?\r\n  @spicyj says: this one just tests internals and doesn't test anything observable (originally was added as a part of a very minor perf improvement), can be deleted\r\n\r\nRenderers - ReactDOM:\r\n- `src/renderers/dom/shared/__tests__/ReactMount-test.js`\r\n  * A test in this suite uses `ReactMount._instancesByReactRootID`.\r\n  @spicyj says: this test was added because the old devtools relied on this and it was important to not break them -- but Dan rewrote the integration so the Fiber devtools don't need this and this test is fine to delete\r\n- `src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js`\r\n  * Two tests: `createOpenTagMarkup` and `createContentMarkup` require Stack modules.\r\n  @spicyj says: these tests should be rewritten in terms of public APIs\r\n- `src/renderers/dom/shared/__tests__/ReactServerRendering-test.js`\r\n  * Re-visit once we have SSR working?\r\n  @spicyj says: \ud83d\udc4d\r\n- `src/renderers/dom/shared/__tests__/ReactDOMIDOperations-test.js`\r\n  * Only has a single `innerHTML` whitespace test.\r\n  @spicyj says: let's rewrite this one in terms of public APIs (though it can probably move into ReactDOMComponent-test) -- let's ensure that both initial render and updates work properly (since those historically used different codepaths and might also diverge in the future)\r\n\r\nRenderers - ReactDOM SSR:\r\n- `src/renderers/dom/ReactDOMServer.js`\r\n  * Re-visit once we have SSR working?\r\n  @spicyj says: \ud83d\udc4d\r\n\r\nRenderers - ReactART:\r\n- `src/renderers/art/ReactARTStack.js`\r\n  * A couple of Stack modules are required by ART.\r\n  @spicyj says: No need to worry about these, we'll delete these when we delete stack\r\n  @bvaughn says: \ud83d\udc4d\r\n\r\nRenderers - Native:\r\n- `src/renderers/native/ReactNativeReconcileTransaction.js`\r\n- `src/renderers/native/ReactNativeMount.js`\r\n- `src/renderers/native/ReactNativeStackInjection.js`\r\n- `src/renderers/native/ReactNativeBaseComponent.js`\r\n- `src/renderers/native/ReactNativeStack.js`\r\n\r\n@spicyj says: No need to worry about these, we'll delete these when we delete stack\r\n  @bvaughn says: \ud83d\udc4d\r\n\r\nScripts:\r\n- `scripts/bench/extract-component.js`\r\n  * Should we refactor to use the public API instead?\r\n  @spicyj says: We don't really have a public API for reflecting on/inspecting React trees which is what this script (almost a bookmarklet) does so we will need to rewrite this on top of Fiber if we want to use it again \u2013 but this isn't super important so for now this is okay to leave using Stack modules and it will only work with Stack until someone wants to use it and upgrades it to Fiber.",
        "title": "[Fiber] Investigation: what internals have direct dependencies on Stack modules?",
        "labels": "Type: Question",
        "id": 46268
    },
    {
        "body": "<img width=\"894\" alt=\"screen shot 2017-01-07 at 09 26 55\" src=\"https://cloud.githubusercontent.com/assets/755489/21743657/7e2c6ee6-d4bb-11e6-9964-9d2469e945e4.png\">\r\n\r\n\r\nI was playing with the examples to understand the internal code flow of React's setState.\r\nI noticed that **ReactCompositeComponentWrapper** Object had reference to **_instance** Object which in turn had reference to the same (screenshot's console) ReactCompositeComponentWrapper Object as **_ReactInternalInstance**. Is that an expected structure ?\r\n",
        "title": "Is _instance pointing to _ReactInternalInstance & _ReactInternalInstance pointing to _instance, expected Structure ?",
        "labels": "Type: Question",
        "id": 46269
    },
    {
        "body": "How to refer to the DOM element within JSX props (without using ref)?\r\nsame as: https://discuss.reactjs.org/t/passing-this-to-the-onclick-callback/437\r\n```\r\nclass myComponent extends Component{\r\n constructor(props){\r\n   this.state={ selectedOption: 'option1' }\r\n}\r\n   getClassName(e){\r\n           return e.target.textConent === this.state.selectedOption ? 'selected' :''      \r\n   }\r\n\r\n   onNodeSelected(e){\r\n      this.setState({selectedOption: e.target.contextText})\r\n}\r\n\r\n\r\nreturn(\r\n   <div>\r\n     {/* I was (and still am ) very much tempted  to pass `this` as `???` to refer to the current DOM element */}\r\n       <button className={ getClassName(??????)   onClick={this.onNodeSelected.bin(this)} >option1</button>\r\n       <button className={ getClassName(??????)}  onClick={...>option2</button>\r\n       <button className={ getClassName(??????)}  onClick={...>option3</button>\r\n       <button className={ getClassName(??????)}  onClick={...>option4</button>\r\n  </div> \r\n  )\r\n}\r\n```\r\n\r\n23/2/2017 update:\r\nthe answer is no. you can't use this. `this` always stands for the current component no matter where you use it.  the correct approach is to pass the `this object` explicitly. e.g.\r\n```\r\n<button className={ getClassName('option1')  onClick={this.onNodeSelected.bin(this)} >option1</button>\r\n```\r\nyou know that `this` refer to `option1` so you can pass the value directly without using `this` keyword\r\n@bochen2014",
        "title": "____Notification Index:          -----Please ignore this issue. ----",
        "labels": "Type: Question",
        "id": 46270
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nSeems like a bug. Not sure\n\n**What is the current behavior?**\nUnable to access props, if the function is defined outside\n\n**If the current behavior is a bug, please provide the steps to reproduce.**\nhttps://jsfiddle.net/69z2wepo/45785/\n\n**What is the expected behavior?**\nExpected Behavior is having access to the props\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nI am working with 15.1.0, though I believe this is present in older versions as well\n",
        "title": "Cannot access \"this\" or \"props\"",
        "labels": "Type: Question",
        "id": 46271
    },
    {
        "body": "There is nothing in the documentation that indicates how to pass `key`s to `React.createElement`.\n\nAlso there is no explanation about `props.children` either, especially when using `React.cloneElement`: Should the `props.children` be copied or new children passed?\n\n(See also this SO question: http://stackoverflow.com/questions/37120956/react-cloneelement-pass-new-children-or-copy-props-children)\n",
        "title": "Documentation: passing key to React.createElement",
        "labels": "Type: Question",
        "id": 46272
    },
    {
        "body": "**Do you want to request a _feature_ or report a _bug_?**\nReport a bug\n\n**What is the current behavior?**\nWhen a form element disappears as the result of a state change (e.g., triggered by an onClick handler on the submit button), its onSubmit handler is not called. In HTML, even if a form element is removed from the DOM, its onSubmit handler is still called.\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\nPlain JS + HTML version (expected behavior): https://jsfiddle.net/b22925dw/\nReproduced in React: https://jsfiddle.net/yaf6p0ga/1/\n_The commented-out setTimeout in the react code is a usable hack to fix it for the time being_\n\n**What is the expected behavior?**\nThe code specified in the form's onSubmit should be executed before the form disappears.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact 15.0.2 / Chrome 51.0.2704.63 (64-bit) / OS X 10.11.5\n",
        "title": "Form disappears without calling onSubmit",
        "labels": "Type: Question",
        "id": 46273
    },
    {
        "body": "I have a problem with this kind of component:\n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <span>[OPTION1] show after onMouseEnter</span>\n          ) : (\n            <div>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n\nNotice that the first option1 is a `span`, option2 is a `div`.\n\nThis works fine when I move the mouse slowly.\nThough, if I \"cut\" through this with the mouse very fast, only the `onMouseEnter` event gets triggered, but not the `onMouseLeave` event.\n\nIt is always working though, if both options have the same tag (if both are `div` or both are `span`). \n\nEDIT:\nI think it has something to do with rerendering. When the components are of the same type, but I force a rerender, it causes the same issues. \n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <div key={Math.random()}>[OPTION1] show after onMouseEnter</div>\n          ) : (\n            <div key={Math.random()}>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n",
        "title": "onMouseLeave doesn't work if the node gets detached",
        "labels": "Type: Question",
        "id": 46274
    },
    {
        "body": "I'm using React to build an application for viewing multiple webcasts at one time. I have a `VideoGrid` component that has an arbitrary number of `VideoCell` components as children. Each `VideoCell` has a unique key as described [here](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children).\n\nI'm trying to implement the ability to swap the positions of webcasts on the screen. It's important that the DOM nodes are reordered and not recreated, in order to prevent the webcast embeds from reloading. Based on [the documentation](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children), the components should be reordered, not destroyed and recreated, because they have unique keys:\n\n> When React reconciles the keyed children, it will ensure that any child with `key` will be reordered (instead of clobbered) or destroyed (instead of reused).\n\nThe problem there is the \"...or destroyed\". It's vital that my components be reordered and not destroyed. I don't know how the diffing algorithm decides which components to reorder and which to destroy and recreate, but I'm seeing a mix of the two behaviors that doesn't do what I want.\n\nI created a simple test case on JSFiddle to demonstrate the problem I'm having: https://jsfiddle.net/nwalters512/cja067cn/3/. Click the button to swap the keys assigned to the first and last components. Note how the last component is correctly moved to the first position, but the remainder of the components (including the ones at indices 1 and 2, who don't change at all!) are destroyed and recreated. You can see that by how the embedded video reloads.\n\nIs there a way to force React to reorder children instead of destroying and recreating them?\n",
        "title": "How to force React to reorder keyed children instead of destroying/recreating",
        "labels": "Type: Question",
        "id": 46275
    },
    {
        "body": "Hi, I have an app implementing auth using React-router + Redux  + Sagas + JWT.\n\nTLDR;\nHow do I approach testing this authentication flow?\n\nBasically, I am using React-router's onEnter method to check if the user is authenticated to allow access to it. The function checks this info from the app state. When credentials are submitted, an action is dispatched which is received by the sagas which send an api request, and then store the credentials details in the local storage which then gets reduced in the app state.\n",
        "title": "How do I test the authentication flow in my app?",
        "labels": "Type: Question",
        "id": 46276
    },
    {
        "body": "I run this command \nnpm install --save react@15.0.0-rc.1 react-dom@15.0.0-rc.1\n![screenshot from 2016-04-17 14 11 38](https://cloud.githubusercontent.com/assets/16798574/14585668/bcac7660-04a6-11e6-8a07-97a8f9b285a2.png)\n",
        "title": "I got React v15 update error. ",
        "labels": "Type: Question",
        "id": 46277
    },
    {
        "body": "I am seeing something that looks like a bug and have written a simple test case for it.\n\nPlease refer to this WebpackBin as it contains the test scenario:\nhttp://www.webpackbin.com/EJpabsuJW\n",
        "title": "Children don't re-render when parent component is optimised",
        "labels": "Type: Question",
        "id": 46278
    },
    {
        "body": "Hi all,\n\nI use setState in a click function, and I pass a callback function to second parameter. Please look at [https://jsfiddle.net/009memtb/](https://jsfiddle.net/009memtb/), In the callback function, I cannot get event handler, is it reasonable?\n\nI try to pass event handler into callback like [https://jsfiddle.net/ozagLubw/2/](https://jsfiddle.net/ozagLubw/2/), but the state is wrong. \n\nHow can I get event handler and right state in setState callback function correctly?\n\nthank for your help in advance\n",
        "title": "callback in setState() second parameter cannot get mouse-click's event handler",
        "labels": "Type: Question",
        "id": 46279
    },
    {
        "body": "```\nvar ReactTransitionGroup = React.addons.TransitionGroup;\n\nvar Content = React.createClass({\n    componentWillAppear: function () {\n        console.log('componentWillAppear');\n    },\n    componentDidAppear: function () {\n        console.log('componentDidAppear');\n    },\n    componentWillEnter: function () {\n        console.log('MyBox.componentWillEnter');\n    },\n    componentDidEnter: function () {\n        console.log('MyBox.componentDidEnter');\n    },\n    componentWillLeave: function () {\n        console.log('MyBox.componentWillLeave');\n    },\n    componentDidLeave: function () {\n        console.log('MyBox.componentDidLeave');\n    },\n    render: function () {\n        return <div>content</div>;\n    }\n})\nvar TodoList = React.createClass({\n    getInitialState: function () {\n        return {show: false};\n    },\n    show: function () {\n        this.setState({\n            show: true\n        })\n    },\n    hide: function () {\n        this.setState({\n            show: false\n        })\n    },\n    render: function () {\n        var items = this.state.show ? <Content key='content'/> : '';\n        return (\n            <div>\n                <button onClick={this.show}>show</button>\n                <button onClick={this.hide}>hide</button>\n                <ReactTransitionGroup>\n                    {items}\n                </ReactTransitionGroup>\n\n            </div>\n        );\n    }\n});\n```\n\nCould you tell me where the problem is?\n",
        "title": "transitionGroup",
        "labels": "Type: Question",
        "id": 46280
    },
    {
        "body": "Alright, kind of a React newb but React is not following the principle of least surprises with this one so I have to ask.\n\nOur team only really wants serverside rendering for a particular project. We don't need to do much special on the client.\n\nHowever, as far as I have learned, you need to have a reference to the same React components on the client as you do on the server in order to actually get dynamic behavior (events are bound etc) on the client.\n\nMy question is, if we have a `<div id='react-root'> </div>`\n\nwhy isn't React setup so that on the front-end we could just call:\n\n``` js\nReactDOM.render(document.getElementById('react-root');\n```\n\n(without the React component first argument.)\n\nDoesn't / couldn't React have enough info to go off of already, so as to not need an actual reference to the React component on the front-end as well? As long as React on the front-end has a reference to the root DOM node, couldn't / shouldn't that be enough?\n\nThe whole thing where you have to re-render on the client is kinda unexpected. I am sure I am missing something, or there must be some good reason why the lib works this way, I just don't know and want to know which is why I am writing this. Thanks.\n",
        "title": "Support question - Serverside rendering only, why re-render on client?",
        "labels": "Type: Question",
        "id": 46281
    },
    {
        "body": "Hi everybody,\r\n\r\nThere something I don't understand in the TestUtils library.\r\n\r\nI want to test a react component with TestUtils.\r\nThe lifecycle of my component is \r\n\r\n```getInitialState\r\ncomponentWillMount\r\nrender\r\ncomponentDidMount\r\ncomponentWillReceiveProps\r\nshouldComponentUpdate\r\ncomponentWillUpdate\r\nrender\r\ncomponentDidUpdate\r\ncomponentWillUnmount\r\n```\r\n\r\nIf I use TestUtils.renderIntoDocument, these methods will never be call:\r\n\r\n```componentWillReceiveProps\r\nshouldComponentUpdate\r\ncomponentWillUpdate\r\ncomponentDidUpdate\r\n```\r\n\r\nbecause a new container is recreated to each call to renderIntoDocument.\r\n\r\n```renderIntoDocument: function( aReactElement) {\r\n   var div = document.createElement('div');\r\n   return ReactDOM.render( aReactElements, div);\r\n}\r\n```\r\n\r\nSee my fiddle: `https://jsfiddle.net/JacquesBonet/k0tyztzc/`\r\n\r\nSo I don't understand why you suggest to use `renderIntoDocument` method to test reacts component?\r\n\r\nI think its better to use method likes: \r\n\r\n```\r\n// create the container\r\nlet container = document.createElement('div');\r\n// call render method\r\nlet component = ReactDOM.render( reactElement, container);\r\n```\r\n\r\nto test react components.\r\n\r\nSee fiddle: https://jsfiddle.net/JacquesBonet/k0tyztzc/\r\n\r\nYour opinion?\r\n\r\nBest regards.\r\n",
        "title": "TestUtils.renderIntoDocument() and lifecycle",
        "labels": "Type: Question",
        "id": 46282
    },
    {
        "body": "Hello.\nI have the code:\n\n``` javascript\nclass Component extends React.Component\n{\n  render()\n  {\n    this.props.nested.prop = this.props.parse.nested.prop;\n    return <div>Component</div>;\n  }\n  componentDidMount()\n  {\n    console.log(this.props.nested.prop);\n  }\n}\nComponent.defaultProps = \n{\n  nested:\n  {\n    prop: \"default\"\n  }\n};\n\nconst obj1 = \n{\n  nested:\n  {\n    prop: \"obj1\"\n  }\n};\nconst obj2 = \n{\n  nested:\n  {\n    prop: \"obj2\"\n  }\n};\n\nclass Application extends React.Component\n{\n  render()\n  {\n    return (\n     <div>\n        <Component parse={obj1}/>\n        <Component parse={obj2}/>\n    </div>\n    );\n  }\n}\n\nReact.render(<Application />, document.getElementById('app'));\n//console output:\n//\"obj2\"\n//\"obj2\"\n```\n\nWhy do I get 1 variable reference for 2 separate components instead of 2 instanses of `nested.prop` for every component?\nWhy `this.props` saves only last setted value for **all instanses** of the component **after mounting**? Is it a normal behavior?\nI think the correct behavior is having different property values for different instanses.\n\nP.S. I tested this code [here](http://codepen.io/voronar/pen/mPwebK).\n",
        "title": "Nested properties issue",
        "labels": "Type: Question",
        "id": 46283
    },
    {
        "body": "I need to work around a bit of animation in react for that i am using the low level API of react i.e. React Transition Group. This i want to use because it provides me the life cycle hooks like componentWillEnter(callback), componentWillLeave(callback). But i am struck in the problem how to use those life cycle hooks. Herre is mine code\n\n```\nexport default class App extends Component {\n  componentWillLeave(callback) {\n    console.log('Component is leaving');\n  }\n  componentWillEnter(callback) {\n    console.log('component is entering')\n  }\n  render() {\n    const styles = require('./App.scss');\n    return (\n      <div className={styles.app}>\n          <ReactTransitionGroup transitionName=\"example\">\n            <div key={this.props.location.pathname}>\n              {this.props.children}\n            </div>\n          </ReactTransitionGroup>\n      </div>\n    );\n  }\n}\n\n```\n\nBut the life cycle hook function- componentWillEnter and componentWillLeave  are not getting called. Please let me know what mistake i am making\n",
        "title": "How to use life cycle hooks for animation using react low level API",
        "labels": "Type: Question",
        "id": 46284
    },
    {
        "body": "Per this article: https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f\n\nI posted this in StackOverflow: http://stackoverflow.com/questions/35855490/react-and-pre-binding-functions-for-performance\n\nI feel like I'm in a catch-22. If I use `bind` on event handlers or the `() => { }` pattern, there could be performance issues with re-rendering. If I use the method described in the article above, then I can't pass arguments to a single DRY function, I have to create several functions to handle different scenarios (as in one of the answers in the SO post, with `setEmail`, `setPassword`).\n\nWhat's the solution here?\n",
        "title": "Pre-binding is problematic, binding causes performance issues",
        "labels": "Type: Question",
        "id": 46285
    },
    {
        "body": "Hello React, \n\n<pre>\nIs their a way to show rendered element's value in title.\nlike, we have:-\n\nvar $title = &lt;span>my title&lt;/span>\n&lt;div title={$title}>my value&lt;/div>\n\nOUTPUT should be like this:\n&lt;div title='my title'>my value&lt;/div>\n</pre>\n",
        "title": "title tab value rendering using react",
        "labels": "Type: Question",
        "id": 46286
    },
    {
        "body": "Parent element \n\n```\nclass ReactWizard extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      childItems: [],\n      step: 0,\n      styleClass:null,\n      category: null,\n      data: {}\n    };\n    this._divStyle = this._divStyle.bind(this)\n    this._changeStep = this._changeStep.bind(this)\n  }\ncomponentWillMount(){\n    var wizardItems = [\n      <ReactWizardItem.start data={this.state.data}/>,\n      <ReactWizardItem.center data={this.state.data}/>,\n      <ReactWizardItem.finish data={this.state.data}/>\n    ];\n    this.setState({\n      childItems: wizardItems\n    })\n  }\nrender(){\nif(this.state.childItems.length > 0){\n      childItems = this.state.childItems.map((value, index) => {\n        return (\n          <div key={index} className=\"wizard-item\" data-wizard={index}>\n            {value}\n          </div>\n        )\n      })\n    }\n    var currentStep = this.state.step;\n    return(\n      <div className=\"wizard-outer\">\n        <div className=\"wizard-wrapper clearfix\" style={this.state.styleClass} id=\"wizardBox\">\n          {childItems}\n        </div>\n        <div className=\"wizard-nav\">\n          <a href=\"#\" className={\"btn  pull-left \" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>\n          <a href=\"#\" className={\"btn  pull-right \" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>\n        </div>\n      </div>\n    )\n  }\n}\n```\n\nChild component \n\n```\nclass ReactWizardItemCenter extends Component{\n  constructor(props){\n    super(props)\n  }\n  componentWillReceiveProps(nextProps){\n    console.log(nextProps)\n    console.log(\"Props updated\")\n  }\n  componentWillUpdate(){\n    console.log(\"Run if state changes\")\n  }\n  render(){\n    console.log(\"Render\")\n    return(\n      <div className=\"wizard\">\n        <div className=\"form-group\">\n          <label htmlFor=\"auto-video-subcategory\" className=\"control-label\">Subcategory</label>\n          <select type=\"text\" className=\"form-control\" id=\"auto-video-subcategory\" name=\"subcategory_id\">\n            <option value=\"\">--Select--</option>\n          </select>\n        </div>\n      </div>\n    )\n  }\n}\nReactWizardItem.center = ReactWizardItemCenter;\n```\n\nChild elements not  showing  anything on componetWillRecieveProps and componentDidUpdate.\n\nThis code working well when i change code\n\n```\nreturn(\n      <div className=\"wizard-outer\">\n        <div className=\"wizard-wrapper clearfix\" style={this.state.styleClass} id=\"wizardBox\">\n          <div key=\"0\" className=\"wizard-item\" data-wizard=\"0\">\n          <ReactWizardItem.start data={this.state.data}/>\n          </div>\n          <div key=\"1\" className=\"wizard-item\" data-wizard=\"1\">\n          <ReactWizardItem.center data={this.state.data}/>\n          </div>\n          <div key=\"2\" className=\"wizard-item\" data-wizard=\"2\">\n          <ReactWizardItem.finish data={this.state.data}/>\n          </div>\n        </div>\n        <div className=\"wizard-nav\">\n          <a href=\"#\" className={\"btn  pull-left \" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>\n          <a href=\"#\" className={\"btn  pull-right \" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>\n        </div>\n      </div>\n    )\n```\n\nI like to use first one, This code is to make a wizard like content.\n\nThanks in advance \n",
        "title": "Is there any way to update React Child Components ",
        "labels": "Type: Question",
        "id": 46287
    },
    {
        "body": "I have a project that creates a HTML layout based on json file\n**On the 4th and 3th step, some components are not call lifecycle functions**\n# For Example\n### Component code\n\n![Component code](http://i.stack.imgur.com/F9KGS.jpg) \nBaseNode \u2013 that is empty class\n### Rendering result\n\n![Rendering result](http://i.stack.imgur.com/AD9oc.jpg) \n### Console output\n\n![Console output](http://i.stack.imgur.com/k49KV.jpg)\n\n**Mini project with reproducible error:** [project](https://github.com/kirsanv43/ReactJsIssue)\n",
        "title": "Componen render but not call Lifecycle functions",
        "labels": "Type: Question",
        "id": 46288
    },
    {
        "body": "Can anyone let me know if using cloneElement (on exist element instance) or createElement (on react Element class) which one is better in term of performance?\nSometimes cloning something is faster than create new instance. Please let me know. Thanks\n",
        "title": "cloneElement vs createElement",
        "labels": "Type: Question",
        "id": 46289
    },
    {
        "body": "Anyone of you knows how I can simulate a swipe using testUtils event simulation?\n",
        "title": "How I can test a swipe with testUtils?",
        "labels": "Type: Question",
        "id": 46290
    },
    {
        "body": "Does facebook recommend a good backend to go with react? Maybe something that already has login page features built in?\n",
        "title": "Frameworks?",
        "labels": "Type: Question",
        "id": 46291
    },
    {
        "body": "Hello, guys!\n\nI made an exemple here to see exactly what I'm talking about:\nhttp://codepen.io/mga/pen/bEyZox\n\nI used context for the \"storeInput\" function because in my app it passes through more than one component.\n\nSorry for the short message but I don't have the best writing english skills and it's more easier for me to show you. If you don't understand something please let me know. Thanks!\n",
        "title": "ReactJS setState bug/my fault ",
        "labels": "Type: Question",
        "id": 46292
    },
    {
        "body": "for example:\n\n``` js\n\nclass Parent extends React.Component {\n componentDidMount() {\n  setTimeout(() => { this.forceUpdate();}, 1000);\n  }\n\n  render() {\n   return <div>{this.props.children}</div>;\n  }\n}\n\nclass Child extends React.Component {\n  render() { return <div>{this.props.random}</div>}\n}\n\nclass App extends React.Component {\n  render() {\n   return (\n     <Parent><Child random={Math.random()}/></Parent>\n   );\n  }\n}\n\n```\n",
        "title": "why this.props.children cannot re-render?",
        "labels": "Type: Question",
        "id": 46293
    },
    {
        "body": "Hi,\n\nI am trying to construct a mixin which takes a dev-defined component specification and constructs its prop-types + defaults accordingly. I am trying to do something like this:\n\n```\nvar _generatePropTypes = function(customData) {\n      //do the process here\n}\nvar MyMixin = {\n      propTypes : _generatePropTypes(this.getCustomData()),\n      getCustomData : function() { return this.customData;}\n}\n```\n\nThe above code does not work. Is there anyway I can do something similar?\n\nMany thanks!\n",
        "title": "\"Dynamic\" propTypes",
        "labels": "Type: Question",
        "id": 46294
    },
    {
        "body": "Is there a preferred method or performance benefit to hiding a node in the dom via css vs mounting and unmounting it?\n\nFor example, I have a render function with the following code:\n\n``` javascript\nconst {map} = this.context;\nlet selectedFeature;\nlet content;\n\n//- Infer the selected feature from the info window\nif (map.infoWindow && map.infoWindow.getSelectedFeature()) {\n  selectedFeature = map.infoWindow.getSelectedFeature();\n}\n\nif (selectedFeature !== undefined) {\n  content = [<Analysis selectedFeature={selectedFeature} />];\n} else {\n  content = [<Instructions />, <Tools />];\n}\n\nreturn (\n  <div className='analysis-panel custom-scroll'>\n    {content}\n  </div>\n);\n```\n\nand I am wondering is this is preferred over something like this:\n\n``` javascript\nreturn (\n  <div className='analysis-panel custom-scroll'>\n    <div className={`${selectedFeature === undefined : 'hidden' : ''}`}>\n        <Analysis selectedFeature={selectedFeature} />\n    </div>\n    <div className={`${selectedFeature === undefined : '' : 'hidden'}`}>\n        <Instructions />\n        <Tools />\n    </div>\n  </div>\n);\n```\n\nThe first snippet mounts and unmounts the node, and I feel this is cleaner in the Analysis component since I know selectedFeature will always be defined and I don't need any conditional code in this snippet or the Analysis component.  But this can change very frequently in the application so I was wondering if one method is preferred or more performant over the other? (If performance is the same I will probably go with the first snippet as it feels cleaner to me and Im guaranteed to have a value for selectedFeature)\n",
        "title": "Performance for Unmounting & Mounting a component vs hiding it",
        "labels": "Type: Question",
        "id": 46295
    },
    {
        "body": "React.render works fine,but not ReactDOM.render\n\n```\n{\n  \"name\": \"class1webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --devtool eval --progress --colors --hot --content-base build\"\n  },\n  \"author\": \"Eason\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"babel-core\": \"^6.5.2\",\n    \"babel-loader\": \"^6.2.2\",\n    \"react\": \"^0.14.7\",\n    \"webpack\": \"^1.12.13\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.5.0\",\n    \"babel-preset-react\": \"^6.5.0\"\n  }\n}\n\n```\n",
        "title": "ReactDOM not define in \"react\": \"^0.14.7\"",
        "labels": "Type: Question",
        "id": 46296
    },
    {
        "body": "Let's say I have a component which has propTypes:\n\n```\nstatic propTypes = {\n   isError: React.PropTypes.bool.isRequired\n};\n```\n\nI want to ensure that this contract is not broken, so I have a test:\n\n```\n    it('should require an isError prop', () => {\n        expect(function () {\n            let result = renderReactComponent(<Component/>);\n        }).to.throw(Error);\n    });\n```\n\nUnfortunately, it doesn't throw an error - it DOES display a Warning statement.  I'd like that warning statement to be available, thus I should be able to alter my test to this:\n\n```\n    it('should require an isError prop', () => {\n        let result = renderReactComponent(<Component/>);\n        expect(result).to.have.property('warning');\n    });\n```\n\nthus ensuring the contract is maintained.\n",
        "title": "Programmatically access warnings / errors after rendering",
        "labels": "Type: Question",
        "id": 46297
    },
    {
        "body": "I decided to try out React today, and began following the Getting Started Guide for using[ React from npm](https://facebook.github.io/react/docs/getting-started.html#using-react-from-npm).  Unfortunately I was unable to get the example up and running.  The first problem I encountered was the missing HTML file which I scavenged from lower in the page and adapted.  However once I loaded up the `bundle.js` file in the HTML page I received the following error in the browser console:\n\n`Uncaught Invariant Violation: _registerComponent(...): Target container is not a DOM element.`\n\nWas there a step I missed somewhere?\n",
        "title": "Following NPM getting started guide incomplete and results in errors",
        "labels": "Type: Question",
        "id": 46298
    },
    {
        "body": "**NOTE:** This may be an issue for React Router instead. If so, please inform me, and I will notify them.\n\nI'm using Webpack, react-router, and react.\n\nI got this error while using react-router with async routes and server-side rendering:\n\n``` shell\nbundle.js:1 Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) <noscript data-reacti\n (server) <div data-reactid=\".1\n```\n\nMy routes.cjsx has this:\n\n``` coffee\n# Routes\npath: 'game'\ngetComponent: (location, cb) =>\n    require.ensure [], (require) =>\n        cb null, require './views/game'\n```\n\nIf I change it to this, I no longer get that error:\n\n``` coffee\n# Routes\npath: 'game'\ngetComponent: (location, cb) =>\n    cb null, require './views/game'\n```\n\nIs this a bug or something else?\n",
        "title": "Async routes cause server-side checksum invalid error",
        "labels": "Type: Question",
        "id": 46299
    },
    {
        "body": "``` js\nvar Hello = React.createClass({\n    render: function() {\n        return <div>{this.props.name}</div>;\n    }\n});\n\nReact.render(<Hello name={[\"This \", <strong>IS</strong>, \" working!\"]} />, document.body);\n```\n\nHas warning:\n`Each child in an array should have a unique \"key\" prop. Check the render method of Hello. See http://fb.me/react-warning-keys for more information.`\nJsfiddle\nhttp://jsfiddle.net/7s7dee6L/\n",
        "title": "Use mixed arrays with strings has warning",
        "labels": "Type: Question",
        "id": 46300
    },
    {
        "body": "I'm trying to communicate with an iframe with the postMessage API but I have an issue with the eventListeners management in ES6\n\nIt is stated in the docs that\n\n> With React, every method is automatically bound to its component instance (except when using ES6 class syntax)\n\nThe problem is that `this.handler.bind(this) !== this.handler` so when I'm done with the event I can't remove the listener because I can't keep a reference to the handler. I could try to encapsulate the function, but the encapsulating function would also need a binding. I could try to super the constructor too but I'm not sure this is a good idea, plus I don't know the args it need. I'm quite sure I'm missing an important point here.\n\nAny help would be much appreciated !\n\n```\nexport default class SomeComponent extends Component {\n\n  handleIframeData(event) {\n    // some stuff in there that will need 'this' to be set to the component's context, to get props for example.\n  }\n\n  componentDidMount() {\n    window.addEventListener('message', this.handleIframeData.bind(this), false)\n  }\n\n  componentWillUnmount() {\n    // won't work because 'this.handleIframeData.bind(this) !== this.handleIframeData'\n    window.removeEventListener('message', this.handleIframeData, false)\n  }\n\n  render() {\n    return (\n      <div className=\"SomeComponent\" style={{height: '100%', width:'100%', display: 'table'}}>\n        <iframe src=\"assets/iframe/index.html\" style={{display: 'table-row', width: '100%', height:'100%', border: 0}}></iframe>\n      </div>\n    )\n  }\n}\n```\n\nThanks anyway !\n",
        "title": "Remove event listener used with bind in ES6 syntax ?",
        "labels": "Type: Question",
        "id": 46301
    },
    {
        "body": "I am making an app based on [this](https://github.com/gaearon/react-transform-boilerplate) boilerplate. Ref: [gist](https://gist.github.com/purezen/e421917fca4c05bb2c05)\n\nThe app is building fine, but my console shows this error:\nUncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.\n",
        "title": "console shows error: Uncaught Invariant Violation",
        "labels": "Type: Question",
        "id": 46302
    },
    {
        "body": "visit the link [`getting-started`](https://facebook.github.io/react/docs/getting-started.html), it's English page, how to read this page that writing by other language.\n",
        "title": "How can I visit the official site that writing by other language (default English)?",
        "labels": "Type: Question",
        "id": 46303
    },
    {
        "body": "I am trying to get visual attributes (width to be precise) of a component once it's rendered and CSS is applied. I've been trying with `componentDidMount` but width is still 0, I am not sure what I'm doing wrong.\n\noutput:\n\n```\nrendering\ncomponent did mount. The ribbon's width is 0\n```\n\nAnd after that, if I click on my header's button to \"re-route\" back to the same page (i.e. trigger an update), then the `componentDidUpdate` is called with the proper width.  Am I missing something or is this a bug?\n\nThanks you lots folks.\n\n``` javascript\nimport React, {Component} from 'react';\n\nexport default class RibbonHeader extends Component {\n  componentDidMount() {\n    console.log('component did mount. The ribbon\\'s width is', this.refs.ribbonSvg.width.animVal.value); // is 0\n    this.paintInSVG();\n  }\n\n  shouldComponentUpdate() {\n    console.log('should component update'); // never called\n    return true;\n  }\n\n  componentDidUpdate() {\n    // Not automatically called, but if I generate a routing event, it updates\n    console.log('component did update. The ribbon\\'s width is', this.refs.ribbonSvg.width.animVal.value);  // width is 1020px (good)\n    this.paintInSVG();\n  }\n\n  paintInSVG() {\n    const refRibbon = this.refs.ribbonSvg;\n    doSomeSVGMagicThatDependsOnTheWidth(refRibbon);\n  }\n\n  render() {\n    console.log('rendering');\n\n    return (\n      <svg ref=\"ribbonSvg\" styles={{width: '100%'}}></svg>\n    );\n  }\n}\n```\n\n**EDIT**:\nAdding a timeout to componentDidMount does the job, although this is probably not normal\n\n``` javascript\n  componentDidMount() {\n    setTimeout(() => {\n      this.paintInSVG();\n    }, 100);\n  }\n```\n",
        "title": "componentDidMount is called before the visual is rendered",
        "labels": "Type: Question",
        "id": 46304
    },
    {
        "body": "I have a class that is trying to do a get request in the componentDidMount function, however if I initially load a page with this component in it I get the following error. `$ is not defined`. I followed the example from xxx I just changed it over to ES6, perhaps I am using something improperly?\n\n`\nclass NativeApp extends React.Component {\n\n  state = {\n    banners : {}\n  }\n\n  loadBanners() {\n    this.serverRequest = $.get('/api/banners', function (res) {\n      this.setState(res)\n    }.bind(this))\n  }\n\n  componentDidMount() {\n    this.loadBanners()\n  }\n\n  render() {\n    return (\n      <DefaultLayout title={this.props.title} loggedIn={this.props.loggedIn} logOut={this.props.logOut}>\n        <button onClick={this.loadBanners} className=\"btn btn-primary\">Manually Load Banners WHY!!!</button>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default NativeApp\n`\n",
        "title": "$ is not defined",
        "labels": "Type: Question",
        "id": 46305
    },
    {
        "body": "I currently have a working example of a project that uses the latest React + TypeScript (using .tsx files), together with the AMD module loading system (with require.js) and building/running/debugging in Visual Studio 2015 CE.\n\nHowever, if I now try to nest 2 React components into a \"parent\" React component, I am getting exceptions in require.js when running the app...\n\nThe \"child\" React components are working fine individually, so the problem really seems to come from the nesting itself.\n\nIf I run the same project using an older version of React (13.x) and not using AMD modules, then the app works fine, also when nesting the React components.\n\nI've made a test repository public here: https://bitbucket.org/KoenT_IM/typescriptreactvs2015tests \n- HelloPenguin is the old project (using React 13.x and not using AMD)\n- HelloPenguin_React0.14.6_AMD is the new project (latest React 0.14.6 and using AMD)\n  If you remove lines 41 and 42 in ApplicationView.tsx, you will see that the app runs fine, and the individual React components also work fine.\n\nThis must be something I'm overlooking, but I can't seem to pin it down...\nDoes anyone know what could be wrong here and how to fix this problem?\nThanks!\n",
        "title": "nesting of components fails with latest stable React + TypeScript + AMD/require.js",
        "labels": "Type: Question",
        "id": 46306
    },
    {
        "body": "Copy of [stackoverflow question](http://stackoverflow.com/questions/34941364/update-react-component-without-parent-outside-of-it/34941598?noredirect=1#comment57616408_34941598)\n\nHow should I properly update component if it doesn't have a parent?\n\nI've found two ways to do it:\n### [First method](https://jsfiddle.net/69z2wepo/28597/)\n\nHere I update component through changing component`s state:\n\n```\nvar Hello = React.createClass({\n  render: function() {\n    if (!this.state) return null;\n    return (\n      <div>Hello {this.state.name}</div>\n    );\n  }\n});\n\n\nvar component = ReactDOM.render(\n  <Hello />,\n  document.getElementById('container')\n);\ncomponent.setState({name: \"World\"});\n\nsetTimeout(function(){\n  component.setState({name: \"StackOverFlow\"});\n}, 1000);\n```\n### [Second method](https://jsfiddle.net/69z2wepo/28596/)\n\nHere I update component through `ReactDOM.render` method:\n\n```\nvar Hello = React.createClass({\n  render: function() {\n    return (\n      <div>Hello {this.props.name}</div>\n    );\n  }\n});\n\n\nReactDOM.render(\n  <Hello name=\"world\"/>,\n    document.getElementById('container')\n);\n\nsetTimeout(function(){\n  ReactDOM.render(\n    <Hello name=\"StackOverFlow\"/>,\n      document.getElementById('container')\n  );\n\n}, 1000);\n```\n\nSo which method is correct? Or maybe here is a third, _correct_ way? I know that I should Flux etc., but I want to know the simplest way in the simplest example.\n",
        "title": "Question: how to just update parentless component outside of it?",
        "labels": "Type: Question",
        "id": 46307
    },
    {
        "body": "I need some element only have html, and do not need data-reactid.\n\nBut I don't except i should render two element with different function( e.g. renderToStaticMarkup, renderToString) and combine it because the element could be include by many element. Render split and combine could cause mistake when element is much more.\n\nIf i could set an attribute in compoment:\n\n``` javascript\nclass DefaultLayout extends  React.Component{    \n    render() {\n        return (\n            <html></html>\n        );\n    }\n};\nDefaultLayout.noNeedDiffCompoment = true;\nexport default DefaultLayout;\n```\n\nor a new pure html Compoment\n\n``` javascript\n\nclass DefaultLayout extends  React.PureHtmlComponent{    \n    render() {\n        return (\n            <html></html>\n        );\n    }\n};\nexport default DefaultLayout;\n```\n\nIf i write as above, the render function can auto swap render function to render elements.\n\nIs there any graceful solution?\n",
        "title": "Can i render every element with different render function?",
        "labels": "Type: Question",
        "id": 46308
    },
    {
        "body": "Hi,I'm new to react.If I want to click the button from DOM then change rendered class from CommentBox to CommentText below,how to do it using simple onclick function?Something like\n\n```\nif(btnclick){\nReactDOM.render(\n  <CommentBox />,\n  document.getElementById('content')\n);\n}else{\nReactDOM.render(\n  <CommentText />,\n  document.getElementById('content')\n);\n\n```\n\n```\n<div  id=\"content\"> </div>\n<button >  </button>\n```\n\n```\nvar CommentBox = React.createClass({\n  render: function() {\n    return (\n      <div className=\"commentBox\">\n        <h1>Comments</h1>\n\n      </div>\n    );\n  }\n});\n\nvar CommentText = React.createClass({\n  render: function() {\n    return (\n      <div className=\"commentBox\">\n        <h1>TEXT</h1>\n\n      </div>\n    );\n  }\n});\n```\n",
        "title": "onclick change render",
        "labels": "Type: Question",
        "id": 46309
    },
    {
        "body": "Is there any way to get a string of plain html from a react component, but on the client side?\n\nMy app has a design editor that lets you click elements and edit their style, nothing new there, but I'm re-making it from the ground up using react both for the app itself and for the templates that should be edited inside an iframe and then rendered elsewhere.\n\nAttaching click handlers to every editable element conditionally (eg: if the view is being rendered inside an iframe, for the editor) would be a nightmare, and I can't just use jquery $('.is-editable').click() like I used to because of the virtual DOM.\n\nTaking all that in account, it seems that the only solution is rendering the would-be-edited view as plain HTML so I can use the $('.is-editable').click() approach inside my editor.\n\nAny insights or similar experiences?\n",
        "title": "Render static html client-side",
        "labels": "Type: Question",
        "id": 46310
    },
    {
        "body": "I'm getting this error \n\nUncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n\nafter installing ReactCSSTransitionGroup and It seems that I have only one copy of react running.\n\nI'm using gulp and browserify to package the app.\n\n+-- babel-preset-react@6.3.13\n| +-- babel-plugin-transform-react-display-name@6.3.13\n| +-- babel-plugin-transform-react-jsx@6.3.13\n| | `-- babel-helper-builder-react-jsx@6.3.13\n|`-- babel-plugin-transform-react-jsx-source@6.3.13\n+-- eslint-plugin-react@3.15.0\n+-- formsy-react@0.17.0\n+-- react@0.14.6\n+-- react-addons-css-transition-group@0.14.6\n+-- react-dom@0.14.6\n+-- react-router@1.0.3\n",
        "title": "Issue with ReactCSSTransitionGroup",
        "labels": "Type: Question",
        "id": 46311
    },
    {
        "body": "e.g.\nhttp://codepen.io/moodysalem/pen/obeWRr?editors=001\n\nIs this something you should avoid doing?\n",
        "title": "Tips Documentation on accessing props of the children",
        "labels": "Type: Question",
        "id": 46312
    },
    {
        "body": "I'm developing a big GUI application. Chrome Developer Tools are lagging because of `data-reactid`s reaching a hundred kilobytes in size. Here's a (small) example:\n\n```\n .0.$=1$=011.0.$=1$=01$0.0.0.$///=11//=1$//=011/=1$//=011/=01$/=0011.0.$//////=10/////=1$/////=010////=1$/////=010////=01$////=0010///=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=001$///=00010//=0001$//=000010/=0001$//=000010/=00001$/=0000010.$///////=11//////=1$//////=011/////=1$//////=011/////=01$/////=0011////=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=0001$///=000011//=00001$//=0000011/=00001$//=0000011/=000001$/=00000011.0.0.$=1$=01$=001$=00012.0.0.$10/=1$10.$/=11\n```\n\nWhat do I do wrong? How `data-reactid` is computed (roughly)? Could you create a paragraph somewhere in the performance manual on this issue?\n",
        "title": "Enormous data-reactid",
        "labels": "Type: Question",
        "id": 46313
    },
    {
        "body": "> **My Target:** I am having a div which scrolls. But on coming to the top or the bottom after the scrolling the div, the scrolling starts happening on the entire page itself which I don't want. I think it's happening due to event propagation, so I am trying to stop in following manner.\n> \n> **My Implementation:** I am using \"extends Component (es6 way)\" to create my components. And I've put onWheel event listener as  \n> \n> ```\n> return (\n>   <div className='scroll-box-list' onWheel = {(e)=>{console.log('Scrolling Me..'); e.stopPropagation();}}>\n>       <OtherThings />\n>   </div>\n> );\n> ```\n> \n> It's consoling out 'Scrolling Me' fine but I am not able to stop propagating this event to the parent.\n> **Not sure why stopPropagation is not happening exactly or whether this issue is happening because of propagation**\n> \n> I don't want to use libraries which used mixins, so please don't suggest me this way.\n",
        "title": "onWheel Stop bubbling is not happening.",
        "labels": "Type: Question",
        "id": 46314
    },
    {
        "body": "Hi,\n\nAs much as I understand React component lifecycle, `componentDidMount()` should fire after `render()` is done, but I just found out today that this is not the case, and I'm not sure if this is a bug or lack of understanding from my side.\n\nIf I call a function that return some `jsx` inside `render()`, it always run after `componentDidMount()`, so if I have this setup, `componentDidMount()` always finish before `_renderTable()` or `_renderMessage()`\n\n``` jsx\nexport default class Table extends React.Component {\ncomponentDidMount() {\n...\n}\n\nrender() {\n  const content = this.props.valid ? this._renderTable() : this._renderMessage()\n  return (\n    {content}\n  )\n}\n_renderTable() {...}\n_renderMessage() {...}\n}\n```\n\nAm I missing something? or is it some bug? Thanks!\n",
        "title": "componentDidMount is called before render is completly done",
        "labels": "Type: Question",
        "id": 46315
    },
    {
        "body": "Hello, I need advice about drag n drop sorting with react. \n###### 1) Start\n\nData:\n\n``` js\n[\"one\", \"two\", \"three\"]\n```\n\nRendered DOM:\n\n``` html\n<ul>\n    <li>one</li>\n    <li>two</li>\n    <li>three</li>\n</ul>\n```\n###### 2) After manual sorting with drag n drop\n\nData:\n\n``` js\n[\"one\", \"two\", \"three\"]\n```\n\nRendered DOM:\n\n``` html\n<ul>\n    <li>three</li>\n    <li>one</li>\n    <li>two</li>\n</ul>\n```\n###### 3) Changing data\n\nData:\n\n``` js\n[\"three\", \"one\", \"two\"]\n```\n\nReact apply changes from array to dom:\n\n``` html\n<ul>\n    <li>two</li>\n    <li>three</li>\n    <li>one</li>\n</ul>\n```\n\nfor this reason i have to refund dom element to his place (`container.insertBefore(item, itemOldSibling)`):\n\n``` html\n<ul>\n    <li>three</li>\n    <li>one</li>\n    <li>two</li>\n</ul>\n```\n###### Problem:\n\nIf i have deep nesting of components\n\n``` html\n...\n<ul>\n    <li><SomeOtherComponent data={...}/></li>\n    <li>one</li>\n    <li>two</li>\n</ul>\n...\n```\n\nreact do full rerender and \n1) is no longer needed `insertBefore`\n2) If left `insertBefore`, it falls with an error because `item` and `itemOldSibling` no longer exist.\n\nWhether there is a normal way to dnd sorting with react?\n",
        "title": "Drag n Drop elements sorting. ",
        "labels": "Type: Question",
        "id": 46316
    },
    {
        "body": "How is it possible to make **pluggable** AOP-style component which transforms props and transmits it to child? More precisely, how to pass props to child element in parent render method?\nI want to use it like this:\n\n``` javascript\n// Scalable.js\n// Example of AOP-style decorating component\nimport React from 'react'\n\nconst Scalable = ({children}) =>\n  const scaledData = children.props.data.map(e => e + 1) // example 'transformation'\n  children.props.data = scaledData\n  {children}  // this is what i want\n\nScalable.propTypes = {\n  children: React.PropTypes.element.isRequired\n}\n```\n\n``` javascript\n// ScalablePlot.js\n// plug <Scalable /> to transform data passed to <Plot />\n// and render <Plot /> with transformed data\nimport React from 'react'\n\nconst ScalablePlot = ({data}) =>\n  <Scalable>\n    <Plot data={data} />\n  </Scalable>\n```\n\n``` js\n// Plot.js\nimport React from 'react'\n\nconst Plot = ({data}) ->\n  //paint plot using data\n\nPlot.propTypes = {\n  data: React.PropTypes.arrayOf(React.PropTypes.number)\n}\n```\n\nHowever, when i do this, react renders child element without data props.\n# UPD\n\nSolution: should have used [React.cloneElement](https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement)\n",
        "title": "Way to create pluggable Decorating Component",
        "labels": "Type: Question",
        "id": 46317
    },
    {
        "body": "There is 2 properties in SyntheticEvent, currentTarget and target.\nIt is identical usage? or what is the difference between them?\n",
        "title": "Difference between currentTarget and target of SyntheticEvent",
        "labels": "Type: Question",
        "id": 46318
    },
    {
        "body": "![screenshot 2015-12-22 15 57 53](https://cloud.githubusercontent.com/assets/6501089/11966958/c7821ccc-a8c4-11e5-9aaa-f2c663762a63.png)\n",
        "title": "Server and Client render the same markup, but React still indicates checksum invalid",
        "labels": "Type: Question",
        "id": 46319
    },
    {
        "body": "When I preview huge markdown file with changes, dangerouslySetInnerHTML is very slow,\ncan I use react to smart innerHTML? I don't know how to do it, thx.\n",
        "title": "diff/patch with markdown preview",
        "labels": "Type: Question",
        "id": 46320
    },
    {
        "body": "I have the fairly rare, but given the internet by no means unusual, situation where I need to embed LaTeX code that needs to be interpreted later (by a MathJax, or KaTeX, etc). The following code doesn't work due to JSX intepretation of the bits inside `{...}`:\n\n```\n<p>\\[\n  p_1 = some\\ point, \\\\\n  p_2 = some\\ other\\ point, \\\\\n  distance = (p_2 - p_1), \\\\\n  ratio = \\frac{percentage}{100}, \\\\\n  new\\ point = p_1 + distance \\cdot ratio\n\\]</p>\n```\n\nUsing ES2015 tempating strings also doesn't work, because then the `\\` gets interpreted instead:\n\n```\n<p>{`\\[\n  p_1 = some\\ point, \\\\\n  p_2 = some\\ other\\ point, \\\\\n  distance = (p_2 - p_1), \\\\\n  ratio = \\frac{percentage}{100}, \\\\\n  new\\ point = p_1 + distance \\cdot ratio\n\\]`}</p>\n```\n\nAnd of coure, double escaping all the `\\` works but becomes _impossible_ to read or write:\n\n```\n<p>{`\\\\[\n  p_1 = some\\\\ point, \\\\\\\\\n  p_2 = some\\\\ other\\\\ point, \\\\\\\\\n  distance = (p_2 - p_1), \\\\\\\\\n  ratio = \\\\frac{percentage}{100}, \\\\\\\\\n  new\\\\ point = p_1 + distance \\\\cdot ratio\n\\\\]`}</p>\n```\n\nSo.. .is there a JSX feature that \"turns off\" interpretation for an element? Something like this, that treats the text inside the element as \"untouchable\"?\n\n```\n<p verbatim>\\[\n  p_1 = some\\ point, \\\\\n  p_2 = some\\ other\\ point, \\\\\n  distance = (p_2 - p_1), \\\\\n  ratio = \\frac{percentage}{100}, \\\\\n  new\\ point = p_1 + distance \\cdot ratio\n\\]</p>\n```\n",
        "title": "How would one pass LaTeX code into a component?",
        "labels": "Type: Question",
        "id": 46321
    },
    {
        "body": "I have some list item, and I want know which one is clicked by user,\nso I set onClik on every `<li>` item,\nand I user `event.target` to get the node clicked,\nbut I get this issue, my `<li>` items has children nodes,\nwhen user click the children inside the `<li>` element, \n`event.target` is not the element I want, how do I fix it?\n\nmy code:\n\n``` js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\nvar CC = React.createClass({\n\n    handleClick: function(e) {\n        console.log(e.target.getAttribute('data-key'));\n    },\n\n    render: function() {\n        var s = {\n            border: '1px solid #ddd',\n            display: 'block',\n            padding: '10px'\n        };\n        var items = this.props.arr.map(function(a, i) {\n            return (\n                <li key={i} onClick={this.handleClick} style={s} data-key={i}>\n                    <img src=\"images/joy.png\"/>\n                </li>\n                );\n        }, this);\n\n        return (\n            <ul >\n                {items}\n            </ul>\n            );\n    }\n});\n\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            arr: [1,2,3]\n        };\n    },\n\n    render: function() {\n        return (\n            <div>\n                <CC arr={this.state.arr}/>\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<App/>, document.getElementById('app'));\n```\n\nwhen user click the `<img>` inside `<li>`,\n`e.target.getAttribute('data-key')` return `null`\n\nI do can fix it by add the `data-key` attribute to all of `<li>` element's children,\nlike:\n\n``` js\nvar items = this.props.arr.map(function(a, i) {\n    return (\n        <li key={i} onClick={this.handleClick} style={s} data-key={i}>\n            <img src=\"images/joy.png\" data-key={i} />\n        </li>\n        );\n}, this);\n```\n\nbut I don't think it is a elegant way.\n",
        "title": "How to get the index of clicked element?",
        "labels": "Type: Question",
        "id": 46322
    },
    {
        "body": "```\nThe following is the react render it works successfully when I get the single input tag and error occurs (Error: Parse Error: Line 59: Adjacent JSX elements must be wrapped in an enclosing tag\n    at http://localhost/PHP-React-Demo/update_record.html\n\n... >                            \n                                ^\n\n\n* @param {object?} options Options to pass to jstransform) when render multiple input text fields.\nrender : function(){ \n                      var currentId = this.state.currentId;\n\n                      var phpData = this.state.phpData || [];\n\n                      var selected = phpData.filter(function (item) {\n                          return item.id === currentId;\n                      });  \n                        DBdata = this.state.phpData || [];\n                        return (\n                        <div>\n                        <form >\n                        Select ID :\n                          <select onChange={this.handleChange}>\n                          {DBdata.map(function(d){\n                                   return(\n                                    <option name=\"id\" value={d.id}>{d.id}</option>\n                                   );\n                          })};\n                          </select>\n                          <button name=\"submit\" value=\"submit\">update</button><br/>\n                        {selected.map(function(datafield){\n                          return(\n                            // <input type=\"text\" value={datafield.name} />//if I remove this comment it shows the above error\n                            <input type=\"text\" value={datafield.email} />                            \n                          );\n                        })}\n                       </form>\n                       </div>\n                      )}\n              });\n              React.render(\n                <DataInTableFormat source=\"http://localhost/PHP-React-Demo/index.php\" />,\n                  document.getElementById('Table-data')\n                );\n```\n",
        "title": "React JS display all data in the text field for particular selected ID",
        "labels": "Type: Question",
        "id": 46323
    },
    {
        "body": "Are stateless components optimized using React.createElement so they arent re-rendered if the props havent changed?\n\nhttps://facebook.github.io/react/docs/reusable-components.html#stateless-functions\n\nIf so, it would be nice to mention that in the docs. Because then there is a significant difference between the following:\n\n``` js\nSomeComponent = (props) => {\n  return <div>{props.hugeList.map(/*...*/)}</div>\n}\n\nPerformant = (props) => {\n  return <SomeComponent hugeList={props.friends}/>\n}\n\nNotPerformant = (props) => {\n  return SomeComponent({hugeList: props.friends})\n}\n```\n\nAnd it may not seem evident to someone thinking that they're just functions...\n",
        "title": "Stateless Component Performance",
        "labels": "Type: Question",
        "id": 46324
    },
    {
        "body": "Documentation doesn't have neither any examples nor links to examples.\n\nI want to know how, step by step, to use React on a server in an Expressjs application. How component files should look, how they are connected to templates and layouts, how Expressjs' `response.render('template')` should behave if I render react on server, how to include React components in a template, should components be compiled in advance, and many other questions.\n\nIn particularly, I have a Dust.js template that is rendered this way in a controller:\n\n```\nrouter.get('/', function(req, res, next) {\n    res.render('index', {\n        title: 'Title',\n        page: 'index',\n        foo: 'Foo'\n    });\n});\n```\n\nI compile and concat my `js` assets in one `app.js` file and include it in my template like this:\n\n```\n        <script src=\"/js/app.js\" type=\"text/javascript\" charset=\"utf-8\" async></script>\n    </body>\n</html>\n```\n\nAnd now I want to know how to use React on a server. How I need to change my current routine to compile/render react AND my template on a server.\n\nFor now when I use `ReactDOMServer.renderToString` and `ReactDOMServer.renderToStaticMarkup` I get these errors and I don't know what does it mean because React documentation doesn't have any errors explanations:\n\n`Error: Invariant Violation: renderToStaticMarkup(): You must pass a valid ReactElement.`\n`TypeError: Cannot read property '__reactAutoBindMap' of undefined`\n",
        "title": "How to use server side rendering in React in Expressjs app?",
        "labels": "Type: Question",
        "id": 46325
    },
    {
        "body": "React component lifecycle dictates that when new props roll in, `componentWillReceiveProps` gets called, where you can calculate the new state and set it without a second cycle. Afterwards, shouldComponentUpdate gets called and we can compare props and state of last cycle with the next one.\n\nHowever, if state is a product of the props, it makes more sense to check whether the props have changed before calculating the state, so unnecessary calculations can be avoided. This produces some ugly looking code where `componentWillReceiveProps` first runs the code that would otherwise be in `shouldComponentUpdate` and based on that result sets a new state, or terminates. \n\nSimplified Example:\n\n```\ncomponentWillReceiveProps: function (nextProps) {\n    if (nextProps === this.props) {\n        return;\n    }\n\n    // Calculate new state\n    this.setState(...);\n},\n\nshouldComponentUpdate: function (nextProps, nextState) {\n    return this.state !== nextState;\n}\n```\n\nIs there a cleaner way of approaching this where no resources are wasted on unnecessary state calculations?\n",
        "title": "Optimizing componentWillReceiveProps and shouldComponentUpdate",
        "labels": "Type: Question",
        "id": 46326
    },
    {
        "body": "Hi I'm new to React. I'm looking use snap svg for rendering some svg images into some views, however I'm not quite sure how best to set this up. I'm using ec6 and the Babel transpiler. Could you explain the best way to add snap svg so that it can render to a view please. \n\nReally looking for best practise here rather than me doing it completely the wrong way. \n\nThanks\n",
        "title": "Rendering a snap svg image",
        "labels": "Type: Question",
        "id": 46327
    },
    {
        "body": "In the [docs](https://www.npmjs.com/package/react-dom), you have an example for server side code and an example for client side code. I thought isomorphic code was supposed to work on both automatically.\n",
        "title": "If it's isomorphic code, why do you require different code on the server",
        "labels": "Type: Question",
        "id": 46328
    },
    {
        "body": "Hey guys!\nSo in this application I'm writing there's a component called \"help section\". It's basically a box that shows some predefined texts about the component the user's messing with.\n\nI want to be able to tell my \"help section\" component which component to show help for. As of now, I'm using Flux with some actions and a store. This isn't too bad and works quite nicely, however it's quite a large setup, with 2 files defined specifically for this cause. There are also a number of other issues that I've experienced such as \"help section\" actions dispatching because of other actions (which raises a \"Cannot dispatch in the middle of a dispatch\" error).\n\nHowever, if I could define \"help section\" as a **singleton**, I could just `import helpSection from './HelpSection` and be done with it, since I'll get the **instance** of \"help section\". All I have to do is expose a method on `helpSection` that sets the properties I want to change and call it.\n\nI know it breaks React's unidirectional data flow, with a component changing another component, but maybe it's worth it sometimes. The way I think about it, it's sort of a combination of a store, some actions and a component into one object. A lot of components will only get instantiated once at run time so maybe it'll be quite useful in some cases.\n\nI couldn't find any reference to this on the web other than in [this JSfiddle](https://jsfiddle.net/69z2wepo/7764/), which seems to work nicely (It's a bit unclear IMO). Is this a good way to do it?\n\nI'm quite a novice in JavaScript and React so I might be missing some obvious points, hopefully not.\nWhat do you think about this?\nThanks for reading.\n\n(P.S. Sorry for any ambiguousness, English is not my native language... :smile:)\n",
        "title": "Singleton React Component",
        "labels": "Type: Question",
        "id": 46329
    },
    {
        "body": "Will explain the issue briefly, instead of extending React.component I have a class which gets state from a getInitialState function if exists:\n\n```\nexport default class BaseComponent extends React.Component {\n  constructor (props, children) {\n    super(props, children);\n    this.state = this.getInitialState ? this.getInitialState() : {};\n  }\n}\n```\n\nWhen using it in a component looks like this:\n\n```\nexport default class SomeComponent extends BaseComponent {\n    getInitialState () {\n        return {\n          ...\n        };\n     }\n}\n```\n\nThis triggers a warning by react:\n\nWarning: getInitialState was defined on SomeComponent, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\n\nSo my question is, is there a way to disable this warning from happening?\n\nCheers!\n",
        "title": "Disable a specific warning",
        "labels": "Type: Question",
        "id": 46330
    },
    {
        "body": "Here is the example:\n\n```\n'use strict';\nimport React from 'react';\nexport var componentA=React.createClass({\n  componentWillMount(){\n    this.setState({\n      appList:this.props.appList,\n      c:this.props.c\n    })\n  },\n  componentWillReceiveProps(newProps){\n    this.setState({\n      appList:newProps.appList,\n      c:newProps.c\n    })\n  },\n  render(){\n    return (\n      <ul>\n        {this.state.appList.map(function(object,i){\n          return <li>\n            <input type=\"text\" defaultValue={object} ref={'input'+i}/>\n          </li>\n        })}\n        <li>{this.state.c}</li>\n      </ul>\n    );\n  },\n  componentDidUpdate(){\n    console.log(this.refs)\n    console.log(this.refs.input1.value);\n  }\n})\n```\n\nI use it on page A:\n\n```\nvar appList=[12,4,5,6,7];\n      var c=12;\n      React.render(<ComponentA appList={appList} c={c}/>,$('#containerA')[0]);\n\n      setTimeout(function(){\n        var appList=[3,4,5,3];\n        var d=20;\n        React.render(<ComponentA appList={appList} c={d}/>,$('#containerA')[0]);\n      },2000);\n```\n\nbut after the second update, I found that the values of the inputs can't change according to the state that I pass in the second time. \n\nI also want to know, if there are some UI operation happened during two calls for the \"render\", is it possible that React can reserve those for users? or just refresh the whole component according the state?\n",
        "title": "Does the change of the state always fire the function \"render\"?",
        "labels": "Type: Question",
        "id": 46331
    },
    {
        "body": "I am having lots of trouble testing out whether clicking on my rendered button element is invoking the onClick handler.\n\nHere is my code for the Component to be tested...\n\n```\n'use strict';\n\n//Library Dependencies\nconst React = require('react');\n\nconst CategoryClearButton = React.createClass({\n\n  render() {\n    return (\n      <button type=\"reset\" className=\"btn btn-primary btn-sm\" onClick={this._clearAllSelectedCategories}>\n        Clear\n      </button>\n    );\n  },\n\n   _clearAllSelectedCategories() {\n    this.props.handleClick();\n  }\n\n});\n\nmodule.exports = CategoryClearButton;\n```\n\nHere is my test case using Jasmine...\n\n```\n'use strict';\n\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst TestUtils = require('react-addons-test-utils');\n\nconst CategoryClearButton = require('./CategoryClearButton.jsx');\nconst Actions = require('../../../actions/DashboardActions');\n\nlet element;\n\ndescribe('CategoryClearButton', () => {\n\n  beforeEach(() =>{\n    element = TestUtils.renderIntoDocument(<CategoryClearButton />);\n  });\n\n it('will call the _clearAllSelectedCategories method when clicked', () => {\n    let renderedButton = TestUtils.findRenderedDOMComponentWithTag(element, 'button');\n    spyOn(element, '_clearAllSelectedCategories');\n    TestUtils.Simulate.click(renderedButton);\n    expect(element._clearAllSelectedCategories).toHaveBeenCalled();\n })\n\n})\n```\n\nHere is the error message i'm getting in my console...\n\n```\nPhantomJS 1.9.8 (Mac OS X 0.0.0) CategoryClearButton will call the _clearAllSelectedCategories method when clicked FAILED\n    TypeError: 'undefined' is not a funtion....\n\nPhantomJS 1.9.8 (Mac OS X 0.0.0): Executed 70 of 70 (1 FAILED) (0.069 secs / 0.101 secs).\n```\n\nI am pretty sure the issue here is with the simulate click event not firing, because I can make this test pass by doing the following, which leads me to believe that the spy is doing its job...\n\n```\nit('will call the _clearAllSelectedCategories method when clicked', () => {\n    let renderedButton = TestUtils.findRenderedDOMComponentWithTag(element, 'button');\n    spyOn(element, '_clearAllSelectedCategories');\n    element._clearAllSelectedCategories();\n    expect(element._clearAllSelectedCategories).toHaveBeenCalled();\n  })\n```\n\nCan anybuddy give a newbie some guidance?\nThanks,\nAndrew\n",
        "title": "Issue with Simulate.Click invoking a function that I am spying on.",
        "labels": "Type: Question",
        "id": 46332
    },
    {
        "body": "",
        "title": "Inline Style interferes with ReactCSSTransitionGroup CSS",
        "labels": "Type: Question",
        "id": 46333
    },
    {
        "body": "I'm quite unsure where this error is coming from.\n\n```\nError: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:26176 <- node_modules/react/node_modules/fbjs/lib/invariant.js:46:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19543 <- node_modules/react/lib/ReactOwner.js:68:0\n    at attachRef (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20361 <- node_modules/react/lib/ReactRef.js:23:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20380 <- node_modules/react/lib/ReactRef.js:42:0\n    at attachRefs (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20251 <- node_modules/react/lib/ReactReconciler.js:21:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:8011 <- node_modules/react/lib/CallbackQueue.js:66:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20159 <- node_modules/react/lib/ReactReconcileTransaction.js:81:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23475 <- node_modules/react/lib/Transaction.js:203:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23422 <- node_modules/react/lib/Transaction.js:150:0\n    at batchedMountComponentIntoNode (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18151 <- node_modules/react/lib/ReactMount.js:283:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23409 <- node_modules/react/lib/Transaction.js:137:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:15712 <- node_modules/react/lib/ReactDefaultBatchingStrategy.js:62:0\n    at batchedUpdates (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:21476 <- node_modules/react/lib/ReactUpdates.js:95:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18345 <- node_modules/react/lib/ReactMount.js:477:0\n    at ReactMount__renderNewRootComponent (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18419 <- node_modules/react/lib/ReactMount.js:551:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18439 <- node_modules/react/lib/ReactMount.js:571:0\n    at React_render (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20723 <- node_modules/react/lib/ReactTestUtils.js:77:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33989 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:11:16\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33991 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:6:31\n    at newRequire (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:75 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/node_modules/proxyquireify/lib/prelude.js:75:0)\n    at /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:1\n```\n\nI'm using coffeescript because the other tests are written in coffeescript but (1) I tried it with JSX and the same error and (2) it should matter anyways.\n\nDo here's my component, and it has a ref:\n\n``` jsx\nReact.createClass({\n  displayName: 'DollarInput',\n  // ...\n  render: function() {\n    return (\n      <input\n        ref=\"input\"\n        onChange={this.onChange}\n        onKeyDown={this.onKeyDown}\n        onBlur={this.onBlur}\n        value={this.state.amount}\n        className={this.props.className}\n        id={this.props.id}\n        autoComplete=\"off\"/>\n    )\n  }\n});\n```\n\nAnd here's my test -- using jasmine, karma, and phantomjs.\n\n``` coffee\nTestUtils = require('react-addons-test-utils')\nDollarInput = React.createFactory(require('user-portal/src/scripts/ui/dollar-input'))\n\ndescribe \"React dollar input\", ->\n  dollarInput = TestUtils.renderIntoDocument(DollarInput())\n```\n\nAny ideas where that error comes from?\n\nSome trouble shooting:\n- It says maybe I may have two instances of react being loaded. Well, I'm using bower and adding the proper files in my karma configuration:\n\n``` js\nfiles: [\n  'bower_components/react/react.js',\n  'bower_components/react/react-dom.js',\n  // ...\n  'test/*.coffee'\n]\n```\n\nI don't believe `require('react-addons-test-utils')` includes another version of React. And I wouldnt imagine Karma is loading react more than once either...\n- I don't believe I'm adding a ref outside the component's render function either. But when I remove the ref, then I dont get this error -- but the component wont work properly...\n\n``` jsx\nReact.createClass({\n  displayName: 'DollarInput',\n  // ...\n  render: function() {\n    return (\n      <input\n        onChange={this.onChange}\n        onKeyDown={this.onKeyDown}\n        onBlur={this.onBlur}\n        value={this.state.amount}\n        className={this.props.className}\n        id={this.props.id}\n        autoComplete=\"off\"/>\n    )\n  }\n});\n```\n",
        "title": "TestUtil.renderIntoDocument issue with refs",
        "labels": "Type: Question",
        "id": 46334
    },
    {
        "body": "So, I feel like componentDidUpdate and references are executing in the wrong order.\n\nBackground: I'm working on a situation where you're in a list of input fields, with a blank row of fields at the bottom. When you press enter in any field, it moves your focus to the next one by talking to a register which keeps track of all the fields and their positions. Shift+enter goes in reverse as well.\n\nIf you press enter on the final field, it kicks off a Flux like action which results in the next blank field being rendered, and then I want to move focus to that row. So I set up a callback that will fire on the next componentDidUpdate, knowing that when that happens, I'll have access to the new Field, which registers itself during componentWillMount. That works just fine, I can access that component just fine, however, if I want to use a method to direct focus to a DOM Element within it, it will be too early to make use of references:\n\n``` js\nconst FieldComponent = React.createClass({\n  receiveFocus: function() {\n    ReactDOM.findDOMNode(this.refs.input).focus() // error: this.refs.input == undefined\n  },\n  render: function() {\n    return React.DOM.div({},\n      React.DOM.label({}, \"Some Label\"),\n      React.DOM.input({ref: \"input\", type: \"text\"})\n    )\n  }\n})\n```\n\n...because the references have not yet been bound, even though we're at the componentDidMount/Update stage of the lifecycle, so this...\n\n``` js\n  receiveFocus: function() {\n    console.log(Object.keys(this.refs)) // log: []\n    setTimeout(function() {\n      console.log(Object.keys(this.refs)) // log: [\"input\"]\n    },  0)\n  },\n```\n\n...seems to indicate that reference binding happens synchronously after. Now, I could easily get around this by using ReactDOM.findDOMNode(this) and then using querySelector to find my target, but that isn't a clean `React` way to go about solving the issue, I believe based on what I know of the API that references should be bound/executed before componentDidUpdate/Mount fires. Does this not occur by design, mistake, or incompatibility with other goals?\n",
        "title": "componentDidUpdate fires before references are triggered or associated",
        "labels": "Type: Question",
        "id": 46335
    },
    {
        "body": "I apologize if this is not the best place to ask this but...\n\nWe are getting ready to document our ruby react.js adapter (react.rb) and would like to take the current react.js docs as the starting point, and change the examples etc to use the ruby dsl syntax.\n\nI believe that this is within the docs creative-commons license correct?\n",
        "title": "adapting docs to react.rb",
        "labels": "Type: Question",
        "id": 46336
    },
    {
        "body": "Hi, guys:\nI get a problem. I write a react component. When I render the virtual selector to body in bootstrap modal, But I can not edit input or focus. \nOnline example: http://code-artisan.github.io/react-virtual-selector/examples/modal.html\n",
        "title": "Input element can not focus and can not edit",
        "labels": "Type: Question",
        "id": 46337
    },
    {
        "body": "I've been playing lately with getting React to work for building client/server apps for the new Apple TV so I'm opening this thread just to start the conversation around the issue in case other people are also looking into it.\n\nFor those unfamiliar with the subject the SDK for the new Apple TV lets you build JavaScript applications that get loaded from your server and evaluated in a JS context on the device. Now for building interfaces they came up with a [DOM implementation](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) and some flavour of XML called [TVML](https://developer.apple.com/library/prerelease/tvos/documentation/LanguagesUtilities/Conceptual/ATV_Template_Guide/) that just bridges to native UI components and APIs (much like React Native in a way). They also have a small JavaScript API called [TVJS](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) for creating documents, making HTTP calls, etc.\n\nThis way of building apps is an alternative to the traditional iOS development that you can also do on the Apple TV with Swift/Obj-C, UIKit and the other frameworks. The interesting thing is that the default Apple TV apps like Music, TV Shows, etc. are built as JS client/server apps with Browserify and Handlebars templates.\n\nSo at a first try React kind of works on the platform (you might need to shim `window` and `document` as they are not available) but as you start getting into the details you realise there are some limitations to ATV's DOM model. For example I just noticed that [IDL attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#Content_versus_IDL_attributes) are not working so that might be a problem. Then some elements are conflicting with HTML elements that have the same name, same issue for property names, and so on.\n\nIn conclusion I think a custom React renderer for the Apple TV would be the solution but the strange thing is that it would still be a DOM renderer like `react-dom` only configured for ATV's elements and attributes and patched for its DOM implementation's quirks. Do you guys think this is feasible?\n",
        "title": "React-dom and Apple TV",
        "labels": "Type: Question",
        "id": 46338
    },
    {
        "body": "I have a component whose job it is to add certain properties to its child:\n\n``` javascript\nconst Parent = React.createClass({\n  doStuff() {\n    // ...\n  },\n\n  render() {\n    const child = React.cloneElement(this.props.children, {doStuff: this.doStuff});\n    return <div>{child}</div>;\n  }\n});\n```\n\nWith 0.13 I could test it like this:\n\n``` javascript\nconst {renderIntoDocument, findRenderedDOMComponentWithClass} = TestUtils;\nconst parent = renderIntoDocument(<Parent><span className=\"test\" /></Parent>);\nconst child = findRenderedDOMComponentWithClass(parent, \"test\");\nexpect(child.props.doStuff).to.equal(parent.doStuff);\n```\n\nWhat is the \"0.14 way\" of testing this?\n\nPS. I test the behavior of `Parent.doStuff` elsewhere, but I also need to ensure that the given child gets a reference to this method.\n",
        "title": "How to test child props without triggering \"Do not access .props of a DOM node\" (0.14)?",
        "labels": "Type: Question",
        "id": 46339
    },
    {
        "body": "When  React component  getInitialState method returns  an ES6 class instance , everything works fine ,  this.state in render mthod has the right type .\n\nBut when I call `setState` with ES6 class instance as its argument  , this.state becomes a plain object .\n\n``` javascript\nclass State{\n  constructor(text){\n    this.text = text\n  }\n  get value(){\n    return this.text\n  }\n}\n\nvar Main = React.createClass({\n  getInitialState(){\n    return  new State(\"es6\")\n  },\n\n  handleClick(){\n    var state = new State(\"react\")\n    this.setState(state)    // bad case emerged\n  },\n  render(){\n    console.log(`type ok : ${ this.state instanceof State}` )\n    return(\n      <div>\n      {this.state.value}\n      <br/>\n      <button onClick={this.handleClick}>click</button>\n      </div>\n    )\n  }\n\n})\n\nReactDOM.render(<Main />, document.getElementById(\"react-wrap\"))\n```\n\nreact  0.14.2\ngulp-babel 6.1.0\n",
        "title": "After calling `setState` with an ES6 class instance as its argument , this.state became a plain object.",
        "labels": "Type: Question",
        "id": 46340
    },
    {
        "body": "How to trigger the eventListener that is registered outside of the react component?\n",
        "title": "How to trigger the eventListener that is registered outside of the react component?",
        "labels": "Type: Question",
        "id": 46341
    },
    {
        "body": "I use React and Material-UI for my app.\nHere is the part of code:\n\n```\n  render(){\n    return <div>\n       <Table ref='fromform'>\n         <TableHeader>\n      <TableRow>\n        <TableHeaderColumn tooltip='The ID'>No.</TableHeaderColumn>\n        <TableHeaderColumn tooltip='The Name'>Name</TableHeaderColumn>\n        <TableHeaderColumn tooltip='The Status'>Notes</TableHeaderColumn>\n      </TableRow>\n    </TableHeader>\n    <TableBody ref='fromformb'>\n      {playerList.map(function(player, index){\n          return <TableRow onTouchTap={this._onShowInfo.bind(this, index)} key={'row' + index}>\n            <TableRowColumn>{index + 1}</TableRowColumn>\n            <TableRowColumn>{player.name}</TableRowColumn>\n            <TableRowColumn>{player.notes}</TableRowColumn>\n          </TableRow>;\n      }.bind(this))}\n    </TableBody>\n  </Table>\n  <Dialog\n    title='Player Info'\n    ref='playerInfoDialog'>\n    <form role='form' ref='fromfo'>\n      <div className='form-group' ref='frowwmformb'>\n        <TextField type='text' hintText='Player Name' ref='txtName' fullWidth={true} />\n        <TextField type='text' hintText='Notes' ref='txtNotes' fullWidth={true} />\n      </div>\n    </form>\n  </Dialog>\n  <MainButtonGroup page='players' />\n  <Spinner />\n</div>;\n  }\n\n  _onShowInfo(index){\n    var player = playerList[index];\n    console.log(this.refs);\n    this.refs.playerInfoDialog.show();\n    this.refs.txtName.setValue(player.name);\n    this.refs.txtNotes.setValue(player.notes);\n  }\n}\n```\n\nWhat I want to do with this code is to generate rows in a table of player list, and while a row is tapped, a dialog shows up with the data of the row.\n\nBut the two 'TextField's with refs of 'txtName' and 'txtNotes' can't be referred(as on the last 2 lines, produce errors)\n. The pic below is produced by 'console.log' in '_onShowInfo' method. I added some 'ref's with random names just to test.\n\n![ee77834e-7a46-4734-8480-2464e1d65382](https://cloud.githubusercontent.com/assets/1431032/10785424/1588a5b8-7d9f-11e5-8b47-4c8ad4c2828a.png)\n",
        "title": "Weird components that can not be referred",
        "labels": "Type: Question",
        "id": 46342
    },
    {
        "body": "I'm writing some karma tests:\n\n```\n    renderer = renderIntoDocument(\n      <MyComponent>\n        <Child id='foo' />\n      </MyComponent>\n    );\n    dom = ReactDOM.findDOMNode(renderer);\n```\n\nSince `renderIntoDocument` doesn't actually render into `document`, how may I find a component by id?\n",
        "title": "How to getElementById with TestUtils renderIntoDocument",
        "labels": "Type: Question",
        "id": 46343
    },
    {
        "body": "I'm not sure if this is the right repo to ask this question in, but I figured I'd start somewhere.\n\nI am working on an app that uses react-router and redux. Using a library called react-redux which exposes a decorator to wrap the component and pass in data from the store as props. So the component that gets passed to ReactTransitionGroup is actually a class called Connect, which has a property called WrappedComponent where the actual component lives. Since all the ReactTransitionGroup lifecycle methods are inplemented on the WrappedComponent, ReactTransitionGroup is not finding them.\n\nI tired extending ReactTransitionGroup and overriding the perform and _handle methods to also look for the lifecycle methods on WrappedComponent, but I get the following error:\n\n```\nUnhandled promise rejection ReferenceError: ReactTransitionChildMapping is not defined\n```\n\nHere is a gist of the extended class I created:\n\nhttps://gist.github.com/duro/c58d21cf3183ae01c786\n\nIf anyone could point me in the right direction, I would appreciate it.\n\nThanks!\n",
        "title": "Modding ReactTransitionGroup to work with a wrapped component",
        "labels": "Type: Question",
        "id": 46344
    },
    {
        "body": "Hi,\n\nI'm writing a library which uses JSX as an abstract DSL, a bit like `react-router` have `<Router/>` and `<Route />`, or a bit like `react-canvas` have `<Surface />` and others primitives.\n\n**To explain my question, I will take the example of `react-router`:**\n\nAn user could define a CustomRoute component that render() to a `<Route>`. \n\nand use it like this:\n\n```\n<Router>\n  <CustomRoute>\n</Router>\n```\n\nAFAIK This won't be detected by the `<Router/>` , because just traversing the props.children is not enough (router will see a `child.type==CustomRoute`, and won't understand it).\n\n**Do you know if this is possible to solve this?**\nBasically I want to descent the render() tree, and stop if it is not a user component (== it is a native component like `<div/>`), or if I reach the `<Route />` I'm looking for.\n",
        "title": "How to 'unfold' children ?",
        "labels": "Type: Question",
        "id": 46345
    },
    {
        "body": "For example, if I have two conditional children like\n\n``` javascript\n<div>\n  {showA && <A/>}\n  {showB && <B/>}\n</div>\n```\n\nthen should I set \"key\" for the children?\n\nWithout keys, when diff between `<A/><B/>` and `<B/>`, will the result be [remove A, remove B, insert B]?\n\nWhat if I have many conditional children like that?\n\nI had a look at https://facebook.github.io/react/docs/reconciliation.html but could not figure out the answer. Thanks for help.\n",
        "title": "Should I set \"key\" for conditional components?",
        "labels": "Type: Question",
        "id": 46346
    },
    {
        "body": "I want to use the material-ui for my react app.I do the same as material -ui says here is my code \n## index.js\n\n<pre>\n<code>\nvar React = require('react'),\n    mui = require('material-ui'),\n    ThemeManager = new mui.Styles.ThemeManager(),\n    RaisedButton = mui.RaisedButton;\nvar Index = React.createClass({\n    childContextTypes: {\n        muiTheme: React.PropTypes.object\n    },\n\n    getChildContext: function() {\n        return {\n            muiTheme: ThemeManager.getCurrentTheme()\n        };\n    },\n    render: function() {\n        return (\n            &lt;div&gt;\n                &lt;RaisedButton label=\"Default\" /&gt;\n            &lt;/div&gt;\n        );\n    }\n});\nmodule.exports = Index;\n</code>\n</pre>\n\n## reactapp.js\n\n<pre>\n<code>\n(function(){\n    var React = require('react/addons')\n    var Index = require('./component/index.js')\n    var injectTapEventPlugin = require('react-tap-event-plugin');\n\n    window.React = React;\n\n    injectTapEventPlugin();\n\n    React.render(&lt;Index /&gt; , document.body)\n})()\n</code>\n</pre>\n\n\nFirst I use the jsx tool to compile this two files and then I use browserify to browserify the reactapp.js to main.js and add it to my pages index.html but it reported this\n\n<pre>\n<code>\nWarning: owner-based and parent-based contexts differ (values: `undefined` vs `[object Object]`) for key (muiTheme) while mounting Paper (see: http://fb.me/react-context-by-parent)\n\nUncaught TypeError: Cannot read property 'component' of undefined\n\nbackgroundColor: this.context.muiTheme.component.paper.backgroundColor,\n</code>\n</pre>\n\n\nI did get to the http://fb.me/react-context-by-parent but did not make any sense so how do I solve this?\n",
        "title": "What is the differ between parent-based context and child-based context,why the child-based context will be lost",
        "labels": "Type: Question",
        "id": 46347
    },
    {
        "body": "Hi, I have a page completely written in React, so in html template is only a `<div id=\"app\"></div>`, and I have to use comments widget from Facebook. I came up with:\n\n``` js\nReact.render(\n  <App/>,// creates <div id=\"fb-root\"></div>\n  document.getElementById('app'),\n  function() {\n    (function(d, s, id) {\n    var js, fjs = d.getElementsByTagName(s)[0];\n    if (d.getElementById(id)) return;\n    js = d.createElement(s); js.id = id;\n    js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4\";\n    fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));\n  }\n);\n```\n\nBut, the code above mutates the DOM, which is against React's philosophy. And let's assume that Facebook rewrites this plugin to React, so there would be two React apps - React inside React. Is it OK to include Facebook's comments like this or am I completely on a wrong path? Is it OK to have one React app inside another one (e. g. a video player inside a page)?\n",
        "title": "React with Facebook's comments",
        "labels": "Type: Question",
        "id": 46348
    },
    {
        "body": "I am trying to have locality specified throughout my app. I thought that using context could be a good solution for this. To achieve this, I need to let the user dynamically change their locale.\n\nShould dynamically changing the context have any negative consequences? I have tested it, and it works, but want to make sure there will not be any negative consequences.\n",
        "title": "Question: Dynamic Context",
        "labels": "Type: Question",
        "id": 46349
    },
    {
        "body": "Hello, I am freshman of react\uff0cI use **gulp** to build web assets\uff0cI compile all jsx files with **gulp-react** to js like this:\n\n``` javascript\n gulp.src(paths.appJsx)\n        .pipe(concat('app.jsx'))\n        .pipe(react());\n```\n\nBut now, I want to use some react component registered in npm\uff0csuch as **react-iscroll**\uff0cI don't know how to introduce it in my jsx file\uff0cif I directly add bellow to jsx file't top\uff0cit won't work well:\n\n``` javascript\n// my component jsx file\nvar React = require('react'),\n    ReactIScroll = require('react-iscroll'),\n    iScroll = require('iscroll');\n```\n\nHow I import them rightly?\n\nThanks & Regards.\n",
        "title": "How to import react npm compoent in jsx file?",
        "labels": "Type: Question",
        "id": 46350
    },
    {
        "body": "``` jsx\n\nvar app = React.createClass({\n  getInitialState: function() {\n    return {data: 1};\n  },\n  updateData: function(){\n    this.setState(function(state){\n        this.getData1(state,function(state,data){\n          return data\n      })\n    })\n  },\n  getData1: function(state,cb){\n      $.get(\"http://api.openweathermap.org/data/2.5/weather?q=London,uk\",function(result){\n        data = { data : result};\n  // state.data = result\n        cb(state,data)\n   });\n },\n  render : function(){\n   return <a onClick={this.updateData} > {this.state.data}</a>\n  }\n})\n\n```\n\nI have tried this to update state but this is not working. \nonly way to update was manully (commented portion) even then it only render on second click  Can you tell me proper way to update state using REST api calls \n",
        "title": "update data from rest api ",
        "labels": "Type: Question",
        "id": 46351
    },
    {
        "body": "I'm having a hard time with `TestUtils.Simulate`, which are definitely not behaving as expected.\n\nBasically I have an input field of type text and I try to change it's content, click it and press some keys.\nNo rocket science, but all the \"editing\" stuff fails miserably.\n\nI wrote a small JSBin to showcase what the component I'm testing should do:\nhttps://jsbin.com/hutujemoku/13/edit?html,js,output\n\nAnd I've also wrote a small repo to showcase the failing tests:\nhttps://github.com/dmatteo/simulate-test\n\nWhat's going on?\n\np.s. the bin is running on 0.13.1 while the repo is running on 0.12.2, because that is what I'm using still. Nevertheless, I've also tried with 0.13.3 and it keeps failing\n",
        "title": "TestUtils.Simulate.[change/keyDown/keyPress] is not working on a normal input field",
        "labels": "Type: Question",
        "id": 46352
    },
    {
        "body": "I have a controller which consist of many views in it. Only my controller is having state and I pass data to my views through props. Now problem is suppose  my view depends on number of product.\nSay we have more than 100 products and each product consist of number of properties related to it. Now each property also have their own property on it. So if I change value of a sub-property then i have to re-render. No We dispatch the change event so it again start re-rendering from controller and it have to process through all the codes like all condition checks, loops etc which is time consuming. So how should we achieve it flux-react architecture? \n",
        "title": "How re-rendering should be done in efficient way while data change in flux architecture controller?",
        "labels": "Type: Question",
        "id": 46353
    },
    {
        "body": "I am having trouble with generating my views with `reactjs`. I have these two views which I would like to generate.\n\n```\nvar test1 = (\n    <div id=\"container\">\n      <p>{initials}</p>\n      <p>loggedin!</p>\n    </div>\n    );\n\nvar test2 = (\n    <div id=\"container\">\n      <p>notloggedin</p>\n    </div>\n    );\n\n\nvar initials = \"\";\nvar isLoggedIn = false;\n\nvar Layout = React.createClass({\n    componentWillMount: function() {\n        try {\n            if (window && window.User) {\n                initials = window.User.name.first[0].toUpperCase() + window.User.name.last[0].toUpperCase();\n                isLoggedIn = true;\n            }\n        } catch(e) {\n            // ignore\n        }\n    },\n    render: function () {\n        if (isLoggedIn) {\n            console.log(window.User);\n            console.log(initials);\n            return test1;\n        } else {\n            console.log(\"not logged in\");\n            return test2;\n        }\n    }\n});\n```\n\nWhen I run this code, I have 2 different outputs from my terminal and my web inspector.\n\nTerminal:\n\n```\n[1] rendering server side react /\n[1] not logged in\n```\n\nWeb inspector:\n\n```\nObject {username: \"bli1\", userId: \"1298085750\", address: \"127.0.0.1\", name: Object, email: \"Bradford_Li@gmail.com\"\u2026}\n\nBL\n```\n\nThe first and second output from `console.log(window.User)` and `console.log(initials)` are displayed above. I am not sure why this is occurring. I'm not sure how to handle this to achieve the desired logic. \n\nThe view displayed on my broswer is that of `test2`\n",
        "title": "Two different outputs from terminal and web inspector. Incorrect view rendered",
        "labels": "Type: Question",
        "id": 46354
    },
    {
        "body": "I want to write a layout component \n\n```\n  <layout jsxcols=\"300,200,*\">\n         <div>\n                 <layout jsxcols=\"100,200\">\n                          <div></div>\n                         <div></div>\n                </layout>\n         </div>\n         <div> width will take 200px </div>\n         <div> width will take the rest width of container </div>\n </layout>\n```\n\nhow to get the future container's width , height? \n",
        "title": "in component render method, how to get future container's width , height?",
        "labels": "Type: Question",
        "id": 46355
    },
    {
        "body": "Hi,\n\nI'm new in React development and i'm not english so i have some difficulty to understand all things which are possible in react.\nWell here, i would like to use some HTML tags in props for a component.\n\nFor example : if I have this component :\n\n```\nvar Card=React.createClass({\n    render:function(){\n        return(\n            <Container className=\"card\">\n                <Container className=\"card-content\">\n                    <span className=\"card-title grey-text\">{this.props.title}</span>\n                    {this.props.children}\n                </Container>\n            </Container>\n        );\n    }\n});\n```\n\nI would like to use it like that : \n\n```\n<Card title=\"<div>Mes informations d'identification</div>\">\n    Content\n</Card>\n```\n\nBut the title \"div Mes infor... div\" still be the same, whereas i would like to have a div with inside the real title.\n\nSo I don't know how to use the props of component to have my result...\n\n/Sorry for my poor English/\n",
        "title": "HTML Tag in component props",
        "labels": "Type: Question",
        "id": 46356
    },
    {
        "body": "Hey folks. We're implementing a set of React components and, because of what I explain in the `motivation` section, we created [Statefy](https://github.com/gearz-lab/statefy).\n\nThe problem is: I'm not sure if it's a good practice. I'm afraid of using it in a large number of components just to find out it would be way better to do it in another way.\n\nCould you please, give your feedback on this project? That would be much appreciated.\n\nThanks.\n",
        "title": "Should I use Statefy?",
        "labels": "Type: Question",
        "id": 46357
    },
    {
        "body": "Hi, \nwe are converting a big project written with Polymer to React.\nThe biggest problem we face is the lack of encapsulated styling.\nI would like to encapsulate my sass files with encapsulated styles among my components.\nIn the entire react web site and documentation there is almost no mentioning of styles.\nFurthermore in chrome devtools under React plugin you have all the component properties except style. (not like devtools of the regular DOM).\nI really like React and what your doing so how are you going to approach this problem?\n",
        "title": "How do I encapsulate styles?",
        "labels": "Type: Question",
        "id": 46358
    },
    {
        "body": "It may sound like a noob question or just crazy, but I ask anyway :)\nSo DOM diffs may be replaced with immutable data diffs.\nIt's much faster and sane.\n\nIf we **require** of state to be immutable cannot we drop DOM diff entirely?\nAnd all this virtual DOM altogether. Most of React code actually :)\n\nIt will require from us to explicitly declare every form field state. Not a big deal.\nEvents are just derivatives of architecture (not vice versa as in jQuery) I believe. \nWhat I'm missing?\n",
        "title": "Question about immutable data and React ",
        "labels": "Type: Question",
        "id": 46359
    },
    {
        "body": "I wonder if it's possible to transfer state and\\or props from server to client. I imagine ways like stringify\\parse JSON to achieve it, how to do that properly? Or I should use AJAX for initial state even in isomorphic webapp?\n",
        "title": "[Q] Transfer state from server",
        "labels": "Type: Question",
        "id": 46360
    },
    {
        "body": "Title is self explanatory. I'm asking this due to `@_owner` removal. Thank you.\n",
        "title": "How to distinguish if a component is the owner or the ownee?",
        "labels": "Type: Question",
        "id": 46361
    },
    {
        "body": "Hi,\n\nI would like to know if the _owner property is being \"deprecated\" (I mean, moved into a private scope) in the future or if it'll still be accessible as it's right now.\n\nThank you\n",
        "title": "usage of _owner",
        "labels": "Type: Question",
        "id": 46362
    },
    {
        "body": "Sometimes I switch tabs within my application or whatnot (I'm using react-bootstrap) and components will mount and unmount as they wish. But they might have updated `state` that I don't want to lose. Am I overlooking a feature that lets me do this?\n",
        "title": "does \"unmount\" mean \"garbage collect\"? I'd like to persist state between renderings, but seems not possible",
        "labels": "Type: Question",
        "id": 46363
    },
    {
        "body": "Hi guys,\nI'm evaluating react.js (considering using it in some projects) but I'm having trouble rendering a simple list with 910 elements, since it takes almost 4 seconds.\nThis is not a complex markup (just a couple of div tags), actually it's an existing app simplification.\nI tried this using just underscore.js and it took 500ms!!\n\nJsfiddle:\n- using JSX: http://jsfiddle.net/4TpnG/459/\n- without JSX: http://jsfiddle.net/VkebS/925/\n\nWhat am I doing wrong?\n\nCheers,\nVasco Pessanha\n",
        "title": "Why is react so slow rendering 900 items? (with jsfiddle)",
        "labels": "Type: Question",
        "id": 46364
    },
    {
        "body": "We want to extend the life-cycle of react components by giving children (those that have been declared in this.props.children) the opportunity to vote on whether they are ready to be rendered or not, in an asynchronous fashion. We want to postpone the actual rendering until all of them are ready. One of the usages would be showing the loading animations in the root component rather than the children.\nWe want to do something like this:\n\n```\nacceptsMount: function ()\n{\n    var accepts = this.props.children.map(function (child) {\n        return child.acceptsMount();\n    });\n    return Q.all(accepts).thenResolve();\n}\n```\n\nAnd then:\n\n```\nvar root = (<Parent><Child1 /><Child2 /></Parent>);\nroot.acceptsMount().then(function () {\n    React.renderComponent(root, document.body);\n});\n```\n\nThe problem is that we have no direct access to actual component and all we have are descriptors. So we cannot call our custom-defined methods of the component.\n\nUsing static methods also does not resolve our problem, as we may rely on component's current state in acceptsMount implementation.\n\nAny ideas how we can achieve this?\n",
        "title": "Extending lifecycle and direct communication in component tree",
        "labels": "Type: Question",
        "id": 46365
    },
    {
        "body": "I'm wondering about the best way to minify React for production builds. \n\nThe guide @christianalfoni wrote for #2046 is very comprehensive so I used it as a boilerplate. However, after adding envify, uglify, and uglifyify, my build is 131KB, 5KB bigger then the standard react.min.js.\n\nUglifyify doesn't seem to be doing anything so I'm guessing that's the problem. But since there are so many moving parts it's hard to pin down exactly what's going wrong, so some kind of boilerplate would be great.\n\nMy gulp task looks like this:\n\n```\ngulp.task('build', function() {\n    return browserify({\n            entries: ['./src/main.js'],\n            transform: [\n                uglifyify, envify\n            ],\n            debug: false,\n        })\n        .bundle()\n        .pipe(source('main.js'))\n        .pipe(buffer())// Convert from streaming to buffered vinyl file object\n        .pipe(uglify())\n        .pipe(gulp.dest('build'));\n});\n```\n\nmain.js looks like this:\n\n```\nvar React = require('react');\n```\n",
        "title": "Proper React minification",
        "labels": "Type: Question",
        "id": 46366
    },
    {
        "body": "``` javascript\nvar Foo = createClass({\n    componentWillMount: function() {\n        alert('Mounted Foo');\n    },\n    componentWillUnmount: function() {\n        alert('Unmounted Foo');\n    },\n    render: function() {\n        return React.DOM.div({}, 'Hello ' + this.props.name);\n    }\n});\n\nvar Bar = React.createClass({\n    componentWillMount: function() {\n        alert('Mounted Bar');\n    },\n    componentWillUnmount: function() {\n        alert('Unmounted Bar');\n    },\n    render: function() {\n        return React.DOM.div({}, 'Hello ' + this.props.name);\n    }\n});\n\n// This unmounts a component\nReact.renderComponent(Foo({name: 'World'}), document.body);\nReact.renderComponent(Foo({name: 'There'}), document.body);\n\n// This does not\nReact.renderComponent(Bar({name: 'World'}), document.body);\nReact.renderComponent(Bar({name: 'There'}), document.body);\n\nfunction createClass(spec) {\n    return function(props) {\n        return React.createClass(spec)(props);\n    }\n}\n```\n\nhttp://jsfiddle.net/dvtcz52k/\n\nI'm not sure what's going on here. Why does the `Foo` component get unmounted while the `Bar` component does not? It seems like there should be no difference between these two ways of calling `React.createClass`\n",
        "title": "`createClass` behavior",
        "labels": "Type: Question",
        "id": 46367
    },
    {
        "body": "I make a tiny app for Tower of Hanoi and run into this problem,\nrepo.tiye.me/react-hanoi\n![](http://ww1.sinaimg.cn/mw1024/62752320tw1eibojpy4pzj20za0i774z.jpg)\n\nAs I drag disks to different stacks, the hovering stack should give some feedbacks, like dimming its background color. And I have to add a class to that stack and remove tha class when disks leave.\n\nStacks need to know that state, disks need a reference to that state so they can change it when dragging is finished(onDragEnd). Which means I have to put it where both components can find it.\nAt last I put the state in my model, which holds my three stacks. `from` refers to the stack that dragging event started, and `dropping` refers to the stack the dragging disk is hovering.\n\n``` coffee\nstore =\n  a: [1..12]\n  b: []\n  c: []\n  from: null\n  dropping: null\n```\n\nhttps://github.com/jiyinyiyong/react-hanoi/blob/master/coffee/model.coffee#L5\n\nBut it's still bad idea to put state in my model. Is there a better solution for such case?\n",
        "title": "Where to put my states that are using in several components?",
        "labels": "Type: Question",
        "id": 46368
    },
    {
        "body": "I'd like to convert JSX files to JS files on a Linux machine which has no (direct) internet access. All of the examples talk about running npm, which obviously won't work in this case. Are there any  alternatives for me?\n\nIdeally I would like to use the watch method of the jsx  executable to do all of the heacy lifting behind the scenes and before a Maven task builds my web app.\n",
        "title": "Help with JSX -> JS transform without nodejs",
        "labels": "Type: Question",
        "id": 46369
    },
    {
        "body": "I was unsure where to ask this. Let me know if I should post it somewhere else.\n\nI have a question regarding todomvc-flux example and the dispatching of actions in Flux. \nI was watching a video describing the Flux architecture, and the presenter mentioned ([at 12:20](https://www.youtube.com/watch?v=nYkdrAPrdcw#t=740)) that \"once an action goes to the store you can't put another one in until the stores are completely finished processing it\". She [the presenter] mentions this several times later in the video.\n\nIs this supposed to be a principle property in the Flux architecture?\n\nI was looking at the [todomvc-flux](https://github.com/facebook/react/tree/master/examples/todomvc-flux) example, and it doesn't seem to obey this property.\n",
        "title": "Question regarding todomvc-flux example and dispatching of actions",
        "labels": "Type: Question",
        "id": 46370
    },
    {
        "body": "I've read http://facebook.github.io/react/docs/flux-todo-list.html \u2026 but how do you test it or use multiple instances when you have a singleton like in the TodoStore.js?\n\nIs a better choice to instance the store and pass to sub views?\n",
        "title": "Flux: How do you test it or use multiple instances when you have a singleton like in the TodoStore.js?",
        "labels": "Type: Question",
        "id": 46371
    },
    {
        "body": "hi\n\nim trying to do something always after render()\n\nbut the componentDidMount only called once after the state change and after render()\n\nis there any way to run a method always after render()? even the state or prop change?\n",
        "title": "componentDidMount runs once !",
        "labels": "Type: Question",
        "id": 46372
    },
    {
        "body": "Please give an example which shows the difference of:\n`renderComponentToStaticMarkup` vs `renderComponentToString`\n",
        "title": "renderComponentToStaticMarkup vs renderComponentToString",
        "labels": "Type: Question",
        "id": 46373
    },
    {
        "body": "I'm trying to unmount a React.js node with `this._rootNodeID`\n\n```\n handleClick: function() {\n\n    React.unmountComponentAtNode(this._rootNodeID)\n\n }\n```\n\nBut it returns `false`.\n\nThe `handleClick` is fired when I click on an element, and should unmount the root-node.\n\nI've tried this as well:\n\n```\n  React.unmountComponentAtNode($('*[data-reactid=\"'+this._rootNodeID+'\"]')[0])\n```\n\nThat selector works with `jQuery.hide()`, but not with unmounting it, while the documentation states it should be a `DOMElement`, like you would use for `React.renderComponent`\n\nAfter a few more tests it turns out it works on some elements/selectors.\n\nIt somehow works with the selector: `document.getElementById('maindiv')`, where `maindiv` is an element not generated with React.js, and just plain html. Then it returns `true`.\n\nBut as soon as I try and select a different `ElementById` that is generated with React.js it returns `false`. And it won't work with `document.body` either, though they all essentially return the same thing if I `console.log` them (`getElementsByClassName('bla')[0]` also doesn't work)\n\nThere should be a simple way to select the node via this, without having to resort to jQuery or other selectors, I know it's in there somewhere..\n",
        "title": "Unmounting React node",
        "labels": "Type: Question",
        "id": 46374
    },
    {
        "body": "<Button onClick={this.props.handleSubmit(this.state)}> SUBMIT </button>\n",
        "title": "is sending state of current component as a parameter to another external method possible ??",
        "labels": "Type: Question",
        "id": 46375
    },
    {
        "body": "This is closely related to #455, but not entirely the same.\n\nI'm curious how one'd go around to testing browserified backbone + react apps. It appears that [react doesn't play well with phantomjs](https://github.com/facebook/react/pull/347), so I'm looking for alternatives. [Jsdom](https://github.com/tmpvar/jsdom) is next on the list, and I'm looking for suggestions how to properly handle this.\n\nAn issue that arises when using `browserify` and not loading the app through an html template is that you're not actually testing against the DOM and can't do things such as `<script src='vendor/react.js'></script>` to load packages into the global scope.\n\nDo you have any ideas, theorems or suggestions on how to approach unit testing without phantomjs?\n",
        "title": "Unit testing react + backbone without phantom.js",
        "labels": "Type: Question",
        "id": 46376
    },
    {
        "body": "Not sure if this is the right place to ask, but are there any examples of using React to render a visualization created in D3.js?\n\nIt seems like React's Virtual DOM could really speed up animations and transitions used in visualizations like the [Force Directed Graph](http://bl.ocks.org/mbostock/4062045). D3.js just draws SVG, so as long as React can manipulate SVG like DOM it should work, right? I'm still a React newb, so just looking for any suggestions to get me started.\n",
        "title": "D3.js Example Using React",
        "labels": "Type: Question",
        "id": 46377
    },
    {
        "body": "Is there a reason why these two coexist (beside the fact that the latter seems to be introduced recently)?\n",
        "title": "__DEV__ vs env === 'production'",
        "labels": "Type: Question",
        "id": 46378
    },
    {
        "body": "All my DOM code is written in jade. Any easy way to use jade in react?\n",
        "title": "Jade?",
        "labels": "Type: Question",
        "id": 46379
    },
    {
        "body": "See here: http://jsfiddle.net/XdNHU/1/\n\nIf an `<input>` element is rendered with its value attribute already present/set, the input seems to be uneditable. I thought it might have been something in handleChange, but I'm not sure.\n\nHopefully I'm not just misusing JSX...\n\nThanks!\n",
        "title": "Inputs are uneditable if the \"value\" attribute is present",
        "labels": "Type: Question",
        "id": 46380
    },
    {
        "body": "##### Scenario\n\nI am trying to use React to dynamically replace a `tbody` tag with my app's content. In addition, I need to use a `componentDidMount` callback to handle some custom event binding.\n##### Problem\n\nAs soon as the `componentDidMount` callback is added to `React.createClass`, React throws the following errors:\n\n``` html\nError while invoking `findComponentRoot` with the following ancestor node: <tbody id=\u200b\"content\">\u200b\u2026\u200b</tbody>\n\u200b    \nUncaught Error: Invariant Violation: findComponentRoot(..., .r[3skhu]): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g. by the browser).\n```\n\n[JSFiddle here](http://jsfiddle.net/B4u3j/)\n##### Conclusion\n\nThe content still renders, but the error is a bit unnerving. Simply removing the callback prevents the errors from being thrown.\n\nI'm brand new to this, so its possible that I'm trying to make React do something that it is not meant to handle. But either way, I think the mere existence of an empty callback should not be throwing any errors.\n\nFWIW, other scenarios that involve injecting content rather than replacing an existing DOMNode seem to work fine with or without the `componentDidMount` callback.\n",
        "title": "Existence of `componentDidMount` throws \"Error while invoking `findComponentRoot`\"",
        "labels": "Type: Question",
        "id": 46381
    },
    {
        "body": "How to set state for siblings?\nSuppose if I have list item, {a, b, c, d}. When I clicked a, setState({selected: true}). then, I wanna make other siblings (b, c, d) setState({selected: false})\n\nIs it possible?\n",
        "title": "Set siblings state",
        "labels": "Type: Question",
        "id": 46382
    }
]